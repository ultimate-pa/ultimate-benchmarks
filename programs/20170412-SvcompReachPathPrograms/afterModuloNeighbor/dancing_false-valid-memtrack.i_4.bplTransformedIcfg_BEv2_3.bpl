var #memory_$Pointer$.base : [int][int]int;

var #valid : [int]int;

var #NULL.offset : int;

var #length : [int]int;

var #NULL.base : int;

var #memory_$Pointer$.offset : [int][int]int;

procedure ULTIMATE.start() returns ()
modifies #memory_$Pointer$.base, #valid, #NULL.offset, #length, #NULL.base, #memory_$Pointer$.offset;
{
    var write~$Pointer$_#sizeOfWrittenType : int;
    var is_list_containing_x_#res : int;
    var read~$Pointer$_#value.offset : int;
    var main_~#list~10.base : int;
    var main_#t~ret29 : int;
    var remove_#in~x.base : int;
    var main_#t~ret27 : int;
    var remove_#t~mem6.base : int;
    var main_~tail~10.offset : int;
    var remove_#t~mem5.base : int;
    var remove_#t~mem8.base : int;
    var remove_#t~mem1.offset : int;
    var remove_#t~mem6.offset : int;
    var remove_#t~mem2.base : int;
    var remove_#t~mem4.base : int;
    var #Ultimate.alloc_#res.base : int;
    var #Ultimate.alloc_#res.offset : int;
    var main_#t~nondet20 : int;
    var remove_#t~mem4.offset : int;
    var #Ultimate.alloc_old_#length : [int]int;
    var read~$Pointer$_#ptr.offset : int;
    var write~$Pointer$_#ptr.base : int;
    var write~$Pointer$_#ptr.offset : int;
    var is_list_containing_x_#in~x.base : int;
    var remove_~x.offset : int;
    var is_list_containing_x_#in~x.offset : int;
    var main_~n~11.base : int;
    var is_list_containing_x_~l.offset : int;
    var is_list_containing_x_#in~l.base : int;
    var read~$Pointer$_#value.base : int;
    var main_~n~11.offset : int;
    var is_list_containing_x_#t~mem15.base : int;
    var remove_#t~mem5.offset : int;
    var __VERIFIER_assert_~cond : int;
    var is_list_containing_x_#t~mem16.base : int;
    var #Ultimate.alloc_old_#valid : [int]int;
    var read~$Pointer$_#sizeOfReadType : int;
    var remove_#t~mem8.offset : int;
    var is_list_containing_x_#t~ret17 : int;
    var main_#t~ret26 : int;
    var main_~x~10.offset : int;
    var write~$Pointer$_#value.offset : int;
    var is_list_containing_x_~x.offset : int;
    var is_list_containing_x_#in~l.offset : int;
    var is_list_containing_x_#t~mem15.offset : int;
    var write~$Pointer$_old_#memory_$Pointer$.base : [int][int]int;
    var #Ultimate.alloc_~size : int;
    var remove_#t~mem1.base : int;
    var main_#t~nondet25 : int;
    var remove_#in~x.offset : int;
    var main_#t~malloc21.offset : int;
    var main_~x~10.base : int;
    var is_list_containing_x_~x.base : int;
    var write~$Pointer$_#value.base : int;
    var main_~#list~10.offset : int;
    var main_#t~short28 : bool;
    var is_list_containing_x_#t~mem16.offset : int;
    var main_#res : int;
    var write~$Pointer$_old_#memory_$Pointer$.offset : [int][int]int;
    var remove_~x.base : int;
    var read~$Pointer$_#ptr.base : int;
    var main_#t~malloc21.base : int;
    var main_~tail~10.base : int;
    var __VERIFIER_assert_#in~cond : int;
    var is_list_containing_x_~l.base : int;
    var remove_#t~mem2.offset : int;

  loc0:
    #NULL.offset, #NULL.base := 0, 0;
    #valid := #valid[0 := 0];
    havoc main_#res;
    havoc main_#t~nondet20, main_~n~11.offset, main_#t~nondet25, main_~#list~10.base, main_#t~malloc21.offset, main_#t~ret29, main_~x~10.base, main_#t~ret27, main_#t~ret26, main_~x~10.offset, main_~tail~10.offset, main_~#list~10.offset, main_~n~11.base, main_#t~short28, main_#t~malloc21.base, main_~tail~10.base;
    #Ultimate.alloc_old_#valid, #Ultimate.alloc_old_#length := #valid, #length;
    #Ultimate.alloc_~size := 16;
    havoc #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    havoc #valid, #length;
    assume #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base] == 0;
    assume #valid == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base := 1];
    assume #Ultimate.alloc_#res.offset == 0;
    assume !(#Ultimate.alloc_#res.base == 0);
    assume #length == #Ultimate.alloc_old_#length[#Ultimate.alloc_#res.base := #Ultimate.alloc_~size];
    main_~#list~10.offset, main_~#list~10.base := #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset := #memory_$Pointer$.base, #memory_$Pointer$.offset;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := 0, main_~#list~10.offset, 8, 0, main_~#list~10.base;
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume #memory_$Pointer$.base == write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]] && #memory_$Pointer$.offset == write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]];
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset := #memory_$Pointer$.base, #memory_$Pointer$.offset;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := 0, main_~#list~10.offset + 8, 8, 0, main_~#list~10.base;
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume #memory_$Pointer$.offset == write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]] && #memory_$Pointer$.base == write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]];
    main_~x~10.base, main_~x~10.offset := main_~#list~10.base, main_~#list~10.offset;
    main_~tail~10.offset, main_~tail~10.base := main_~#list~10.offset, main_~#list~10.base;
    goto loc1;
  loc1:
    goto loc2;
  loc2:
    goto loc2_0, loc2_1;
  loc2_0:
    assume main_#t~nondet20 + 256 == 0;
    havoc main_#t~nondet20;
    is_list_containing_x_#in~x.base, is_list_containing_x_#in~x.offset, is_list_containing_x_#in~l.offset, is_list_containing_x_#in~l.base := main_~x~10.base, main_~x~10.offset, main_~#list~10.offset, main_~#list~10.base;
    havoc is_list_containing_x_#res;
    havoc is_list_containing_x_#t~mem15.offset, is_list_containing_x_#t~ret17, is_list_containing_x_~x.base, is_list_containing_x_#t~mem15.base, is_list_containing_x_#t~mem16.offset, is_list_containing_x_#t~mem16.base, is_list_containing_x_~l.offset, is_list_containing_x_~x.offset, is_list_containing_x_~l.base;
    is_list_containing_x_~l.offset, is_list_containing_x_~l.base := is_list_containing_x_#in~l.offset, is_list_containing_x_#in~l.base;
    is_list_containing_x_~x.base, is_list_containing_x_~x.offset := is_list_containing_x_#in~x.base, is_list_containing_x_#in~x.offset;
    assume is_list_containing_x_~l.offset == is_list_containing_x_~x.offset && is_list_containing_x_~l.base == is_list_containing_x_~x.base;
    is_list_containing_x_#res := 1;
    main_#t~ret26 := is_list_containing_x_#res;
    assume main_#t~ret26 < -256 && !(main_#t~ret26 % 256 == 0);
    havoc main_#t~ret26;
    remove_#in~x.offset, remove_#in~x.base := main_~x~10.offset, main_~x~10.base;
    havoc remove_#t~mem1.base, remove_#t~mem5.offset, remove_#t~mem8.offset, remove_#t~mem4.offset, remove_#t~mem6.base, remove_~x.offset, remove_#t~mem5.base, remove_#t~mem8.base, remove_#t~mem1.offset, remove_~x.base, remove_#t~mem6.offset, remove_#t~mem2.base, remove_#t~mem4.base, remove_#t~mem2.offset;
    remove_~x.offset, remove_~x.base := remove_#in~x.offset, remove_#in~x.base;
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := remove_~x.base, 8, remove_~x.offset + 8;
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume read~$Pointer$_#value.offset == #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] && read~$Pointer$_#value.base == #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset];
    remove_#t~mem1.base, remove_#t~mem1.offset := read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume remove_#t~mem1.offset == 0 && remove_#t~mem1.base == 0;
    havoc remove_#t~mem1.base, remove_#t~mem1.offset;
    read~$Pointer$_#ptr.base, read~$Pointer$_#sizeOfReadType, read~$Pointer$_#ptr.offset := remove_~x.base, 8, remove_~x.offset;
    havoc read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume read~$Pointer$_#value.base == #memory_$Pointer$.base[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset] && read~$Pointer$_#value.offset == #memory_$Pointer$.offset[read~$Pointer$_#ptr.base][read~$Pointer$_#ptr.offset];
    remove_#t~mem5.base, remove_#t~mem5.offset := read~$Pointer$_#value.base, read~$Pointer$_#value.offset;
    assume remove_#t~mem5.base == 0 && remove_#t~mem5.offset == 0;
    havoc remove_#t~mem5.base, remove_#t~mem5.offset;
    assume !(main_~#list~10.offset == main_~x~10.offset);
    main_#t~short28 := false;
    assume !main_#t~short28;
    is_list_containing_x_#in~x.base, is_list_containing_x_#in~x.offset, is_list_containing_x_#in~l.offset, is_list_containing_x_#in~l.base := main_~x~10.base, main_~x~10.offset, main_~#list~10.offset, main_~#list~10.base;
    havoc is_list_containing_x_#res;
    havoc is_list_containing_x_#t~mem15.offset, is_list_containing_x_#t~ret17, is_list_containing_x_~x.base, is_list_containing_x_#t~mem15.base, is_list_containing_x_#t~mem16.offset, is_list_containing_x_#t~mem16.base, is_list_containing_x_~l.offset, is_list_containing_x_~x.offset, is_list_containing_x_~l.base;
    is_list_containing_x_~l.offset, is_list_containing_x_~l.base := is_list_containing_x_#in~l.offset, is_list_containing_x_#in~l.base;
    is_list_containing_x_~x.base, is_list_containing_x_~x.offset := is_list_containing_x_#in~x.base, is_list_containing_x_#in~x.offset;
    assume is_list_containing_x_~l.base == is_list_containing_x_~x.base && is_list_containing_x_~l.offset == is_list_containing_x_~x.offset;
    is_list_containing_x_#res := 1;
    main_#t~ret27 := is_list_containing_x_#res;
    assume main_#t~ret27 % 256 == 0 && main_#t~ret27 < -256;
    main_#t~short28 := true;
    assume main_#t~short28;
    __VERIFIER_assert_#in~cond := 1;
    havoc __VERIFIER_assert_~cond;
    __VERIFIER_assert_~cond := __VERIFIER_assert_#in~cond;
    assume __VERIFIER_assert_~cond == 0;
    goto loc3;
  loc2_1:
    assume (0 <= main_#t~nondet20 && !(main_#t~nondet20 == 0)) && main_#t~nondet20 < 256;
    havoc main_#t~nondet20;
    #Ultimate.alloc_old_#valid, #Ultimate.alloc_old_#length := #valid, #length;
    #Ultimate.alloc_~size := 16;
    havoc #Ultimate.alloc_#res.offset, #Ultimate.alloc_#res.base;
    havoc #valid, #length;
    assume #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base] == 0;
    assume #valid == #Ultimate.alloc_old_#valid[#Ultimate.alloc_#res.base := 1];
    assume #Ultimate.alloc_#res.offset == 0;
    assume !(#Ultimate.alloc_#res.base == 0);
    assume #length == #Ultimate.alloc_old_#length[#Ultimate.alloc_#res.base := #Ultimate.alloc_~size];
    main_#t~malloc21.base, main_#t~malloc21.offset := #Ultimate.alloc_#res.base, #Ultimate.alloc_#res.offset;
    main_~n~11.offset, main_~n~11.base := main_#t~malloc21.offset, main_#t~malloc21.base;
    assume !(main_~n~11.offset == 0);
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset := #memory_$Pointer$.base, #memory_$Pointer$.offset;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := main_~tail~10.base, main_~n~11.offset, 8, main_~tail~10.offset, main_~n~11.base;
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume #memory_$Pointer$.base == write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]] && #memory_$Pointer$.offset == write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]];
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset := #memory_$Pointer$.base, #memory_$Pointer$.offset;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := 0, main_~n~11.offset + 8, 8, 0, main_~n~11.base;
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume #memory_$Pointer$.offset == write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]] && #memory_$Pointer$.base == write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]];
    write~$Pointer$_old_#memory_$Pointer$.base, write~$Pointer$_old_#memory_$Pointer$.offset := #memory_$Pointer$.base, #memory_$Pointer$.offset;
    write~$Pointer$_#value.base, write~$Pointer$_#ptr.offset, write~$Pointer$_#sizeOfWrittenType, write~$Pointer$_#value.offset, write~$Pointer$_#ptr.base := main_~n~11.base, main_~tail~10.offset + 8, 8, main_~n~11.offset, main_~tail~10.base;
    havoc #memory_$Pointer$.base, #memory_$Pointer$.offset;
    assume #memory_$Pointer$.base == write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.base[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.base]] && #memory_$Pointer$.offset == write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base := write~$Pointer$_old_#memory_$Pointer$.offset[write~$Pointer$_#ptr.base][write~$Pointer$_#ptr.offset := write~$Pointer$_#value.offset]];
    assume (!(main_#t~nondet25 == 0) && main_#t~nondet25 < 256) && 0 <= main_#t~nondet25;
    havoc main_#t~nondet25;
    main_~x~10.base, main_~x~10.offset := main_~n~11.base, main_~n~11.offset;
    goto loc1;
  loc3:
    assert false;
}

