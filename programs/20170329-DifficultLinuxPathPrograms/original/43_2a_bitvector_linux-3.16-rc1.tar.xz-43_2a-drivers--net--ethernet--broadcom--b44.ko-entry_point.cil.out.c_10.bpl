type STRUCT~perf_event;
type STRUCT~optimistic_spin_queue;
type STRUCT~tvec_base;
type STRUCT~workqueue_struct;
type STRUCT~uprobe;
type STRUCT~return_instance;
type STRUCT~xol_area;
type STRUCT~slab;
type STRUCT~anon_vma;
type STRUCT~file;
type STRUCT~mempolicy;
type STRUCT~linux_binfmt;
type STRUCT~kioctx_table;
type STRUCT~mmu_notifier_mm;
type STRUCT~kernfs_open_node;
type STRUCT~kernfs_iattrs;
type STRUCT~sock;
type STRUCT~module_param_attrs;
type STRUCT~module_sect_attrs;
type STRUCT~module_notes_attrs;
type STRUCT~tracepoint;
type STRUCT~ftrace_event_call;
type STRUCT~kmem_cache_node;
type STRUCT~mem_cgroup;
type STRUCT~user_namespace;
type STRUCT~pinctrl;
type STRUCT~pinctrl_state;
type STRUCT~iommu_ops;
type STRUCT~subsys_private;
type STRUCT~driver_private;
type STRUCT~acpi_device;
type STRUCT~device_private;
type STRUCT~dma_coherent_mem;
type STRUCT~cma;
type STRUCT~iommu_group;
type STRUCT~sem_undo_list;
type STRUCT~pid_namespace;
type STRUCT~writeback_control;
type STRUCT~kiocb;
type STRUCT~swap_info_struct;
type STRUCT~inode;
type STRUCT~backing_dev_info;
type STRUCT~seccomp_filter;
type STRUCT~assoc_array_ptr;
type STRUCT~key_type;
type STRUCT~key_user;
type STRUCT~tty_struct;
type STRUCT~autogroup;
type STRUCT~tty_audit_buf;
type STRUCT~cfs_rq;
type STRUCT~rt_rq;
type STRUCT~sched_class;
type STRUCT~task_group;
type STRUCT~fs_struct;
type STRUCT~files_struct;
type STRUCT~audit_context;
type STRUCT~rt_mutex_waiter;
type STRUCT~bio_list;
type STRUCT~blk_plug;
type STRUCT~reclaim_state;
type STRUCT~io_context;
type STRUCT~robust_list_head;
type STRUCT~futex_pi_state;
type STRUCT~perf_event_context;
type STRUCT~numa_group;
type STRUCT~pipe_inode_info;
type STRUCT~ftrace_ret_stack;
type STRUCT~sec_path;
type STRUCT~prot_inuse;
type STRUCT~proc_dir_entry;
type STRUCT~ipv4_devconf;
type STRUCT~fib_rules_ops;
type STRUCT~fib_table;
type STRUCT~inet_peer_base;
type STRUCT~tcpm_hash_bucket;
type STRUCT~xt_table;
type STRUCT~dst_entry;
type STRUCT~neighbour;
type STRUCT~ipv6_devconf;
type STRUCT~rt6_info;
type STRUCT~rt6_statistics;
type STRUCT~fib6_table;
type STRUCT~sctp_mib;
type STRUCT~nf_logger;
type STRUCT~ebt_table;
type STRUCT~ip_conntrack_stat;
type STRUCT~nf_ct_event_notifier;
type STRUCT~nf_exp_event_notifier;
type STRUCT~nft_af_info;
type STRUCT~msi_desc;
type STRUCT~net_generic;
type STRUCT~netns_ipvs;
type STRUCT~cgroup_subsys;
type STRUCT~uts_namespace;
type STRUCT~ipc_namespace;
type STRUCT~mnt_namespace;
type STRUCT~Qdisc;
type STRUCT~neigh_parms;
type STRUCT~netpoll_info;
type STRUCT~pcpu_lstats;
type STRUCT~pcpu_dstats;
type STRUCT~pcpu_vstats;
type STRUCT~iw_handler_def;
type STRUCT~iw_public_data;
type STRUCT~forwarding_accel_ops;
type STRUCT~vlan_info;
type STRUCT~tipc_bearer;
type STRUCT~in_device;
type STRUCT~dn_dev;
type STRUCT~inet6_dev;
type STRUCT~wireless_dev;
type STRUCT~cpu_rmap;
type STRUCT~garp_port;
type STRUCT~mrp_port;
type STRUCT~rtnl_link_ops;
type STRUCT~hotplug_slot;
type STRUCT~pci_sriov;
type STRUCT~pcie_link_state;
type STRUCT~pci_vpd;
type STRUCT~pci_ats;
type STRUCT~msi_chip;
type STRUCT~gpio_desc;
type STRUCT~pcmcia_device;
type STRUCT~sdio_func;
type ~__u8 = int;
type ~__u16 = int;
type ~__s32 = int;
type ~__u32 = int;
type ~__u64 = int;
type ~s8 = int;
type ~u8 = int;
type ~s16 = int;
type ~u16 = int;
type ~s32 = int;
type ~u32 = int;
type ~s64 = int;
type ~u64 = int;
type ~__kernel_long_t = int;
type ~__kernel_ulong_t = int;
type ~__kernel_pid_t = int;
type ~__kernel_uid32_t = int;
type ~__kernel_gid32_t = int;
type ~__kernel_loff_t = int;
type ~__kernel_timer_t = int;
type ~__kernel_clockid_t = int;
type ~umode_t = int;
type ~bool = int;
type ~sector_t = int;
type ~gfp_t = int;
type ~oom_flags_t = int;
type ~irq_hw_number_t = int;
type ~pteval_t = int;
type ~pgdval_t = int;
type ~pgprotval_t = int;
type ~__kernel_sa_family_t = int;
type ~cputime_t = int;
type ~sk_buff_data_t = int;
type ~kernel_ulong_t = int;
type ~pci_power_t = int;
type ~pci_channel_state_t = int;
type ~pci_dev_flags_t = int;
type ~pci_bus_flags_t = int;
type ~pci_ers_result_t = int;
type ~ldv_func_ret_type___2 = int;
type ~ldv_func_ret_type___3 = int;
type ~ldv_func_ret_type___4 = int;
type ~ldv_func_ret_type___5 = int;
type ~ldv_func_ret_type___6 = int;
type ~ldv_func_ret_type___7 = int;
type ~ldv_func_ret_type___8 = int;
type ~__kernel_size_t = ~__kernel_ulong_t;
type ~__kernel_ssize_t = ~__kernel_long_t;
type ~__kernel_time_t = ~__kernel_long_t;
type ~__kernel_clock_t = ~__kernel_long_t;
type ~__le16 = ~__u16;
type ~__be16 = ~__u16;
type ~__le32 = ~__u32;
type ~__be32 = ~__u32;
type ~__wsum = ~__u32;
type ~__kernel_dev_t = ~__u32;
type ~dev_t = ~__kernel_dev_t;
type ~pid_t = ~__kernel_pid_t;
type ~clockid_t = ~__kernel_clockid_t;
type ~uid_t = ~__kernel_uid32_t;
type ~gid_t = ~__kernel_gid32_t;
type ~loff_t = ~__kernel_loff_t;
type ~size_t = ~__kernel_size_t;
type ~ssize_t = ~__kernel_ssize_t;
type ~time_t = ~__kernel_time_t;
type ~int32_t = ~__s32;
type ~uint8_t = ~__u8;
type ~uint32_t = ~__u32;
type ~uint64_t = ~__u64;
type ~dma_addr_t = ~u64;
type ~phys_addr_t = ~u64;
type ~resource_size_t = ~phys_addr_t;
type ~__ticket_t = ~u16;
type ~__ticketpair_t = ~u32;
type ~Elf64_Addr = ~__u64;
type ~Elf64_Half = ~__u16;
type ~Elf64_Word = ~__u32;
type ~Elf64_Xword = ~__u64;
type ~irqreturn_t = int;
type ~dma_cookie_t = ~s32;
type ~sa_family_t = ~__kernel_sa_family_t;
type ~key_serial_t = ~int32_t;
type ~key_perm_t = ~uint32_t;
type ~compat_long_t = ~s32;
type ~compat_uptr_t = ~u32;
type ~netdev_features_t = ~u64;
type ~netdev_tx_t = int;
type ~rx_handler_result_t = int;
type ~phandle = ~u32;
type ~phy_interface_t = int;
const #funAddr~b44_interrupt.base : int;
const #funAddr~b44_interrupt.offset : int;
const #funAddr~b44_timer.base : int;
const #funAddr~b44_timer.offset : int;
const #funAddr~b44_get_settings.base : int;
const #funAddr~b44_get_settings.offset : int;
const #funAddr~b44_set_settings.base : int;
const #funAddr~b44_set_settings.offset : int;
const #funAddr~b44_get_drvinfo.base : int;
const #funAddr~b44_get_drvinfo.offset : int;
const #funAddr~b44_get_wol.base : int;
const #funAddr~b44_get_wol.offset : int;
const #funAddr~b44_set_wol.base : int;
const #funAddr~b44_set_wol.offset : int;
const #funAddr~b44_get_msglevel.base : int;
const #funAddr~b44_get_msglevel.offset : int;
const #funAddr~b44_set_msglevel.base : int;
const #funAddr~b44_set_msglevel.offset : int;
const #funAddr~b44_nway_reset.base : int;
const #funAddr~b44_nway_reset.offset : int;
const #funAddr~ethtool_op_get_link.base : int;
const #funAddr~ethtool_op_get_link.offset : int;
const #funAddr~b44_get_ringparam.base : int;
const #funAddr~b44_get_ringparam.offset : int;
const #funAddr~b44_set_ringparam.base : int;
const #funAddr~b44_set_ringparam.offset : int;
const #funAddr~b44_get_pauseparam.base : int;
const #funAddr~b44_get_pauseparam.offset : int;
const #funAddr~b44_set_pauseparam.base : int;
const #funAddr~b44_set_pauseparam.offset : int;
const #funAddr~b44_get_strings.base : int;
const #funAddr~b44_get_strings.offset : int;
const #funAddr~b44_get_ethtool_stats.base : int;
const #funAddr~b44_get_ethtool_stats.offset : int;
const #funAddr~b44_get_sset_count.base : int;
const #funAddr~b44_get_sset_count.offset : int;
const #funAddr~b44_open.base : int;
const #funAddr~b44_open.offset : int;
const #funAddr~b44_close.base : int;
const #funAddr~b44_close.offset : int;
const #funAddr~b44_start_xmit.base : int;
const #funAddr~b44_start_xmit.offset : int;
const #funAddr~b44_set_rx_mode.base : int;
const #funAddr~b44_set_rx_mode.offset : int;
const #funAddr~b44_set_mac_addr.base : int;
const #funAddr~b44_set_mac_addr.offset : int;
const #funAddr~eth_validate_addr.base : int;
const #funAddr~eth_validate_addr.offset : int;
const #funAddr~b44_ioctl.base : int;
const #funAddr~b44_ioctl.offset : int;
const #funAddr~b44_change_mtu.base : int;
const #funAddr~b44_change_mtu.offset : int;
const #funAddr~b44_tx_timeout.base : int;
const #funAddr~b44_tx_timeout.offset : int;
const #funAddr~b44_get_stats64.base : int;
const #funAddr~b44_get_stats64.offset : int;
const #funAddr~b44_poll_controller.base : int;
const #funAddr~b44_poll_controller.offset : int;
const #funAddr~b44_mdio_read_phylib.base : int;
const #funAddr~b44_mdio_read_phylib.offset : int;
const #funAddr~b44_mdio_write_phylib.base : int;
const #funAddr~b44_mdio_write_phylib.offset : int;
const #funAddr~b44_adjust_link.base : int;
const #funAddr~b44_adjust_link.offset : int;
const #funAddr~b44_poll.base : int;
const #funAddr~b44_poll.offset : int;
const #funAddr~b44_mdio_read_mii.base : int;
const #funAddr~b44_mdio_read_mii.offset : int;
const #funAddr~b44_mdio_write_mii.base : int;
const #funAddr~b44_mdio_write_mii.offset : int;
const #funAddr~b44_init_one.base : int;
const #funAddr~b44_init_one.offset : int;
const #funAddr~b44_remove_one.base : int;
const #funAddr~b44_remove_one.offset : int;
const #funAddr~b44_suspend.base : int;
const #funAddr~b44_suspend.offset : int;
const #funAddr~b44_resume.base : int;
const #funAddr~b44_resume.offset : int;
const ~rpm_status~RPM_ACTIVE : int;
const ~rpm_status~RPM_RESUMING : int;
const ~rpm_status~RPM_SUSPENDED : int;
const ~rpm_status~RPM_SUSPENDING : int;
const ~rpm_request~RPM_REQ_NONE : int;
const ~rpm_request~RPM_REQ_IDLE : int;
const ~rpm_request~RPM_REQ_SUSPEND : int;
const ~rpm_request~RPM_REQ_AUTOSUSPEND : int;
const ~rpm_request~RPM_REQ_RESUME : int;
const ~uprobe_task_state~UTASK_RUNNING : int;
const ~uprobe_task_state~UTASK_SSTEP : int;
const ~uprobe_task_state~UTASK_SSTEP_ACK : int;
const ~uprobe_task_state~UTASK_SSTEP_TRAPPED : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NONE : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NET : int;
const ~kobj_ns_type~KOBJ_NS_TYPES : int;
const ~module_state~MODULE_STATE_LIVE : int;
const ~module_state~MODULE_STATE_COMING : int;
const ~module_state~MODULE_STATE_GOING : int;
const ~module_state~MODULE_STATE_UNFORMED : int;
const ~irqreturn~IRQ_NONE : int;
const ~irqreturn~IRQ_HANDLED : int;
const ~irqreturn~IRQ_WAKE_THREAD : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_RESUME_LATENCY : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_LATENCY_TOLERANCE : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_FLAGS : int;
const ~pm_qos_type~PM_QOS_UNITIALIZED : int;
const ~pm_qos_type~PM_QOS_MAX : int;
const ~pm_qos_type~PM_QOS_MIN : int;
const ~migrate_mode~MIGRATE_ASYNC : int;
const ~migrate_mode~MIGRATE_SYNC_LIGHT : int;
const ~migrate_mode~MIGRATE_SYNC : int;
const ~hrtimer_restart~HRTIMER_NORESTART : int;
const ~hrtimer_restart~HRTIMER_RESTART : int;
const ~dma_data_direction~DMA_BIDIRECTIONAL : int;
const ~dma_data_direction~DMA_TO_DEVICE : int;
const ~dma_data_direction~DMA_FROM_DEVICE : int;
const ~dma_data_direction~DMA_NONE : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_INACTIVE : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_ACTIVE : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_ON : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_OFF : int;
const ~irq_gc_flags~IRQ_GC_INIT_MASK_CACHE : int;
const ~irq_gc_flags~IRQ_GC_INIT_NESTED_LOCK : int;
const ~irq_gc_flags~IRQ_GC_MASK_CACHE_PER_TYPE : int;
const ~irq_gc_flags~IRQ_GC_NO_MASK : int;
const ~netdev_tx~__NETDEV_TX_MIN : int;
const ~netdev_tx~NETDEV_TX_OK : int;
const ~netdev_tx~NETDEV_TX_BUSY : int;
const ~netdev_tx~NETDEV_TX_LOCKED : int;
const ~rx_handler_result~RX_HANDLER_CONSUMED : int;
const ~rx_handler_result~RX_HANDLER_ANOTHER : int;
const ~rx_handler_result~RX_HANDLER_EXACT : int;
const ~rx_handler_result~RX_HANDLER_PASS : int;
const ~skb_free_reason~SKB_REASON_CONSUMED : int;
const ~skb_free_reason~SKB_REASON_DROPPED : int;
const ~pci_channel_state~pci_channel_io_normal : int;
const ~pci_channel_state~pci_channel_io_frozen : int;
const ~pci_channel_state~pci_channel_io_perm_failure : int;
const ~ssb_bustype~SSB_BUSTYPE_SSB : int;
const ~ssb_bustype~SSB_BUSTYPE_PCI : int;
const ~ssb_bustype~SSB_BUSTYPE_PCMCIA : int;
const ~ssb_bustype~SSB_BUSTYPE_SDIO : int;
const ~ldv_32459~PHY_INTERFACE_MODE_NA : int;
const ~ldv_32459~PHY_INTERFACE_MODE_MII : int;
const ~ldv_32459~PHY_INTERFACE_MODE_GMII : int;
const ~ldv_32459~PHY_INTERFACE_MODE_SGMII : int;
const ~ldv_32459~PHY_INTERFACE_MODE_TBI : int;
const ~ldv_32459~PHY_INTERFACE_MODE_REVMII : int;
const ~ldv_32459~PHY_INTERFACE_MODE_RMII : int;
const ~ldv_32459~PHY_INTERFACE_MODE_RGMII : int;
const ~ldv_32459~PHY_INTERFACE_MODE_RGMII_ID : int;
const ~ldv_32459~PHY_INTERFACE_MODE_RGMII_RXID : int;
const ~ldv_32459~PHY_INTERFACE_MODE_RGMII_TXID : int;
const ~ldv_32459~PHY_INTERFACE_MODE_RTBI : int;
const ~ldv_32459~PHY_INTERFACE_MODE_SMII : int;
const ~ldv_32459~PHY_INTERFACE_MODE_XGMII : int;
const ~ldv_32459~PHY_INTERFACE_MODE_MOCA : int;
const ~ldv_32459~PHY_INTERFACE_MODE_QSGMII : int;
const ~ldv_32459~PHY_INTERFACE_MODE_MAX : int;
const ~ldv_32511~MDIOBUS_ALLOCATED : int;
const ~ldv_32511~MDIOBUS_REGISTERED : int;
const ~ldv_32511~MDIOBUS_UNREGISTERED : int;
const ~ldv_32511~MDIOBUS_RELEASED : int;
const ~phy_state~PHY_DOWN : int;
const ~phy_state~PHY_STARTING : int;
const ~phy_state~PHY_READY : int;
const ~phy_state~PHY_PENDING : int;
const ~phy_state~PHY_UP : int;
const ~phy_state~PHY_AN : int;
const ~phy_state~PHY_RUNNING : int;
const ~phy_state~PHY_NOLINK : int;
const ~phy_state~PHY_FORCING : int;
const ~phy_state~PHY_CHANGELINK : int;
const ~phy_state~PHY_HALTED : int;
const ~phy_state~PHY_RESUMING : int;
axiom #funAddr~b44_interrupt.base == -1 && #funAddr~b44_interrupt.offset == 0;
axiom #funAddr~b44_timer.base == -1 && #funAddr~b44_timer.offset == 1;
axiom #funAddr~b44_get_settings.base == -1 && #funAddr~b44_get_settings.offset == 2;
axiom #funAddr~b44_set_settings.base == -1 && #funAddr~b44_set_settings.offset == 3;
axiom #funAddr~b44_get_drvinfo.base == -1 && #funAddr~b44_get_drvinfo.offset == 4;
axiom #funAddr~b44_get_wol.base == -1 && #funAddr~b44_get_wol.offset == 5;
axiom #funAddr~b44_set_wol.base == -1 && #funAddr~b44_set_wol.offset == 6;
axiom #funAddr~b44_get_msglevel.base == -1 && #funAddr~b44_get_msglevel.offset == 7;
axiom #funAddr~b44_set_msglevel.base == -1 && #funAddr~b44_set_msglevel.offset == 8;
axiom #funAddr~b44_nway_reset.base == -1 && #funAddr~b44_nway_reset.offset == 9;
axiom #funAddr~ethtool_op_get_link.base == -1 && #funAddr~ethtool_op_get_link.offset == 10;
axiom #funAddr~b44_get_ringparam.base == -1 && #funAddr~b44_get_ringparam.offset == 11;
axiom #funAddr~b44_set_ringparam.base == -1 && #funAddr~b44_set_ringparam.offset == 12;
axiom #funAddr~b44_get_pauseparam.base == -1 && #funAddr~b44_get_pauseparam.offset == 13;
axiom #funAddr~b44_set_pauseparam.base == -1 && #funAddr~b44_set_pauseparam.offset == 14;
axiom #funAddr~b44_get_strings.base == -1 && #funAddr~b44_get_strings.offset == 15;
axiom #funAddr~b44_get_ethtool_stats.base == -1 && #funAddr~b44_get_ethtool_stats.offset == 16;
axiom #funAddr~b44_get_sset_count.base == -1 && #funAddr~b44_get_sset_count.offset == 17;
axiom #funAddr~b44_open.base == -1 && #funAddr~b44_open.offset == 18;
axiom #funAddr~b44_close.base == -1 && #funAddr~b44_close.offset == 19;
axiom #funAddr~b44_start_xmit.base == -1 && #funAddr~b44_start_xmit.offset == 20;
axiom #funAddr~b44_set_rx_mode.base == -1 && #funAddr~b44_set_rx_mode.offset == 21;
axiom #funAddr~b44_set_mac_addr.base == -1 && #funAddr~b44_set_mac_addr.offset == 22;
axiom #funAddr~eth_validate_addr.base == -1 && #funAddr~eth_validate_addr.offset == 23;
axiom #funAddr~b44_ioctl.base == -1 && #funAddr~b44_ioctl.offset == 24;
axiom #funAddr~b44_change_mtu.base == -1 && #funAddr~b44_change_mtu.offset == 25;
axiom #funAddr~b44_tx_timeout.base == -1 && #funAddr~b44_tx_timeout.offset == 26;
axiom #funAddr~b44_get_stats64.base == -1 && #funAddr~b44_get_stats64.offset == 27;
axiom #funAddr~b44_poll_controller.base == -1 && #funAddr~b44_poll_controller.offset == 28;
axiom #funAddr~b44_mdio_read_phylib.base == -1 && #funAddr~b44_mdio_read_phylib.offset == 29;
axiom #funAddr~b44_mdio_write_phylib.base == -1 && #funAddr~b44_mdio_write_phylib.offset == 30;
axiom #funAddr~b44_adjust_link.base == -1 && #funAddr~b44_adjust_link.offset == 31;
axiom #funAddr~b44_poll.base == -1 && #funAddr~b44_poll.offset == 32;
axiom #funAddr~b44_mdio_read_mii.base == -1 && #funAddr~b44_mdio_read_mii.offset == 33;
axiom #funAddr~b44_mdio_write_mii.base == -1 && #funAddr~b44_mdio_write_mii.offset == 34;
axiom #funAddr~b44_init_one.base == -1 && #funAddr~b44_init_one.offset == 35;
axiom #funAddr~b44_remove_one.base == -1 && #funAddr~b44_remove_one.offset == 36;
axiom #funAddr~b44_suspend.base == -1 && #funAddr~b44_suspend.offset == 37;
axiom #funAddr~b44_resume.base == -1 && #funAddr~b44_resume.offset == 38;
axiom ~rpm_status~RPM_ACTIVE == 0;
axiom ~rpm_status~RPM_RESUMING == 1;
axiom ~rpm_status~RPM_SUSPENDED == 2;
axiom ~rpm_status~RPM_SUSPENDING == 3;
axiom ~rpm_request~RPM_REQ_NONE == 0;
axiom ~rpm_request~RPM_REQ_IDLE == 1;
axiom ~rpm_request~RPM_REQ_SUSPEND == 2;
axiom ~rpm_request~RPM_REQ_AUTOSUSPEND == 3;
axiom ~rpm_request~RPM_REQ_RESUME == 4;
axiom ~uprobe_task_state~UTASK_RUNNING == 0;
axiom ~uprobe_task_state~UTASK_SSTEP == 1;
axiom ~uprobe_task_state~UTASK_SSTEP_ACK == 2;
axiom ~uprobe_task_state~UTASK_SSTEP_TRAPPED == 3;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NONE == 0;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NET == 1;
axiom ~kobj_ns_type~KOBJ_NS_TYPES == 2;
axiom ~module_state~MODULE_STATE_LIVE == 0;
axiom ~module_state~MODULE_STATE_COMING == 1;
axiom ~module_state~MODULE_STATE_GOING == 2;
axiom ~module_state~MODULE_STATE_UNFORMED == 3;
axiom ~irqreturn~IRQ_NONE == 0;
axiom ~irqreturn~IRQ_HANDLED == 1;
axiom ~irqreturn~IRQ_WAKE_THREAD == 2;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_RESUME_LATENCY == 1;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_LATENCY_TOLERANCE == 2;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_FLAGS == 3;
axiom ~pm_qos_type~PM_QOS_UNITIALIZED == 0;
axiom ~pm_qos_type~PM_QOS_MAX == 1;
axiom ~pm_qos_type~PM_QOS_MIN == 2;
axiom ~migrate_mode~MIGRATE_ASYNC == 0;
axiom ~migrate_mode~MIGRATE_SYNC_LIGHT == 1;
axiom ~migrate_mode~MIGRATE_SYNC == 2;
axiom ~hrtimer_restart~HRTIMER_NORESTART == 0;
axiom ~hrtimer_restart~HRTIMER_RESTART == 1;
axiom ~dma_data_direction~DMA_BIDIRECTIONAL == 0;
axiom ~dma_data_direction~DMA_TO_DEVICE == 1;
axiom ~dma_data_direction~DMA_FROM_DEVICE == 2;
axiom ~dma_data_direction~DMA_NONE == 3;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_INACTIVE == 0;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_ACTIVE == 1;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_ON == 2;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_OFF == 3;
axiom ~irq_gc_flags~IRQ_GC_INIT_MASK_CACHE == 1;
axiom ~irq_gc_flags~IRQ_GC_INIT_NESTED_LOCK == 2;
axiom ~irq_gc_flags~IRQ_GC_MASK_CACHE_PER_TYPE == 4;
axiom ~irq_gc_flags~IRQ_GC_NO_MASK == 8;
axiom ~netdev_tx~__NETDEV_TX_MIN == -2147483648;
axiom ~netdev_tx~NETDEV_TX_OK == 0;
axiom ~netdev_tx~NETDEV_TX_BUSY == 16;
axiom ~netdev_tx~NETDEV_TX_LOCKED == 32;
axiom ~rx_handler_result~RX_HANDLER_CONSUMED == 0;
axiom ~rx_handler_result~RX_HANDLER_ANOTHER == 1;
axiom ~rx_handler_result~RX_HANDLER_EXACT == 2;
axiom ~rx_handler_result~RX_HANDLER_PASS == 3;
axiom ~skb_free_reason~SKB_REASON_CONSUMED == 0;
axiom ~skb_free_reason~SKB_REASON_DROPPED == 1;
axiom ~pci_channel_state~pci_channel_io_normal == 1;
axiom ~pci_channel_state~pci_channel_io_frozen == 2;
axiom ~pci_channel_state~pci_channel_io_perm_failure == 3;
axiom ~ssb_bustype~SSB_BUSTYPE_SSB == 0;
axiom ~ssb_bustype~SSB_BUSTYPE_PCI == 1;
axiom ~ssb_bustype~SSB_BUSTYPE_PCMCIA == 2;
axiom ~ssb_bustype~SSB_BUSTYPE_SDIO == 3;
axiom ~ldv_32459~PHY_INTERFACE_MODE_NA == 0;
axiom ~ldv_32459~PHY_INTERFACE_MODE_MII == 1;
axiom ~ldv_32459~PHY_INTERFACE_MODE_GMII == 2;
axiom ~ldv_32459~PHY_INTERFACE_MODE_SGMII == 3;
axiom ~ldv_32459~PHY_INTERFACE_MODE_TBI == 4;
axiom ~ldv_32459~PHY_INTERFACE_MODE_REVMII == 5;
axiom ~ldv_32459~PHY_INTERFACE_MODE_RMII == 6;
axiom ~ldv_32459~PHY_INTERFACE_MODE_RGMII == 7;
axiom ~ldv_32459~PHY_INTERFACE_MODE_RGMII_ID == 8;
axiom ~ldv_32459~PHY_INTERFACE_MODE_RGMII_RXID == 9;
axiom ~ldv_32459~PHY_INTERFACE_MODE_RGMII_TXID == 10;
axiom ~ldv_32459~PHY_INTERFACE_MODE_RTBI == 11;
axiom ~ldv_32459~PHY_INTERFACE_MODE_SMII == 12;
axiom ~ldv_32459~PHY_INTERFACE_MODE_XGMII == 13;
axiom ~ldv_32459~PHY_INTERFACE_MODE_MOCA == 14;
axiom ~ldv_32459~PHY_INTERFACE_MODE_QSGMII == 15;
axiom ~ldv_32459~PHY_INTERFACE_MODE_MAX == 16;
axiom ~ldv_32511~MDIOBUS_ALLOCATED == 1;
axiom ~ldv_32511~MDIOBUS_REGISTERED == 2;
axiom ~ldv_32511~MDIOBUS_UNREGISTERED == 3;
axiom ~ldv_32511~MDIOBUS_RELEASED == 4;
axiom ~phy_state~PHY_DOWN == 0;
axiom ~phy_state~PHY_STARTING == 1;
axiom ~phy_state~PHY_READY == 2;
axiom ~phy_state~PHY_PENDING == 3;
axiom ~phy_state~PHY_UP == 4;
axiom ~phy_state~PHY_AN == 5;
axiom ~phy_state~PHY_RUNNING == 6;
axiom ~phy_state~PHY_NOLINK == 7;
axiom ~phy_state~PHY_FORCING == 8;
axiom ~phy_state~PHY_CHANGELINK == 9;
axiom ~phy_state~PHY_HALTED == 10;
axiom ~phy_state~PHY_RESUMING == 11;
function { :overapproximation "shiftRight" } ~shiftRight(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseAnd" } ~bitwiseAnd(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseOr" } ~bitwiseOr(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "shiftLeft" } ~shiftLeft(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseComplement" } ~bitwiseComplement(in0 : int) returns (out : int);
var ~jiffies : int;

var ~ldv_irq_data_2_1.base : int, ~ldv_irq_data_2_1.offset : int;

var ~ldv_irq_1_3 : int;

var ~ldv_irq_line_2_2 : int;

var ~ldv_irq_data_1_1.base : int, ~ldv_irq_data_1_1.offset : int;

var ~ldv_irq_1_0 : int;

var ~ldv_state_variable_6 : int;

var ~ldv_irq_data_1_0.base : int, ~ldv_irq_data_1_0.offset : int;

var ~ldv_state_variable_0 : int;

var ~ldv_state_variable_5 : int;

var ~ldv_timer_state_3 : int;

var ~ldv_irq_line_2_1 : int;

var ~ldv_state_variable_2 : int;

var ~ldv_irq_2_0 : int;

var ~ldv_irq_data_1_3.base : int, ~ldv_irq_data_1_3.offset : int;

var ~ldv_irq_data_1_2.base : int, ~ldv_irq_data_1_2.offset : int;

var ~ldv_irq_data_2_0.base : int, ~ldv_irq_data_2_0.offset : int;

var ~ldv_irq_1_2 : int;

var ~LDV_IN_INTERRUPT : int;

var ~ldv_irq_1_1 : int;

var ~ldv_irq_2_3 : int;

var ~ldv_irq_data_2_3.base : int, ~ldv_irq_data_2_3.offset : int;

var ~ldv_irq_line_1_3 : int;

var ~ldv_irq_2_2 : int;

var ~ldv_irq_line_2_0 : int;

var ~ldv_state_variable_3 : int;

var ~ldv_irq_line_1_0 : int;

var ~ref_cnt : int;

var ~ldv_irq_line_1_1 : int;

var ~ldv_irq_data_2_2.base : int, ~ldv_irq_data_2_2.offset : int;

var ~ldv_state_variable_1 : int;

var ~ldv_irq_line_1_2 : int;

var ~ldv_state_variable_4 : int;

var ~ldv_irq_line_2_3 : int;

var ~ldv_irq_2_1 : int;

var ~b44_debug : int;

var ~dma_desc_sync_size : int;

var ~instance : int;

var ~#b44_gstrings.base : int, ~#b44_gstrings.offset : int;

var ~ldv_retval_2 : int;

var ~ldv_retval_5 : int;

var ~ldv_retval_0 : int;

var ~ldv_retval_4 : int;

var ~ldv_retval_1 : int;

var ~ldv_retval_3 : int;

var ~ldv_spin : int;

var ~#__this_module.base : int, ~#__this_module.offset : int;

var ~pv_irq_ops.save_fl.func.base : int, ~pv_irq_ops.save_fl.func.offset : int, ~pv_irq_ops.restore_fl.func.base : int, ~pv_irq_ops.restore_fl.func.offset : int, ~pv_irq_ops.irq_disable.func.base : int, ~pv_irq_ops.irq_disable.func.offset : int, ~pv_irq_ops.irq_enable.func.base : int, ~pv_irq_ops.irq_enable.func.offset : int, ~pv_irq_ops.safe_halt.base : int, ~pv_irq_ops.safe_halt.offset : int, ~pv_irq_ops.halt.base : int, ~pv_irq_ops.halt.offset : int, ~pv_irq_ops.adjust_exception_frame.base : int, ~pv_irq_ops.adjust_exception_frame.offset : int;

var ~ldv_timer_list_3.base : int, ~ldv_timer_list_3.offset : int;

var ~b44_ethtool_ops_group4.base : int, ~b44_ethtool_ops_group4.offset : int;

var ~b44_ethtool_ops_group0.base : int, ~b44_ethtool_ops_group0.offset : int;

var ~b44_ethtool_ops_group2.base : int, ~b44_ethtool_ops_group2.offset : int;

var ~b44_ethtool_ops_group3.base : int, ~b44_ethtool_ops_group3.offset : int;

var ~b44_ethtool_ops_group1.base : int, ~b44_ethtool_ops_group1.offset : int;

var ~b44_ssb_driver_group0.base : int, ~b44_ssb_driver_group0.offset : int;

var ~b44_netdev_ops_group1.base : int, ~b44_netdev_ops_group1.offset : int;

var ~#x86_dma_fallback_dev.base : int, ~#x86_dma_fallback_dev.offset : int;

var ~dma_ops.base : int, ~dma_ops.offset : int;

var ~#b44_pci_tbl.base : int, ~#b44_pci_tbl.offset : int;

var ~#b44_pci_driver.base : int, ~#b44_pci_driver.offset : int;

var ~#b44_ssb_tbl.base : int, ~#b44_ssb_tbl.offset : int;

var ~#b44_ethtool_ops.base : int, ~#b44_ethtool_ops.offset : int;

var ~#b44_netdev_ops.base : int, ~#b44_netdev_ops.offset : int;

var ~#b44_ssb_driver.base : int, ~#b44_ssb_driver.offset : int;

var #NULL.base : int, #NULL.offset : int;

var #valid : [int]int;

var #length : [int]int;

var #memory_int : [int,int]int;

var #memory_$Pointer$.base : [int,int]int, #memory_$Pointer$.offset : [int,int]int;

implementation ldv_spin_lock_irq_4(#in~lock.base : int, #in~lock.offset : int) returns (){
    var ~lock.base : int, ~lock.offset : int;

  loc0:
    ~lock.base, ~lock.offset := #in~lock.base, #in~lock.offset;
    call _raw_spin_lock_irq(~lock.base, ~lock.offset + 0 + 0);
    assume true;
    return;
}

procedure ldv_spin_lock_irq_4(#in~lock.base : int, #in~lock.offset : int) returns ();
modifies ;

implementation ldv_initialize_ssb_driver_4() returns (){
    var #t~ret1456.base : int, #t~ret1456.offset : int;
    var ~tmp~1127.base : int, ~tmp~1127.offset : int;

  loc1:
    havoc ~tmp~1127.base, ~tmp~1127.offset;
    call #t~ret1456.base, #t~ret1456.offset := ldv_zalloc(64);
    ~tmp~1127.base, ~tmp~1127.offset := #t~ret1456.base, #t~ret1456.offset;
    havoc #t~ret1456.base, #t~ret1456.offset;
    ~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset := ~tmp~1127.base, ~tmp~1127.offset;
    assume true;
    return;
}

procedure ldv_initialize_ssb_driver_4() returns ();
modifies ~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset, #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation b44_alloc_rx_skb(#in~bp.base : int, #in~bp.offset : int, #in~src_idx : int, #in~dest_idx_unmasked : int) returns (#res : int){
    var #t~mem540.base : int, #t~mem540.offset : int;
    var #t~mem541.base : int, #t~mem541.offset : int;
    var #t~mem542.base : int, #t~mem542.offset : int;
    var #t~ret543.base : int, #t~ret543.offset : int;
    var #t~mem544.base : int, #t~mem544.offset : int;
    var #t~mem545.base : int, #t~mem545.offset : int;
    var #t~mem546.base : int, #t~mem546.offset : int;
    var #t~ret547 : ~dma_addr_t;
    var #t~mem548.base : int, #t~mem548.offset : int;
    var #t~mem549.base : int, #t~mem549.offset : int;
    var #t~ret550 : int;
    var #t~mem551.base : int, #t~mem551.offset : int;
    var #t~mem552.base : int, #t~mem552.offset : int;
    var #t~ret553 : int;
    var #t~mem554.base : int, #t~mem554.offset : int;
    var #t~mem555.base : int, #t~mem555.offset : int;
    var #t~ret556.base : int, #t~ret556.offset : int;
    var #t~mem557.base : int, #t~mem557.offset : int;
    var #t~mem558.base : int, #t~mem558.offset : int;
    var #t~mem559.base : int, #t~mem559.offset : int;
    var #t~ret560 : ~dma_addr_t;
    var #t~mem561.base : int, #t~mem561.offset : int;
    var #t~mem562.base : int, #t~mem562.offset : int;
    var #t~ret563 : int;
    var #t~mem564.base : int, #t~mem564.offset : int;
    var #t~mem565.base : int, #t~mem565.offset : int;
    var #t~ret566 : int;
    var #t~mem567.base : int, #t~mem567.offset : int;
    var #t~mem568.base : int, #t~mem568.offset : int;
    var #t~mem570.base : int, #t~mem570.offset : int;
    var #t~mem576.base : int, #t~mem576.offset : int;
    var #t~mem578 : int;
    var #t~mem580 : int;
    var #t~mem581.base : int, #t~mem581.offset : int;
    var #t~mem582 : int;
    var ~bp.base : int, ~bp.offset : int;
    var ~src_idx : int;
    var ~dest_idx_unmasked : int;
    var ~dp~597.base : int, ~dp~597.offset : int;
    var ~src_map~597.base : int, ~src_map~597.offset : int;
    var ~map~597.base : int, ~map~597.offset : int;
    var ~rh~597.base : int, ~rh~597.offset : int;
    var ~skb~597.base : int, ~skb~597.offset : int;
    var ~mapping~597 : ~dma_addr_t;
    var ~dest_idx~597 : int;
    var ~ctrl~597 : ~u32;
    var ~tmp~597 : int;
    var ~tmp___0~597 : int;
    var ~tmp___1~597 : int;
    var ~tmp___2~597 : int;

  loc2:
    ~bp.base, ~bp.offset := #in~bp.base, #in~bp.offset;
    ~src_idx := #in~src_idx;
    ~dest_idx_unmasked := #in~dest_idx_unmasked;
    havoc ~dp~597.base, ~dp~597.offset;
    havoc ~src_map~597.base, ~src_map~597.offset;
    havoc ~map~597.base, ~map~597.offset;
    havoc ~rh~597.base, ~rh~597.offset;
    havoc ~skb~597.base, ~skb~597.offset;
    havoc ~mapping~597;
    havoc ~dest_idx~597;
    havoc ~ctrl~597;
    havoc ~tmp~597;
    havoc ~tmp___0~597;
    havoc ~tmp___1~597;
    havoc ~tmp___2~597;
    ~src_map~597.base, ~src_map~597.offset := 0, 0;
    assume !(~src_idx >= 0);
    ~dest_idx~597 := ~bitwiseAnd((if ~dest_idx_unmasked % 4294967296 % 4294967296 <= 2147483647 then ~dest_idx_unmasked % 4294967296 % 4294967296 else ~dest_idx_unmasked % 4294967296 % 4294967296 - 4294967296), 511);
    call #t~mem541.base, #t~mem541.offset := read~$Pointer$(~bp.base, ~bp.offset + 108, 8);
    ~map~597.base, ~map~597.offset := #t~mem541.base, #t~mem541.offset + (if ~dest_idx~597 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~dest_idx~597 % 18446744073709551616 % 18446744073709551616 else ~dest_idx~597 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616) * 16;
    havoc #t~mem541.base, #t~mem541.offset;
    call #t~mem542.base, #t~mem542.offset := read~$Pointer$(~bp.base, ~bp.offset + 816, 8);
    call #t~ret543.base, #t~ret543.offset := netdev_alloc_skb(#t~mem542.base, #t~mem542.offset, 1566);
    return;
}

procedure b44_alloc_rx_skb(#in~bp.base : int, #in~bp.offset : int, #in~src_idx : int, #in~dest_idx_unmasked : int) returns (#res : int);
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation main() returns (#res : int){
    var #t~ret1471 : ~u32;
    var #t~ret1472.base : int, #t~ret1472.offset : int;
    var #t~nondet1473 : int;
    var #t~ret1474.base : int, #t~ret1474.offset : int;
    var #t~ret1475.base : int, #t~ret1475.offset : int;
    var #t~ret1476 : ~u32;
    var #t~ret1477.base : int, #t~ret1477.offset : int;
    var #t~ret1478.base : int, #t~ret1478.offset : int;
    var #t~nondet1479 : int;
    var #t~ret1480.base : int, #t~ret1480.offset : int;
    var #t~nondet1481 : int;
    var #t~ret1482.base : int, #t~ret1482.offset : int;
    var #t~ret1483.base : int, #t~ret1483.offset : int;
    var #t~ret1484.base : int, #t~ret1484.offset : int;
    var #t~memset1485.base : int, #t~memset1485.offset : int;
    var #t~nondet1486 : int;
    var #t~switch1487 : bool;
    var #t~nondet1488 : int;
    var #t~switch1489 : bool;
    var #t~ret1490 : int;
    var #t~ret1491 : int;
    var #t~ret1492 : int;
    var #t~ret1493 : int;
    var #t~ret1494 : int;
    var #t~ret1495 : int;
    var #t~ret1496 : ~u32;
    var #t~ret1497 : int;
    var #t~ret1498 : ~u32;
    var #t~nondet1499 : int;
    var #t~switch1500 : bool;
    var #t~ret1501 : int;
    var #t~mem1502 : int;
    var #t~ret1503 : int;
    var #t~ret1504 : int;
    var #t~nondet1505 : int;
    var #t~switch1506 : bool;
    var #t~ret1507 : int;
    var #t~nondet1508 : int;
    var #t~switch1509 : bool;
    var #t~ret1510 : int;
    var #t~ret1511 : int;
    var #t~ret1512 : int;
    var #t~ret1513 : int;
    var #t~ret1514 : ~netdev_tx_t;
    var #t~ret1515 : int;
    var #t~ret1516 : int;
    var #t~ret1517 : int;
    var #t~ret1518 : int;
    var #t~ret1519 : int;
    var #t~ret1520 : int;
    var #t~ret1521 : int;
    var #t~ret1522 : int;
    var #t~ret1523 : int;
    var #t~ret1524.base : int, #t~ret1524.offset : int;
    var #t~ret1525.base : int, #t~ret1525.offset : int;
    var #t~ret1526.base : int, #t~ret1526.offset : int;
    var #t~ret1527 : int;
    var #t~ret1528 : int;
    var ~ldvarg1~1141 : ~u32;
    var ~tmp~1141 : ~u32;
    var ~ldvarg4~1141.base : int, ~ldvarg4~1141.offset : int;
    var ~tmp___0~1141.base : int, ~tmp___0~1141.offset : int;
    var ~ldvarg3~1141 : int;
    var ~tmp___1~1141 : int;
    var ~ldvarg0~1141.base : int, ~ldvarg0~1141.offset : int;
    var ~tmp___2~1141.base : int, ~tmp___2~1141.offset : int;
    var ~ldvarg5~1141.base : int, ~ldvarg5~1141.offset : int;
    var ~tmp___3~1141.base : int, ~tmp___3~1141.offset : int;
    var ~ldvarg2~1141 : ~u32;
    var ~tmp___4~1141 : ~u32;
    var ~ldvarg6~1141.base : int, ~ldvarg6~1141.offset : int;
    var ~tmp___5~1141.base : int, ~tmp___5~1141.offset : int;
    var ~ldvarg8~1141.base : int, ~ldvarg8~1141.offset : int;
    var ~tmp___6~1141.base : int, ~tmp___6~1141.offset : int;
    var ~#ldvarg7~1141.base : int, ~#ldvarg7~1141.offset : int;
    var ~ldvarg11~1141 : int;
    var ~tmp___7~1141 : int;
    var ~ldvarg14~1141.base : int, ~ldvarg14~1141.offset : int;
    var ~tmp___8~1141.base : int, ~tmp___8~1141.offset : int;
    var ~ldvarg13~1141 : int;
    var ~tmp___9~1141 : int;
    var ~ldvarg10~1141.base : int, ~ldvarg10~1141.offset : int;
    var ~tmp___10~1141.base : int, ~tmp___10~1141.offset : int;
    var ~ldvarg12~1141.base : int, ~ldvarg12~1141.offset : int;
    var ~tmp___11~1141.base : int, ~tmp___11~1141.offset : int;
    var ~ldvarg9~1141.base : int, ~ldvarg9~1141.offset : int;
    var ~tmp___12~1141.base : int, ~tmp___12~1141.offset : int;
    var ~tmp___13~1141 : int;
    var ~tmp___14~1141 : int;
    var ~tmp___15~1141 : int;
    var ~tmp___16~1141 : int;
    var ~tmp___17~1141 : int;

  loc3:
    havoc ~ldvarg1~1141;
    havoc ~tmp~1141;
    havoc ~ldvarg4~1141.base, ~ldvarg4~1141.offset;
    havoc ~tmp___0~1141.base, ~tmp___0~1141.offset;
    havoc ~ldvarg3~1141;
    havoc ~tmp___1~1141;
    havoc ~ldvarg0~1141.base, ~ldvarg0~1141.offset;
    havoc ~tmp___2~1141.base, ~tmp___2~1141.offset;
    havoc ~ldvarg5~1141.base, ~ldvarg5~1141.offset;
    havoc ~tmp___3~1141.base, ~tmp___3~1141.offset;
    havoc ~ldvarg2~1141;
    havoc ~tmp___4~1141;
    havoc ~ldvarg6~1141.base, ~ldvarg6~1141.offset;
    havoc ~tmp___5~1141.base, ~tmp___5~1141.offset;
    havoc ~ldvarg8~1141.base, ~ldvarg8~1141.offset;
    havoc ~tmp___6~1141.base, ~tmp___6~1141.offset;
    call ~#ldvarg7~1141.base, ~#ldvarg7~1141.offset := #Ultimate.alloc(4);
    havoc ~ldvarg11~1141;
    havoc ~tmp___7~1141;
    havoc ~ldvarg14~1141.base, ~ldvarg14~1141.offset;
    havoc ~tmp___8~1141.base, ~tmp___8~1141.offset;
    havoc ~ldvarg13~1141;
    havoc ~tmp___9~1141;
    havoc ~ldvarg10~1141.base, ~ldvarg10~1141.offset;
    havoc ~tmp___10~1141.base, ~tmp___10~1141.offset;
    havoc ~ldvarg12~1141.base, ~ldvarg12~1141.offset;
    havoc ~tmp___11~1141.base, ~tmp___11~1141.offset;
    havoc ~ldvarg9~1141.base, ~ldvarg9~1141.offset;
    havoc ~tmp___12~1141.base, ~tmp___12~1141.offset;
    havoc ~tmp___13~1141;
    havoc ~tmp___14~1141;
    havoc ~tmp___15~1141;
    havoc ~tmp___16~1141;
    havoc ~tmp___17~1141;
    call #t~ret1471 := __VERIFIER_nondet_u32();
    ~tmp~1141 := #t~ret1471;
    havoc #t~ret1471;
    ~ldvarg1~1141 := ~tmp~1141;
    call #t~ret1472.base, #t~ret1472.offset := ldv_zalloc(8);
    ~tmp___0~1141.base, ~tmp___0~1141.offset := #t~ret1472.base, #t~ret1472.offset;
    havoc #t~ret1472.base, #t~ret1472.offset;
    ~ldvarg4~1141.base, ~ldvarg4~1141.offset := ~tmp___0~1141.base, ~tmp___0~1141.offset;
    assume -2147483648 <= #t~nondet1473 && #t~nondet1473 <= 2147483647;
    ~tmp___1~1141 := #t~nondet1473;
    havoc #t~nondet1473;
    ~ldvarg3~1141 := ~tmp___1~1141;
    call #t~ret1474.base, #t~ret1474.offset := ldv_zalloc(1);
    ~tmp___2~1141.base, ~tmp___2~1141.offset := #t~ret1474.base, #t~ret1474.offset;
    havoc #t~ret1474.base, #t~ret1474.offset;
    ~ldvarg0~1141.base, ~ldvarg0~1141.offset := ~tmp___2~1141.base, ~tmp___2~1141.offset;
    call #t~ret1475.base, #t~ret1475.offset := ldv_zalloc(8);
    ~tmp___3~1141.base, ~tmp___3~1141.offset := #t~ret1475.base, #t~ret1475.offset;
    havoc #t~ret1475.base, #t~ret1475.offset;
    ~ldvarg5~1141.base, ~ldvarg5~1141.offset := ~tmp___3~1141.base, ~tmp___3~1141.offset;
    call #t~ret1476 := __VERIFIER_nondet_u32();
    ~tmp___4~1141 := #t~ret1476;
    havoc #t~ret1476;
    ~ldvarg2~1141 := ~tmp___4~1141;
    call #t~ret1477.base, #t~ret1477.offset := ldv_zalloc(196);
    ~tmp___5~1141.base, ~tmp___5~1141.offset := #t~ret1477.base, #t~ret1477.offset;
    havoc #t~ret1477.base, #t~ret1477.offset;
    ~ldvarg6~1141.base, ~ldvarg6~1141.offset := ~tmp___5~1141.base, ~tmp___5~1141.offset;
    call #t~ret1478.base, #t~ret1478.offset := ldv_zalloc(6);
    ~tmp___6~1141.base, ~tmp___6~1141.offset := #t~ret1478.base, #t~ret1478.offset;
    havoc #t~ret1478.base, #t~ret1478.offset;
    ~ldvarg8~1141.base, ~ldvarg8~1141.offset := ~tmp___6~1141.base, ~tmp___6~1141.offset;
    assume -2147483648 <= #t~nondet1479 && #t~nondet1479 <= 2147483647;
    ~tmp___7~1141 := #t~nondet1479;
    havoc #t~nondet1479;
    ~ldvarg11~1141 := ~tmp___7~1141;
    call #t~ret1480.base, #t~ret1480.offset := ldv_zalloc(40);
    ~tmp___8~1141.base, ~tmp___8~1141.offset := #t~ret1480.base, #t~ret1480.offset;
    havoc #t~ret1480.base, #t~ret1480.offset;
    ~ldvarg14~1141.base, ~ldvarg14~1141.offset := ~tmp___8~1141.base, ~tmp___8~1141.offset;
    assume -2147483648 <= #t~nondet1481 && #t~nondet1481 <= 2147483647;
    ~tmp___9~1141 := #t~nondet1481;
    havoc #t~nondet1481;
    ~ldvarg13~1141 := ~tmp___9~1141;
    call #t~ret1482.base, #t~ret1482.offset := ldv_zalloc(1);
    ~tmp___10~1141.base, ~tmp___10~1141.offset := #t~ret1482.base, #t~ret1482.offset;
    havoc #t~ret1482.base, #t~ret1482.offset;
    ~ldvarg10~1141.base, ~ldvarg10~1141.offset := ~tmp___10~1141.base, ~tmp___10~1141.offset;
    call #t~ret1483.base, #t~ret1483.offset := ldv_zalloc(232);
    ~tmp___11~1141.base, ~tmp___11~1141.offset := #t~ret1483.base, #t~ret1483.offset;
    havoc #t~ret1483.base, #t~ret1483.offset;
    ~ldvarg12~1141.base, ~ldvarg12~1141.offset := ~tmp___11~1141.base, ~tmp___11~1141.offset;
    call #t~ret1484.base, #t~ret1484.offset := ldv_zalloc(184);
    ~tmp___12~1141.base, ~tmp___12~1141.offset := #t~ret1484.base, #t~ret1484.offset;
    havoc #t~ret1484.base, #t~ret1484.offset;
    ~ldvarg9~1141.base, ~ldvarg9~1141.offset := ~tmp___12~1141.base, ~tmp___12~1141.offset;
    call ldv_initialize();
    call #t~memset1485.base, #t~memset1485.offset := #Ultimate.C_memset(~#ldvarg7~1141.base, ~#ldvarg7~1141.offset, 0, 4);
    havoc #t~memset1485.base, #t~memset1485.offset;
    ~ldv_state_variable_6 := 0;
    ~ldv_state_variable_4 := 0;
    ~ldv_state_variable_1 := 1;
    ~ref_cnt := 0;
    ~ldv_state_variable_0 := 1;
    ~ldv_state_variable_3 := 1;
    ~ldv_state_variable_2 := 1;
    ~ldv_state_variable_5 := 0;
    goto loc4;
  loc4:
    assume -2147483648 <= #t~nondet1486 && #t~nondet1486 <= 2147483647;
    ~tmp___13~1141 := #t~nondet1486;
    havoc #t~nondet1486;
    #t~switch1487 := ~tmp___13~1141 == 0;
    assume !#t~switch1487;
    #t~switch1487 := #t~switch1487 || ~tmp___13~1141 == 1;
    goto loc5;
  loc5:
    goto loc5_0, loc5_1;
  loc5_0:
    assume #t~switch1487;
    assume ~ldv_state_variable_4 != 0;
    assume -2147483648 <= #t~nondet1499 && #t~nondet1499 <= 2147483647;
    ~tmp___15~1141 := #t~nondet1499;
    havoc #t~nondet1499;
    #t~switch1500 := ~tmp___15~1141 == 0;
    goto loc6;
  loc5_1:
    assume !#t~switch1487;
    #t~switch1487 := #t~switch1487 || ~tmp___13~1141 == 2;
    assume !#t~switch1487;
    #t~switch1487 := #t~switch1487 || ~tmp___13~1141 == 3;
    assume #t~switch1487;
    assume ~ldv_state_variable_0 != 0;
    assume -2147483648 <= #t~nondet1505 && #t~nondet1505 <= 2147483647;
    ~tmp___16~1141 := #t~nondet1505;
    havoc #t~nondet1505;
    #t~switch1506 := ~tmp___16~1141 == 0;
    assume !#t~switch1506;
    #t~switch1506 := #t~switch1506 || ~tmp___16~1141 == 1;
    assume #t~switch1506;
    assume ~ldv_state_variable_0 == 1;
    call #t~ret1507 := b44_init();
    assume -2147483648 <= #t~ret1507 && #t~ret1507 <= 2147483647;
    ~ldv_retval_3 := #t~ret1507;
    havoc #t~ret1507;
    assume ~ldv_retval_3 == 0;
    ~ldv_state_variable_0 := 3;
    ~ldv_state_variable_4 := 1;
    call ldv_initialize_ssb_driver_4();
    ~ldv_state_variable_6 := 1;
    call ldv_initialize_ethtool_ops_6();
    assume !(~ldv_retval_3 != 0);
    goto loc4;
  loc6:
    goto loc6_0, loc6_1;
  loc6_0:
    assume #t~switch1500;
    assume ~ldv_state_variable_4 == 1;
    call #t~ret1501 := b44_init_one(~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset, ~ldvarg8~1141.base, ~ldvarg8~1141.offset);
    assume -2147483648 <= #t~ret1501 && #t~ret1501 <= 2147483647;
    ~ldv_retval_2 := #t~ret1501;
    havoc #t~ret1501;
    assume ~ldv_retval_2 == 0;
    ~ldv_state_variable_4 := 2;
    ~ref_cnt := ~ref_cnt + 1;
    goto loc4;
  loc6_1:
    assume !#t~switch1500;
    #t~switch1500 := #t~switch1500 || ~tmp___15~1141 == 1;
    goto loc7;
  loc7:
    goto loc7_0, loc7_1;
  loc7_0:
    assume #t~switch1500;
    assume ~ldv_state_variable_4 == 2;
    call #t~mem1502 := read~int(~#ldvarg7~1141.base, ~#ldvarg7~1141.offset + 0, 4);
    call #t~ret1503 := b44_suspend(~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset, #t~mem1502);
    assume -2147483648 <= #t~ret1503 && #t~ret1503 <= 2147483647;
    ~ldv_retval_1 := #t~ret1503;
    havoc #t~mem1502;
    havoc #t~ret1503;
    assume ~ldv_retval_1 == 0;
    ~ldv_state_variable_4 := 3;
    goto loc4;
  loc7_1:
    assume !#t~switch1500;
    #t~switch1500 := #t~switch1500 || ~tmp___15~1141 == 2;
    assume #t~switch1500;
    assume ~ldv_state_variable_4 == 3;
    call #t~ret1504 := b44_resume(~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset);
    return;
}

procedure main() returns (#res : int);
modifies ~ldv_state_variable_6, ~ldv_state_variable_4, ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_state_variable_3, ~ldv_state_variable_2, ~ldv_state_variable_5, ~ldv_retval_2, ~ldv_retval_1, ~ldv_retval_0, ~ldv_retval_3, ~ldv_retval_5, ~ldv_retval_4, #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset, ~b44_ethtool_ops_group1.base, ~b44_ethtool_ops_group1.offset, ~b44_ethtool_ops_group0.base, ~b44_ethtool_ops_group0.offset, ~b44_ethtool_ops_group2.base, ~b44_ethtool_ops_group2.offset, ~b44_ethtool_ops_group3.base, ~b44_ethtool_ops_group3.offset, ~b44_ethtool_ops_group4.base, ~b44_ethtool_ops_group4.offset, ~ldv_spin, ~dma_desc_sync_size, ~LDV_IN_INTERRUPT, ~ldv_irq_1_0, ~ldv_irq_2_0, ~b44_netdev_ops_group1.base, ~b44_netdev_ops_group1.offset, ~instance, ~ldv_timer_list_3.base, ~ldv_timer_list_3.offset, ~ldv_timer_state_3, ~ldv_irq_line_1_0, ~ldv_irq_data_1_0.base, ~ldv_irq_data_1_0.offset, ~ldv_irq_line_1_1, ~ldv_irq_data_1_1.base, ~ldv_irq_data_1_1.offset, ~ldv_irq_1_1, ~ldv_irq_line_1_2, ~ldv_irq_data_1_2.base, ~ldv_irq_data_1_2.offset, ~ldv_irq_1_2, ~ldv_irq_line_1_3, ~ldv_irq_data_1_3.base, ~ldv_irq_data_1_3.offset, ~ldv_irq_1_3;

implementation ssb_get_drvdata(#in~dev.base : int, #in~dev.offset : int) returns (#res.base : int, #res.offset : int){
    var #t~mem314.base : int, #t~mem314.offset : int;
    var ~dev.base : int, ~dev.offset : int;

  loc8:
    ~dev.base, ~dev.offset := #in~dev.base, #in~dev.offset;
    call #t~mem314.base, #t~mem314.offset := read~$Pointer$(~dev.base, ~dev.offset + 43, 8);
    #res.base, #res.offset := #t~mem314.base, #t~mem314.offset;
    havoc #t~mem314.base, #t~mem314.offset;
    assume true;
    return;
}

procedure ssb_get_drvdata(#in~dev.base : int, #in~dev.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation b44_init() returns (#res : int){
    var #t~ret1435 : int;
    var #t~ite1436 : int;
    var #t~ret1437 : int;
    var #t~ret1438 : int;
    var ~dma_desc_align_size~1064 : int;
    var ~tmp~1064 : int;
    var ~err~1064 : int;
    var ~__max1~1064 : int;
    var ~__max2~1064 : int;

  loc9:
    havoc ~dma_desc_align_size~1064;
    havoc ~tmp~1064;
    havoc ~err~1064;
    havoc ~__max1~1064;
    havoc ~__max2~1064;
    call #t~ret1435 := dma_get_cache_alignment();
    assume -2147483648 <= #t~ret1435 && #t~ret1435 <= 2147483647;
    ~tmp~1064 := #t~ret1435;
    havoc #t~ret1435;
    ~dma_desc_align_size~1064 := ~tmp~1064;
    ~__max1~1064 := ~dma_desc_align_size~1064;
    ~__max2~1064 := 8;
    assume ~__max1~1064 % 4294967296 > ~__max2~1064 % 4294967296;
    #t~ite1436 := ~__max1~1064;
    ~dma_desc_sync_size := (if #t~ite1436 % 4294967296 % 4294967296 <= 2147483647 then #t~ite1436 % 4294967296 % 4294967296 else #t~ite1436 % 4294967296 % 4294967296 - 4294967296);
    havoc #t~ite1436;
    call #t~ret1437 := b44_pci_init();
    assume -2147483648 <= #t~ret1437 && #t~ret1437 <= 2147483647;
    ~err~1064 := #t~ret1437;
    havoc #t~ret1437;
    assume ~err~1064 != 0;
    #res := ~err~1064;
    assume true;
    return;
}

procedure b44_init() returns (#res : int);
modifies ~dma_desc_sync_size;

implementation b44_init_rings(#in~bp.base : int, #in~bp.offset : int) returns (){
    var #t~mem755.base : int, #t~mem755.offset : int;
    var #t~memset756.base : int, #t~memset756.offset : int;
    var #t~mem757.base : int, #t~mem757.offset : int;
    var #t~memset758.base : int, #t~memset758.offset : int;
    var #t~mem759 : int;
    var #t~mem760.base : int, #t~mem760.offset : int;
    var #t~mem761.base : int, #t~mem761.offset : int;
    var #t~mem762 : int;
    var #t~mem763 : int;
    var #t~mem764.base : int, #t~mem764.offset : int;
    var #t~mem765.base : int, #t~mem765.offset : int;
    var #t~mem766 : int;
    var #t~ret767 : int;
    var #t~mem768 : int;
    var ~bp.base : int, ~bp.offset : int;
    var ~i~713 : int;
    var ~tmp~713 : int;

  loc10:
    ~bp.base, ~bp.offset := #in~bp.base, #in~bp.offset;
    havoc ~i~713;
    havoc ~tmp~713;
    call b44_free_rings(~bp.base, ~bp.offset);
    call #t~mem755.base, #t~mem755.offset := read~$Pointer$(~bp.base, ~bp.offset + 76, 8);
    call #t~memset756.base, #t~memset756.offset := #Ultimate.C_memset(#t~mem755.base, #t~mem755.offset, 0, 4096);
    havoc #t~mem755.base, #t~mem755.offset;
    havoc #t~memset756.base, #t~memset756.offset;
    call #t~mem757.base, #t~mem757.offset := read~$Pointer$(~bp.base, ~bp.offset + 84, 8);
    call #t~memset758.base, #t~memset758.offset := #Ultimate.C_memset(#t~mem757.base, #t~mem757.offset, 0, 4096);
    havoc #t~mem757.base, #t~mem757.offset;
    havoc #t~memset758.base, #t~memset758.offset;
    call #t~mem759 := read~int(~bp.base, ~bp.offset + 300, 4);
    assume !(~bitwiseAnd(#t~mem759, 536870912) % 4294967296 != 0);
    havoc #t~mem759;
    call #t~mem763 := read~int(~bp.base, ~bp.offset + 300, 4);
    assume !(~bitwiseAnd(#t~mem763, 1073741824) % 4294967296 != 0);
    havoc #t~mem763;
    ~i~713 := 0;
    call #t~mem768 := read~int(~bp.base, ~bp.offset + 840, 4);
    assume ~i~713 % 4294967296 < #t~mem768 % 4294967296;
    havoc #t~mem768;
    call #t~ret767 := b44_alloc_rx_skb(~bp.base, ~bp.offset, -1, ~i~713);
    return;
}

procedure b44_init_rings(#in~bp.base : int, #in~bp.offset : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation ldv_error() returns (){
  loc11:
    assume !false;
    goto loc12;
  loc12:
    assert false;
}

procedure ldv_error() returns ();
modifies ;

implementation b44_resume(#in~sdev.base : int, #in~sdev.offset : int) returns (#res : int){
    var #t~ret1419.base : int, #t~ret1419.offset : int;
    var #t~ret1420.base : int, #t~ret1420.offset : int;
    var #t~mem1421.base : int, #t~mem1421.offset : int;
    var #t~ret1422 : int;
    var #t~mem1423.base : int, #t~mem1423.offset : int;
    var #t~nondet1424.base : int, #t~nondet1424.offset : int;
    var #t~ret1425 : int;
    var #t~ret1426 : ~bool;
    var #t~mem1427 : int;
    var #t~ret1428 : int;
    var #t~nondet1429.base : int, #t~nondet1429.offset : int;
    var #t~ret1430 : int;
    var #t~mem1431.base : int, #t~mem1431.offset : int;
    var #t~ret1432 : int;
    var ~sdev.base : int, ~sdev.offset : int;
    var ~dev~1050.base : int, ~dev~1050.offset : int;
    var ~tmp~1050.base : int, ~tmp~1050.offset : int;
    var ~bp~1050.base : int, ~bp~1050.offset : int;
    var ~tmp___0~1050.base : int, ~tmp___0~1050.offset : int;
    var ~rc~1050 : int;
    var ~tmp___1~1050 : ~bool;
    var ~tmp___2~1050 : int;

  loc13:
    ~sdev.base, ~sdev.offset := #in~sdev.base, #in~sdev.offset;
    havoc ~dev~1050.base, ~dev~1050.offset;
    havoc ~tmp~1050.base, ~tmp~1050.offset;
    havoc ~bp~1050.base, ~bp~1050.offset;
    havoc ~tmp___0~1050.base, ~tmp___0~1050.offset;
    havoc ~rc~1050;
    havoc ~tmp___1~1050;
    havoc ~tmp___2~1050;
    call #t~ret1419.base, #t~ret1419.offset := ssb_get_drvdata(~sdev.base, ~sdev.offset);
    ~tmp~1050.base, ~tmp~1050.offset := #t~ret1419.base, #t~ret1419.offset;
    havoc #t~ret1419.base, #t~ret1419.offset;
    ~dev~1050.base, ~dev~1050.offset := ~tmp~1050.base, ~tmp~1050.offset;
    call #t~ret1420.base, #t~ret1420.offset := netdev_priv(~dev~1050.base, ~dev~1050.offset);
    ~tmp___0~1050.base, ~tmp___0~1050.offset := #t~ret1420.base, #t~ret1420.offset;
    havoc #t~ret1420.base, #t~ret1420.offset;
    ~bp~1050.base, ~bp~1050.offset := ~tmp___0~1050.base, ~tmp___0~1050.offset;
    ~rc~1050 := 0;
    call #t~mem1421.base, #t~mem1421.offset := read~$Pointer$(~sdev.base, ~sdev.offset + 24, 8);
    call #t~ret1422 := ssb_bus_powerup(#t~mem1421.base, #t~mem1421.offset, 0);
    assume -2147483648 <= #t~ret1422 && #t~ret1422 <= 2147483647;
    ~rc~1050 := #t~ret1422;
    havoc #t~mem1421.base, #t~mem1421.offset;
    havoc #t~ret1422;
    assume !(~rc~1050 != 0);
    call #t~ret1426 := netif_running(~dev~1050.base, ~dev~1050.offset);
    ~tmp___1~1050 := #t~ret1426;
    havoc #t~ret1426;
    assume ~tmp___1~1050 % 256 != 0;
    ~tmp___2~1050 := 0;
    assume !(~tmp___2~1050 != 0);
    call spin_lock_irq(~bp~1050.base, ~bp~1050.offset + 0);
    call b44_init_rings(~bp~1050.base, ~bp~1050.offset);
    return;
}

procedure b44_resume(#in~sdev.base : int, #in~sdev.offset : int) returns (#res : int);
modifies #valid, #length, ~ldv_spin, ~ldv_timer_list_3.base, ~ldv_timer_list_3.offset, ~ldv_timer_state_3, #memory_int, ~ldv_irq_line_1_0, ~ldv_irq_data_1_0.base, ~ldv_irq_data_1_0.offset, ~ldv_irq_1_0, ~ldv_irq_line_1_1, ~ldv_irq_data_1_1.base, ~ldv_irq_data_1_1.offset, ~ldv_irq_1_1, ~ldv_irq_line_1_2, ~ldv_irq_data_1_2.base, ~ldv_irq_data_1_2.offset, ~ldv_irq_1_2, ~ldv_irq_line_1_3, ~ldv_irq_data_1_3.base, ~ldv_irq_data_1_3.offset, ~ldv_irq_1_3, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation b44_suspend(#in~sdev.base : int, #in~sdev.offset : int, #in~state.event : int) returns (#res : int){
    var #t~ret1411.base : int, #t~ret1411.offset : int;
    var #t~ret1412.base : int, #t~ret1412.offset : int;
    var #t~ret1413 : ~bool;
    var #t~ret1414 : int;
    var #t~mem1415.base : int, #t~mem1415.offset : int;
    var #t~mem1416.base : int, #t~mem1416.offset : int;
    var #t~mem1417 : int;
    var #t~mem1418 : int;
    var ~sdev.base : int, ~sdev.offset : int;
    var ~state.event : int;
    var ~dev~1042.base : int, ~dev~1042.offset : int;
    var ~tmp~1042.base : int, ~tmp~1042.offset : int;
    var ~bp~1042.base : int, ~bp~1042.offset : int;
    var ~tmp___0~1042.base : int, ~tmp___0~1042.offset : int;
    var ~tmp___1~1042 : ~bool;
    var ~tmp___2~1042 : int;

  loc14:
    ~sdev.base, ~sdev.offset := #in~sdev.base, #in~sdev.offset;
    ~state.event := #in~state.event;
    havoc ~dev~1042.base, ~dev~1042.offset;
    havoc ~tmp~1042.base, ~tmp~1042.offset;
    havoc ~bp~1042.base, ~bp~1042.offset;
    havoc ~tmp___0~1042.base, ~tmp___0~1042.offset;
    havoc ~tmp___1~1042;
    havoc ~tmp___2~1042;
    call #t~ret1411.base, #t~ret1411.offset := ssb_get_drvdata(~sdev.base, ~sdev.offset);
    ~tmp~1042.base, ~tmp~1042.offset := #t~ret1411.base, #t~ret1411.offset;
    havoc #t~ret1411.base, #t~ret1411.offset;
    ~dev~1042.base, ~dev~1042.offset := ~tmp~1042.base, ~tmp~1042.offset;
    call #t~ret1412.base, #t~ret1412.offset := netdev_priv(~dev~1042.base, ~dev~1042.offset);
    ~tmp___0~1042.base, ~tmp___0~1042.offset := #t~ret1412.base, #t~ret1412.offset;
    havoc #t~ret1412.base, #t~ret1412.offset;
    ~bp~1042.base, ~bp~1042.offset := ~tmp___0~1042.base, ~tmp___0~1042.offset;
    call #t~ret1413 := netif_running(~dev~1042.base, ~dev~1042.offset);
    ~tmp___1~1042 := #t~ret1413;
    havoc #t~ret1413;
    assume !(~tmp___1~1042 % 256 != 0);
    ~tmp___2~1042 := 1;
    assume ~tmp___2~1042 != 0;
    #res := 0;
    assume true;
    return;
}

procedure b44_suspend(#in~sdev.base : int, #in~sdev.offset : int, #in~state.event : int) returns (#res : int);
modifies ~ldv_timer_state_3, ~ldv_irq_1_0, ~ldv_irq_1_1, ~ldv_irq_1_2, ~ldv_irq_1_3, ~ldv_spin, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length, #memory_int;

implementation ldv_initialize_ethtool_ops_6() returns (){
    var #t~ret1457.base : int, #t~ret1457.offset : int;
    var #t~ret1458.base : int, #t~ret1458.offset : int;
    var #t~ret1459.base : int, #t~ret1459.offset : int;
    var #t~ret1460.base : int, #t~ret1460.offset : int;
    var #t~ret1461.base : int, #t~ret1461.offset : int;
    var ~tmp~1129.base : int, ~tmp~1129.offset : int;
    var ~tmp___0~1129.base : int, ~tmp___0~1129.offset : int;
    var ~tmp___1~1129.base : int, ~tmp___1~1129.offset : int;
    var ~tmp___2~1129.base : int, ~tmp___2~1129.offset : int;
    var ~tmp___3~1129.base : int, ~tmp___3~1129.offset : int;

  loc15:
    havoc ~tmp~1129.base, ~tmp~1129.offset;
    havoc ~tmp___0~1129.base, ~tmp___0~1129.offset;
    havoc ~tmp___1~1129.base, ~tmp___1~1129.offset;
    havoc ~tmp___2~1129.base, ~tmp___2~1129.offset;
    havoc ~tmp___3~1129.base, ~tmp___3~1129.offset;
    call #t~ret1457.base, #t~ret1457.offset := ldv_zalloc(20);
    ~tmp~1129.base, ~tmp~1129.offset := #t~ret1457.base, #t~ret1457.offset;
    havoc #t~ret1457.base, #t~ret1457.offset;
    ~b44_ethtool_ops_group1.base, ~b44_ethtool_ops_group1.offset := ~tmp~1129.base, ~tmp~1129.offset;
    call #t~ret1458.base, #t~ret1458.offset := ldv_zalloc(44);
    ~tmp___0~1129.base, ~tmp___0~1129.offset := #t~ret1458.base, #t~ret1458.offset;
    havoc #t~ret1458.base, #t~ret1458.offset;
    ~b44_ethtool_ops_group0.base, ~b44_ethtool_ops_group0.offset := ~tmp___0~1129.base, ~tmp___0~1129.offset;
    call #t~ret1459.base, #t~ret1459.offset := ldv_zalloc(36);
    ~tmp___1~1129.base, ~tmp___1~1129.offset := #t~ret1459.base, #t~ret1459.offset;
    havoc #t~ret1459.base, #t~ret1459.offset;
    ~b44_ethtool_ops_group2.base, ~b44_ethtool_ops_group2.offset := ~tmp___1~1129.base, ~tmp___1~1129.offset;
    call #t~ret1460.base, #t~ret1460.offset := ldv_zalloc(16);
    ~tmp___2~1129.base, ~tmp___2~1129.offset := #t~ret1460.base, #t~ret1460.offset;
    havoc #t~ret1460.base, #t~ret1460.offset;
    ~b44_ethtool_ops_group3.base, ~b44_ethtool_ops_group3.offset := ~tmp___2~1129.base, ~tmp___2~1129.offset;
    call #t~ret1461.base, #t~ret1461.offset := ldv_zalloc(3264);
    ~tmp___3~1129.base, ~tmp___3~1129.offset := #t~ret1461.base, #t~ret1461.offset;
    havoc #t~ret1461.base, #t~ret1461.offset;
    ~b44_ethtool_ops_group4.base, ~b44_ethtool_ops_group4.offset := ~tmp___3~1129.base, ~tmp___3~1129.offset;
    assume true;
    return;
}

procedure ldv_initialize_ethtool_ops_6() returns ();
modifies ~b44_ethtool_ops_group1.base, ~b44_ethtool_ops_group1.offset, ~b44_ethtool_ops_group0.base, ~b44_ethtool_ops_group0.offset, ~b44_ethtool_ops_group2.base, ~b44_ethtool_ops_group2.offset, ~b44_ethtool_ops_group3.base, ~b44_ethtool_ops_group3.offset, ~b44_ethtool_ops_group4.base, ~b44_ethtool_ops_group4.offset, #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation b44_free_rings(#in~bp.base : int, #in~bp.offset : int) returns (){
    var #t~mem739.base : int, #t~mem739.offset : int;
    var #t~mem740.base : int, #t~mem740.offset : int;
    var #t~mem741.base : int, #t~mem741.offset : int;
    var #t~mem742.base : int, #t~mem742.offset : int;
    var #t~mem743 : int;
    var #t~mem744.base : int, #t~mem744.offset : int;
    var #t~mem746.base : int, #t~mem746.offset : int;
    var #t~mem747.base : int, #t~mem747.offset : int;
    var #t~mem748.base : int, #t~mem748.offset : int;
    var #t~mem749.base : int, #t~mem749.offset : int;
    var #t~mem750 : int;
    var #t~mem751.base : int, #t~mem751.offset : int;
    var #t~mem752 : int;
    var #t~mem753.base : int, #t~mem753.offset : int;
    var ~bp.base : int, ~bp.offset : int;
    var ~rp~703.base : int, ~rp~703.offset : int;
    var ~i~703 : int;

  loc16:
    ~bp.base, ~bp.offset := #in~bp.base, #in~bp.offset;
    havoc ~rp~703.base, ~rp~703.offset;
    havoc ~i~703;
    ~i~703 := 0;
    goto loc17;
  loc17:
    goto loc17_0, loc17_1;
  loc17_0:
    assume ~i~703 <= 511;
    call #t~mem739.base, #t~mem739.offset := read~$Pointer$(~bp.base, ~bp.offset + 108, 8);
    ~rp~703.base, ~rp~703.offset := #t~mem739.base, #t~mem739.offset + (if ~i~703 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~i~703 % 18446744073709551616 % 18446744073709551616 else ~i~703 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616) * 16;
    havoc #t~mem739.base, #t~mem739.offset;
    call #t~mem740.base, #t~mem740.offset := read~$Pointer$(~rp~703.base, ~rp~703.offset + 0, 8);
    assume (#t~mem740.base + #t~mem740.offset) % 18446744073709551616 == 0;
    havoc #t~mem740.base, #t~mem740.offset;
    ~i~703 := ~i~703 + 1;
    goto loc17;
  loc17_1:
    assume !(~i~703 <= 511);
    ~i~703 := 0;
    goto loc18;
  loc18:
    goto loc18_0, loc18_1;
  loc18_0:
    assume ~i~703 <= 511;
    call #t~mem746.base, #t~mem746.offset := read~$Pointer$(~bp.base, ~bp.offset + 116, 8);
    ~rp~703.base, ~rp~703.offset := #t~mem746.base, #t~mem746.offset + (if ~i~703 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~i~703 % 18446744073709551616 % 18446744073709551616 else ~i~703 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616) * 16;
    havoc #t~mem746.base, #t~mem746.offset;
    call #t~mem747.base, #t~mem747.offset := read~$Pointer$(~rp~703.base, ~rp~703.offset + 0, 8);
    assume (#t~mem747.base + #t~mem747.offset) % 18446744073709551616 == 0;
    havoc #t~mem747.base, #t~mem747.offset;
    ~i~703 := ~i~703 + 1;
    goto loc18;
  loc18_1:
    assume !(~i~703 <= 511);
    assume true;
    return;
}

procedure b44_free_rings(#in~bp.base : int, #in~bp.offset : int) returns ();
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;

implementation spin_lock_irq(#in~lock.base : int, #in~lock.offset : int) returns (){
    var ~lock.base : int, ~lock.offset : int;

  loc19:
    ~lock.base, ~lock.offset := #in~lock.base, #in~lock.offset;
    call ldv_spin_lock();
    call ldv_spin_lock_irq_4(~lock.base, ~lock.offset);
    assume true;
    return;
}

procedure spin_lock_irq(#in~lock.base : int, #in~lock.offset : int) returns ();
modifies ~ldv_spin;

implementation netdev_alloc_skb(#in~dev.base : int, #in~dev.offset : int, #in~length : int) returns (#res.base : int, #res.offset : int){
    var #t~ret197.base : int, #t~ret197.offset : int;
    var ~dev.base : int, ~dev.offset : int;
    var ~length : int;
    var ~tmp~212.base : int, ~tmp~212.offset : int;

  loc20:
    ~dev.base, ~dev.offset := #in~dev.base, #in~dev.offset;
    ~length := #in~length;
    havoc ~tmp~212.base, ~tmp~212.offset;
    call #t~ret197.base, #t~ret197.offset := ldv___netdev_alloc_skb_27(~dev.base, ~dev.offset, ~length, 32);
    return;
}

procedure netdev_alloc_skb(#in~dev.base : int, #in~dev.offset : int, #in~length : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation netif_running(#in~dev.base : int, #in~dev.offset : int) returns (#res : ~bool){
    var #t~ret261 : int;
    var ~dev.base : int, ~dev.offset : int;
    var ~tmp~322 : int;

  loc21:
    ~dev.base, ~dev.offset := #in~dev.base, #in~dev.offset;
    havoc ~tmp~322;
    call #t~ret261 := constant_test_bit(0, ~dev.base, ~dev.offset + 68);
    assume -2147483648 <= #t~ret261 && #t~ret261 <= 2147483647;
    ~tmp~322 := #t~ret261;
    havoc #t~ret261;
    #res := (if (if ~tmp~322 != 0 then 1 else 0) == 0 then 0 else 1);
    assume true;
    return;
}

procedure netif_running(#in~dev.base : int, #in~dev.offset : int) returns (#res : ~bool);
modifies ;

implementation netdev_priv(#in~dev.base : int, #in~dev.offset : int) returns (#res.base : int, #res.offset : int){
    var ~dev.base : int, ~dev.offset : int;

  loc22:
    ~dev.base, ~dev.offset := #in~dev.base, #in~dev.offset;
    #res.base, #res.offset := ~dev.base, ~dev.offset + 3264;
    assume true;
    return;
}

procedure netdev_priv(#in~dev.base : int, #in~dev.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation #Ultimate.C_memset(#ptr.base : int, #ptr.offset : int, #value : int, #amount : int) returns (#res.base : int, #res.offset : int){
    var #t~loopctr1545 : int;

  loc23:
    #t~loopctr1545 := 0;
    goto loc24;
  loc24:
    goto loc24_0, loc24_1;
  loc24_0:
    assume #t~loopctr1545 < #amount;
    #memory_int := #memory_int[#ptr.base,#ptr.offset + #t~loopctr1545 * 1 := #value];
    #memory_$Pointer$.base, #memory_$Pointer$.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset + #t~loopctr1545 * 1 := 0], #memory_$Pointer$.offset[#ptr.base,#ptr.offset + #t~loopctr1545 * 1 := #value % 256];
    #t~loopctr1545 := #t~loopctr1545 + 1;
    goto loc24;
  loc24_1:
    assume !(#t~loopctr1545 < #amount);
    assume #res.base == #ptr.base && #res.offset == #ptr.offset;
    return;
}

procedure #Ultimate.C_memset(#ptr.base : int, #ptr.offset : int, #value : int, #amount : int) returns (#res.base : int, #res.offset : int);
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
free ensures #res.base == #ptr.base && #res.offset == #ptr.offset;

implementation dma_get_cache_alignment() returns (#res : int){
  loc25:
    #res := 1;
    assume true;
    return;
}

procedure dma_get_cache_alignment() returns (#res : int);
modifies ;

implementation ldv_spin_lock() returns (){
  loc26:
    ~ldv_spin := 1;
    assume true;
    return;
}

procedure ldv_spin_lock() returns ();
modifies ~ldv_spin;

implementation ULTIMATE.init() returns (){
    var #t~nondet370.base : int, #t~nondet370.offset : int;
    var #t~union1542.head : int, #t~union1542.tail : int;
    var #t~union1543.__padding : [int]int, #t~union1543.dep_map.key.base : int, #t~union1543.dep_map.key.offset : int, #t~union1543.dep_map.class_cache.base : [int]int, #t~union1543.dep_map.class_cache.offset : [int]int, #t~union1543.dep_map.name.base : int, #t~union1543.dep_map.name.offset : int, #t~union1543.dep_map.cpu : int, #t~union1543.dep_map.ip : int;
    var #t~nondet1433.base : int, #t~nondet1433.offset : int;

  loc27:
    #NULL.base, #NULL.offset := 0, 0;
    #valid := #valid[0 := 0];
    ~ldv_irq_data_2_1.base, ~ldv_irq_data_2_1.offset := 0, 0;
    ~ldv_irq_1_3 := 0;
    ~ldv_irq_line_2_2 := 0;
    ~ldv_irq_data_1_1.base, ~ldv_irq_data_1_1.offset := 0, 0;
    ~ldv_irq_1_0 := 0;
    ~ldv_state_variable_6 := 0;
    ~ldv_irq_data_1_0.base, ~ldv_irq_data_1_0.offset := 0, 0;
    ~ldv_state_variable_0 := 0;
    ~ldv_state_variable_5 := 0;
    ~ldv_timer_state_3 := 0;
    ~ldv_irq_line_2_1 := 0;
    ~ldv_state_variable_2 := 0;
    ~ldv_irq_2_0 := 0;
    ~ldv_irq_data_1_3.base, ~ldv_irq_data_1_3.offset := 0, 0;
    ~ldv_irq_data_1_2.base, ~ldv_irq_data_1_2.offset := 0, 0;
    ~ldv_irq_data_2_0.base, ~ldv_irq_data_2_0.offset := 0, 0;
    ~ldv_irq_1_2 := 0;
    ~LDV_IN_INTERRUPT := 1;
    ~ldv_irq_1_1 := 0;
    ~ldv_irq_2_3 := 0;
    ~ldv_irq_data_2_3.base, ~ldv_irq_data_2_3.offset := 0, 0;
    ~ldv_irq_line_1_3 := 0;
    ~ldv_irq_2_2 := 0;
    ~ldv_irq_line_2_0 := 0;
    ~ldv_state_variable_3 := 0;
    ~ldv_irq_line_1_0 := 0;
    ~ref_cnt := 0;
    ~ldv_irq_line_1_1 := 0;
    ~ldv_irq_data_2_2.base, ~ldv_irq_data_2_2.offset := 0, 0;
    ~ldv_state_variable_1 := 0;
    ~ldv_irq_line_1_2 := 0;
    ~ldv_state_variable_4 := 0;
    ~ldv_irq_line_2_3 := 0;
    ~ldv_irq_2_1 := 0;
    ~b44_debug := -1;
    ~dma_desc_sync_size := 0;
    ~instance := 0;
    call ~#b44_gstrings.base, ~#b44_gstrings.offset := #Ultimate.alloc(1504);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 2, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 5, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 6, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 7, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 8, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 10, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 2, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 5, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 6, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 7, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 8, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 10, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 2, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 3, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 6, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 7, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 2, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 3, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 5, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 6, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 7, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 2, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 5, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 6, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 7, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 8, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 9, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 12, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 13, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 14, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 2, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 3, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 4, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 5, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 6, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 7, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 8, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 9, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 12, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 13, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 14, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 6, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 7, 1);
    call write~int(52, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 6, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 7, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 10, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 12, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 13, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 14, 1);
    call write~int(55, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 6, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 7, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 8, 1);
    call write~int(56, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 13, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 14, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 15, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 6, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 7, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 8, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 13, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 14, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 15, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 6, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 7, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 8, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 13, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 14, 1);
    call write~int(48, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 15, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 16, 1);
    call write~int(51, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 6, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 7, 1);
    call write~int(48, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 8, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 9, 1);
    call write~int(52, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 12, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 13, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 14, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 15, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 16, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 2, 1);
    call write~int(106, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 4, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 5, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 7, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 9, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 10, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 2, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 3, 1);
    call write~int(118, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 4, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 5, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 6, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 7, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 8, 1);
    call write~int(122, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 9, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 11, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 12, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 2, 1);
    call write~int(102, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 4, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 5, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 6, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 7, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 8, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 11, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 12, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 2, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 3, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 4, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 6, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 7, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 8, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 9, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 10, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 2, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 5, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 6, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 7, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 8, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 9, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 10, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 11, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 2, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 3, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 5, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 6, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 7, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 9, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 10, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 11, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 2, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 3, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 4, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 5, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 6, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 7, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 8, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 9, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 11, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 12, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 13, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 2, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 3, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 4, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 6, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 7, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 8, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 9, 1);
    call write~int(118, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 10, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 12, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 13, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 14, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 6, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 7, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 8, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 9, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 10, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 2, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 4, 1);
    call write~int(102, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 6, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 7, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 8, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 2, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 4, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 5, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 6, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 7, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 8, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 10, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 2, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 4, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 5, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 7, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 8, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 9, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 11, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 2, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 5, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 6, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 7, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 8, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 10, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 2, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 5, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 6, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 7, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 8, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 10, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 2, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 3, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 6, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 7, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 2, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 3, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 5, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 6, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 7, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 2, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 5, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 6, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 7, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 8, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 9, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 12, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 13, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 14, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 2, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 3, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 4, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 5, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 6, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 7, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 8, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 9, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 12, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 13, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 14, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 6, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 7, 1);
    call write~int(52, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 6, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 7, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 10, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 12, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 13, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 14, 1);
    call write~int(55, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 6, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 7, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 8, 1);
    call write~int(56, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 13, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 14, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 15, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 6, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 7, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 8, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 13, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 14, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 15, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 6, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 7, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 8, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 13, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 14, 1);
    call write~int(48, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 15, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 16, 1);
    call write~int(51, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 6, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 7, 1);
    call write~int(48, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 8, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 9, 1);
    call write~int(52, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 12, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 13, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 14, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 15, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 16, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 2, 1);
    call write~int(106, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 4, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 5, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 7, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 9, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 10, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 2, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 3, 1);
    call write~int(118, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 4, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 5, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 6, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 7, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 8, 1);
    call write~int(122, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 9, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 11, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 12, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 2, 1);
    call write~int(102, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 4, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 5, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 6, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 7, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 8, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 11, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 12, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 2, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 3, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 4, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 5, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 7, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 9, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 10, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 2, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 4, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 6, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 7, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 8, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 9, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 10, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 12, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 13, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 14, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 2, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 3, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 4, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 6, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 7, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 8, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 9, 1);
    call write~int(122, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 10, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 2, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 4, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 7, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 8, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 9, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 2, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 3, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 4, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 5, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 6, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 7, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 8, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 9, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 10, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 11, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 2, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 3, 1);
    call write~int(121, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 4, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 5, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 6, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 7, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 9, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 10, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 11, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 2, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 4, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 5, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 7, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 8, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 9, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 11, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 2, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 5, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 6, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 7, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 8, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 9, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 11, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 12, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 31, 1);
    ~ldv_retval_2 := 0;
    ~ldv_retval_5 := 0;
    ~ldv_retval_0 := 0;
    ~ldv_retval_4 := 0;
    ~ldv_retval_1 := 0;
    ~ldv_retval_3 := 0;
    ~ldv_spin := 0;
    ~ldv_timer_list_3.base, ~ldv_timer_list_3.offset := 0, 0;
    ~b44_ethtool_ops_group4.base, ~b44_ethtool_ops_group4.offset := 0, 0;
    ~b44_ethtool_ops_group0.base, ~b44_ethtool_ops_group0.offset := 0, 0;
    ~b44_ethtool_ops_group2.base, ~b44_ethtool_ops_group2.offset := 0, 0;
    ~b44_ethtool_ops_group3.base, ~b44_ethtool_ops_group3.offset := 0, 0;
    ~b44_ethtool_ops_group1.base, ~b44_ethtool_ops_group1.offset := 0, 0;
    ~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset := 0, 0;
    ~b44_netdev_ops_group1.base, ~b44_netdev_ops_group1.offset := 0, 0;
    call ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset := #Ultimate.alloc(128);
    call write~int(5348, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 0, 4);
    call write~int(17409, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 4, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 8, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 12, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 16, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 20, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 24, 8);
    call write~int(5348, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 0, 4);
    call write~int(17410, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 4, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 8, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 12, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 16, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 20, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 24, 8);
    call write~int(5348, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 0, 4);
    call write~int(5900, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 4, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 8, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 12, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 16, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 20, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 24, 8);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 0, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 4, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 8, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 12, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 16, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 20, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 24, 8);
    call ~#b44_pci_driver.base, ~#b44_pci_driver.offset := #Ultimate.alloc(301);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 0 + 8, 8);
    call #t~nondet370.base, #t~nondet370.offset := #Ultimate.alloc(4);
    #memory_int := #memory_int[#t~nondet370.base,#t~nondet370.offset + 0 := 98];
    #memory_int := #memory_int[#t~nondet370.base,#t~nondet370.offset + 1 := 52];
    #memory_int := #memory_int[#t~nondet370.base,#t~nondet370.offset + 2 := 52];
    #memory_int := #memory_int[#t~nondet370.base,#t~nondet370.offset + 3 := 0];
    call write~$Pointer$(#t~nondet370.base, #t~nondet370.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 16, 8);
    call write~$Pointer$(~#b44_pci_tbl.base, ~#b44_pci_tbl.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 56, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 64, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 72, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 96, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 8, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 16, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 24, 8);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 32, 1);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 33, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 41, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 49, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 57, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 65, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 73, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 81, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 89, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 97, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 105, 8);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union1542.head, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union1542.tail, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 4, 4);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union1543.__padding[0], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0, 1);
    call write~int(#t~union1543.__padding[1], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union1543.__padding[2], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[3], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[4], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[5], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[6], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[7], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[8], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[9], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[10], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[11], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[12], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[13], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[14], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[15], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[16], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[17], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[18], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[19], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[20], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[21], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[22], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1543.__padding[23], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union1543.dep_map.key.base, #t~union1543.dep_map.key.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union1543.dep_map.class_cache.base[0], #t~union1543.dep_map.class_cache.offset[0], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union1543.dep_map.class_cache.base[1], #t~union1543.dep_map.class_cache.offset[1], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union1543.dep_map.name.base, #t~union1543.dep_map.name.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union1543.dep_map.cpu, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union1543.dep_map.ip, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 68 + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 68 + 8, 8);
    havoc #t~nondet370.base, #t~nondet370.offset;
    havoc #t~union1542.head, #t~union1542.tail;
    havoc #t~union1543.__padding, #t~union1543.dep_map.key.base, #t~union1543.dep_map.key.offset, #t~union1543.dep_map.class_cache.base, #t~union1543.dep_map.class_cache.offset, #t~union1543.dep_map.name.base, #t~union1543.dep_map.name.offset, #t~union1543.dep_map.cpu, #t~union1543.dep_map.ip;
    call ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset := #Ultimate.alloc(12);
    call write~int(16963, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 0 + 0, 2);
    call write~int(2054, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 0 + 2, 2);
    call write~int(255, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 0 + 4, 1);
    call write~int(0, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 0 + 5, 1);
    call write~int(0, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 6 + 0, 2);
    call write~int(0, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 6 + 2, 2);
    call write~int(0, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 6 + 4, 1);
    call write~int(0, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 6 + 5, 1);
    call ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset := #Ultimate.alloc(376);
    call write~$Pointer$(#funAddr~b44_get_settings.base, #funAddr~b44_get_settings.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 0, 8);
    call write~$Pointer$(#funAddr~b44_set_settings.base, #funAddr~b44_set_settings.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 8, 8);
    call write~$Pointer$(#funAddr~b44_get_drvinfo.base, #funAddr~b44_get_drvinfo.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 16, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 32, 8);
    call write~$Pointer$(#funAddr~b44_get_wol.base, #funAddr~b44_get_wol.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 40, 8);
    call write~$Pointer$(#funAddr~b44_set_wol.base, #funAddr~b44_set_wol.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 48, 8);
    call write~$Pointer$(#funAddr~b44_get_msglevel.base, #funAddr~b44_get_msglevel.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 56, 8);
    call write~$Pointer$(#funAddr~b44_set_msglevel.base, #funAddr~b44_set_msglevel.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 64, 8);
    call write~$Pointer$(#funAddr~b44_nway_reset.base, #funAddr~b44_nway_reset.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 72, 8);
    call write~$Pointer$(#funAddr~ethtool_op_get_link.base, #funAddr~ethtool_op_get_link.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 96, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 104, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 112, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 120, 8);
    call write~$Pointer$(#funAddr~b44_get_ringparam.base, #funAddr~b44_get_ringparam.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 128, 8);
    call write~$Pointer$(#funAddr~b44_set_ringparam.base, #funAddr~b44_set_ringparam.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 136, 8);
    call write~$Pointer$(#funAddr~b44_get_pauseparam.base, #funAddr~b44_get_pauseparam.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 144, 8);
    call write~$Pointer$(#funAddr~b44_set_pauseparam.base, #funAddr~b44_set_pauseparam.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 152, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 160, 8);
    call write~$Pointer$(#funAddr~b44_get_strings.base, #funAddr~b44_get_strings.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 168, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 176, 8);
    call write~$Pointer$(#funAddr~b44_get_ethtool_stats.base, #funAddr~b44_get_ethtool_stats.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 184, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 192, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 200, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 208, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 216, 8);
    call write~$Pointer$(#funAddr~b44_get_sset_count.base, #funAddr~b44_get_sset_count.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 224, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 232, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 240, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 248, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 256, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 264, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 272, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 280, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 288, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 296, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 304, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 312, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 320, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 328, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 336, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 344, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 352, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 360, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 368, 8);
    call ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset := #Ultimate.alloc(480);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 8, 8);
    call write~$Pointer$(#funAddr~b44_open.base, #funAddr~b44_open.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 16, 8);
    call write~$Pointer$(#funAddr~b44_close.base, #funAddr~b44_close.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 24, 8);
    call write~$Pointer$(#funAddr~b44_start_xmit.base, #funAddr~b44_start_xmit.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 48, 8);
    call write~$Pointer$(#funAddr~b44_set_rx_mode.base, #funAddr~b44_set_rx_mode.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 56, 8);
    call write~$Pointer$(#funAddr~b44_set_mac_addr.base, #funAddr~b44_set_mac_addr.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 64, 8);
    call write~$Pointer$(#funAddr~eth_validate_addr.base, #funAddr~eth_validate_addr.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 72, 8);
    call write~$Pointer$(#funAddr~b44_ioctl.base, #funAddr~b44_ioctl.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 88, 8);
    call write~$Pointer$(#funAddr~b44_change_mtu.base, #funAddr~b44_change_mtu.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 96, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 104, 8);
    call write~$Pointer$(#funAddr~b44_tx_timeout.base, #funAddr~b44_tx_timeout.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 112, 8);
    call write~$Pointer$(#funAddr~b44_get_stats64.base, #funAddr~b44_get_stats64.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 120, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 128, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 136, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 144, 8);
    call write~$Pointer$(#funAddr~b44_poll_controller.base, #funAddr~b44_poll_controller.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 152, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 160, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 168, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 176, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 184, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 192, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 200, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 208, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 216, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 224, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 232, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 240, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 248, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 256, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 264, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 272, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 280, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 288, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 296, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 304, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 312, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 320, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 328, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 336, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 344, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 352, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 360, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 368, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 376, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 384, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 392, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 400, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 408, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 416, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 424, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 432, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 440, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 448, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 456, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 464, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 472, 8);
    call ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset := #Ultimate.alloc(169);
    call #t~nondet1433.base, #t~nondet1433.offset := #Ultimate.alloc(4);
    #memory_int := #memory_int[#t~nondet1433.base,#t~nondet1433.offset + 0 := 98];
    #memory_int := #memory_int[#t~nondet1433.base,#t~nondet1433.offset + 1 := 52];
    #memory_int := #memory_int[#t~nondet1433.base,#t~nondet1433.offset + 2 := 52];
    #memory_int := #memory_int[#t~nondet1433.base,#t~nondet1433.offset + 3 := 0];
    call write~$Pointer$(#t~nondet1433.base, #t~nondet1433.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 0, 8);
    call write~$Pointer$(~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 8, 8);
    call write~$Pointer$(#funAddr~b44_init_one.base, #funAddr~b44_init_one.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 16, 8);
    call write~$Pointer$(#funAddr~b44_remove_one.base, #funAddr~b44_remove_one.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 24, 8);
    call write~$Pointer$(#funAddr~b44_suspend.base, #funAddr~b44_suspend.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 32, 8);
    call write~$Pointer$(#funAddr~b44_resume.base, #funAddr~b44_resume.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 8, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 16, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 24, 8);
    call write~int(0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 32, 1);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 33, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 41, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 49, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 57, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 65, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 73, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 81, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 89, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 97, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 105, 8);
    havoc #t~nondet1433.base, #t~nondet1433.offset;
    assume true;
    return;
}

procedure ULTIMATE.init() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~ldv_irq_data_2_1.base, ~ldv_irq_data_2_1.offset, ~ldv_irq_1_3, ~ldv_irq_line_2_2, ~ldv_irq_data_1_1.base, ~ldv_irq_data_1_1.offset, ~ldv_irq_1_0, ~ldv_state_variable_6, ~ldv_irq_data_1_0.base, ~ldv_irq_data_1_0.offset, ~ldv_state_variable_0, ~ldv_state_variable_5, ~ldv_timer_state_3, ~ldv_irq_line_2_1, ~ldv_state_variable_2, ~ldv_irq_2_0, ~ldv_irq_data_1_3.base, ~ldv_irq_data_1_3.offset, ~ldv_irq_data_1_2.base, ~ldv_irq_data_1_2.offset, ~ldv_irq_data_2_0.base, ~ldv_irq_data_2_0.offset, ~ldv_irq_1_2, ~LDV_IN_INTERRUPT, ~ldv_irq_1_1, ~ldv_irq_2_3, ~ldv_irq_data_2_3.base, ~ldv_irq_data_2_3.offset, ~ldv_irq_line_1_3, ~ldv_irq_2_2, ~ldv_irq_line_2_0, ~ldv_state_variable_3, ~ldv_irq_line_1_0, ~ref_cnt, ~ldv_irq_line_1_1, ~ldv_irq_data_2_2.base, ~ldv_irq_data_2_2.offset, ~ldv_state_variable_1, ~ldv_irq_line_1_2, ~ldv_state_variable_4, ~ldv_irq_line_2_3, ~ldv_irq_2_1, ~b44_debug, ~dma_desc_sync_size, ~instance, ~#b44_gstrings.base, ~#b44_gstrings.offset, ~ldv_retval_2, ~ldv_retval_5, ~ldv_retval_0, ~ldv_retval_4, ~ldv_retval_1, ~ldv_retval_3, ~ldv_spin, ~ldv_timer_list_3.base, ~ldv_timer_list_3.offset, ~b44_ethtool_ops_group4.base, ~b44_ethtool_ops_group4.offset, ~b44_ethtool_ops_group0.base, ~b44_ethtool_ops_group0.offset, ~b44_ethtool_ops_group2.base, ~b44_ethtool_ops_group2.offset, ~b44_ethtool_ops_group3.base, ~b44_ethtool_ops_group3.offset, ~b44_ethtool_ops_group1.base, ~b44_ethtool_ops_group1.offset, ~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset, ~b44_netdev_ops_group1.base, ~b44_netdev_ops_group1.offset, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length;

implementation ldv_zalloc(#in~size : int) returns (#res.base : int, #res.offset : int){
    var #t~nondet41 : int;
    var #t~malloc42.base : int, #t~malloc42.offset : int;
    var ~size : int;
    var ~p~77.base : int, ~p~77.offset : int;
    var ~tmp~77.base : int, ~tmp~77.offset : int;
    var ~tmp___0~77 : int;

  loc28:
    ~size := #in~size;
    havoc ~p~77.base, ~p~77.offset;
    havoc ~tmp~77.base, ~tmp~77.offset;
    havoc ~tmp___0~77;
    assume -2147483648 <= #t~nondet41 && #t~nondet41 <= 2147483647;
    ~tmp___0~77 := #t~nondet41;
    havoc #t~nondet41;
    assume ~tmp___0~77 != 0;
    #res.base, #res.offset := 0, 0;
    assume true;
    return;
}

procedure ldv_zalloc(#in~size : int) returns (#res.base : int, #res.offset : int);
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation constant_test_bit(#in~nr : int, #in~addr.base : int, #in~addr.offset : int) returns (#res : int){
    var #t~mem0 : int;
    var ~nr : int;
    var ~addr.base : int, ~addr.offset : int;

  loc29:
    ~nr := #in~nr;
    ~addr.base, ~addr.offset := #in~addr.base, #in~addr.offset;
    call #t~mem0 := read~int(~addr.base, ~addr.offset + (if ~shiftRight(~nr, 6) % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~shiftRight(~nr, 6) % 18446744073709551616 % 18446744073709551616 else ~shiftRight(~nr, 6) % 18446744073709551616 % 18446744073709551616 - 18446744073709551616) * 8, 8);
    #res := ~bitwiseAnd((if ~shiftRight(#t~mem0, ~bitwiseAnd((if ~nr % 4294967296 <= 2147483647 then ~nr % 4294967296 else ~nr % 4294967296 - 4294967296), 63)) % 18446744073709551616 % 4294967296 <= 2147483647 then ~shiftRight(#t~mem0, ~bitwiseAnd((if ~nr % 4294967296 <= 2147483647 then ~nr % 4294967296 else ~nr % 4294967296 - 4294967296), 63)) % 18446744073709551616 % 4294967296 else ~shiftRight(#t~mem0, ~bitwiseAnd((if ~nr % 4294967296 <= 2147483647 then ~nr % 4294967296 else ~nr % 4294967296 - 4294967296), 63)) % 18446744073709551616 % 4294967296 - 4294967296), 1);
    havoc #t~mem0;
    assume true;
    return;
}

procedure constant_test_bit(#in~nr : int, #in~addr.base : int, #in~addr.offset : int) returns (#res : int);
modifies ;

implementation ULTIMATE.start() returns (){
    var #t~ret1544 : int;

  loc30:
    call ULTIMATE.init();
    call #t~ret1544 := main();
    return;
}

procedure ULTIMATE.start() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~ldv_irq_data_2_1.base, ~ldv_irq_data_2_1.offset, ~ldv_irq_1_3, ~ldv_irq_line_2_2, ~ldv_irq_data_1_1.base, ~ldv_irq_data_1_1.offset, ~ldv_irq_1_0, ~ldv_state_variable_6, ~ldv_irq_data_1_0.base, ~ldv_irq_data_1_0.offset, ~ldv_state_variable_0, ~ldv_state_variable_5, ~ldv_timer_state_3, ~ldv_irq_line_2_1, ~ldv_state_variable_2, ~ldv_irq_2_0, ~ldv_irq_data_1_3.base, ~ldv_irq_data_1_3.offset, ~ldv_irq_data_1_2.base, ~ldv_irq_data_1_2.offset, ~ldv_irq_data_2_0.base, ~ldv_irq_data_2_0.offset, ~ldv_irq_1_2, ~LDV_IN_INTERRUPT, ~ldv_irq_1_1, ~ldv_irq_2_3, ~ldv_irq_data_2_3.base, ~ldv_irq_data_2_3.offset, ~ldv_irq_line_1_3, ~ldv_irq_2_2, ~ldv_irq_line_2_0, ~ldv_state_variable_3, ~ldv_irq_line_1_0, ~ref_cnt, ~ldv_irq_line_1_1, ~ldv_irq_data_2_2.base, ~ldv_irq_data_2_2.offset, ~ldv_state_variable_1, ~ldv_irq_line_1_2, ~ldv_state_variable_4, ~ldv_irq_line_2_3, ~ldv_irq_2_1, ~b44_debug, ~dma_desc_sync_size, ~instance, ~#b44_gstrings.base, ~#b44_gstrings.offset, ~ldv_retval_2, ~ldv_retval_5, ~ldv_retval_0, ~ldv_retval_4, ~ldv_retval_1, ~ldv_retval_3, ~ldv_spin, ~ldv_timer_list_3.base, ~ldv_timer_list_3.offset, ~b44_ethtool_ops_group4.base, ~b44_ethtool_ops_group4.offset, ~b44_ethtool_ops_group0.base, ~b44_ethtool_ops_group0.offset, ~b44_ethtool_ops_group2.base, ~b44_ethtool_ops_group2.offset, ~b44_ethtool_ops_group3.base, ~b44_ethtool_ops_group3.offset, ~b44_ethtool_ops_group1.base, ~b44_ethtool_ops_group1.offset, ~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset, ~b44_netdev_ops_group1.base, ~b44_netdev_ops_group1.offset, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_state_variable_6, ~ldv_state_variable_4, ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_state_variable_3, ~ldv_state_variable_2, ~ldv_state_variable_5, ~ldv_retval_2, ~ldv_retval_1, ~ldv_retval_0, ~ldv_retval_3, ~ldv_retval_5, ~ldv_retval_4;
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset, ~b44_ethtool_ops_group1.base, ~b44_ethtool_ops_group1.offset, ~b44_ethtool_ops_group0.base, ~b44_ethtool_ops_group0.offset, ~b44_ethtool_ops_group2.base, ~b44_ethtool_ops_group2.offset, ~b44_ethtool_ops_group3.base, ~b44_ethtool_ops_group3.offset, ~b44_ethtool_ops_group4.base, ~b44_ethtool_ops_group4.offset, ~ldv_state_variable_5, ~ldv_spin, ~dma_desc_sync_size, ~LDV_IN_INTERRUPT, ~ldv_irq_1_0, ~ldv_irq_2_0, ~b44_netdev_ops_group1.base, ~b44_netdev_ops_group1.offset, ~instance, ~ldv_timer_list_3.base, ~ldv_timer_list_3.offset, ~ldv_timer_state_3, ~ldv_irq_line_1_0, ~ldv_irq_data_1_0.base, ~ldv_irq_data_1_0.offset, ~ldv_irq_line_1_1, ~ldv_irq_data_1_1.base, ~ldv_irq_data_1_1.offset, ~ldv_irq_1_1, ~ldv_irq_line_1_2, ~ldv_irq_data_1_2.base, ~ldv_irq_data_1_2.offset, ~ldv_irq_1_2, ~ldv_irq_line_1_3, ~ldv_irq_data_1_3.base, ~ldv_irq_data_1_3.offset, ~ldv_irq_1_3, ~ldv_state_variable_6, ~ldv_state_variable_4, ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_state_variable_3, ~ldv_state_variable_2, ~ldv_retval_2, ~ldv_retval_1, ~ldv_retval_0, ~ldv_retval_3, ~ldv_retval_5, ~ldv_retval_4;

implementation ldv___netdev_alloc_skb_27(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int, #in~ldv_func_arg2 : int, #in~flags : int) returns (#res.base : int, #res.offset : int){
    var #t~ret1531.base : int, #t~ret1531.offset : int;
    var ~ldv_func_arg1.base : int, ~ldv_func_arg1.offset : int;
    var ~ldv_func_arg2 : int;
    var ~flags : int;
    var ~tmp~1294.base : int, ~tmp~1294.offset : int;

  loc31:
    ~ldv_func_arg1.base, ~ldv_func_arg1.offset := #in~ldv_func_arg1.base, #in~ldv_func_arg1.offset;
    ~ldv_func_arg2 := #in~ldv_func_arg2;
    ~flags := #in~flags;
    havoc ~tmp~1294.base, ~tmp~1294.offset;
    call ldv_check_alloc_flags(~flags);
    return;
}

procedure ldv___netdev_alloc_skb_27(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int, #in~ldv_func_arg2 : int, #in~flags : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation ldv_check_alloc_flags(#in~flags : int) returns (){
    var ~flags : int;

  loc32:
    ~flags := #in~flags;
    assume !(~ldv_spin == 0 || ~bitwiseAnd(~flags, 16) % 4294967296 == 0);
    call ldv_error();
    return;
}

procedure ldv_check_alloc_flags(#in~flags : int) returns ();
modifies ;

implementation b44_pci_init() returns (#res : int){
    var #t~ret1434 : int;
    var ~err~1060 : int;

  loc33:
    havoc ~err~1060;
    ~err~1060 := 0;
    call #t~ret1434 := ssb_pcihost_register(~#b44_pci_driver.base, ~#b44_pci_driver.offset);
    assume -2147483648 <= #t~ret1434 && #t~ret1434 <= 2147483647;
    ~err~1060 := #t~ret1434;
    havoc #t~ret1434;
    #res := ~err~1060;
    assume true;
    return;
}

procedure b44_pci_init() returns (#res : int);
modifies ;

implementation b44_init_one(#in~sdev.base : int, #in~sdev.offset : int, #in~ent.base : int, #in~ent.offset : int) returns (#res : int){
    var #t~nondet1338.base : int, #t~nondet1338.offset : int;
    var #t~ret1339 : int;
    var #t~ret1340.base : int, #t~ret1340.offset : int;
    var #t~mem1342.base : int, #t~mem1342.offset : int;
    var #t~mem1344 : int;
    var #t~ret1345.base : int, #t~ret1345.offset : int;
    var #t~ret1349 : ~u32;
    var #t~ret1351.base : int, #t~ret1351.offset : int;
    var #t~nondet1352.base : int, #t~nondet1352.offset : int;
    var #t~mem1357 : int;
    var #t~mem1360.base : int, #t~mem1360.offset : int;
    var #t~ret1361 : int;
    var #t~mem1362.base : int, #t~mem1362.offset : int;
    var #t~nondet1363.base : int, #t~nondet1363.offset : int;
    var #t~ret1364 : int;
    var #t~mem1365.base : int, #t~mem1365.offset : int;
    var #t~ret1366 : int;
    var #t~mem1367.base : int, #t~mem1367.offset : int;
    var #t~nondet1368.base : int, #t~nondet1368.offset : int;
    var #t~ret1369 : int;
    var #t~ret1370 : int;
    var #t~mem1371.base : int, #t~mem1371.offset : int;
    var #t~nondet1372.base : int, #t~nondet1372.offset : int;
    var #t~ret1373 : int;
    var #t~mem1374 : int;
    var #t~mem1375.base : int, #t~mem1375.offset : int;
    var #t~nondet1376.base : int, #t~nondet1376.offset : int;
    var #t~ret1377 : int;
    var #t~mem1381 : int;
    var #t~mem1385 : int;
    var #t~mem1387 : int;
    var #t~ret1389 : int;
    var #t~mem1390.base : int, #t~mem1390.offset : int;
    var #t~nondet1391.base : int, #t~nondet1391.offset : int;
    var #t~ret1392 : int;
    var #t~ret1393 : int;
    var #t~mem1394.base : int, #t~mem1394.offset : int;
    var #t~nondet1395.base : int, #t~nondet1395.offset : int;
    var #t~ret1396 : int;
    var #t~mem1397 : int;
    var #t~ret1398 : int;
    var #t~mem1399.base : int, #t~mem1399.offset : int;
    var #t~nondet1400.base : int, #t~nondet1400.offset : int;
    var #t~ret1401 : int;
    var #t~nondet1402.base : int, #t~nondet1402.offset : int;
    var #t~ret1403 : int;
    var #t~mem1404.base : int, #t~mem1404.offset : int;
    var #t~ret1405 : int;
    var ~sdev.base : int, ~sdev.offset : int;
    var ~ent.base : int, ~ent.offset : int;
    var ~dev~1016.base : int, ~dev~1016.offset : int;
    var ~bp~1016.base : int, ~bp~1016.offset : int;
    var ~err~1016 : int;
    var ~__print_once~1016 : ~bool;
    var ~tmp~1016.base : int, ~tmp~1016.offset : int;
    var ~#__key~1016.base : int, ~#__key~1016.offset : int;
    var ~tmp___0~1016 : int;

  loc34:
    ~sdev.base, ~sdev.offset := #in~sdev.base, #in~sdev.offset;
    ~ent.base, ~ent.offset := #in~ent.base, #in~ent.offset;
    havoc ~dev~1016.base, ~dev~1016.offset;
    havoc ~bp~1016.base, ~bp~1016.offset;
    havoc ~err~1016;
    havoc ~__print_once~1016;
    havoc ~tmp~1016.base, ~tmp~1016.offset;
    call ~#__key~1016.base, ~#__key~1016.offset := #Ultimate.alloc(8);
    havoc ~tmp___0~1016;
    ~instance := ~instance + 1;
    assume !(~__print_once~1016 % 256 == 0);
    call #t~ret1340.base, #t~ret1340.offset := alloc_etherdev_mqs(952, 1, 1);
    ~dev~1016.base, ~dev~1016.offset := #t~ret1340.base, #t~ret1340.offset;
    havoc #t~ret1340.base, #t~ret1340.offset;
    assume (~dev~1016.base + ~dev~1016.offset) % 18446744073709551616 == 0;
    ~err~1016 := -12;
    #res := ~err~1016;
    call ULTIMATE.dealloc(~#__key~1016.base, ~#__key~1016.offset);
    havoc ~#__key~1016.base, ~#__key~1016.offset;
    assume true;
    return;
}

procedure b44_init_one(#in~sdev.base : int, #in~sdev.offset : int, #in~ent.base : int, #in~ent.offset : int) returns (#res : int);
modifies ~instance, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int, #valid, #length, ~ldv_state_variable_5, ~b44_netdev_ops_group1.base, ~b44_netdev_ops_group1.offset;

procedure debug_dma_sync_single_for_device(#in~91.base : int, #in~91.offset : int, #in~92 : int, #in~93 : int, #in~94 : int) returns ();
modifies ;

procedure ldv_ndo_uninit_5() returns (#res : int);
modifies ;

procedure msleep(#in~51 : int) returns ();
modifies ;

procedure mdiobus_free(#in~354.base : int, #in~354.offset : int) returns ();
modifies ;

procedure pci_unregister_driver(#in~311.base : int, #in~311.offset : int) returns ();
modifies ;

procedure __alloc_skb(#in~185 : int, #in~186 : int, #in~187 : int, #in~188 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure mdiobus_unregister(#in~353.base : int, #in~353.offset : int) returns ();
modifies ;

procedure debug_dma_sync_single_for_cpu(#in~87.base : int, #in~87.offset : int, #in~88 : int, #in~89 : int, #in~90 : int) returns ();
modifies ;

procedure netif_carrier_off(#in~269.base : int, #in~269.offset : int) returns ();
modifies ;

procedure disable_irq(#in~218 : int) returns ();
modifies ;

procedure ethtool_op_get_link(#in~208.base : int, #in~208.offset : int) returns (#res : ~u32);
modifies ;

procedure phy_ethtool_gset(#in~364.base : int, #in~364.offset : int, #in~365.base : int, #in~365.offset : int) returns (#res : int);
modifies ;

procedure free_irq(#in~216 : int, #in~217.base : int, #in~217.offset : int) returns ();
modifies ;

procedure dma_set_mask(#in~149.base : int, #in~149.offset : int, #in~150 : int) returns (#res : int);
modifies ;

procedure __might_sleep(#in~2.base : int, #in~2.offset : int, #in~3 : int, #in~4 : int) returns ();
modifies ;

procedure ssb_device_enable(#in~322.base : int, #in~322.offset : int, #in~323 : int) returns ();
modifies ;

procedure __memcpy(#in~11.base : int, #in~11.offset : int, #in~12.base : int, #in~12.offset : int, #in~13 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure phy_mii_ioctl(#in~366.base : int, #in~366.offset : int, #in~367.base : int, #in~367.offset : int, #in~368 : int) returns (#res : int);
modifies ;

procedure dql_reset(#in~60.base : int, #in~60.offset : int) returns ();
modifies ;

procedure ssb_device_is_enabled(#in~321.base : int, #in~321.offset : int) returns (#res : int);
modifies ;

procedure netif_carrier_on(#in~268.base : int, #in~268.offset : int) returns ();
modifies ;

procedure ldv_ndo_init_5() returns (#res : int);
modifies ;

procedure ssb_device_disable(#in~324.base : int, #in~324.offset : int, #in~325 : int) returns ();
modifies ;

procedure netdev_err(#in~274.base : int, #in~274.offset : int, #in~275.base : int, #in~275.offset : int) returns (#res : int);
modifies ;

procedure ssb_bus_powerup(#in~348.base : int, #in~348.offset : int, #in~349 : int) returns (#res : int);
modifies ;

procedure ssb_driver_unregister(#in~317.base : int, #in~317.offset : int) returns ();
modifies ;

procedure debug_dma_unmap_page(#in~74.base : int, #in~74.offset : int, #in~75 : int, #in~76 : int, #in~77 : int, #in~78 : int) returns ();
modifies ;

procedure __netif_schedule(#in~235.base : int, #in~235.offset : int) returns ();
modifies ;

procedure debug_dma_alloc_coherent(#in~79.base : int, #in~79.offset : int, #in~80 : int, #in~81 : int, #in~82.base : int, #in~82.offset : int) returns ();
modifies ;

procedure round_jiffies(#in~35 : int) returns (#res : int);
modifies ;

procedure __kmalloc(#in~38 : int, #in~39 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure register_netdev(#in~272.base : int, #in~272.offset : int) returns (#res : int);
modifies ;

procedure _raw_spin_unlock_irq(#in~28.base : int, #in~28.offset : int) returns ();
modifies ;

procedure ssb_dma_translation(#in~340.base : int, #in~340.offset : int) returns (#res : ~u32);
modifies ;

procedure read~$Pointer$(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value.base : int, #value.offset : int);
ensures #value.base == #memory_$Pointer$.base[#ptr.base,#ptr.offset] && #value.offset == #memory_$Pointer$.offset[#ptr.base,#ptr.offset];

procedure add_timer(#in~33.base : int, #in~33.offset : int) returns ();
modifies ;

procedure strlcpy(#in~17.base : int, #in~17.offset : int, #in~18.base : int, #in~18.offset : int, #in~19 : int) returns (#res : int);
modifies ;

procedure dma_supported(#in~147.base : int, #in~147.offset : int, #in~148 : int) returns (#res : int);
modifies ;

procedure eth_validate_addr(#in~286.base : int, #in~286.offset : int) returns (#res : int);
modifies ;

procedure __VERIFIER_nondet_u32() returns (#res : ~u32);
modifies ;

procedure _raw_spin_unlock(#in~27.base : int, #in~27.offset : int) returns ();
modifies ;

procedure debug_dma_mapping_error(#in~72.base : int, #in~72.offset : int, #in~73 : int) returns ();
modifies ;

procedure ULTIMATE.dealloc(~addr.base : int, ~addr.offset : int) returns ();
free ensures #valid == old(#valid)[~addr.base := 0];
modifies #valid;

procedure netif_device_attach(#in~271.base : int, #in~271.offset : int) returns ();
modifies ;

procedure generic_mii_ioctl(#in~280.base : int, #in~280.offset : int, #in~281.base : int, #in~281.offset : int, #in~282 : int, #in~283.base : int, #in~283.offset : int) returns (#res : int);
modifies ;

procedure phy_start(#in~360.base : int, #in~360.offset : int) returns ();
modifies ;

procedure printk(#in~1.base : int, #in~1.offset : int) returns (#res : int);
modifies ;

procedure calloc(#in~nmemb : int, #in~size : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure dev_err(#in~46.base : int, #in~46.offset : int, #in~47.base : int, #in~47.offset : int) returns (#res : int);
modifies ;

procedure netdev_warn(#in~276.base : int, #in~276.offset : int, #in~277.base : int, #in~277.offset : int) returns (#res : int);
modifies ;

procedure netif_device_detach(#in~270.base : int, #in~270.offset : int) returns ();
modifies ;

procedure netif_receive_skb(#in~266.base : int, #in~266.offset : int) returns (#res : int);
modifies ;

procedure alloc_etherdev_mqs(#in~287 : int, #in~288 : int, #in~289 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure netdev_info(#in~278.base : int, #in~278.offset : int, #in~279.base : int, #in~279.offset : int) returns (#res : int);
modifies ;

procedure __ssb_driver_register(#in~315.base : int, #in~315.offset : int, #in~316.base : int, #in~316.offset : int) returns (#res : int);
modifies ;

procedure debug_dma_free_coherent(#in~83.base : int, #in~83.offset : int, #in~84 : int, #in~85.base : int, #in~85.offset : int, #in~86 : int) returns ();
modifies ;

procedure netif_napi_add(#in~230.base : int, #in~230.offset : int, #in~231.base : int, #in~231.offset : int, #in~232.base : int, #in~232.offset : int, #in~233 : int) returns ();
modifies ;

procedure phy_ethtool_sset(#in~362.base : int, #in~362.offset : int, #in~363.base : int, #in~363.offset : int) returns (#res : int);
modifies ;

procedure __dev_kfree_skb_any(#in~264.base : int, #in~264.offset : int, #in~265 : int) returns ();
modifies ;

procedure __VERIFIER_nondet_int() returns (#res : int);
modifies ;

procedure __napi_schedule(#in~220.base : int, #in~220.offset : int) returns ();
modifies ;

procedure __raw_spin_lock_init(#in~22.base : int, #in~22.offset : int, #in~23.base : int, #in~23.offset : int, #in~24.base : int, #in~24.offset : int) returns ();
modifies ;

procedure phy_print_status(#in~369.base : int, #in~369.offset : int) returns ();
modifies ;

procedure _dev_info(#in~48.base : int, #in~48.offset : int, #in~49.base : int, #in~49.offset : int) returns (#res : int);
modifies ;

procedure #Ultimate.alloc(~size : int) returns (#res.base : int, #res.offset : int);
ensures old(#valid)[#res.base] == 0;
ensures #valid == old(#valid)[#res.base := 1];
ensures #res.offset == 0;
ensures #res.base != 0;
ensures #length == old(#length)[#res.base := ~size];
modifies #valid, #length;

procedure ULTIMATE.free(~addr.base : int, ~addr.offset : int) returns ();
free requires ~addr.offset == 0;
free requires ~addr.base == 0 || #valid[~addr.base] == 1;
free ensures (if ~addr.base == 0 then #valid == old(#valid) else #valid == old(#valid)[~addr.base := 0]);
modifies #valid;

procedure read~int(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value : int);
ensures #value == #memory_int[#ptr.base,#ptr.offset];

procedure ldv_initialize() returns ();
modifies ;

procedure __phys_addr(#in~10 : int) returns (#res : int);
modifies ;

procedure free_netdev(#in~234.base : int, #in~234.offset : int) returns ();
modifies ;

procedure del_timer_sync(#in~34.base : int, #in~34.offset : int) returns (#res : int);
modifies ;

procedure pci_bus_write_config_word(#in~299.base : int, #in~299.offset : int, #in~300 : int, #in~301 : int, #in~302 : int) returns (#res : int);
modifies ;

procedure ssb_clockspeed(#in~320.base : int, #in~320.offset : int) returns (#res : ~u32);
modifies ;

procedure dql_completed(#in~58.base : int, #in~58.offset : int, #in~59 : int) returns ();
modifies ;

procedure kfree(#in~37.base : int, #in~37.offset : int) returns ();
modifies ;

procedure __netdev_alloc_skb(#in~194.base : int, #in~194.offset : int, #in~195 : int, #in~196 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure write~int(#value : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #value];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset]] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #memory_$Pointer$.offset[#ptr.base,#ptr.offset]];

procedure skb_pull(#in~192.base : int, #in~192.offset : int, #in~193 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __VERIFIER_error() returns ();
modifies ;

procedure napi_complete(#in~224.base : int, #in~224.offset : int) returns ();
modifies ;

procedure net_ratelimit() returns (#res : int);
modifies ;

procedure eth_type_trans(#in~284.base : int, #in~284.offset : int, #in~285.base : int, #in~285.offset : int) returns (#res : ~__be16);
modifies ;

procedure ssb_bus_may_powerdown(#in~347.base : int, #in~347.offset : int) returns (#res : int);
modifies ;

procedure enable_irq(#in~219 : int) returns ();
modifies ;

procedure __dev_kfree_skb_irq(#in~262.base : int, #in~262.offset : int, #in~263 : int) returns ();
modifies ;

procedure ssb_pcicore_dev_irqvecs_enable(#in~318.base : int, #in~318.offset : int, #in~319.base : int, #in~319.offset : int) returns (#res : int);
modifies ;

procedure __VERIFIER_assume(#in~expression : int) returns ();
modifies ;

procedure __const_udelay(#in~50 : int) returns ();
modifies ;

procedure write~$Pointer$(#value.base : int, #value.offset : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #memory_int[#ptr.base,#ptr.offset]];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #value.base] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #value.offset];

procedure _raw_spin_unlock_irqrestore(#in~29.base : int, #in~29.offset : int, #in~30 : int) returns ();
modifies ;

procedure mdiobus_register(#in~352.base : int, #in~352.offset : int) returns (#res : int);
modifies ;

procedure ssb_pcihost_register(#in~341.base : int, #in~341.offset : int) returns (#res : int);
modifies ;

procedure phy_connect(#in~355.base : int, #in~355.offset : int, #in~356.base : int, #in~356.offset : int, #in~357.base : int, #in~357.offset : int, #in~358 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure mod_timer(#in~31.base : int, #in~31.offset : int, #in~32 : int) returns (#res : int);
modifies ;

procedure memset(#in~14.base : int, #in~14.offset : int, #in~15 : int, #in~16 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure phy_disconnect(#in~359.base : int, #in~359.offset : int) returns ();
modifies ;

procedure debug_dma_map_page(#in~65.base : int, #in~65.offset : int, #in~66.base : int, #in~66.offset : int, #in~67 : int, #in~68 : int, #in~69 : int, #in~70 : int, #in~71 : int) returns ();
modifies ;

procedure pci_set_power_state(#in~309.base : int, #in~309.offset : int, #in~310 : int) returns (#res : int);
modifies ;

procedure warn_slowpath_null(#in~8.base : int, #in~8.offset : int, #in~9 : int) returns ();
modifies ;

procedure skb_put(#in~190.base : int, #in~190.offset : int, #in~191 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure _raw_spin_lock_irq(#in~26.base : int, #in~26.offset : int) returns ();
modifies ;

procedure snprintf(#in~5.base : int, #in~5.offset : int, #in~6 : int, #in~7.base : int, #in~7.offset : int) returns (#res : int);
modifies ;

procedure _raw_spin_lock(#in~25.base : int, #in~25.offset : int) returns ();
modifies ;

procedure mdiobus_alloc_size(#in~350 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure pci_bus_read_config_word(#in~295.base : int, #in~295.offset : int, #in~296 : int, #in~297 : int, #in~298.base : int, #in~298.offset : int) returns (#res : int);
modifies ;

procedure request_threaded_irq(#in~209 : int, #in~210.base : int, #in~210.offset : int, #in~211.base : int, #in~211.offset : int, #in~212 : int, #in~213.base : int, #in~213.offset : int, #in~214.base : int, #in~214.offset : int) returns (#res : int);
modifies ;

procedure ldv_check_final_state() returns ();
modifies ;

procedure unregister_netdev(#in~273.base : int, #in~273.offset : int) returns ();
modifies ;

procedure phy_stop(#in~361.base : int, #in~361.offset : int) returns ();
modifies ;

