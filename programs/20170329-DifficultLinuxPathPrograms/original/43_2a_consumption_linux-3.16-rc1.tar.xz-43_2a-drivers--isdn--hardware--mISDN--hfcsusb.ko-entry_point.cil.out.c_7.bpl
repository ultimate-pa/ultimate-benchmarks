type STRUCT~perf_event;
type STRUCT~optimistic_spin_queue;
type STRUCT~tvec_base;
type STRUCT~workqueue_struct;
type STRUCT~uprobe;
type STRUCT~return_instance;
type STRUCT~xol_area;
type STRUCT~slab;
type STRUCT~anon_vma;
type STRUCT~mempolicy;
type STRUCT~linux_binfmt;
type STRUCT~kioctx_table;
type STRUCT~mmu_notifier_mm;
type STRUCT~kernfs_open_node;
type STRUCT~kernfs_iattrs;
type STRUCT~module_param_attrs;
type STRUCT~module_sect_attrs;
type STRUCT~module_notes_attrs;
type STRUCT~tracepoint;
type STRUCT~ftrace_event_call;
type STRUCT~kmem_cache_node;
type STRUCT~mem_cgroup;
type STRUCT~user_namespace;
type STRUCT~pinctrl;
type STRUCT~pinctrl_state;
type STRUCT~iommu_ops;
type STRUCT~subsys_private;
type STRUCT~driver_private;
type STRUCT~acpi_device;
type STRUCT~device_private;
type STRUCT~dma_coherent_mem;
type STRUCT~cma;
type STRUCT~device_node;
type STRUCT~iommu_group;
type STRUCT~vfsmount;
type STRUCT~pid_namespace;
type STRUCT~writeback_control;
type STRUCT~iov_iter;
type STRUCT~swap_info_struct;
type STRUCT~backing_dev_info;
type STRUCT~hd_struct;
type STRUCT~gendisk;
type STRUCT~request_queue;
type STRUCT~pipe_inode_info;
type STRUCT~cdev;
type STRUCT~posix_acl;
type STRUCT~files_struct;
type STRUCT~nlm_lockowner;
type STRUCT~nfs4_lock_state;
type STRUCT~export_operations;
type STRUCT~xattr_handler;
type STRUCT~mtd_info;
type STRUCT~poll_table_struct;
type STRUCT~nameidata;
type STRUCT~kstatfs;
type STRUCT~sem_undo_list;
type STRUCT~seccomp_filter;
type STRUCT~assoc_array_ptr;
type STRUCT~key_type;
type STRUCT~key_user;
type STRUCT~tty_struct;
type STRUCT~autogroup;
type STRUCT~tty_audit_buf;
type STRUCT~cfs_rq;
type STRUCT~rt_rq;
type STRUCT~sched_class;
type STRUCT~task_group;
type STRUCT~fs_struct;
type STRUCT~audit_context;
type STRUCT~rt_mutex_waiter;
type STRUCT~bio_list;
type STRUCT~blk_plug;
type STRUCT~reclaim_state;
type STRUCT~io_context;
type STRUCT~robust_list_head;
type STRUCT~futex_pi_state;
type STRUCT~perf_event_context;
type STRUCT~numa_group;
type STRUCT~ftrace_ret_stack;
type STRUCT~ep_device;
type STRUCT~mon_bus;
type STRUCT~usb_tt;
type STRUCT~wusb_dev;
type STRUCT~sec_path;
type STRUCT~prot_inuse;
type STRUCT~proc_dir_entry;
type STRUCT~ipv4_devconf;
type STRUCT~fib_rules_ops;
type STRUCT~fib_table;
type STRUCT~inet_peer_base;
type STRUCT~tcpm_hash_bucket;
type STRUCT~xt_table;
type STRUCT~ipv6_devconf;
type STRUCT~rt6_info;
type STRUCT~rt6_statistics;
type STRUCT~fib6_table;
type STRUCT~sctp_mib;
type STRUCT~nf_logger;
type STRUCT~ebt_table;
type STRUCT~ip_conntrack_stat;
type STRUCT~nf_ct_event_notifier;
type STRUCT~nf_exp_event_notifier;
type STRUCT~nft_af_info;
type STRUCT~net_generic;
type STRUCT~netns_ipvs;
type STRUCT~mii_bus;
type STRUCT~cgroup_taskset;
type STRUCT~uts_namespace;
type STRUCT~ipc_namespace;
type STRUCT~mnt_namespace;
type STRUCT~Qdisc;
type STRUCT~netpoll_info;
type STRUCT~pcpu_lstats;
type STRUCT~pcpu_dstats;
type STRUCT~pcpu_vstats;
type STRUCT~iw_handler_def;
type STRUCT~iw_public_data;
type STRUCT~forwarding_accel_ops;
type STRUCT~vlan_info;
type STRUCT~tipc_bearer;
type STRUCT~in_device;
type STRUCT~dn_dev;
type STRUCT~inet6_dev;
type STRUCT~wireless_dev;
type STRUCT~cpu_rmap;
type STRUCT~garp_port;
type STRUCT~mrp_port;
type STRUCT~phy_device;
type STRUCT~kioctx;
type STRUCT~eventfd_ctx;
type STRUCT~rtable;
type STRUCT~dn_route;
type STRUCT~xfrm_state;
type STRUCT~xfrm_policy;
type STRUCT~inet_hashinfo;
type STRUCT~udp_table;
type STRUCT~raw_hashinfo;
type STRUCT~request_sock_ops;
type STRUCT~timewait_sock_ops;
type STRUCT~layer1;
type ~__s8 = int;
type ~__u8 = int;
type ~__s16 = int;
type ~__u16 = int;
type ~__s32 = int;
type ~__u32 = int;
type ~__u64 = int;
type ~s8 = int;
type ~u8 = int;
type ~s16 = int;
type ~u16 = int;
type ~s32 = int;
type ~u32 = int;
type ~s64 = int;
type ~u64 = int;
type ~__kernel_long_t = int;
type ~__kernel_ulong_t = int;
type ~__kernel_pid_t = int;
type ~__kernel_uid32_t = int;
type ~__kernel_gid32_t = int;
type ~__kernel_loff_t = int;
type ~__kernel_timer_t = int;
type ~__kernel_clockid_t = int;
type ~umode_t = int;
type ~bool = int;
type ~u_char = int;
type ~u_int = int;
type ~u_long = int;
type ~sector_t = int;
type ~blkcnt_t = int;
type ~gfp_t = int;
type ~fmode_t = int;
type ~oom_flags_t = int;
type ~pteval_t = int;
type ~pgdval_t = int;
type ~pgprotval_t = int;
type ~kernel_ulong_t = int;
type ~qsize_t = int;
type ~cputime_t = int;
type ~__kernel_sa_family_t = int;
type ~sk_buff_data_t = int;
type ~ldv_func_ret_type___2 = int;
type ~__kernel_size_t = ~__kernel_ulong_t;
type ~__kernel_ssize_t = ~__kernel_long_t;
type ~__kernel_time_t = ~__kernel_long_t;
type ~__kernel_clock_t = ~__kernel_long_t;
type ~__le16 = ~__u16;
type ~__be16 = ~__u16;
type ~__le32 = ~__u32;
type ~__be32 = ~__u32;
type ~__wsum = ~__u32;
type ~__kernel_dev_t = ~__u32;
type ~dev_t = ~__kernel_dev_t;
type ~pid_t = ~__kernel_pid_t;
type ~clockid_t = ~__kernel_clockid_t;
type ~uid_t = ~__kernel_uid32_t;
type ~gid_t = ~__kernel_gid32_t;
type ~loff_t = ~__kernel_loff_t;
type ~size_t = ~__kernel_size_t;
type ~ssize_t = ~__kernel_ssize_t;
type ~time_t = ~__kernel_time_t;
type ~int32_t = ~__s32;
type ~uint8_t = ~__u8;
type ~uint32_t = ~__u32;
type ~uint64_t = ~__u64;
type ~dma_addr_t = ~u64;
type ~__ticket_t = ~u16;
type ~__ticketpair_t = ~u32;
type ~Elf64_Addr = ~__u64;
type ~Elf64_Half = ~__u16;
type ~Elf64_Word = ~__u32;
type ~Elf64_Xword = ~__u64;
type ~projid_t = ~__kernel_uid32_t;
type ~key_serial_t = ~int32_t;
type ~key_perm_t = ~uint32_t;
type ~sa_family_t = ~__kernel_sa_family_t;
type ~socket_state = int;
type ~dma_cookie_t = ~s32;
type ~netdev_features_t = ~u64;
type ~compat_long_t = ~s32;
type ~compat_uptr_t = ~u32;
type ~netdev_tx_t = int;
type ~rx_handler_result_t = int;
type ~__portpair = ~__u32;
type ~__addrpair = ~__u64;
const #funAddr~hfc_l1callback.base : int;
const #funAddr~hfc_l1callback.offset : int;
const #funAddr~rx_iso_complete.base : int;
const #funAddr~rx_iso_complete.offset : int;
const #funAddr~tx_iso_complete.base : int;
const #funAddr~tx_iso_complete.offset : int;
const #funAddr~rx_int_complete.base : int;
const #funAddr~rx_int_complete.offset : int;
const #funAddr~ctrl_complete.base : int;
const #funAddr~ctrl_complete.offset : int;
const #funAddr~ph_state.base : int;
const #funAddr~ph_state.offset : int;
const #funAddr~hfcusb_l2l1D.base : int;
const #funAddr~hfcusb_l2l1D.offset : int;
const #funAddr~hfc_dctrl.base : int;
const #funAddr~hfc_dctrl.offset : int;
const #funAddr~hfcusb_l2l1B.base : int;
const #funAddr~hfcusb_l2l1B.offset : int;
const #funAddr~hfc_bctrl.base : int;
const #funAddr~hfc_bctrl.offset : int;
const #funAddr~hfcsusb_probe.base : int;
const #funAddr~hfcsusb_probe.offset : int;
const #funAddr~hfcsusb_disconnect.base : int;
const #funAddr~hfcsusb_disconnect.offset : int;
const ~rpm_status~RPM_ACTIVE : int;
const ~rpm_status~RPM_RESUMING : int;
const ~rpm_status~RPM_SUSPENDED : int;
const ~rpm_status~RPM_SUSPENDING : int;
const ~rpm_request~RPM_REQ_NONE : int;
const ~rpm_request~RPM_REQ_IDLE : int;
const ~rpm_request~RPM_REQ_SUSPEND : int;
const ~rpm_request~RPM_REQ_AUTOSUSPEND : int;
const ~rpm_request~RPM_REQ_RESUME : int;
const ~uprobe_task_state~UTASK_RUNNING : int;
const ~uprobe_task_state~UTASK_SSTEP : int;
const ~uprobe_task_state~UTASK_SSTEP_ACK : int;
const ~uprobe_task_state~UTASK_SSTEP_TRAPPED : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NONE : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NET : int;
const ~kobj_ns_type~KOBJ_NS_TYPES : int;
const ~module_state~MODULE_STATE_LIVE : int;
const ~module_state~MODULE_STATE_COMING : int;
const ~module_state~MODULE_STATE_GOING : int;
const ~module_state~MODULE_STATE_UNFORMED : int;
const ~usb_device_speed~USB_SPEED_UNKNOWN : int;
const ~usb_device_speed~USB_SPEED_LOW : int;
const ~usb_device_speed~USB_SPEED_FULL : int;
const ~usb_device_speed~USB_SPEED_HIGH : int;
const ~usb_device_speed~USB_SPEED_WIRELESS : int;
const ~usb_device_speed~USB_SPEED_SUPER : int;
const ~usb_device_state~USB_STATE_NOTATTACHED : int;
const ~usb_device_state~USB_STATE_ATTACHED : int;
const ~usb_device_state~USB_STATE_POWERED : int;
const ~usb_device_state~USB_STATE_RECONNECTING : int;
const ~usb_device_state~USB_STATE_UNAUTHENTICATED : int;
const ~usb_device_state~USB_STATE_DEFAULT : int;
const ~usb_device_state~USB_STATE_ADDRESS : int;
const ~usb_device_state~USB_STATE_CONFIGURED : int;
const ~usb_device_state~USB_STATE_SUSPENDED : int;
const ~hrtimer_restart~HRTIMER_NORESTART : int;
const ~hrtimer_restart~HRTIMER_RESTART : int;
const ~pid_type~PIDTYPE_PID : int;
const ~pid_type~PIDTYPE_PGID : int;
const ~pid_type~PIDTYPE_SID : int;
const ~pid_type~PIDTYPE_MAX : int;
const ~migrate_mode~MIGRATE_ASYNC : int;
const ~migrate_mode~MIGRATE_SYNC_LIGHT : int;
const ~migrate_mode~MIGRATE_SYNC : int;
const ~quota_type~USRQUOTA : int;
const ~quota_type~GRPQUOTA : int;
const ~quota_type~PRJQUOTA : int;
const ~usb_interface_condition~USB_INTERFACE_UNBOUND : int;
const ~usb_interface_condition~USB_INTERFACE_BINDING : int;
const ~usb_interface_condition~USB_INTERFACE_BOUND : int;
const ~usb_interface_condition~USB_INTERFACE_UNBINDING : int;
const ~usb_device_removable~USB_DEVICE_REMOVABLE_UNKNOWN : int;
const ~usb_device_removable~USB_DEVICE_REMOVABLE : int;
const ~usb_device_removable~USB_DEVICE_FIXED : int;
const ~ldv_21067~SS_FREE : int;
const ~ldv_21067~SS_UNCONNECTED : int;
const ~ldv_21067~SS_CONNECTING : int;
const ~ldv_21067~SS_CONNECTED : int;
const ~ldv_21067~SS_DISCONNECTING : int;
const ~dma_data_direction~DMA_BIDIRECTIONAL : int;
const ~dma_data_direction~DMA_TO_DEVICE : int;
const ~dma_data_direction~DMA_FROM_DEVICE : int;
const ~dma_data_direction~DMA_NONE : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_RESUME_LATENCY : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_LATENCY_TOLERANCE : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_FLAGS : int;
const ~pm_qos_type~PM_QOS_UNITIALIZED : int;
const ~pm_qos_type~PM_QOS_MAX : int;
const ~pm_qos_type~PM_QOS_MIN : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_INACTIVE : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_ACTIVE : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_ON : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_OFF : int;
const ~netdev_tx~__NETDEV_TX_MIN : int;
const ~netdev_tx~NETDEV_TX_OK : int;
const ~netdev_tx~NETDEV_TX_BUSY : int;
const ~netdev_tx~NETDEV_TX_LOCKED : int;
const ~rx_handler_result~RX_HANDLER_CONSUMED : int;
const ~rx_handler_result~RX_HANDLER_ANOTHER : int;
const ~rx_handler_result~RX_HANDLER_EXACT : int;
const ~rx_handler_result~RX_HANDLER_PASS : int;
axiom #funAddr~hfc_l1callback.base == -1 && #funAddr~hfc_l1callback.offset == 0;
axiom #funAddr~rx_iso_complete.base == -1 && #funAddr~rx_iso_complete.offset == 1;
axiom #funAddr~tx_iso_complete.base == -1 && #funAddr~tx_iso_complete.offset == 2;
axiom #funAddr~rx_int_complete.base == -1 && #funAddr~rx_int_complete.offset == 3;
axiom #funAddr~ctrl_complete.base == -1 && #funAddr~ctrl_complete.offset == 4;
axiom #funAddr~ph_state.base == -1 && #funAddr~ph_state.offset == 5;
axiom #funAddr~hfcusb_l2l1D.base == -1 && #funAddr~hfcusb_l2l1D.offset == 6;
axiom #funAddr~hfc_dctrl.base == -1 && #funAddr~hfc_dctrl.offset == 7;
axiom #funAddr~hfcusb_l2l1B.base == -1 && #funAddr~hfcusb_l2l1B.offset == 8;
axiom #funAddr~hfc_bctrl.base == -1 && #funAddr~hfc_bctrl.offset == 9;
axiom #funAddr~hfcsusb_probe.base == -1 && #funAddr~hfcsusb_probe.offset == 10;
axiom #funAddr~hfcsusb_disconnect.base == -1 && #funAddr~hfcsusb_disconnect.offset == 11;
axiom ~rpm_status~RPM_ACTIVE == 0;
axiom ~rpm_status~RPM_RESUMING == 1;
axiom ~rpm_status~RPM_SUSPENDED == 2;
axiom ~rpm_status~RPM_SUSPENDING == 3;
axiom ~rpm_request~RPM_REQ_NONE == 0;
axiom ~rpm_request~RPM_REQ_IDLE == 1;
axiom ~rpm_request~RPM_REQ_SUSPEND == 2;
axiom ~rpm_request~RPM_REQ_AUTOSUSPEND == 3;
axiom ~rpm_request~RPM_REQ_RESUME == 4;
axiom ~uprobe_task_state~UTASK_RUNNING == 0;
axiom ~uprobe_task_state~UTASK_SSTEP == 1;
axiom ~uprobe_task_state~UTASK_SSTEP_ACK == 2;
axiom ~uprobe_task_state~UTASK_SSTEP_TRAPPED == 3;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NONE == 0;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NET == 1;
axiom ~kobj_ns_type~KOBJ_NS_TYPES == 2;
axiom ~module_state~MODULE_STATE_LIVE == 0;
axiom ~module_state~MODULE_STATE_COMING == 1;
axiom ~module_state~MODULE_STATE_GOING == 2;
axiom ~module_state~MODULE_STATE_UNFORMED == 3;
axiom ~usb_device_speed~USB_SPEED_UNKNOWN == 0;
axiom ~usb_device_speed~USB_SPEED_LOW == 1;
axiom ~usb_device_speed~USB_SPEED_FULL == 2;
axiom ~usb_device_speed~USB_SPEED_HIGH == 3;
axiom ~usb_device_speed~USB_SPEED_WIRELESS == 4;
axiom ~usb_device_speed~USB_SPEED_SUPER == 5;
axiom ~usb_device_state~USB_STATE_NOTATTACHED == 0;
axiom ~usb_device_state~USB_STATE_ATTACHED == 1;
axiom ~usb_device_state~USB_STATE_POWERED == 2;
axiom ~usb_device_state~USB_STATE_RECONNECTING == 3;
axiom ~usb_device_state~USB_STATE_UNAUTHENTICATED == 4;
axiom ~usb_device_state~USB_STATE_DEFAULT == 5;
axiom ~usb_device_state~USB_STATE_ADDRESS == 6;
axiom ~usb_device_state~USB_STATE_CONFIGURED == 7;
axiom ~usb_device_state~USB_STATE_SUSPENDED == 8;
axiom ~hrtimer_restart~HRTIMER_NORESTART == 0;
axiom ~hrtimer_restart~HRTIMER_RESTART == 1;
axiom ~pid_type~PIDTYPE_PID == 0;
axiom ~pid_type~PIDTYPE_PGID == 1;
axiom ~pid_type~PIDTYPE_SID == 2;
axiom ~pid_type~PIDTYPE_MAX == 3;
axiom ~migrate_mode~MIGRATE_ASYNC == 0;
axiom ~migrate_mode~MIGRATE_SYNC_LIGHT == 1;
axiom ~migrate_mode~MIGRATE_SYNC == 2;
axiom ~quota_type~USRQUOTA == 0;
axiom ~quota_type~GRPQUOTA == 1;
axiom ~quota_type~PRJQUOTA == 2;
axiom ~usb_interface_condition~USB_INTERFACE_UNBOUND == 0;
axiom ~usb_interface_condition~USB_INTERFACE_BINDING == 1;
axiom ~usb_interface_condition~USB_INTERFACE_BOUND == 2;
axiom ~usb_interface_condition~USB_INTERFACE_UNBINDING == 3;
axiom ~usb_device_removable~USB_DEVICE_REMOVABLE_UNKNOWN == 0;
axiom ~usb_device_removable~USB_DEVICE_REMOVABLE == 1;
axiom ~usb_device_removable~USB_DEVICE_FIXED == 2;
axiom ~ldv_21067~SS_FREE == 0;
axiom ~ldv_21067~SS_UNCONNECTED == 1;
axiom ~ldv_21067~SS_CONNECTING == 2;
axiom ~ldv_21067~SS_CONNECTED == 3;
axiom ~ldv_21067~SS_DISCONNECTING == 4;
axiom ~dma_data_direction~DMA_BIDIRECTIONAL == 0;
axiom ~dma_data_direction~DMA_TO_DEVICE == 1;
axiom ~dma_data_direction~DMA_FROM_DEVICE == 2;
axiom ~dma_data_direction~DMA_NONE == 3;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_RESUME_LATENCY == 1;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_LATENCY_TOLERANCE == 2;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_FLAGS == 3;
axiom ~pm_qos_type~PM_QOS_UNITIALIZED == 0;
axiom ~pm_qos_type~PM_QOS_MAX == 1;
axiom ~pm_qos_type~PM_QOS_MIN == 2;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_INACTIVE == 0;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_ACTIVE == 1;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_ON == 2;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_OFF == 3;
axiom ~netdev_tx~__NETDEV_TX_MIN == -2147483648;
axiom ~netdev_tx~NETDEV_TX_OK == 0;
axiom ~netdev_tx~NETDEV_TX_BUSY == 16;
axiom ~netdev_tx~NETDEV_TX_LOCKED == 32;
axiom ~rx_handler_result~RX_HANDLER_CONSUMED == 0;
axiom ~rx_handler_result~RX_HANDLER_ANOTHER == 1;
axiom ~rx_handler_result~RX_HANDLER_EXACT == 2;
axiom ~rx_handler_result~RX_HANDLER_PASS == 3;
function { :overapproximation "shiftRight" } ~shiftRight(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseAnd" } ~bitwiseAnd(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "shiftLeft" } ~shiftLeft(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseOr" } ~bitwiseOr(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseComplement" } ~bitwiseComplement(in0 : int) returns (out : int);
var ~ldv_state_variable_1 : int;

var ~usb_counter : int;

var ~ref_cnt : int;

var ~ldv_state_variable_0 : int;

var ~iso_packets : [int]int;

var ~#validconf.base : int, ~#validconf.offset : int;

var ~conf_str.base : [int]int, ~conf_str.offset : [int]int;

var ~HFC_TE_LAYER1_STATES.base : [int]int, ~HFC_TE_LAYER1_STATES.offset : [int]int;

var ~HFC_NT_LAYER1_STATES.base : [int]int, ~HFC_NT_LAYER1_STATES.offset : [int]int;

var ~debug : int;

var ~poll : int;

var ~hfcsusb_cnt : int;

var ~ldv_retval_0 : int;

var ~ldv_retval_1 : int;

var ~ldv_spin : int;

var ~#__this_module.base : int, ~#__this_module.offset : int;

var ~system_wq.base : int, ~system_wq.offset : int;

var ~hfcsusb_drv_group1.base : int, ~hfcsusb_drv_group1.offset : int;

var ~#urb_errlist.base : int, ~#urb_errlist.offset : int;

var ~#__constr_expr_0.base : int, ~#__constr_expr_0.offset : int;

var ~#__constr_expr_1.base : int, ~#__constr_expr_1.offset : int;

var ~#__constr_expr_2.base : int, ~#__constr_expr_2.offset : int;

var ~#__constr_expr_3.base : int, ~#__constr_expr_3.offset : int;

var ~#__constr_expr_4.base : int, ~#__constr_expr_4.offset : int;

var ~#__constr_expr_5.base : int, ~#__constr_expr_5.offset : int;

var ~#__constr_expr_6.base : int, ~#__constr_expr_6.offset : int;

var ~#__constr_expr_7.base : int, ~#__constr_expr_7.offset : int;

var ~#__constr_expr_8.base : int, ~#__constr_expr_8.offset : int;

var ~#__constr_expr_9.base : int, ~#__constr_expr_9.offset : int;

var ~#__constr_expr_10.base : int, ~#__constr_expr_10.offset : int;

var ~#__constr_expr_11.base : int, ~#__constr_expr_11.offset : int;

var ~#__constr_expr_12.base : int, ~#__constr_expr_12.offset : int;

var ~#hfcsusb_idtab.base : int, ~#hfcsusb_idtab.offset : int;

var ~#HFClist.base : int, ~#HFClist.offset : int;

var ~#HFClock.base : int, ~#HFClock.offset : int;

var ~#hfcsusb_drv.base : int, ~#hfcsusb_drv.offset : int;

var #NULL.base : int, #NULL.offset : int;

var #valid : [int]int;

var #length : [int]int;

var #memory_int : [int,int]int;

var #memory_$Pointer$.base : [int,int]int, #memory_$Pointer$.offset : [int,int]int;

implementation hfcsusb_drv_init() returns (#res : int){
    var #t~nondet1172.base : int, #t~nondet1172.offset : int;
    var #t~ret1173 : int;
    var ~tmp~756 : int;

  loc0:
    havoc ~tmp~756;
    call #t~nondet1172.base, #t~nondet1172.offset := #Ultimate.alloc(8);
    call #t~ret1173 := ldv_usb_register_driver_42(~#hfcsusb_drv.base, ~#hfcsusb_drv.offset, ~#__this_module.base, ~#__this_module.offset, #t~nondet1172.base, #t~nondet1172.offset);
    assume -2147483648 <= #t~ret1173 && #t~ret1173 <= 2147483647;
    ~tmp~756 := #t~ret1173;
    havoc #t~nondet1172.base, #t~nondet1172.offset;
    havoc #t~ret1173;
    #res := ~tmp~756;
    assume true;
    return;
}

procedure hfcsusb_drv_init() returns (#res : int);
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~hfcsusb_drv_group1.base, ~hfcsusb_drv_group1.offset, ~ldv_state_variable_1, ~usb_counter;

implementation ULTIMATE.init() returns (){
    var #t~nondet0.base : int, #t~nondet0.offset : int;
    var #t~nondet1.base : int, #t~nondet1.offset : int;
    var #t~nondet2.base : int, #t~nondet2.offset : int;
    var #t~nondet3.base : int, #t~nondet3.offset : int;
    var #t~nondet4.base : int, #t~nondet4.offset : int;
    var #t~nondet5.base : int, #t~nondet5.offset : int;
    var #t~nondet6.base : int, #t~nondet6.offset : int;
    var #t~nondet7.base : int, #t~nondet7.offset : int;
    var #t~nondet8.base : int, #t~nondet8.offset : int;
    var #t~nondet9.base : int, #t~nondet9.offset : int;
    var #t~nondet10.base : int, #t~nondet10.offset : int;
    var #t~nondet11.base : int, #t~nondet11.offset : int;
    var #t~nondet12.base : int, #t~nondet12.offset : int;
    var #t~nondet13.base : int, #t~nondet13.offset : int;
    var #t~nondet14.base : int, #t~nondet14.offset : int;
    var #t~nondet15.base : int, #t~nondet15.offset : int;
    var #t~nondet16.base : int, #t~nondet16.offset : int;
    var #t~nondet17.base : int, #t~nondet17.offset : int;
    var #t~nondet180.base : int, #t~nondet180.offset : int;
    var #t~nondet181.base : int, #t~nondet181.offset : int;
    var #t~nondet182.base : int, #t~nondet182.offset : int;
    var #t~nondet183.base : int, #t~nondet183.offset : int;
    var #t~nondet184.base : int, #t~nondet184.offset : int;
    var #t~nondet185.base : int, #t~nondet185.offset : int;
    var #t~nondet186.base : int, #t~nondet186.offset : int;
    var #t~nondet187.base : int, #t~nondet187.offset : int;
    var #t~nondet188.base : int, #t~nondet188.offset : int;
    var #t~nondet189.base : int, #t~nondet189.offset : int;
    var #t~nondet190.base : int, #t~nondet190.offset : int;
    var #t~nondet191.base : int, #t~nondet191.offset : int;
    var #t~nondet192.base : int, #t~nondet192.offset : int;
    var #t~nondet193.base : int, #t~nondet193.offset : int;
    var #t~nondet198.base : int, #t~nondet198.offset : int;
    var #t~nondet199.base : int, #t~nondet199.offset : int;
    var #t~nondet200.base : int, #t~nondet200.offset : int;
    var #t~nondet201.base : int, #t~nondet201.offset : int;
    var #t~nondet202.base : int, #t~nondet202.offset : int;
    var #t~nondet203.base : int, #t~nondet203.offset : int;
    var #t~nondet204.base : int, #t~nondet204.offset : int;
    var #t~nondet205.base : int, #t~nondet205.offset : int;
    var #t~nondet206.base : int, #t~nondet206.offset : int;
    var #t~nondet207.base : int, #t~nondet207.offset : int;
    var #t~nondet208.base : int, #t~nondet208.offset : int;
    var #t~nondet209.base : int, #t~nondet209.offset : int;
    var #t~nondet210.base : int, #t~nondet210.offset : int;
    var #t~union1195.head : int, #t~union1195.tail : int;
    var #t~nondet211.base : int, #t~nondet211.offset : int;
    var #t~nondet1171.base : int, #t~nondet1171.offset : int;
    var #t~union1196.head : int, #t~union1196.tail : int;
    var #t~union1197.__padding : [int]int, #t~union1197.dep_map.key.base : int, #t~union1197.dep_map.key.offset : int, #t~union1197.dep_map.class_cache.base : [int]int, #t~union1197.dep_map.class_cache.offset : [int]int, #t~union1197.dep_map.name.base : int, #t~union1197.dep_map.name.offset : int, #t~union1197.dep_map.cpu : int, #t~union1197.dep_map.ip : int;

  loc1:
    #NULL.base, #NULL.offset := 0, 0;
    #valid := #valid[0 := 0];
    ~ldv_state_variable_1 := 0;
    ~usb_counter := 0;
    ~ref_cnt := 0;
    ~ldv_state_variable_0 := 0;
    ~iso_packets := ~iso_packets[0 := 8];
    ~iso_packets := ~iso_packets[1 := 8];
    ~iso_packets := ~iso_packets[2 := 8];
    ~iso_packets := ~iso_packets[3 := 8];
    ~iso_packets := ~iso_packets[4 := 8];
    ~iso_packets := ~iso_packets[5 := 8];
    ~iso_packets := ~iso_packets[6 := 8];
    ~iso_packets := ~iso_packets[7 := 8];
    call ~#validconf.base, ~#validconf.offset := #Ultimate.alloc(380);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 0 + 0, 4);
    call write~int(5, ~#validconf.base, ~#validconf.offset + 0 + 4, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 0 + 8, 4);
    call write~int(5, ~#validconf.base, ~#validconf.offset + 0 + 12, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 0 + 16, 4);
    call write~int(5, ~#validconf.base, ~#validconf.offset + 0 + 20, 4);
    call write~int(2, ~#validconf.base, ~#validconf.offset + 0 + 24, 4);
    call write~int(5, ~#validconf.base, ~#validconf.offset + 0 + 28, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 0 + 32, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 0 + 36, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 0 + 40, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 0 + 44, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 0 + 48, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 0 + 52, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 0 + 56, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 0 + 60, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 0 + 64, 4);
    call write~int(2, ~#validconf.base, ~#validconf.offset + 0 + 68, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 0 + 72, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 76 + 0, 4);
    call write~int(5, ~#validconf.base, ~#validconf.offset + 76 + 4, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 76 + 8, 4);
    call write~int(5, ~#validconf.base, ~#validconf.offset + 76 + 12, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 76 + 16, 4);
    call write~int(5, ~#validconf.base, ~#validconf.offset + 76 + 20, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 76 + 24, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 76 + 28, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 76 + 32, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 76 + 36, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 76 + 40, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 76 + 44, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 76 + 48, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 76 + 52, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 76 + 56, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 76 + 60, 4);
    call write~int(2, ~#validconf.base, ~#validconf.offset + 76 + 64, 4);
    call write~int(2, ~#validconf.base, ~#validconf.offset + 76 + 68, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 76 + 72, 4);
    call write~int(2, ~#validconf.base, ~#validconf.offset + 152 + 0, 4);
    call write~int(2, ~#validconf.base, ~#validconf.offset + 152 + 4, 4);
    call write~int(2, ~#validconf.base, ~#validconf.offset + 152 + 8, 4);
    call write~int(2, ~#validconf.base, ~#validconf.offset + 152 + 12, 4);
    call write~int(2, ~#validconf.base, ~#validconf.offset + 152 + 16, 4);
    call write~int(2, ~#validconf.base, ~#validconf.offset + 152 + 20, 4);
    call write~int(2, ~#validconf.base, ~#validconf.offset + 152 + 24, 4);
    call write~int(2, ~#validconf.base, ~#validconf.offset + 152 + 28, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 152 + 32, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 152 + 36, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 152 + 40, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 152 + 44, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 152 + 48, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 152 + 52, 4);
    call write~int(2, ~#validconf.base, ~#validconf.offset + 152 + 56, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 152 + 60, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 152 + 64, 4);
    call write~int(2, ~#validconf.base, ~#validconf.offset + 152 + 68, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 152 + 72, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 228 + 0, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 228 + 4, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 228 + 8, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 228 + 12, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 228 + 16, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 228 + 20, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 228 + 24, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 228 + 28, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 228 + 32, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 228 + 36, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 228 + 40, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 228 + 44, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 228 + 48, 4);
    call write~int(3, ~#validconf.base, ~#validconf.offset + 228 + 52, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 228 + 56, 4);
    call write~int(1, ~#validconf.base, ~#validconf.offset + 228 + 60, 4);
    call write~int(4, ~#validconf.base, ~#validconf.offset + 228 + 64, 4);
    call write~int(2, ~#validconf.base, ~#validconf.offset + 228 + 68, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 228 + 72, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 0, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 4, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 8, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 12, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 16, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 20, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 24, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 28, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 32, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 36, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 40, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 44, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 48, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 52, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 56, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 60, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 64, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 68, 4);
    call write~int(0, ~#validconf.base, ~#validconf.offset + 304 + 72, 4);
    call #t~nondet0.base, #t~nondet0.offset := #Ultimate.alloc(32);
    ~conf_str.base, ~conf_str.offset := ~conf_str.base[0 := #t~nondet0.base], ~conf_str.offset[0 := #t~nondet0.offset];
    call #t~nondet1.base, #t~nondet1.offset := #Ultimate.alloc(32);
    ~conf_str.base, ~conf_str.offset := ~conf_str.base[1 := #t~nondet1.base], ~conf_str.offset[1 := #t~nondet1.offset];
    call #t~nondet2.base, #t~nondet2.offset := #Ultimate.alloc(31);
    ~conf_str.base, ~conf_str.offset := ~conf_str.base[2 := #t~nondet2.base], ~conf_str.offset[2 := #t~nondet2.offset];
    call #t~nondet3.base, #t~nondet3.offset := #Ultimate.alloc(31);
    ~conf_str.base, ~conf_str.offset := ~conf_str.base[3 := #t~nondet3.base], ~conf_str.offset[3 := #t~nondet3.offset];
    havoc #t~nondet0.base, #t~nondet0.offset;
    havoc #t~nondet1.base, #t~nondet1.offset;
    havoc #t~nondet2.base, #t~nondet2.offset;
    havoc #t~nondet3.base, #t~nondet3.offset;
    call #t~nondet4.base, #t~nondet4.offset := #Ultimate.alloc(14);
    ~HFC_TE_LAYER1_STATES.base, ~HFC_TE_LAYER1_STATES.offset := ~HFC_TE_LAYER1_STATES.base[0 := #t~nondet4.base], ~HFC_TE_LAYER1_STATES.offset[0 := #t~nondet4.offset];
    call #t~nondet5.base, #t~nondet5.offset := #Ultimate.alloc(14);
    ~HFC_TE_LAYER1_STATES.base, ~HFC_TE_LAYER1_STATES.offset := ~HFC_TE_LAYER1_STATES.base[1 := #t~nondet5.base], ~HFC_TE_LAYER1_STATES.offset[1 := #t~nondet5.offset];
    call #t~nondet6.base, #t~nondet6.offset := #Ultimate.alloc(16);
    ~HFC_TE_LAYER1_STATES.base, ~HFC_TE_LAYER1_STATES.offset := ~HFC_TE_LAYER1_STATES.base[2 := #t~nondet6.base], ~HFC_TE_LAYER1_STATES.offset[2 := #t~nondet6.offset];
    call #t~nondet7.base, #t~nondet7.offset := #Ultimate.alloc(20);
    ~HFC_TE_LAYER1_STATES.base, ~HFC_TE_LAYER1_STATES.offset := ~HFC_TE_LAYER1_STATES.base[3 := #t~nondet7.base], ~HFC_TE_LAYER1_STATES.offset[3 := #t~nondet7.offset];
    call #t~nondet8.base, #t~nondet8.offset := #Ultimate.alloc(24);
    ~HFC_TE_LAYER1_STATES.base, ~HFC_TE_LAYER1_STATES.offset := ~HFC_TE_LAYER1_STATES.base[4 := #t~nondet8.base], ~HFC_TE_LAYER1_STATES.offset[4 := #t~nondet8.offset];
    call #t~nondet9.base, #t~nondet9.offset := #Ultimate.alloc(26);
    ~HFC_TE_LAYER1_STATES.base, ~HFC_TE_LAYER1_STATES.offset := ~HFC_TE_LAYER1_STATES.base[5 := #t~nondet9.base], ~HFC_TE_LAYER1_STATES.offset[5 := #t~nondet9.offset];
    call #t~nondet10.base, #t~nondet10.offset := #Ultimate.alloc(21);
    ~HFC_TE_LAYER1_STATES.base, ~HFC_TE_LAYER1_STATES.offset := ~HFC_TE_LAYER1_STATES.base[6 := #t~nondet10.base], ~HFC_TE_LAYER1_STATES.offset[6 := #t~nondet10.offset];
    call #t~nondet11.base, #t~nondet11.offset := #Ultimate.alloc(18);
    ~HFC_TE_LAYER1_STATES.base, ~HFC_TE_LAYER1_STATES.offset := ~HFC_TE_LAYER1_STATES.base[7 := #t~nondet11.base], ~HFC_TE_LAYER1_STATES.offset[7 := #t~nondet11.offset];
    call #t~nondet12.base, #t~nondet12.offset := #Ultimate.alloc(21);
    ~HFC_TE_LAYER1_STATES.base, ~HFC_TE_LAYER1_STATES.offset := ~HFC_TE_LAYER1_STATES.base[8 := #t~nondet12.base], ~HFC_TE_LAYER1_STATES.offset[8 := #t~nondet12.offset];
    havoc #t~nondet4.base, #t~nondet4.offset;
    havoc #t~nondet5.base, #t~nondet5.offset;
    havoc #t~nondet6.base, #t~nondet6.offset;
    havoc #t~nondet7.base, #t~nondet7.offset;
    havoc #t~nondet8.base, #t~nondet8.offset;
    havoc #t~nondet9.base, #t~nondet9.offset;
    havoc #t~nondet10.base, #t~nondet10.offset;
    havoc #t~nondet11.base, #t~nondet11.offset;
    havoc #t~nondet12.base, #t~nondet12.offset;
    call #t~nondet13.base, #t~nondet13.offset := #Ultimate.alloc(14);
    ~HFC_NT_LAYER1_STATES.base, ~HFC_NT_LAYER1_STATES.offset := ~HFC_NT_LAYER1_STATES.base[0 := #t~nondet13.base], ~HFC_NT_LAYER1_STATES.offset[0 := #t~nondet13.offset];
    call #t~nondet14.base, #t~nondet14.offset := #Ultimate.alloc(17);
    ~HFC_NT_LAYER1_STATES.base, ~HFC_NT_LAYER1_STATES.offset := ~HFC_NT_LAYER1_STATES.base[1 := #t~nondet14.base], ~HFC_NT_LAYER1_STATES.offset[1 := #t~nondet14.offset];
    call #t~nondet15.base, #t~nondet15.offset := #Ultimate.alloc(27);
    ~HFC_NT_LAYER1_STATES.base, ~HFC_NT_LAYER1_STATES.offset := ~HFC_NT_LAYER1_STATES.base[2 := #t~nondet15.base], ~HFC_NT_LAYER1_STATES.offset[2 := #t~nondet15.offset];
    call #t~nondet16.base, #t~nondet16.offset := #Ultimate.alloc(15);
    ~HFC_NT_LAYER1_STATES.base, ~HFC_NT_LAYER1_STATES.offset := ~HFC_NT_LAYER1_STATES.base[3 := #t~nondet16.base], ~HFC_NT_LAYER1_STATES.offset[3 := #t~nondet16.offset];
    call #t~nondet17.base, #t~nondet17.offset := #Ultimate.alloc(29);
    ~HFC_NT_LAYER1_STATES.base, ~HFC_NT_LAYER1_STATES.offset := ~HFC_NT_LAYER1_STATES.base[4 := #t~nondet17.base], ~HFC_NT_LAYER1_STATES.offset[4 := #t~nondet17.offset];
    havoc #t~nondet13.base, #t~nondet13.offset;
    havoc #t~nondet14.base, #t~nondet14.offset;
    havoc #t~nondet15.base, #t~nondet15.offset;
    havoc #t~nondet16.base, #t~nondet16.offset;
    havoc #t~nondet17.base, #t~nondet17.offset;
    ~debug := 0;
    ~poll := 128;
    ~hfcsusb_cnt := 0;
    ~ldv_retval_0 := 0;
    ~ldv_retval_1 := 0;
    ~ldv_spin := 0;
    ~hfcsusb_drv_group1.base, ~hfcsusb_drv_group1.offset := 0, 0;
    call ~#urb_errlist.base, ~#urb_errlist.offset := #Ultimate.alloc(180);
    call write~int(-12, ~#urb_errlist.base, ~#urb_errlist.offset + 0 + 0, 4);
    call #t~nondet180.base, #t~nondet180.offset := #Ultimate.alloc(48);
    call write~$Pointer$(#t~nondet180.base, #t~nondet180.offset, ~#urb_errlist.base, ~#urb_errlist.offset + 0 + 4, 8);
    call write~int(-28, ~#urb_errlist.base, ~#urb_errlist.offset + 12 + 0, 4);
    call #t~nondet181.base, #t~nondet181.offset := #Ultimate.alloc(53);
    call write~$Pointer$(#t~nondet181.base, #t~nondet181.offset, ~#urb_errlist.base, ~#urb_errlist.offset + 12 + 4, 8);
    call write~int(-2, ~#urb_errlist.base, ~#urb_errlist.offset + 24 + 0, 4);
    call #t~nondet182.base, #t~nondet182.offset := #Ultimate.alloc(31);
    call write~$Pointer$(#t~nondet182.base, #t~nondet182.offset, ~#urb_errlist.base, ~#urb_errlist.offset + 24 + 4, 8);
    call write~int(-18, ~#urb_errlist.base, ~#urb_errlist.offset + 36 + 0, 4);
    call #t~nondet183.base, #t~nondet183.offset := #Ultimate.alloc(38);
    call write~$Pointer$(#t~nondet183.base, #t~nondet183.offset, ~#urb_errlist.base, ~#urb_errlist.offset + 36 + 4, 8);
    call write~int(-11, ~#urb_errlist.base, ~#urb_errlist.offset + 48 + 0, 4);
    call #t~nondet184.base, #t~nondet184.offset := #Ultimate.alloc(35);
    call write~$Pointer$(#t~nondet184.base, #t~nondet184.offset, ~#urb_errlist.base, ~#urb_errlist.offset + 48 + 4, 8);
    call write~int(-6, ~#urb_errlist.base, ~#urb_errlist.offset + 60 + 0, 4);
    call #t~nondet185.base, #t~nondet185.offset := #Ultimate.alloc(19);
    call write~$Pointer$(#t~nondet185.base, #t~nondet185.offset, ~#urb_errlist.base, ~#urb_errlist.offset + 60 + 4, 8);
    call write~int(-27, ~#urb_errlist.base, ~#urb_errlist.offset + 72 + 0, 4);
    call #t~nondet186.base, #t~nondet186.offset := #Ultimate.alloc(30);
    call write~$Pointer$(#t~nondet186.base, #t~nondet186.offset, ~#urb_errlist.base, ~#urb_errlist.offset + 72 + 4, 8);
    call write~int(-63, ~#urb_errlist.base, ~#urb_errlist.offset + 84 + 0, 4);
    call #t~nondet187.base, #t~nondet187.offset := #Ultimate.alloc(23);
    call write~$Pointer$(#t~nondet187.base, #t~nondet187.offset, ~#urb_errlist.base, ~#urb_errlist.offset + 84 + 4, 8);
    call write~int(-32, ~#urb_errlist.base, ~#urb_errlist.offset + 96 + 0, 4);
    call #t~nondet188.base, #t~nondet188.offset := #Ultimate.alloc(54);
    call write~$Pointer$(#t~nondet188.base, #t~nondet188.offset, ~#urb_errlist.base, ~#urb_errlist.offset + 96 + 4, 8);
    call write~int(-75, ~#urb_errlist.base, ~#urb_errlist.offset + 108 + 0, 4);
    call #t~nondet189.base, #t~nondet189.offset := #Ultimate.alloc(20);
    call write~$Pointer$(#t~nondet189.base, #t~nondet189.offset, ~#urb_errlist.base, ~#urb_errlist.offset + 108 + 4, 8);
    call write~int(-71, ~#urb_errlist.base, ~#urb_errlist.offset + 120 + 0, 4);
    call #t~nondet190.base, #t~nondet190.offset := #Ultimate.alloc(29);
    call write~$Pointer$(#t~nondet190.base, #t~nondet190.offset, ~#urb_errlist.base, ~#urb_errlist.offset + 120 + 4, 8);
    call write~int(-84, ~#urb_errlist.base, ~#urb_errlist.offset + 132 + 0, 4);
    call #t~nondet191.base, #t~nondet191.offset := #Ultimate.alloc(12);
    call write~$Pointer$(#t~nondet191.base, #t~nondet191.offset, ~#urb_errlist.base, ~#urb_errlist.offset + 132 + 4, 8);
    call write~int(-110, ~#urb_errlist.base, ~#urb_errlist.offset + 144 + 0, 4);
    call #t~nondet192.base, #t~nondet192.offset := #Ultimate.alloc(30);
    call write~$Pointer$(#t~nondet192.base, #t~nondet192.offset, ~#urb_errlist.base, ~#urb_errlist.offset + 144 + 4, 8);
    call write~int(-108, ~#urb_errlist.base, ~#urb_errlist.offset + 156 + 0, 4);
    call #t~nondet193.base, #t~nondet193.offset := #Ultimate.alloc(17);
    call write~$Pointer$(#t~nondet193.base, #t~nondet193.offset, ~#urb_errlist.base, ~#urb_errlist.offset + 156 + 4, 8);
    call write~int(-1, ~#urb_errlist.base, ~#urb_errlist.offset + 168 + 0, 4);
    call write~$Pointer$(0, 0, ~#urb_errlist.base, ~#urb_errlist.offset + 168 + 4, 8);
    havoc #t~nondet180.base, #t~nondet180.offset;
    havoc #t~nondet181.base, #t~nondet181.offset;
    havoc #t~nondet182.base, #t~nondet182.offset;
    havoc #t~nondet183.base, #t~nondet183.offset;
    havoc #t~nondet184.base, #t~nondet184.offset;
    havoc #t~nondet185.base, #t~nondet185.offset;
    havoc #t~nondet186.base, #t~nondet186.offset;
    havoc #t~nondet187.base, #t~nondet187.offset;
    havoc #t~nondet188.base, #t~nondet188.offset;
    havoc #t~nondet189.base, #t~nondet189.offset;
    havoc #t~nondet190.base, #t~nondet190.offset;
    havoc #t~nondet191.base, #t~nondet191.offset;
    havoc #t~nondet192.base, #t~nondet192.offset;
    havoc #t~nondet193.base, #t~nondet193.offset;
    call ~#__constr_expr_0.base, ~#__constr_expr_0.offset := #Ultimate.alloc(25);
    call write~int(0, ~#__constr_expr_0.base, ~#__constr_expr_0.offset + 0, 1);
    call write~int(4, ~#__constr_expr_0.base, ~#__constr_expr_0.offset + 1 + 0, 2);
    call write~int(0, ~#__constr_expr_0.base, ~#__constr_expr_0.offset + 1 + 2, 2);
    call write~int(2, ~#__constr_expr_0.base, ~#__constr_expr_0.offset + 1 + 4, 2);
    call write~int(1, ~#__constr_expr_0.base, ~#__constr_expr_0.offset + 1 + 6, 2);
    call write~int(0, ~#__constr_expr_0.base, ~#__constr_expr_0.offset + 1 + 8, 2);
    call write~int(0, ~#__constr_expr_0.base, ~#__constr_expr_0.offset + 1 + 10, 2);
    call write~int(0, ~#__constr_expr_0.base, ~#__constr_expr_0.offset + 1 + 12, 2);
    call write~int(0, ~#__constr_expr_0.base, ~#__constr_expr_0.offset + 1 + 14, 2);
    call #t~nondet198.base, #t~nondet198.offset := #Ultimate.alloc(43);
    call write~$Pointer$(#t~nondet198.base, #t~nondet198.offset, ~#__constr_expr_0.base, ~#__constr_expr_0.offset + 17, 8);
    havoc #t~nondet198.base, #t~nondet198.offset;
    call ~#__constr_expr_1.base, ~#__constr_expr_1.offset := #Ultimate.alloc(25);
    call write~int(1, ~#__constr_expr_1.base, ~#__constr_expr_1.offset + 0, 1);
    call write~int(1, ~#__constr_expr_1.base, ~#__constr_expr_1.offset + 1 + 0, 2);
    call write~int(2, ~#__constr_expr_1.base, ~#__constr_expr_1.offset + 1 + 2, 2);
    call write~int(0, ~#__constr_expr_1.base, ~#__constr_expr_1.offset + 1 + 4, 2);
    call write~int(0, ~#__constr_expr_1.base, ~#__constr_expr_1.offset + 1 + 6, 2);
    call write~int(0, ~#__constr_expr_1.base, ~#__constr_expr_1.offset + 1 + 8, 2);
    call write~int(0, ~#__constr_expr_1.base, ~#__constr_expr_1.offset + 1 + 10, 2);
    call write~int(0, ~#__constr_expr_1.base, ~#__constr_expr_1.offset + 1 + 12, 2);
    call write~int(0, ~#__constr_expr_1.base, ~#__constr_expr_1.offset + 1 + 14, 2);
    call #t~nondet199.base, #t~nondet199.offset := #Ultimate.alloc(34);
    call write~$Pointer$(#t~nondet199.base, #t~nondet199.offset, ~#__constr_expr_1.base, ~#__constr_expr_1.offset + 17, 8);
    havoc #t~nondet199.base, #t~nondet199.offset;
    call ~#__constr_expr_2.base, ~#__constr_expr_2.offset := #Ultimate.alloc(25);
    call write~int(1, ~#__constr_expr_2.base, ~#__constr_expr_2.offset + 0, 1);
    call write~int(128, ~#__constr_expr_2.base, ~#__constr_expr_2.offset + 1 + 0, 2);
    call write~int(-64, ~#__constr_expr_2.base, ~#__constr_expr_2.offset + 1 + 2, 2);
    call write~int(-32, ~#__constr_expr_2.base, ~#__constr_expr_2.offset + 1 + 4, 2);
    call write~int(-16, ~#__constr_expr_2.base, ~#__constr_expr_2.offset + 1 + 6, 2);
    call write~int(0, ~#__constr_expr_2.base, ~#__constr_expr_2.offset + 1 + 8, 2);
    call write~int(0, ~#__constr_expr_2.base, ~#__constr_expr_2.offset + 1 + 10, 2);
    call write~int(0, ~#__constr_expr_2.base, ~#__constr_expr_2.offset + 1 + 12, 2);
    call write~int(0, ~#__constr_expr_2.base, ~#__constr_expr_2.offset + 1 + 14, 2);
    call #t~nondet200.base, #t~nondet200.offset := #Ultimate.alloc(29);
    call write~$Pointer$(#t~nondet200.base, #t~nondet200.offset, ~#__constr_expr_2.base, ~#__constr_expr_2.offset + 17, 8);
    havoc #t~nondet200.base, #t~nondet200.offset;
    call ~#__constr_expr_3.base, ~#__constr_expr_3.offset := #Ultimate.alloc(25);
    call write~int(1, ~#__constr_expr_3.base, ~#__constr_expr_3.offset + 0, 1);
    call write~int(4, ~#__constr_expr_3.base, ~#__constr_expr_3.offset + 1 + 0, 2);
    call write~int(0, ~#__constr_expr_3.base, ~#__constr_expr_3.offset + 1 + 2, 2);
    call write~int(2, ~#__constr_expr_3.base, ~#__constr_expr_3.offset + 1 + 4, 2);
    call write~int(1, ~#__constr_expr_3.base, ~#__constr_expr_3.offset + 1 + 6, 2);
    call write~int(0, ~#__constr_expr_3.base, ~#__constr_expr_3.offset + 1 + 8, 2);
    call write~int(0, ~#__constr_expr_3.base, ~#__constr_expr_3.offset + 1 + 10, 2);
    call write~int(0, ~#__constr_expr_3.base, ~#__constr_expr_3.offset + 1 + 12, 2);
    call write~int(0, ~#__constr_expr_3.base, ~#__constr_expr_3.offset + 1 + 14, 2);
    call #t~nondet201.base, #t~nondet201.offset := #Ultimate.alloc(17);
    call write~$Pointer$(#t~nondet201.base, #t~nondet201.offset, ~#__constr_expr_3.base, ~#__constr_expr_3.offset + 17, 8);
    havoc #t~nondet201.base, #t~nondet201.offset;
    call ~#__constr_expr_4.base, ~#__constr_expr_4.offset := #Ultimate.alloc(25);
    call write~int(1, ~#__constr_expr_4.base, ~#__constr_expr_4.offset + 0, 1);
    call write~int(4, ~#__constr_expr_4.base, ~#__constr_expr_4.offset + 1 + 0, 2);
    call write~int(0, ~#__constr_expr_4.base, ~#__constr_expr_4.offset + 1 + 2, 2);
    call write~int(2, ~#__constr_expr_4.base, ~#__constr_expr_4.offset + 1 + 4, 2);
    call write~int(1, ~#__constr_expr_4.base, ~#__constr_expr_4.offset + 1 + 6, 2);
    call write~int(0, ~#__constr_expr_4.base, ~#__constr_expr_4.offset + 1 + 8, 2);
    call write~int(0, ~#__constr_expr_4.base, ~#__constr_expr_4.offset + 1 + 10, 2);
    call write~int(0, ~#__constr_expr_4.base, ~#__constr_expr_4.offset + 1 + 12, 2);
    call write~int(0, ~#__constr_expr_4.base, ~#__constr_expr_4.offset + 1 + 14, 2);
    call #t~nondet202.base, #t~nondet202.offset := #Ultimate.alloc(18);
    call write~$Pointer$(#t~nondet202.base, #t~nondet202.offset, ~#__constr_expr_4.base, ~#__constr_expr_4.offset + 17, 8);
    havoc #t~nondet202.base, #t~nondet202.offset;
    call ~#__constr_expr_5.base, ~#__constr_expr_5.offset := #Ultimate.alloc(25);
    call write~int(1, ~#__constr_expr_5.base, ~#__constr_expr_5.offset + 0, 1);
    call write~int(4, ~#__constr_expr_5.base, ~#__constr_expr_5.offset + 1 + 0, 2);
    call write~int(0, ~#__constr_expr_5.base, ~#__constr_expr_5.offset + 1 + 2, 2);
    call write~int(2, ~#__constr_expr_5.base, ~#__constr_expr_5.offset + 1 + 4, 2);
    call write~int(1, ~#__constr_expr_5.base, ~#__constr_expr_5.offset + 1 + 6, 2);
    call write~int(0, ~#__constr_expr_5.base, ~#__constr_expr_5.offset + 1 + 8, 2);
    call write~int(0, ~#__constr_expr_5.base, ~#__constr_expr_5.offset + 1 + 10, 2);
    call write~int(0, ~#__constr_expr_5.base, ~#__constr_expr_5.offset + 1 + 12, 2);
    call write~int(0, ~#__constr_expr_5.base, ~#__constr_expr_5.offset + 1 + 14, 2);
    call #t~nondet203.base, #t~nondet203.offset := #Ultimate.alloc(16);
    call write~$Pointer$(#t~nondet203.base, #t~nondet203.offset, ~#__constr_expr_5.base, ~#__constr_expr_5.offset + 17, 8);
    havoc #t~nondet203.base, #t~nondet203.offset;
    call ~#__constr_expr_6.base, ~#__constr_expr_6.offset := #Ultimate.alloc(25);
    call write~int(1, ~#__constr_expr_6.base, ~#__constr_expr_6.offset + 0, 1);
    call write~int(2, ~#__constr_expr_6.base, ~#__constr_expr_6.offset + 1 + 0, 2);
    call write~int(0, ~#__constr_expr_6.base, ~#__constr_expr_6.offset + 1 + 2, 2);
    call write~int(1, ~#__constr_expr_6.base, ~#__constr_expr_6.offset + 1 + 4, 2);
    call write~int(4, ~#__constr_expr_6.base, ~#__constr_expr_6.offset + 1 + 6, 2);
    call write~int(0, ~#__constr_expr_6.base, ~#__constr_expr_6.offset + 1 + 8, 2);
    call write~int(0, ~#__constr_expr_6.base, ~#__constr_expr_6.offset + 1 + 10, 2);
    call write~int(0, ~#__constr_expr_6.base, ~#__constr_expr_6.offset + 1 + 12, 2);
    call write~int(0, ~#__constr_expr_6.base, ~#__constr_expr_6.offset + 1 + 14, 2);
    call #t~nondet204.base, #t~nondet204.offset := #Ultimate.alloc(16);
    call write~$Pointer$(#t~nondet204.base, #t~nondet204.offset, ~#__constr_expr_6.base, ~#__constr_expr_6.offset + 17, 8);
    havoc #t~nondet204.base, #t~nondet204.offset;
    call ~#__constr_expr_7.base, ~#__constr_expr_7.offset := #Ultimate.alloc(25);
    call write~int(1, ~#__constr_expr_7.base, ~#__constr_expr_7.offset + 0, 1);
    call write~int(128, ~#__constr_expr_7.base, ~#__constr_expr_7.offset + 1 + 0, 2);
    call write~int(-64, ~#__constr_expr_7.base, ~#__constr_expr_7.offset + 1 + 2, 2);
    call write~int(-32, ~#__constr_expr_7.base, ~#__constr_expr_7.offset + 1 + 4, 2);
    call write~int(-16, ~#__constr_expr_7.base, ~#__constr_expr_7.offset + 1 + 6, 2);
    call write~int(0, ~#__constr_expr_7.base, ~#__constr_expr_7.offset + 1 + 8, 2);
    call write~int(0, ~#__constr_expr_7.base, ~#__constr_expr_7.offset + 1 + 10, 2);
    call write~int(0, ~#__constr_expr_7.base, ~#__constr_expr_7.offset + 1 + 12, 2);
    call write~int(0, ~#__constr_expr_7.base, ~#__constr_expr_7.offset + 1 + 14, 2);
    call #t~nondet205.base, #t~nondet205.offset := #Ultimate.alloc(21);
    call write~$Pointer$(#t~nondet205.base, #t~nondet205.offset, ~#__constr_expr_7.base, ~#__constr_expr_7.offset + 17, 8);
    havoc #t~nondet205.base, #t~nondet205.offset;
    call ~#__constr_expr_8.base, ~#__constr_expr_8.offset := #Ultimate.alloc(25);
    call write~int(1, ~#__constr_expr_8.base, ~#__constr_expr_8.offset + 0, 1);
    call write~int(128, ~#__constr_expr_8.base, ~#__constr_expr_8.offset + 1 + 0, 2);
    call write~int(-64, ~#__constr_expr_8.base, ~#__constr_expr_8.offset + 1 + 2, 2);
    call write~int(-32, ~#__constr_expr_8.base, ~#__constr_expr_8.offset + 1 + 4, 2);
    call write~int(-16, ~#__constr_expr_8.base, ~#__constr_expr_8.offset + 1 + 6, 2);
    call write~int(0, ~#__constr_expr_8.base, ~#__constr_expr_8.offset + 1 + 8, 2);
    call write~int(0, ~#__constr_expr_8.base, ~#__constr_expr_8.offset + 1 + 10, 2);
    call write~int(0, ~#__constr_expr_8.base, ~#__constr_expr_8.offset + 1 + 12, 2);
    call write~int(0, ~#__constr_expr_8.base, ~#__constr_expr_8.offset + 1 + 14, 2);
    call #t~nondet206.base, #t~nondet206.offset := #Ultimate.alloc(18);
    call write~$Pointer$(#t~nondet206.base, #t~nondet206.offset, ~#__constr_expr_8.base, ~#__constr_expr_8.offset + 17, 8);
    havoc #t~nondet206.base, #t~nondet206.offset;
    call ~#__constr_expr_9.base, ~#__constr_expr_9.offset := #Ultimate.alloc(25);
    call write~int(1, ~#__constr_expr_9.base, ~#__constr_expr_9.offset + 0, 1);
    call write~int(128, ~#__constr_expr_9.base, ~#__constr_expr_9.offset + 1 + 0, 2);
    call write~int(-64, ~#__constr_expr_9.base, ~#__constr_expr_9.offset + 1 + 2, 2);
    call write~int(-32, ~#__constr_expr_9.base, ~#__constr_expr_9.offset + 1 + 4, 2);
    call write~int(-16, ~#__constr_expr_9.base, ~#__constr_expr_9.offset + 1 + 6, 2);
    call write~int(0, ~#__constr_expr_9.base, ~#__constr_expr_9.offset + 1 + 8, 2);
    call write~int(0, ~#__constr_expr_9.base, ~#__constr_expr_9.offset + 1 + 10, 2);
    call write~int(0, ~#__constr_expr_9.base, ~#__constr_expr_9.offset + 1 + 12, 2);
    call write~int(0, ~#__constr_expr_9.base, ~#__constr_expr_9.offset + 1 + 14, 2);
    call #t~nondet207.base, #t~nondet207.offset := #Ultimate.alloc(16);
    call write~$Pointer$(#t~nondet207.base, #t~nondet207.offset, ~#__constr_expr_9.base, ~#__constr_expr_9.offset + 17, 8);
    havoc #t~nondet207.base, #t~nondet207.offset;
    call ~#__constr_expr_10.base, ~#__constr_expr_10.offset := #Ultimate.alloc(25);
    call write~int(1, ~#__constr_expr_10.base, ~#__constr_expr_10.offset + 0, 1);
    call write~int(2, ~#__constr_expr_10.base, ~#__constr_expr_10.offset + 1 + 0, 2);
    call write~int(0, ~#__constr_expr_10.base, ~#__constr_expr_10.offset + 1 + 2, 2);
    call write~int(1, ~#__constr_expr_10.base, ~#__constr_expr_10.offset + 1 + 4, 2);
    call write~int(4, ~#__constr_expr_10.base, ~#__constr_expr_10.offset + 1 + 6, 2);
    call write~int(0, ~#__constr_expr_10.base, ~#__constr_expr_10.offset + 1 + 8, 2);
    call write~int(0, ~#__constr_expr_10.base, ~#__constr_expr_10.offset + 1 + 10, 2);
    call write~int(0, ~#__constr_expr_10.base, ~#__constr_expr_10.offset + 1 + 12, 2);
    call write~int(0, ~#__constr_expr_10.base, ~#__constr_expr_10.offset + 1 + 14, 2);
    call #t~nondet208.base, #t~nondet208.offset := #Ultimate.alloc(19);
    call write~$Pointer$(#t~nondet208.base, #t~nondet208.offset, ~#__constr_expr_10.base, ~#__constr_expr_10.offset + 17, 8);
    havoc #t~nondet208.base, #t~nondet208.offset;
    call ~#__constr_expr_11.base, ~#__constr_expr_11.offset := #Ultimate.alloc(25);
    call write~int(1, ~#__constr_expr_11.base, ~#__constr_expr_11.offset + 0, 1);
    call write~int(136, ~#__constr_expr_11.base, ~#__constr_expr_11.offset + 1 + 0, 2);
    call write~int(-64, ~#__constr_expr_11.base, ~#__constr_expr_11.offset + 1 + 2, 2);
    call write~int(-32, ~#__constr_expr_11.base, ~#__constr_expr_11.offset + 1 + 4, 2);
    call write~int(-16, ~#__constr_expr_11.base, ~#__constr_expr_11.offset + 1 + 6, 2);
    call write~int(0, ~#__constr_expr_11.base, ~#__constr_expr_11.offset + 1 + 8, 2);
    call write~int(0, ~#__constr_expr_11.base, ~#__constr_expr_11.offset + 1 + 10, 2);
    call write~int(0, ~#__constr_expr_11.base, ~#__constr_expr_11.offset + 1 + 12, 2);
    call write~int(0, ~#__constr_expr_11.base, ~#__constr_expr_11.offset + 1 + 14, 2);
    call #t~nondet209.base, #t~nondet209.offset := #Ultimate.alloc(22);
    call write~$Pointer$(#t~nondet209.base, #t~nondet209.offset, ~#__constr_expr_11.base, ~#__constr_expr_11.offset + 17, 8);
    havoc #t~nondet209.base, #t~nondet209.offset;
    call ~#__constr_expr_12.base, ~#__constr_expr_12.offset := #Ultimate.alloc(25);
    call write~int(1, ~#__constr_expr_12.base, ~#__constr_expr_12.offset + 0, 1);
    call write~int(136, ~#__constr_expr_12.base, ~#__constr_expr_12.offset + 1 + 0, 2);
    call write~int(-64, ~#__constr_expr_12.base, ~#__constr_expr_12.offset + 1 + 2, 2);
    call write~int(-32, ~#__constr_expr_12.base, ~#__constr_expr_12.offset + 1 + 4, 2);
    call write~int(-16, ~#__constr_expr_12.base, ~#__constr_expr_12.offset + 1 + 6, 2);
    call write~int(0, ~#__constr_expr_12.base, ~#__constr_expr_12.offset + 1 + 8, 2);
    call write~int(0, ~#__constr_expr_12.base, ~#__constr_expr_12.offset + 1 + 10, 2);
    call write~int(0, ~#__constr_expr_12.base, ~#__constr_expr_12.offset + 1 + 12, 2);
    call write~int(0, ~#__constr_expr_12.base, ~#__constr_expr_12.offset + 1 + 14, 2);
    call #t~nondet210.base, #t~nondet210.offset := #Ultimate.alloc(30);
    call write~$Pointer$(#t~nondet210.base, #t~nondet210.offset, ~#__constr_expr_12.base, ~#__constr_expr_12.offset + 17, 8);
    havoc #t~nondet210.base, #t~nondet210.offset;
    call ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset := #Ultimate.alloc(350);
    call write~int(3, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 0 + 0, 2);
    call write~int(2393, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 0 + 2, 2);
    call write~int(11216, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 0 + 4, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 0 + 6, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 0 + 8, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 0 + 10, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 0 + 11, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 0 + 12, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 0 + 13, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 0 + 14, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 0 + 15, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 0 + 16, 1);
    call write~int(~#__constr_expr_0.base + ~#__constr_expr_0.offset, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 0 + 17, 8);
    call write~int(3, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 25 + 0, 2);
    call write~int(1653, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 25 + 2, 2);
    call write~int(5768, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 25 + 4, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 25 + 6, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 25 + 8, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 25 + 10, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 25 + 11, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 25 + 12, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 25 + 13, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 25 + 14, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 25 + 15, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 25 + 16, 1);
    call write~int(~#__constr_expr_1.base + ~#__constr_expr_1.offset, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 25 + 17, 8);
    call write~int(3, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 50 + 0, 2);
    call write~int(1968, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 50 + 2, 2);
    call write~int(7, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 50 + 4, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 50 + 6, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 50 + 8, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 50 + 10, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 50 + 11, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 50 + 12, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 50 + 13, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 50 + 14, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 50 + 15, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 50 + 16, 1);
    call write~int(~#__constr_expr_2.base + ~#__constr_expr_2.offset, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 50 + 17, 8);
    call write~int(3, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 75 + 0, 2);
    call write~int(1858, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 75 + 2, 2);
    call write~int(8200, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 75 + 4, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 75 + 6, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 75 + 8, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 75 + 10, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 75 + 11, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 75 + 12, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 75 + 13, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 75 + 14, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 75 + 15, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 75 + 16, 1);
    call write~int(~#__constr_expr_3.base + ~#__constr_expr_3.offset, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 75 + 17, 8);
    call write~int(3, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 100 + 0, 2);
    call write~int(1858, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 100 + 2, 2);
    call write~int(8201, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 100 + 4, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 100 + 6, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 100 + 8, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 100 + 10, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 100 + 11, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 100 + 12, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 100 + 13, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 100 + 14, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 100 + 15, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 100 + 16, 1);
    call write~int(~#__constr_expr_4.base + ~#__constr_expr_4.offset, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 100 + 17, 8);
    call write~int(3, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 125 + 0, 2);
    call write~int(1858, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 125 + 2, 2);
    call write~int(8202, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 125 + 4, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 125 + 6, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 125 + 8, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 125 + 10, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 125 + 11, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 125 + 12, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 125 + 13, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 125 + 14, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 125 + 15, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 125 + 16, 1);
    call write~int(~#__constr_expr_5.base + ~#__constr_expr_5.offset, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 125 + 17, 8);
    call write~int(3, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 150 + 0, 2);
    call write~int(2275, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 150 + 2, 2);
    call write~int(769, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 150 + 4, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 150 + 6, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 150 + 8, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 150 + 10, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 150 + 11, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 150 + 12, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 150 + 13, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 150 + 14, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 150 + 15, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 150 + 16, 1);
    call write~int(~#__constr_expr_6.base + ~#__constr_expr_6.offset, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 150 + 17, 8);
    call write~int(3, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 175 + 0, 2);
    call write~int(2042, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 175 + 2, 2);
    call write~int(2118, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 175 + 4, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 175 + 6, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 175 + 8, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 175 + 10, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 175 + 11, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 175 + 12, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 175 + 13, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 175 + 14, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 175 + 15, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 175 + 16, 1);
    call write~int(~#__constr_expr_7.base + ~#__constr_expr_7.offset, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 175 + 17, 8);
    call write~int(3, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 200 + 0, 2);
    call write~int(2042, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 200 + 2, 2);
    call write~int(2119, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 200 + 4, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 200 + 6, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 200 + 8, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 200 + 10, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 200 + 11, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 200 + 12, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 200 + 13, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 200 + 14, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 200 + 15, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 200 + 16, 1);
    call write~int(~#__constr_expr_8.base + ~#__constr_expr_8.offset, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 200 + 17, 8);
    call write~int(3, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 225 + 0, 2);
    call write~int(1968, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 225 + 2, 2);
    call write~int(6, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 225 + 4, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 225 + 6, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 225 + 8, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 225 + 10, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 225 + 11, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 225 + 12, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 225 + 13, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 225 + 14, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 225 + 15, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 225 + 16, 1);
    call write~int(~#__constr_expr_9.base + ~#__constr_expr_9.offset, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 225 + 17, 8);
    call write~int(3, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 250 + 0, 2);
    call write~int(1821, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 250 + 2, 2);
    call write~int(4101, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 250 + 4, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 250 + 6, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 250 + 8, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 250 + 10, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 250 + 11, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 250 + 12, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 250 + 13, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 250 + 14, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 250 + 15, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 250 + 16, 1);
    call write~int(~#__constr_expr_10.base + ~#__constr_expr_10.offset, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 250 + 17, 8);
    call write~int(3, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 275 + 0, 2);
    call write~int(1414, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 275 + 2, 2);
    call write~int(258, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 275 + 4, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 275 + 6, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 275 + 8, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 275 + 10, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 275 + 11, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 275 + 12, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 275 + 13, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 275 + 14, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 275 + 15, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 275 + 16, 1);
    call write~int(~#__constr_expr_11.base + ~#__constr_expr_11.offset, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 275 + 17, 8);
    call write~int(3, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 300 + 0, 2);
    call write~int(6887, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 300 + 2, 2);
    call write~int(1317, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 300 + 4, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 300 + 6, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 300 + 8, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 300 + 10, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 300 + 11, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 300 + 12, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 300 + 13, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 300 + 14, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 300 + 15, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 300 + 16, 1);
    call write~int(~#__constr_expr_12.base + ~#__constr_expr_12.offset, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 300 + 17, 8);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 325 + 0, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 325 + 2, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 325 + 4, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 325 + 6, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 325 + 8, 2);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 325 + 10, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 325 + 11, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 325 + 12, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 325 + 13, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 325 + 14, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 325 + 15, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 325 + 16, 1);
    call write~int(0, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + 325 + 17, 8);
    call ~#HFClist.base, ~#HFClist.offset := #Ultimate.alloc(16);
    call write~$Pointer$(~#HFClist.base, ~#HFClist.offset, ~#HFClist.base, ~#HFClist.offset + 0, 8);
    call write~$Pointer$(~#HFClist.base, ~#HFClist.offset, ~#HFClist.base, ~#HFClist.offset + 8, 8);
    call ~#HFClock.base, ~#HFClock.offset := #Ultimate.alloc(68);
    call write~int(0, ~#HFClock.base, ~#HFClock.offset + 0 + 0 + 0, 4);
    call write~int(0, ~#HFClock.base, ~#HFClock.offset + 0 + 4 + 0 + 0, 4);
    call write~int(#t~union1195.head, ~#HFClock.base, ~#HFClock.offset + 0 + 4 + 0 + 0 + 0, 2);
    call write~int(#t~union1195.tail, ~#HFClock.base, ~#HFClock.offset + 0 + 4 + 0 + 0 + 2, 2);
    call write~int(3736018669, ~#HFClock.base, ~#HFClock.offset + 8, 4);
    call write~int(4294967295, ~#HFClock.base, ~#HFClock.offset + 12, 4);
    call write~$Pointer$(0, -1, ~#HFClock.base, ~#HFClock.offset + 16, 8);
    call write~$Pointer$(0, 0, ~#HFClock.base, ~#HFClock.offset + 24 + 0, 8);
    call write~int(0, ~#HFClock.base, ~#HFClock.offset + 24 + 8 + 0, 8);
    call write~int(0, ~#HFClock.base, ~#HFClock.offset + 24 + 8 + 8, 8);
    call #t~nondet211.base, #t~nondet211.offset := #Ultimate.alloc(8);
    call write~$Pointer$(#t~nondet211.base, #t~nondet211.offset, ~#HFClock.base, ~#HFClock.offset + 24 + 24, 8);
    call write~int(0, ~#HFClock.base, ~#HFClock.offset + 24 + 32, 4);
    call write~int(0, ~#HFClock.base, ~#HFClock.offset + 24 + 36, 8);
    havoc #t~union1195.head, #t~union1195.tail;
    havoc #t~nondet211.base, #t~nondet211.offset;
    call ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset := #Ultimate.alloc(285);
    call #t~nondet1171.base, #t~nondet1171.offset := #Ultimate.alloc(10);
    call write~$Pointer$(#t~nondet1171.base, #t~nondet1171.offset, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 0, 8);
    call write~$Pointer$(#funAddr~hfcsusb_probe.base, #funAddr~hfcsusb_probe.offset, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 8, 8);
    call write~$Pointer$(#funAddr~hfcsusb_disconnect.base, #funAddr~hfcsusb_disconnect.offset, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 16, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 56, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 64, 8);
    call write~$Pointer$(~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 72, 8);
    call write~int(0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union1196.head, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union1196.tail, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 4, 4);
    call write~int(0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union1197.__padding[0], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0, 1);
    call write~int(#t~union1197.__padding[1], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union1197.__padding[2], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[3], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[4], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[5], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[6], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[7], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[8], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[9], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[10], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[11], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[12], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[13], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[14], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[15], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[16], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[17], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[18], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[19], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[20], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[21], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[22], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1197.__padding[23], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union1197.dep_map.key.base, #t~union1197.dep_map.key.offset, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union1197.dep_map.class_cache.base[0], #t~union1197.dep_map.class_cache.offset[0], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union1197.dep_map.class_cache.base[1], #t~union1197.dep_map.class_cache.offset[1], ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union1197.dep_map.name.base, #t~union1197.dep_map.name.offset, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union1197.dep_map.cpu, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union1197.dep_map.ip, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 0 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 68 + 0, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 80 + 68 + 8, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 0 + 8, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 0 + 16, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 0 + 24, 8);
    call write~int(0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 0 + 32, 1);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 0 + 33, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 0 + 41, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 0 + 49, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 0 + 57, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 0 + 65, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 0 + 73, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 0 + 81, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 0 + 89, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 0 + 97, 8);
    call write~$Pointer$(0, 0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 0 + 105, 8);
    call write~int(0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 164 + 113, 4);
    call write~int(0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 281, 1);
    call write~int(0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 282, 1);
    call write~int(1, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 283, 1);
    call write~int(0, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset + 284, 1);
    havoc #t~nondet1171.base, #t~nondet1171.offset;
    havoc #t~union1196.head, #t~union1196.tail;
    havoc #t~union1197.__padding, #t~union1197.dep_map.key.base, #t~union1197.dep_map.key.offset, #t~union1197.dep_map.class_cache.base, #t~union1197.dep_map.class_cache.offset, #t~union1197.dep_map.name.base, #t~union1197.dep_map.name.offset, #t~union1197.dep_map.cpu, #t~union1197.dep_map.ip;
    assume true;
    return;
}

procedure ULTIMATE.init() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~ldv_state_variable_1, ~usb_counter, ~ref_cnt, ~ldv_state_variable_0, ~iso_packets, ~#validconf.base, ~#validconf.offset, ~conf_str.base, ~conf_str.offset, ~HFC_TE_LAYER1_STATES.base, ~HFC_TE_LAYER1_STATES.offset, ~HFC_NT_LAYER1_STATES.base, ~HFC_NT_LAYER1_STATES.offset, ~debug, ~poll, ~hfcsusb_cnt, ~ldv_retval_0, ~ldv_retval_1, ~ldv_spin, ~hfcsusb_drv_group1.base, ~hfcsusb_drv_group1.offset, ~#urb_errlist.base, ~#urb_errlist.offset, ~#__constr_expr_0.base, ~#__constr_expr_0.offset, ~#__constr_expr_1.base, ~#__constr_expr_1.offset, ~#__constr_expr_2.base, ~#__constr_expr_2.offset, ~#__constr_expr_3.base, ~#__constr_expr_3.offset, ~#__constr_expr_4.base, ~#__constr_expr_4.offset, ~#__constr_expr_5.base, ~#__constr_expr_5.offset, ~#__constr_expr_6.base, ~#__constr_expr_6.offset, ~#__constr_expr_7.base, ~#__constr_expr_7.offset, ~#__constr_expr_8.base, ~#__constr_expr_8.offset, ~#__constr_expr_9.base, ~#__constr_expr_9.offset, ~#__constr_expr_10.base, ~#__constr_expr_10.offset, ~#__constr_expr_11.base, ~#__constr_expr_11.offset, ~#__constr_expr_12.base, ~#__constr_expr_12.offset, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset, ~#HFClist.base, ~#HFClist.offset, ~#HFClock.base, ~#HFClock.offset, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length;

implementation ldv_error() returns (){
  loc2:
    assume !false;
    goto loc3;
  loc3:
    assert false;
}

procedure ldv_error() returns ();
modifies ;

implementation interface_to_usbdev(#in~intf.base : int, #in~intf.offset : int) returns (#res.base : int, #res.offset : int){
    var #t~mem60.base : int, #t~mem60.offset : int;
    var ~intf.base : int, ~intf.offset : int;
    var ~__mptr~76.base : int, ~__mptr~76.offset : int;

  loc4:
    ~intf.base, ~intf.offset := #in~intf.base, #in~intf.offset;
    havoc ~__mptr~76.base, ~__mptr~76.offset;
    call #t~mem60.base, #t~mem60.offset := read~$Pointer$(~intf.base, ~intf.offset + 44 + 0, 8);
    ~__mptr~76.base, ~__mptr~76.offset := #t~mem60.base, #t~mem60.offset;
    havoc #t~mem60.base, #t~mem60.offset;
    #res.base, #res.offset := ~__mptr~76.base, ~__mptr~76.offset + -278928;
    assume true;
    return;
}

procedure interface_to_usbdev(#in~intf.base : int, #in~intf.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation kzalloc(#in~size : int, #in~flags : int) returns (#res.base : int, #res.offset : int){
    var ~size : int;
    var ~flags : int;

  loc5:
    ~size := #in~size;
    ~flags := #in~flags;
    call ldv_check_alloc_flags(~flags);
    return;
}

procedure kzalloc(#in~size : int, #in~flags : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation ldv_usb_driver_1() returns (){
    var #t~ret1174.base : int, #t~ret1174.offset : int;
    var ~tmp~762.base : int, ~tmp~762.offset : int;

  loc6:
    havoc ~tmp~762.base, ~tmp~762.offset;
    call #t~ret1174.base, #t~ret1174.offset := ldv_zalloc(1560);
    ~tmp~762.base, ~tmp~762.offset := #t~ret1174.base, #t~ret1174.offset;
    havoc #t~ret1174.base, #t~ret1174.offset;
    ~hfcsusb_drv_group1.base, ~hfcsusb_drv_group1.offset := ~tmp~762.base, ~tmp~762.offset;
    assume true;
    return;
}

procedure ldv_usb_driver_1() returns ();
modifies ~hfcsusb_drv_group1.base, ~hfcsusb_drv_group1.offset, #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation ldv_zalloc(#in~size : int) returns (#res.base : int, #res.offset : int){
    var #t~nondet54 : int;
    var #t~malloc55.base : int, #t~malloc55.offset : int;
    var ~size : int;
    var ~p~56.base : int, ~p~56.offset : int;
    var ~tmp~56.base : int, ~tmp~56.offset : int;
    var ~tmp___0~56 : int;

  loc7:
    ~size := #in~size;
    havoc ~p~56.base, ~p~56.offset;
    havoc ~tmp~56.base, ~tmp~56.offset;
    havoc ~tmp___0~56;
    assume -2147483648 <= #t~nondet54 && #t~nondet54 <= 2147483647;
    ~tmp___0~56 := #t~nondet54;
    havoc #t~nondet54;
    assume ~tmp___0~56 != 0;
    #res.base, #res.offset := 0, 0;
    assume true;
    return;
}

procedure ldv_zalloc(#in~size : int) returns (#res.base : int, #res.offset : int);
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation hfcsusb_probe(#in~intf.base : int, #in~intf.offset : int, #in~id.base : int, #in~id.offset : int) returns (#res : int){
    var #t~ret1057.base : int, #t~ret1057.offset : int;
    var #t~mem1058.base : int, #t~mem1058.offset : int;
    var #t~mem1059 : int;
    var #t~mem1060 : int;
    var #t~mem1061 : int;
    var #t~mem1062 : int;
    var #t~mem1063 : int;
    var #t~short1064 : bool;
    var #t~mem1065 : int;
    var #t~nondet1066.base : int, #t~nondet1066.offset : int;
    var #t~ret1067 : int;
    var #t~nondet1068.base : int, #t~nondet1068.offset : int;
    var #t~ret1069 : int;
    var #t~mem1070.base : int, #t~mem1070.offset : int;
    var #t~mem1071 : int;
    var #t~mem1072.base : int, #t~mem1072.offset : int;
    var #t~ret1073.base : int, #t~ret1073.offset : int;
    var #t~memcpy1074.base : int, #t~memcpy1074.offset : int;
    var #t~mem1075 : int;
    var #t~mem1076 : int;
    var #t~mem1077 : int;
    var #t~mem1078 : int;
    var #t~mem1079 : int;
    var #t~short1080 : bool;
    var #t~mem1082 : int;
    var #t~short1083 : bool;
    var #t~mem1085 : int;
    var #t~short1086 : bool;
    var #t~mem1088 : int;
    var #t~mem1089 : int;
    var #t~short1090 : bool;
    var #t~mem1091 : int;
    var #t~mem1092 : int;
    var #t~mem1093 : int;
    var #t~short1094 : bool;
    var #t~mem1095 : int;
    var #t~mem1096 : int;
    var #t~ret1097.base : int, #t~ret1097.offset : int;
    var #t~nondet1098.base : int, #t~nondet1098.offset : int;
    var #t~ret1099 : int;
    var #t~mem1100.base : int, #t~mem1100.offset : int;
    var #t~mem1101 : int;
    var #t~mem1102 : int;
    var #t~mem1103 : int;
    var #t~short1104 : bool;
    var #t~mem1105 : int;
    var #t~switch1106 : bool;
    var #t~mem1107 : int;
    var #t~ret1108 : int;
    var #t~mem1111 : int;
    var #t~mem1112 : int;
    var #t~ret1113 : int;
    var #t~mem1115 : int;
    var #t~ret1116 : int;
    var #t~mem1119 : int;
    var #t~mem1120 : int;
    var #t~ret1121 : int;
    var #t~mem1123 : int;
    var #t~ret1124 : int;
    var #t~mem1127 : int;
    var #t~mem1129 : int;
    var #t~mem1132 : int;
    var #t~mem1135 : int;
    var #t~mem1136 : int;
    var #t~mem1140 : int;
    var #t~mem1143 : int;
    var #t~mem1147.base : int, #t~mem1147.offset : int;
    var #t~ret1148 : int;
    var #t~mem1150.base : int, #t~mem1150.offset : int;
    var #t~ret1151 : int;
    var #t~mem1153 : int;
    var #t~ret1154.base : int, #t~ret1154.offset : int;
    var #t~mem1156.base : int, #t~mem1156.offset : int;
    var #t~nondet1157.base : int, #t~nondet1157.offset : int;
    var #t~ret1158 : int;
    var #t~nondet1159.base : int, #t~nondet1159.offset : int;
    var #t~ret1160 : int;
    var #t~mem1161.base : int, #t~mem1161.offset : int;
    var #t~ret1162 : int;
    var #t~mem1164.base : int, #t~mem1164.offset : int;
    var ~intf.base : int, ~intf.offset : int;
    var ~id.base : int, ~id.offset : int;
    var ~hw~691.base : int, ~hw~691.offset : int;
    var ~dev~691.base : int, ~dev~691.offset : int;
    var ~tmp~691.base : int, ~tmp~691.offset : int;
    var ~iface~691.base : int, ~iface~691.offset : int;
    var ~iface_used~691.base : int, ~iface_used~691.offset : int;
    var ~ep~691.base : int, ~ep~691.offset : int;
    var ~driver_info~691.base : int, ~driver_info~691.offset : int;
    var ~ifnum~691 : int;
    var ~i~691 : int;
    var ~idx~691 : int;
    var ~alt_idx~691 : int;
    var ~probe_alt_setting~691 : int;
    var ~vend_idx~691 : int;
    var ~cfg_used~691 : int;
    var ~vcf~691.base : int, ~vcf~691.offset : int;
    var ~attr~691 : int;
    var ~cfg_found~691 : int;
    var ~ep_addr~691 : int;
    var ~#cmptbl~691.base : int, ~#cmptbl~691.offset : int;
    var ~small_match~691 : int;
    var ~iso_packet_size~691 : int;
    var ~packet_size~691 : int;
    var ~alt_used~691 : int;
    var ~__len~691 : int;
    var ~__ret~691.base : int, ~__ret~691.offset : int;
    var ~tmp___0~691.base : int, ~tmp___0~691.offset : int;
    var ~f~691.base : int, ~f~691.offset : int;
    var ~tmp___1~691 : int;
    var ~tmp___2~691 : int;
    var ~tmp___3~691 : int;
    var ~tmp___4~691 : int;
    var ~tmp___5~691 : int;
    var ~tmp___6~691 : int;
    var ~tmp___7~691 : int;
    var ~tmp___8~691 : int;

  loc8:
    ~intf.base, ~intf.offset := #in~intf.base, #in~intf.offset;
    ~id.base, ~id.offset := #in~id.base, #in~id.offset;
    havoc ~hw~691.base, ~hw~691.offset;
    havoc ~dev~691.base, ~dev~691.offset;
    havoc ~tmp~691.base, ~tmp~691.offset;
    havoc ~iface~691.base, ~iface~691.offset;
    havoc ~iface_used~691.base, ~iface_used~691.offset;
    havoc ~ep~691.base, ~ep~691.offset;
    havoc ~driver_info~691.base, ~driver_info~691.offset;
    havoc ~ifnum~691;
    havoc ~i~691;
    havoc ~idx~691;
    havoc ~alt_idx~691;
    havoc ~probe_alt_setting~691;
    havoc ~vend_idx~691;
    havoc ~cfg_used~691;
    havoc ~vcf~691.base, ~vcf~691.offset;
    havoc ~attr~691;
    havoc ~cfg_found~691;
    havoc ~ep_addr~691;
    call ~#cmptbl~691.base, ~#cmptbl~691.offset := #Ultimate.alloc(64);
    havoc ~small_match~691;
    havoc ~iso_packet_size~691;
    havoc ~packet_size~691;
    havoc ~alt_used~691;
    havoc ~__len~691;
    havoc ~__ret~691.base, ~__ret~691.offset;
    havoc ~tmp___0~691.base, ~tmp___0~691.offset;
    havoc ~f~691.base, ~f~691.offset;
    havoc ~tmp___1~691;
    havoc ~tmp___2~691;
    havoc ~tmp___3~691;
    havoc ~tmp___4~691;
    havoc ~tmp___5~691;
    havoc ~tmp___6~691;
    havoc ~tmp___7~691;
    havoc ~tmp___8~691;
    call #t~ret1057.base, #t~ret1057.offset := interface_to_usbdev(~intf.base, ~intf.offset);
    ~tmp~691.base, ~tmp~691.offset := #t~ret1057.base, #t~ret1057.offset;
    havoc #t~ret1057.base, #t~ret1057.offset;
    ~dev~691.base, ~dev~691.offset := ~tmp~691.base, ~tmp~691.offset;
    call #t~mem1058.base, #t~mem1058.offset := read~$Pointer$(~intf.base, ~intf.offset + 8, 8);
    ~iface~691.base, ~iface~691.offset := #t~mem1058.base, #t~mem1058.offset;
    havoc #t~mem1058.base, #t~mem1058.offset;
    ~iface_used~691.base, ~iface_used~691.offset := 0, 0;
    call #t~mem1059 := read~int(~iface~691.base, ~iface~691.offset + 0 + 2, 1);
    ~ifnum~691 := #t~mem1059 % 256;
    havoc #t~mem1059;
    ~alt_used~691 := 0;
    ~vend_idx~691 := 65535;
    ~i~691 := 0;
    goto loc9;
  loc9:
    call #t~mem1065 := read~int(~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + ~i~691 * 25 + 2, 2);
    goto loc10;
  loc10:
    goto loc10_0, loc10_1;
  loc10_0:
    assume #t~mem1065 % 65536 % 4294967296 != 0;
    havoc #t~mem1065;
    call #t~mem1060 := read~int(~dev~691.base, ~dev~691.offset + 1480 + 8, 2);
    call #t~mem1061 := read~int(~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + ~i~691 * 25 + 2, 2);
    #t~short1064 := #t~mem1060 % 65536 == #t~mem1061 % 65536;
    assume #t~short1064;
    call #t~mem1062 := read~int(~dev~691.base, ~dev~691.offset + 1480 + 10, 2);
    call #t~mem1063 := read~int(~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset + ~i~691 * 25 + 4, 2);
    #t~short1064 := #t~mem1062 % 65536 == #t~mem1063 % 65536;
    assume #t~short1064;
    havoc #t~mem1060;
    havoc #t~mem1061;
    havoc #t~mem1062;
    havoc #t~mem1063;
    havoc #t~short1064;
    ~vend_idx~691 := ~i~691;
    ~i~691 := ~i~691 + 1;
    goto loc9;
  loc10_1:
    assume !(#t~mem1065 % 65536 % 4294967296 != 0);
    havoc #t~mem1065;
    call #t~nondet1066.base, #t~nondet1066.offset := #Ultimate.alloc(58);
    call #t~ret1067 := printk(#t~nondet1066.base, #t~nondet1066.offset);
    assume -2147483648 <= #t~ret1067 && #t~ret1067 <= 2147483647;
    havoc #t~nondet1066.base, #t~nondet1066.offset;
    havoc #t~ret1067;
    assume !(~vend_idx~691 == 65535);
    ~alt_idx~691 := 0;
    ~small_match~691 := -1;
    ~iso_packet_size~691 := 16;
    ~packet_size~691 := 64;
    goto loc11;
  loc11:
    call #t~mem1096 := read~int(~intf.base, ~intf.offset + 16, 4);
    goto loc12;
  loc12:
    goto loc12_0, loc12_1;
  loc12_0:
    assume ~alt_idx~691 % 4294967296 < #t~mem1096 % 4294967296;
    havoc #t~mem1096;
    call #t~mem1070.base, #t~mem1070.offset := read~$Pointer$(~intf.base, ~intf.offset + 0, 8);
    ~iface~691.base, ~iface~691.offset := #t~mem1070.base, #t~mem1070.offset + (if ~alt_idx~691 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~alt_idx~691 % 18446744073709551616 % 18446744073709551616 else ~alt_idx~691 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616) * 37;
    havoc #t~mem1070.base, #t~mem1070.offset;
    call #t~mem1071 := read~int(~iface~691.base, ~iface~691.offset + 0 + 3, 1);
    ~probe_alt_setting~691 := #t~mem1071 % 256;
    havoc #t~mem1071;
    ~cfg_used~691 := 0;
    goto loc13;
  loc12_1:
    assume !(~alt_idx~691 % 4294967296 < #t~mem1096 % 4294967296);
    havoc #t~mem1096;
    assume !(~small_match~691 == -1);
    ~iface~691.base, ~iface~691.offset := ~iface_used~691.base, ~iface_used~691.offset;
    call #t~ret1097.base, #t~ret1097.offset := kzalloc(9624, 208);
    return;
  loc13:
    call #t~mem1095 := read~int(~#validconf.base, ~#validconf.offset + ~cfg_used~691 * 76 + 0, 4);
    goto loc14;
  loc14:
    goto loc14_0, loc14_1;
  loc14_0:
    assume #t~mem1095 != 0;
    havoc #t~mem1095;
    ~cfg_found~691 := 1;
    ~vcf~691.base, ~vcf~691.offset := ~#validconf.base, ~#validconf.offset + (if ~cfg_used~691 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~cfg_used~691 % 18446744073709551616 % 18446744073709551616 else ~cfg_used~691 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616) * 4;
    call #t~mem1072.base, #t~mem1072.offset := read~$Pointer$(~iface~691.base, ~iface~691.offset + 21, 8);
    ~ep~691.base, ~ep~691.offset := #t~mem1072.base, #t~mem1072.offset;
    havoc #t~mem1072.base, #t~mem1072.offset;
    ~__len~691 := 64;
    assume ~__len~691 % 4294967296 % 18446744073709551616 > 63;
    call #t~ret1073.base, #t~ret1073.offset := __memcpy(~#cmptbl~691.base, ~#cmptbl~691.offset, ~vcf~691.base, ~vcf~691.offset, ~__len~691);
    ~__ret~691.base, ~__ret~691.offset := #t~ret1073.base, #t~ret1073.offset;
    havoc #t~ret1073.base, #t~ret1073.offset;
    ~i~691 := 0;
    call #t~mem1091 := read~int(~iface~691.base, ~iface~691.offset + 0 + 4, 1);
    assume !(#t~mem1091 % 256 > ~i~691);
    havoc #t~mem1091;
    ~i~691 := 0;
    goto loc15;
  loc14_1:
    assume !(#t~mem1095 != 0);
    havoc #t~mem1095;
    ~alt_idx~691 := ~alt_idx~691 + 1;
    goto loc11;
  loc15:
    goto loc15_0, loc15_1;
  loc15_0:
    assume ~i~691 <= 15;
    call #t~mem1092 := read~int(~#cmptbl~691.base, ~#cmptbl~691.offset + ~i~691 * 4, 4);
    #t~short1094 := #t~mem1092 != 2;
    assume !#t~short1094;
    assume !#t~short1094;
    havoc #t~mem1092;
    havoc #t~mem1093;
    havoc #t~short1094;
    ~i~691 := ~i~691 + 1;
    goto loc15;
  loc15_1:
    assume !(~i~691 <= 15);
    assume ~cfg_found~691 != 0;
    assume ~small_match~691 < ~cfg_used~691;
    ~small_match~691 := ~cfg_used~691;
    ~alt_used~691 := ~probe_alt_setting~691;
    ~iface_used~691.base, ~iface_used~691.offset := ~iface~691.base, ~iface~691.offset;
    ~cfg_used~691 := ~cfg_used~691 + 1;
    goto loc13;
}

procedure hfcsusb_probe(#in~intf.base : int, #in~intf.offset : int, #in~id.base : int, #in~id.offset : int) returns (#res : int);
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length, ~ldv_spin, ~hfcsusb_cnt;

implementation ULTIMATE.start() returns (){
    var #t~ret1198 : int;

  loc16:
    call ULTIMATE.init();
    call #t~ret1198 := main();
    return;
}

procedure ULTIMATE.start() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~ldv_state_variable_1, ~usb_counter, ~ref_cnt, ~ldv_state_variable_0, ~iso_packets, ~#validconf.base, ~#validconf.offset, ~conf_str.base, ~conf_str.offset, ~HFC_TE_LAYER1_STATES.base, ~HFC_TE_LAYER1_STATES.offset, ~HFC_NT_LAYER1_STATES.base, ~HFC_NT_LAYER1_STATES.offset, ~debug, ~poll, ~hfcsusb_cnt, ~ldv_retval_0, ~ldv_retval_1, ~ldv_spin, ~hfcsusb_drv_group1.base, ~hfcsusb_drv_group1.offset, ~#urb_errlist.base, ~#urb_errlist.offset, ~#__constr_expr_0.base, ~#__constr_expr_0.offset, ~#__constr_expr_1.base, ~#__constr_expr_1.offset, ~#__constr_expr_2.base, ~#__constr_expr_2.offset, ~#__constr_expr_3.base, ~#__constr_expr_3.offset, ~#__constr_expr_4.base, ~#__constr_expr_4.offset, ~#__constr_expr_5.base, ~#__constr_expr_5.offset, ~#__constr_expr_6.base, ~#__constr_expr_6.offset, ~#__constr_expr_7.base, ~#__constr_expr_7.offset, ~#__constr_expr_8.base, ~#__constr_expr_8.offset, ~#__constr_expr_9.base, ~#__constr_expr_9.offset, ~#__constr_expr_10.base, ~#__constr_expr_10.offset, ~#__constr_expr_11.base, ~#__constr_expr_11.offset, ~#__constr_expr_12.base, ~#__constr_expr_12.offset, ~#hfcsusb_idtab.base, ~#hfcsusb_idtab.offset, ~#HFClist.base, ~#HFClist.offset, ~#HFClock.base, ~#HFClock.offset, ~#hfcsusb_drv.base, ~#hfcsusb_drv.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_retval_0, ~ldv_retval_1;
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_state_variable_1, ~hfcsusb_drv_group1.base, ~hfcsusb_drv_group1.offset, ~usb_counter, ~ldv_spin, ~hfcsusb_cnt, ~ref_cnt, ~ldv_state_variable_0, ~ldv_retval_0, ~ldv_retval_1;

implementation main() returns (#res : int){
    var #t~ret1175.base : int, #t~ret1175.offset : int;
    var #t~nondet1176 : int;
    var #t~switch1177 : bool;
    var #t~nondet1178 : int;
    var #t~switch1179 : bool;
    var #t~ret1180 : int;
    var #t~nondet1181 : int;
    var #t~switch1182 : bool;
    var #t~ret1183 : int;
    var ~ldvarg0~764.base : int, ~ldvarg0~764.offset : int;
    var ~tmp~764.base : int, ~tmp~764.offset : int;
    var ~tmp___0~764 : int;
    var ~tmp___1~764 : int;
    var ~tmp___2~764 : int;

  loc17:
    havoc ~ldvarg0~764.base, ~ldvarg0~764.offset;
    havoc ~tmp~764.base, ~tmp~764.offset;
    havoc ~tmp___0~764;
    havoc ~tmp___1~764;
    havoc ~tmp___2~764;
    call #t~ret1175.base, #t~ret1175.offset := ldv_zalloc(32);
    ~tmp~764.base, ~tmp~764.offset := #t~ret1175.base, #t~ret1175.offset;
    havoc #t~ret1175.base, #t~ret1175.offset;
    ~ldvarg0~764.base, ~ldvarg0~764.offset := ~tmp~764.base, ~tmp~764.offset;
    call ldv_initialize();
    ~ldv_state_variable_1 := 0;
    ~ref_cnt := 0;
    ~ldv_state_variable_0 := 1;
    goto loc18;
  loc18:
    assume -2147483648 <= #t~nondet1176 && #t~nondet1176 <= 2147483647;
    ~tmp___0~764 := #t~nondet1176;
    havoc #t~nondet1176;
    #t~switch1177 := ~tmp___0~764 == 0;
    goto loc19;
  loc19:
    goto loc19_0, loc19_1;
  loc19_0:
    assume #t~switch1177;
    assume ~ldv_state_variable_1 != 0;
    assume -2147483648 <= #t~nondet1178 && #t~nondet1178 <= 2147483647;
    ~tmp___1~764 := #t~nondet1178;
    havoc #t~nondet1178;
    #t~switch1179 := ~tmp___1~764 == 0;
    assume #t~switch1179;
    assume ~ldv_state_variable_1 == 1;
    call #t~ret1180 := hfcsusb_probe(~hfcsusb_drv_group1.base, ~hfcsusb_drv_group1.offset, ~ldvarg0~764.base, ~ldvarg0~764.offset);
    return;
  loc19_1:
    assume !#t~switch1177;
    #t~switch1177 := #t~switch1177 || ~tmp___0~764 == 1;
    assume #t~switch1177;
    assume ~ldv_state_variable_0 != 0;
    assume -2147483648 <= #t~nondet1181 && #t~nondet1181 <= 2147483647;
    ~tmp___2~764 := #t~nondet1181;
    havoc #t~nondet1181;
    #t~switch1182 := ~tmp___2~764 == 0;
    assume !#t~switch1182;
    #t~switch1182 := #t~switch1182 || ~tmp___2~764 == 1;
    assume #t~switch1182;
    assume ~ldv_state_variable_0 == 1;
    call #t~ret1183 := hfcsusb_drv_init();
    assume -2147483648 <= #t~ret1183 && #t~ret1183 <= 2147483647;
    ~ldv_retval_1 := #t~ret1183;
    havoc #t~ret1183;
    assume ~ldv_retval_1 == 0;
    ~ldv_state_variable_0 := 3;
    assume !(~ldv_retval_1 != 0);
    goto loc18;
}

procedure main() returns (#res : int);
modifies ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_retval_0, ~ldv_retval_1, #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~hfcsusb_drv_group1.base, ~hfcsusb_drv_group1.offset, ~usb_counter, ~ldv_spin, ~hfcsusb_cnt;

implementation ldv_check_alloc_flags(#in~flags : int) returns (){
    var ~flags : int;

  loc20:
    ~flags := #in~flags;
    assume !(~ldv_spin == 0 || ~bitwiseAnd(~flags, 16) % 4294967296 == 0);
    call ldv_error();
    return;
}

procedure ldv_check_alloc_flags(#in~flags : int) returns ();
modifies ;

implementation ldv_usb_register_driver_42(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int, #in~ldv_func_arg2.base : int, #in~ldv_func_arg2.offset : int, #in~ldv_func_arg3.base : int, #in~ldv_func_arg3.offset : int) returns (#res : int){
    var #t~ret1194 : int;
    var ~ldv_func_arg1.base : int, ~ldv_func_arg1.offset : int;
    var ~ldv_func_arg2.base : int, ~ldv_func_arg2.offset : int;
    var ~ldv_func_arg3.base : int, ~ldv_func_arg3.offset : int;
    var ~ldv_func_res~815 : ~ldv_func_ret_type___2;
    var ~tmp~815 : int;

  loc21:
    ~ldv_func_arg1.base, ~ldv_func_arg1.offset := #in~ldv_func_arg1.base, #in~ldv_func_arg1.offset;
    ~ldv_func_arg2.base, ~ldv_func_arg2.offset := #in~ldv_func_arg2.base, #in~ldv_func_arg2.offset;
    ~ldv_func_arg3.base, ~ldv_func_arg3.offset := #in~ldv_func_arg3.base, #in~ldv_func_arg3.offset;
    havoc ~ldv_func_res~815;
    havoc ~tmp~815;
    call #t~ret1194 := usb_register_driver(~ldv_func_arg1.base, ~ldv_func_arg1.offset, ~ldv_func_arg2.base, ~ldv_func_arg2.offset, ~ldv_func_arg3.base, ~ldv_func_arg3.offset);
    assume -2147483648 <= #t~ret1194 && #t~ret1194 <= 2147483647;
    ~tmp~815 := #t~ret1194;
    havoc #t~ret1194;
    ~ldv_func_res~815 := ~tmp~815;
    ~ldv_state_variable_1 := 1;
    ~usb_counter := 0;
    call ldv_usb_driver_1();
    #res := ~ldv_func_res~815;
    assume true;
    return;
}

procedure ldv_usb_register_driver_42(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int, #in~ldv_func_arg2.base : int, #in~ldv_func_arg2.offset : int, #in~ldv_func_arg3.base : int, #in~ldv_func_arg3.offset : int) returns (#res : int);
modifies ~ldv_state_variable_1, ~usb_counter, #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~hfcsusb_drv_group1.base, ~hfcsusb_drv_group1.offset;

procedure mISDN_freebchannel(#in~159.base : int, #in~159.offset : int) returns ();
modifies ;

procedure mISDN_freedchannel(#in~157.base : int, #in~157.offset : int) returns (#res : int);
modifies ;

procedure __raw_spin_lock_init(#in~36.base : int, #in~36.offset : int, #in~37.base : int, #in~37.offset : int, #in~38.base : int, #in~38.offset : int) returns ();
modifies ;

procedure usb_submit_urb(#in~95.base : int, #in~95.offset : int, #in~96 : int) returns (#res : int);
modifies ;

procedure #Ultimate.alloc(~size : int) returns (#res.base : int, #res.offset : int);
ensures old(#valid)[#res.base] == 0;
ensures #valid == old(#valid)[#res.base := 1];
ensures #res.offset == 0;
ensures #res.base != 0;
ensures #length == old(#length)[#res.base := ~size];
modifies #valid, #length;

procedure ULTIMATE.free(~addr.base : int, ~addr.offset : int) returns ();
free requires ~addr.offset == 0;
free requires ~addr.base == 0 || #valid[~addr.base] == 1;
free ensures (if ~addr.base == 0 then #valid == old(#valid) else #valid == old(#valid)[~addr.base := 0]);
modifies #valid;

procedure __alloc_skb(#in~114 : int, #in~115 : int, #in~116 : int, #in~117 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure mISDN_clear_bchannel(#in~158.base : int, #in~158.offset : int) returns ();
modifies ;

procedure read~int(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value : int);
ensures #value == #memory_int[#ptr.base,#ptr.offset];

procedure mISDN_initdchannel(#in~151.base : int, #in~151.offset : int, #in~152 : int, #in~153.base : int, #in~153.offset : int) returns (#res : int);
modifies ;

procedure mISDN_initbchannel(#in~154.base : int, #in~154.offset : int, #in~155 : int, #in~156 : int) returns (#res : int);
modifies ;

procedure ldv_initialize() returns ();
modifies ;

procedure usb_deregister(#in~64.base : int, #in~64.offset : int) returns ();
modifies ;

procedure usb_set_interface(#in~107.base : int, #in~107.offset : int, #in~108 : int, #in~109 : int) returns (#res : int);
modifies ;

procedure skb_trim(#in~125.base : int, #in~125.offset : int, #in~126 : int) returns ();
modifies ;

procedure usb_kill_urb(#in~97.base : int, #in~97.offset : int) returns ();
modifies ;

procedure mISDN_unregister_device(#in~146.base : int, #in~146.offset : int) returns ();
modifies ;

procedure bchannel_get_rxbuf(#in~170.base : int, #in~170.offset : int, #in~171 : int) returns (#res : int);
modifies ;

procedure mISDN_register_device(#in~143.base : int, #in~143.offset : int, #in~144.base : int, #in~144.offset : int, #in~145.base : int, #in~145.offset : int) returns (#res : int);
modifies ;

procedure kfree(#in~53.base : int, #in~53.offset : int) returns ();
modifies ;

procedure get_next_bframe(#in~178.base : int, #in~178.offset : int) returns (#res : int);
modifies ;

procedure write~int(#value : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #value];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset]] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #memory_$Pointer$.offset[#ptr.base,#ptr.offset]];

procedure skb_queue_purge(#in~127.base : int, #in~127.offset : int) returns ();
modifies ;

procedure __memcpy(#in~30.base : int, #in~30.offset : int, #in~31.base : int, #in~31.offset : int, #in~32 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __VERIFIER_error() returns ();
modifies ;

procedure bchannel_senddata(#in~168.base : int, #in~168.offset : int, #in~169.base : int, #in~169.offset : int) returns (#res : int);
modifies ;

procedure schedule_timeout_interruptible(#in~58 : int) returns (#res : int);
modifies ;

procedure __list_add(#in~24.base : int, #in~24.offset : int, #in~25.base : int, #in~25.offset : int, #in~26.base : int, #in~26.offset : int) returns ();
modifies ;

procedure __VERIFIER_assume(#in~expression : int) returns ();
modifies ;

procedure recv_Bchannel(#in~175.base : int, #in~175.offset : int, #in~176 : int, #in~177 : int) returns ();
modifies ;

procedure _raw_write_lock_irqsave(#in~43.base : int, #in~43.offset : int) returns (#res : int);
modifies ;

procedure recv_Dchannel(#in~172.base : int, #in~172.offset : int) returns ();
modifies ;

procedure consume_skb(#in~113.base : int, #in~113.offset : int) returns ();
modifies ;

procedure recv_Echannel(#in~173.base : int, #in~173.offset : int, #in~174.base : int, #in~174.offset : int) returns ();
modifies ;

procedure write~$Pointer$(#value.base : int, #value.offset : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #memory_int[#ptr.base,#ptr.offset]];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #value.base] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #value.offset];

procedure __builtin_return_address(#in~18 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure _raw_spin_unlock_irqrestore(#in~41.base : int, #in~41.offset : int, #in~42 : int) returns ();
modifies ;

procedure _raw_write_unlock_irqrestore(#in~44.base : int, #in~44.offset : int, #in~45 : int) returns ();
modifies ;

procedure module_put(#in~52.base : int, #in~52.offset : int) returns ();
modifies ;

procedure read~$Pointer$(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value.base : int, #value.offset : int);
ensures #value.base == #memory_$Pointer$.base[#ptr.base,#ptr.offset] && #value.offset == #memory_$Pointer$.offset[#ptr.base,#ptr.offset];

procedure usb_control_msg(#in~98.base : int, #in~98.offset : int, #in~99 : int, #in~100 : int, #in~101 : int, #in~102 : int, #in~103 : int, #in~104.base : int, #in~104.offset : int, #in~105 : int, #in~106 : int) returns (#res : int);
modifies ;

procedure usb_register_driver(#in~61.base : int, #in~61.offset : int, #in~62.base : int, #in~62.offset : int, #in~63.base : int, #in~63.offset : int) returns (#res : int);
modifies ;

procedure usb_free_urb(#in~94.base : int, #in~94.offset : int) returns ();
modifies ;

procedure memset(#in~33.base : int, #in~33.offset : int, #in~34 : int, #in~35 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure _raw_spin_unlock(#in~40.base : int, #in~40.offset : int) returns ();
modifies ;

procedure get_next_dframe(#in~179.base : int, #in~179.offset : int) returns (#res : int);
modifies ;

procedure ULTIMATE.dealloc(~addr.base : int, ~addr.offset : int) returns ();
free ensures #valid == old(#valid)[~addr.base := 0];
modifies #valid;

procedure create_l1(#in~147.base : int, #in~147.offset : int, #in~148.base : int, #in~148.offset : int) returns (#res : int);
modifies ;

procedure printk(#in~20.base : int, #in~20.offset : int) returns (#res : int);
modifies ;

procedure calloc(#in~nmemb : int, #in~size : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure skb_put(#in~119.base : int, #in~119.offset : int, #in~120 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure queue_ch_frame(#in~162.base : int, #in~162.offset : int, #in~163 : int, #in~164 : int, #in~165.base : int, #in~165.offset : int) returns ();
modifies ;

procedure try_module_get(#in~51.base : int, #in~51.offset : int) returns (#res : ~bool);
modifies ;

procedure list_del(#in~29.base : int, #in~29.offset : int) returns ();
modifies ;

procedure l1_event(#in~149.base : int, #in~149.offset : int, #in~150 : int) returns (#res : int);
modifies ;

procedure queue_work_on(#in~46 : int, #in~47.base : int, #in~47.offset : int, #in~48.base : int, #in~48.offset : int) returns (#res : ~bool);
modifies ;

procedure mISDN_ctrl_bchannel(#in~160.base : int, #in~160.offset : int, #in~161.base : int, #in~161.offset : int) returns (#res : int);
modifies ;

procedure dchannel_senddata(#in~166.base : int, #in~166.offset : int, #in~167.base : int, #in~167.offset : int) returns (#res : int);
modifies ;

procedure snprintf(#in~21.base : int, #in~21.offset : int, #in~22 : int, #in~23.base : int, #in~23.offset : int) returns (#res : int);
modifies ;

procedure _raw_spin_lock(#in~39.base : int, #in~39.offset : int) returns ();
modifies ;

procedure usb_alloc_urb(#in~92 : int, #in~93 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure ldv_check_final_state() returns ();
modifies ;

procedure __VERIFIER_nondet_int() returns (#res : int);
modifies ;

