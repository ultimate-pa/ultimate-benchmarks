type STRUCT~task_struct;
type STRUCT~optimistic_spin_queue;
type STRUCT~tvec_base;
type STRUCT~workqueue_struct;
type STRUCT~xol_area;
type STRUCT~slab;
type STRUCT~anon_vma;
type STRUCT~mempolicy;
type STRUCT~linux_binfmt;
type STRUCT~kioctx_table;
type STRUCT~mmu_notifier_mm;
type STRUCT~sock;
type STRUCT~poll_table_struct;
type STRUCT~kiocb;
type STRUCT~pipe_inode_info;
type STRUCT~kernfs_open_node;
type STRUCT~kernfs_iattrs;
type STRUCT~kmem_cache_node;
type STRUCT~mem_cgroup;
type STRUCT~user_namespace;
type STRUCT~pinctrl;
type STRUCT~pinctrl_state;
type STRUCT~iommu_ops;
type STRUCT~subsys_private;
type STRUCT~driver_private;
type STRUCT~acpi_device;
type STRUCT~device_private;
type STRUCT~dma_coherent_mem;
type STRUCT~cma;
type STRUCT~device_node;
type STRUCT~iommu_group;
type STRUCT~pid_namespace;
type STRUCT~nsproxy;
type STRUCT~assoc_array_ptr;
type STRUCT~key_type;
type STRUCT~key_user;
type STRUCT~sec_path;
type STRUCT~module_param_attrs;
type STRUCT~module_sect_attrs;
type STRUCT~module_notes_attrs;
type STRUCT~tracepoint;
type STRUCT~ftrace_event_call;
type STRUCT~mfd_cell;
type STRUCT~vfsmount;
type STRUCT~writeback_control;
type STRUCT~swap_info_struct;
type STRUCT~backing_dev_info;
type STRUCT~hd_struct;
type STRUCT~gendisk;
type STRUCT~request_queue;
type STRUCT~cdev;
type STRUCT~posix_acl;
type STRUCT~files_struct;
type STRUCT~nlm_lockowner;
type STRUCT~nfs4_lock_state;
type STRUCT~export_operations;
type STRUCT~xattr_handler;
type STRUCT~mtd_info;
type STRUCT~nameidata;
type STRUCT~kstatfs;
type STRUCT~prot_inuse;
type STRUCT~proc_dir_entry;
type STRUCT~ipv4_devconf;
type STRUCT~fib_rules_ops;
type STRUCT~fib_table;
type STRUCT~inet_peer_base;
type STRUCT~tcpm_hash_bucket;
type STRUCT~xt_table;
type STRUCT~dst_entry;
type STRUCT~neighbour;
type STRUCT~ipv6_devconf;
type STRUCT~rt6_info;
type STRUCT~rt6_statistics;
type STRUCT~fib6_table;
type STRUCT~sctp_mib;
type STRUCT~nf_logger;
type STRUCT~ebt_table;
type STRUCT~ip_conntrack_stat;
type STRUCT~nf_ct_event_notifier;
type STRUCT~nf_exp_event_notifier;
type STRUCT~nft_af_info;
type STRUCT~net_generic;
type STRUCT~netns_ipvs;
type STRUCT~mii_bus;
type STRUCT~Qdisc;
type STRUCT~neigh_parms;
type STRUCT~netpoll_info;
type STRUCT~pcpu_lstats;
type STRUCT~pcpu_dstats;
type STRUCT~pcpu_vstats;
type STRUCT~iw_handler_def;
type STRUCT~iw_public_data;
type STRUCT~forwarding_accel_ops;
type STRUCT~vlan_info;
type STRUCT~tipc_bearer;
type STRUCT~in_device;
type STRUCT~dn_dev;
type STRUCT~inet6_dev;
type STRUCT~cpu_rmap;
type STRUCT~garp_port;
type STRUCT~mrp_port;
type STRUCT~rtnl_link_ops;
type STRUCT~phy_device;
type STRUCT~cfg80211_cached_keys;
type STRUCT~cfg80211_conn;
type STRUCT~cfg80211_internal_bss;
type ~__s8 = int;
type ~__u8 = int;
type ~__s16 = int;
type ~__u16 = int;
type ~__s32 = int;
type ~__u32 = int;
type ~__u64 = int;
type ~s8 = int;
type ~u8 = int;
type ~s16 = int;
type ~u16 = int;
type ~s32 = int;
type ~u32 = int;
type ~s64 = int;
type ~u64 = int;
type ~__kernel_long_t = int;
type ~__kernel_ulong_t = int;
type ~__kernel_uid32_t = int;
type ~__kernel_gid32_t = int;
type ~__kernel_loff_t = int;
type ~umode_t = int;
type ~bool = int;
type ~sector_t = int;
type ~blkcnt_t = int;
type ~gfp_t = int;
type ~fmode_t = int;
type ~pteval_t = int;
type ~pgdval_t = int;
type ~pgprotval_t = int;
type ~__kernel_sa_family_t = int;
type ~sk_buff_data_t = int;
type ~kernel_ulong_t = int;
type ~qsize_t = int;
type ~ldv_func_ret_type = int;
type ~ldv_func_ret_type___0 = int;
type ~__kernel_size_t = ~__kernel_ulong_t;
type ~__kernel_ssize_t = ~__kernel_long_t;
type ~__kernel_time_t = ~__kernel_long_t;
type ~__le16 = ~__u16;
type ~__be16 = ~__u16;
type ~__le32 = ~__u32;
type ~__be32 = ~__u32;
type ~__wsum = ~__u32;
type ~__kernel_dev_t = ~__u32;
type ~dev_t = ~__kernel_dev_t;
type ~uid_t = ~__kernel_uid32_t;
type ~gid_t = ~__kernel_gid32_t;
type ~loff_t = ~__kernel_loff_t;
type ~size_t = ~__kernel_size_t;
type ~ssize_t = ~__kernel_ssize_t;
type ~time_t = ~__kernel_time_t;
type ~int32_t = ~__s32;
type ~uint8_t = ~__u8;
type ~uint32_t = ~__u32;
type ~uint64_t = ~__u64;
type ~dma_addr_t = ~u64;
type ~phys_addr_t = ~u64;
type ~resource_size_t = ~phys_addr_t;
type ~__ticket_t = ~u16;
type ~__ticketpair_t = ~u32;
type ~sa_family_t = ~__kernel_sa_family_t;
type ~socket_state = int;
type ~dma_cookie_t = ~s32;
type ~netdev_features_t = ~u64;
type ~key_serial_t = ~int32_t;
type ~key_perm_t = ~uint32_t;
type ~Elf64_Addr = ~__u64;
type ~Elf64_Half = ~__u16;
type ~Elf64_Word = ~__u32;
type ~Elf64_Xword = ~__u64;
type ~projid_t = ~__kernel_uid32_t;
type ~netdev_tx_t = int;
type ~rx_handler_result_t = int;
type ~irqreturn_t = int;
const #funAddr~wcn36xx_tx.base : int;
const #funAddr~wcn36xx_tx.offset : int;
const #funAddr~wcn36xx_start.base : int;
const #funAddr~wcn36xx_start.offset : int;
const #funAddr~wcn36xx_stop.base : int;
const #funAddr~wcn36xx_stop.offset : int;
const #funAddr~wcn36xx_suspend.base : int;
const #funAddr~wcn36xx_suspend.offset : int;
const #funAddr~wcn36xx_resume.base : int;
const #funAddr~wcn36xx_resume.offset : int;
const #funAddr~wcn36xx_add_interface.base : int;
const #funAddr~wcn36xx_add_interface.offset : int;
const #funAddr~wcn36xx_remove_interface.base : int;
const #funAddr~wcn36xx_remove_interface.offset : int;
const #funAddr~wcn36xx_config.base : int;
const #funAddr~wcn36xx_config.offset : int;
const #funAddr~wcn36xx_bss_info_changed.base : int;
const #funAddr~wcn36xx_bss_info_changed.offset : int;
const #funAddr~wcn36xx_configure_filter.base : int;
const #funAddr~wcn36xx_configure_filter.offset : int;
const #funAddr~wcn36xx_set_key.base : int;
const #funAddr~wcn36xx_set_key.offset : int;
const #funAddr~wcn36xx_sw_scan_start.base : int;
const #funAddr~wcn36xx_sw_scan_start.offset : int;
const #funAddr~wcn36xx_sw_scan_complete.base : int;
const #funAddr~wcn36xx_sw_scan_complete.offset : int;
const #funAddr~wcn36xx_set_rts_threshold.base : int;
const #funAddr~wcn36xx_set_rts_threshold.offset : int;
const #funAddr~wcn36xx_sta_add.base : int;
const #funAddr~wcn36xx_sta_add.offset : int;
const #funAddr~wcn36xx_sta_remove.base : int;
const #funAddr~wcn36xx_sta_remove.offset : int;
const #funAddr~wcn36xx_ampdu_action.base : int;
const #funAddr~wcn36xx_ampdu_action.offset : int;
const #funAddr~wcn36xx_probe.base : int;
const #funAddr~wcn36xx_probe.offset : int;
const #funAddr~wcn36xx_remove.base : int;
const #funAddr~wcn36xx_remove.offset : int;
const #funAddr~wcn36xx_irq_tx_complete.base : int;
const #funAddr~wcn36xx_irq_tx_complete.offset : int;
const #funAddr~wcn36xx_irq_rx_ready.base : int;
const #funAddr~wcn36xx_irq_rx_ready.offset : int;
const #funAddr~wcn36xx_ind_smd_work.base : int;
const #funAddr~wcn36xx_ind_smd_work.offset : int;
const #funAddr~wcn36xx_smd_rsp_process.base : int;
const #funAddr~wcn36xx_smd_rsp_process.offset : int;
const #funAddr~read_file_bool_bmps.base : int;
const #funAddr~read_file_bool_bmps.offset : int;
const #funAddr~write_file_bool_bmps.base : int;
const #funAddr~write_file_bool_bmps.offset : int;
const #funAddr~simple_open.base : int;
const #funAddr~simple_open.offset : int;
const #funAddr~write_file_dump.base : int;
const #funAddr~write_file_dump.offset : int;
const ~rpm_status~RPM_ACTIVE : int;
const ~rpm_status~RPM_RESUMING : int;
const ~rpm_status~RPM_SUSPENDED : int;
const ~rpm_status~RPM_SUSPENDING : int;
const ~rpm_request~RPM_REQ_NONE : int;
const ~rpm_request~RPM_REQ_IDLE : int;
const ~rpm_request~RPM_REQ_SUSPEND : int;
const ~rpm_request~RPM_REQ_AUTOSUSPEND : int;
const ~rpm_request~RPM_REQ_RESUME : int;
const ~ldv_13278~SS_FREE : int;
const ~ldv_13278~SS_UNCONNECTED : int;
const ~ldv_13278~SS_CONNECTING : int;
const ~ldv_13278~SS_CONNECTED : int;
const ~ldv_13278~SS_DISCONNECTING : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NONE : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NET : int;
const ~kobj_ns_type~KOBJ_NS_TYPES : int;
const ~dma_data_direction~DMA_BIDIRECTIONAL : int;
const ~dma_data_direction~DMA_TO_DEVICE : int;
const ~dma_data_direction~DMA_FROM_DEVICE : int;
const ~dma_data_direction~DMA_NONE : int;
const ~pid_type~PIDTYPE_PID : int;
const ~pid_type~PIDTYPE_PGID : int;
const ~pid_type~PIDTYPE_SID : int;
const ~pid_type~PIDTYPE_MAX : int;
const ~module_state~MODULE_STATE_LIVE : int;
const ~module_state~MODULE_STATE_COMING : int;
const ~module_state~MODULE_STATE_GOING : int;
const ~module_state~MODULE_STATE_UNFORMED : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_RESUME_LATENCY : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_LATENCY_TOLERANCE : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_FLAGS : int;
const ~pm_qos_type~PM_QOS_UNITIALIZED : int;
const ~pm_qos_type~PM_QOS_MAX : int;
const ~pm_qos_type~PM_QOS_MIN : int;
const ~migrate_mode~MIGRATE_ASYNC : int;
const ~migrate_mode~MIGRATE_SYNC_LIGHT : int;
const ~migrate_mode~MIGRATE_SYNC : int;
const ~quota_type~USRQUOTA : int;
const ~quota_type~GRPQUOTA : int;
const ~quota_type~PRJQUOTA : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_INACTIVE : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_ACTIVE : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_ON : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_OFF : int;
const ~netdev_tx~__NETDEV_TX_MIN : int;
const ~netdev_tx~NETDEV_TX_OK : int;
const ~netdev_tx~NETDEV_TX_BUSY : int;
const ~netdev_tx~NETDEV_TX_LOCKED : int;
const ~rx_handler_result~RX_HANDLER_CONSUMED : int;
const ~rx_handler_result~RX_HANDLER_ANOTHER : int;
const ~rx_handler_result~RX_HANDLER_EXACT : int;
const ~rx_handler_result~RX_HANDLER_PASS : int;
const ~nl80211_iftype~NL80211_IFTYPE_UNSPECIFIED : int;
const ~nl80211_iftype~NL80211_IFTYPE_ADHOC : int;
const ~nl80211_iftype~NL80211_IFTYPE_STATION : int;
const ~nl80211_iftype~NL80211_IFTYPE_AP : int;
const ~nl80211_iftype~NL80211_IFTYPE_AP_VLAN : int;
const ~nl80211_iftype~NL80211_IFTYPE_WDS : int;
const ~nl80211_iftype~NL80211_IFTYPE_MONITOR : int;
const ~nl80211_iftype~NL80211_IFTYPE_MESH_POINT : int;
const ~nl80211_iftype~NL80211_IFTYPE_P2P_CLIENT : int;
const ~nl80211_iftype~NL80211_IFTYPE_P2P_GO : int;
const ~nl80211_iftype~NL80211_IFTYPE_P2P_DEVICE : int;
const ~nl80211_iftype~NUM_NL80211_IFTYPES : int;
const ~nl80211_iftype~NL80211_IFTYPE_MAX : int;
const ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_CORE : int;
const ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_USER : int;
const ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_DRIVER : int;
const ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_COUNTRY_IE : int;
const ~nl80211_dfs_regions~NL80211_DFS_UNSET : int;
const ~nl80211_dfs_regions~NL80211_DFS_FCC : int;
const ~nl80211_dfs_regions~NL80211_DFS_ETSI : int;
const ~nl80211_dfs_regions~NL80211_DFS_JP : int;
const ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_USER : int;
const ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_CELL_BASE : int;
const ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_INDOOR : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_20_NOHT : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_20 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_40 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_80 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_80P80 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_160 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_5 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_10 : int;
const ~nl80211_bss_scan_width~NL80211_BSS_CHAN_WIDTH_20 : int;
const ~nl80211_bss_scan_width~NL80211_BSS_CHAN_WIDTH_10 : int;
const ~nl80211_bss_scan_width~NL80211_BSS_CHAN_WIDTH_5 : int;
const ~nl80211_auth_type~NL80211_AUTHTYPE_OPEN_SYSTEM : int;
const ~nl80211_auth_type~NL80211_AUTHTYPE_SHARED_KEY : int;
const ~nl80211_auth_type~NL80211_AUTHTYPE_FT : int;
const ~nl80211_auth_type~NL80211_AUTHTYPE_NETWORK_EAP : int;
const ~nl80211_auth_type~NL80211_AUTHTYPE_SAE : int;
const ~nl80211_auth_type~__NL80211_AUTHTYPE_NUM : int;
const ~nl80211_auth_type~NL80211_AUTHTYPE_MAX : int;
const ~nl80211_auth_type~NL80211_AUTHTYPE_AUTOMATIC : int;
const ~nl80211_mfp~NL80211_MFP_NO : int;
const ~nl80211_mfp~NL80211_MFP_REQUIRED : int;
const ~nl80211_txrate_gi~NL80211_TXRATE_DEFAULT_GI : int;
const ~nl80211_txrate_gi~NL80211_TXRATE_FORCE_SGI : int;
const ~nl80211_txrate_gi~NL80211_TXRATE_FORCE_LGI : int;
const ~nl80211_dfs_state~NL80211_DFS_USABLE : int;
const ~nl80211_dfs_state~NL80211_DFS_UNAVAILABLE : int;
const ~nl80211_dfs_state~NL80211_DFS_AVAILABLE : int;
const ~environment_cap~ENVIRON_ANY : int;
const ~environment_cap~ENVIRON_INDOOR : int;
const ~environment_cap~ENVIRON_OUTDOOR : int;
const ~ieee80211_band~IEEE80211_BAND_2GHZ : int;
const ~ieee80211_band~IEEE80211_BAND_5GHZ : int;
const ~ieee80211_band~IEEE80211_BAND_60GHZ : int;
const ~ieee80211_band~IEEE80211_NUM_BANDS : int;
const ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_NONE : int;
const ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_MBM : int;
const ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_UNSPEC : int;
const ~ieee80211_chanctx_switch_mode~CHANCTX_SWMODE_REASSIGN_VIF : int;
const ~ieee80211_chanctx_switch_mode~CHANCTX_SWMODE_SWAP_CONTEXTS : int;
const ~ieee80211_rssi_event~RSSI_EVENT_HIGH : int;
const ~ieee80211_rssi_event~RSSI_EVENT_LOW : int;
const ~ieee80211_smps_mode~IEEE80211_SMPS_AUTOMATIC : int;
const ~ieee80211_smps_mode~IEEE80211_SMPS_OFF : int;
const ~ieee80211_smps_mode~IEEE80211_SMPS_STATIC : int;
const ~ieee80211_smps_mode~IEEE80211_SMPS_DYNAMIC : int;
const ~ieee80211_smps_mode~IEEE80211_SMPS_NUM_MODES : int;
const ~set_key_cmd~SET_KEY : int;
const ~set_key_cmd~DISABLE_KEY : int;
const ~ieee80211_sta_state~IEEE80211_STA_NOTEXIST : int;
const ~ieee80211_sta_state~IEEE80211_STA_NONE : int;
const ~ieee80211_sta_state~IEEE80211_STA_AUTH : int;
const ~ieee80211_sta_state~IEEE80211_STA_ASSOC : int;
const ~ieee80211_sta_state~IEEE80211_STA_AUTHORIZED : int;
const ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_20 : int;
const ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_40 : int;
const ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_80 : int;
const ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_160 : int;
const ~sta_notify_cmd~STA_NOTIFY_SLEEP : int;
const ~sta_notify_cmd~STA_NOTIFY_AWAKE : int;
const ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_RX_START : int;
const ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_RX_STOP : int;
const ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_START : int;
const ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_STOP_CONT : int;
const ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_STOP_FLUSH : int;
const ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_STOP_FLUSH_CONT : int;
const ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_OPERATIONAL : int;
const ~ieee80211_frame_release_type~IEEE80211_FRAME_RELEASE_PSPOLL : int;
const ~ieee80211_frame_release_type~IEEE80211_FRAME_RELEASE_UAPSD : int;
const ~ieee80211_roc_type~IEEE80211_ROC_TYPE_NORMAL : int;
const ~ieee80211_roc_type~IEEE80211_ROC_TYPE_MGMT_TX : int;
const ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_NORMAL : int;
const ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_LEARN : int;
const ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_SCAN : int;
const ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_PROMISC : int;
const ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_SUSPEND_LINK : int;
const ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_ROAM_SCAN : int;
const ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_ROAM_SUSPEND_LINK : int;
const ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_MAX : int;
const ~sta_rate_mode~STA_TAURUS : int;
const ~sta_rate_mode~STA_TITAN : int;
const ~sta_rate_mode~STA_POLARIS : int;
const ~sta_rate_mode~STA_11b : int;
const ~sta_rate_mode~STA_11bg : int;
const ~sta_rate_mode~STA_11a : int;
const ~sta_rate_mode~STA_11n : int;
const ~sta_rate_mode~STA_11ac : int;
const ~sta_rate_mode~STA_INVALID_RATE_MODE : int;
const ~ani_ed_type~WCN36XX_HAL_ED_NONE : int;
const ~ani_ed_type~WCN36XX_HAL_ED_WEP40 : int;
const ~ani_ed_type~WCN36XX_HAL_ED_WEP104 : int;
const ~ani_ed_type~WCN36XX_HAL_ED_TKIP : int;
const ~ani_ed_type~WCN36XX_HAL_ED_CCMP : int;
const ~ani_ed_type~WCN36XX_HAL_ED_WPI : int;
const ~ani_ed_type~WCN36XX_HAL_ED_AES_128_CMAC : int;
const ~ani_ed_type~WCN36XX_HAL_ED_NOT_IMPLEMENTED : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_IDLE_STATE : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_PREASSOC_STATE : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_POSTASSOC_STATE : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_AP_STATE : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_IBSS_STATE : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_BTAMP_PREASSOC_STATE : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_BTAMP_POSTASSOC_STATE : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_BTAMP_AP_STATE : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_BTAMP_STA_STATE : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_LEARN_STATE : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_SCAN_STATE : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_FINISH_SCAN_STATE : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_INIT_CAL_STATE : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_FINISH_CAL_STATE : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_LISTEN_STATE : int;
const ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_MAX : int;
const ~place_holder_in_cap_bitmap~MCC : int;
const ~place_holder_in_cap_bitmap~P2P : int;
const ~place_holder_in_cap_bitmap~DOT11AC : int;
const ~place_holder_in_cap_bitmap~SLM_SESSIONIZATION : int;
const ~place_holder_in_cap_bitmap~DOT11AC_OPMODE : int;
const ~place_holder_in_cap_bitmap~SAP32STA : int;
const ~place_holder_in_cap_bitmap~TDLS : int;
const ~place_holder_in_cap_bitmap~P2P_GO_NOA_DECOUPLE_INIT_SCAN : int;
const ~place_holder_in_cap_bitmap~WLANACTIVE_OFFLOAD : int;
const ~place_holder_in_cap_bitmap~BEACON_OFFLOAD : int;
const ~place_holder_in_cap_bitmap~SCAN_OFFLOAD : int;
const ~place_holder_in_cap_bitmap~ROAM_OFFLOAD : int;
const ~place_holder_in_cap_bitmap~BCN_MISS_OFFLOAD : int;
const ~place_holder_in_cap_bitmap~STA_POWERSAVE : int;
const ~place_holder_in_cap_bitmap~STA_ADVANCED_PWRSAVE : int;
const ~place_holder_in_cap_bitmap~AP_UAPSD : int;
const ~place_holder_in_cap_bitmap~AP_DFS : int;
const ~place_holder_in_cap_bitmap~BLOCKACK : int;
const ~place_holder_in_cap_bitmap~PHY_ERR : int;
const ~place_holder_in_cap_bitmap~BCN_FILTER : int;
const ~place_holder_in_cap_bitmap~RTT : int;
const ~place_holder_in_cap_bitmap~RATECTRL : int;
const ~place_holder_in_cap_bitmap~WOW : int;
const ~place_holder_in_cap_bitmap~MAX_FEATURE_SUPPORTED : int;
const ~wcn36xx_dxe_ch_type~WCN36XX_DXE_CH_TX_L : int;
const ~wcn36xx_dxe_ch_type~WCN36XX_DXE_CH_TX_H : int;
const ~wcn36xx_dxe_ch_type~WCN36XX_DXE_CH_RX_L : int;
const ~wcn36xx_dxe_ch_type~WCN36XX_DXE_CH_RX_H : int;
const ~wcn36xx_dxe_ch_desc_num~WCN36XX_DXE_CH_DESC_NUMB_TX_L : int;
const ~wcn36xx_dxe_ch_desc_num~WCN36XX_DXE_CH_DESC_NUMB_TX_H : int;
const ~wcn36xx_dxe_ch_desc_num~WCN36XX_DXE_CH_DESC_NUMB_RX_L : int;
const ~wcn36xx_dxe_ch_desc_num~WCN36XX_DXE_CH_DESC_NUMB_RX_H : int;
const ~wcn36xx_power_state~WCN36XX_FULL_POWER : int;
const ~wcn36xx_power_state~WCN36XX_BMPS : int;
const ~irqreturn~IRQ_NONE : int;
const ~irqreturn~IRQ_HANDLED : int;
const ~irqreturn~IRQ_WAKE_THREAD : int;
const ~driver_type~DRIVER_TYPE_PRODUCTION : int;
const ~driver_type~DRIVER_TYPE_MFG : int;
const ~driver_type~DRIVER_TYPE_DVT : int;
const ~driver_type~DRIVER_TYPE_MAX : int;
const ~wcn36xx_hal_stop_type~HAL_STOP_TYPE_SYS_RESET : int;
const ~wcn36xx_hal_stop_type~HAL_STOP_TYPE_SYS_DEEP_SLEEP : int;
const ~wcn36xx_hal_stop_type~HAL_STOP_TYPE_RF_KILL : int;
const ~wcn36xx_hal_stop_type~HAL_STOP_TYPE_MAX : int;
const ~phy_chan_bond_state~PHY_SINGLE_CHANNEL_CENTERED : int;
const ~phy_chan_bond_state~PHY_DOUBLE_CHANNEL_LOW_PRIMARY : int;
const ~phy_chan_bond_state~PHY_DOUBLE_CHANNEL_CENTERED : int;
const ~phy_chan_bond_state~PHY_DOUBLE_CHANNEL_HIGH_PRIMARY : int;
const ~phy_chan_bond_state~PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED : int;
const ~phy_chan_bond_state~PHY_QUADRUPLE_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED : int;
const ~phy_chan_bond_state~PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED : int;
const ~phy_chan_bond_state~PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW : int;
const ~phy_chan_bond_state~PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_LOW : int;
const ~phy_chan_bond_state~PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH : int;
const ~phy_chan_bond_state~PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH : int;
const ~phy_chan_bond_state~PHY_CHANNEL_BONDING_STATE_MAX : int;
const ~wcn36xx_hal_ht_mimo_state~WCN36XX_HAL_HT_MIMO_PS_STATIC : int;
const ~wcn36xx_hal_ht_mimo_state~WCN36XX_HAL_HT_MIMO_PS_DYNAMIC : int;
const ~wcn36xx_hal_ht_mimo_state~WCN36XX_HAL_HT_MIMO_PS_NA : int;
const ~wcn36xx_hal_ht_mimo_state~WCN36XX_HAL_HT_MIMO_PS_NO_LIMIT : int;
const ~wcn36xx_hal_ht_mimo_state~WCN36XX_HAL_HT_MIMO_PS_MAX : int;
const ~wcn36xx_hal_bss_type~WCN36XX_HAL_INFRASTRUCTURE_MODE : int;
const ~wcn36xx_hal_bss_type~WCN36XX_HAL_INFRA_AP_MODE : int;
const ~wcn36xx_hal_bss_type~WCN36XX_HAL_IBSS_MODE : int;
const ~wcn36xx_hal_bss_type~WCN36XX_HAL_BTAMP_STA_MODE : int;
const ~wcn36xx_hal_bss_type~WCN36XX_HAL_BTAMP_AP_MODE : int;
const ~wcn36xx_hal_bss_type~WCN36XX_HAL_AUTO_MODE : int;
const ~wcn36xx_hal_bss_type~WCN36XX_HAL_DONOT_USE_BSS_TYPE : int;
const ~wcn36xx_hal_nw_type~WCN36XX_HAL_11A_NW_TYPE : int;
const ~wcn36xx_hal_nw_type~WCN36XX_HAL_11B_NW_TYPE : int;
const ~wcn36xx_hal_nw_type~WCN36XX_HAL_11G_NW_TYPE : int;
const ~wcn36xx_hal_nw_type~WCN36XX_HAL_11N_NW_TYPE : int;
const ~wcn36xx_hal_nw_type~WCN36XX_HAL_DONOT_USE_NW_TYPE : int;
const ~wcn36xx_hal_ht_operating_mode~WCN36XX_HAL_HT_OP_MODE_PURE : int;
const ~wcn36xx_hal_ht_operating_mode~WCN36XX_HAL_HT_OP_MODE_OVERLAP_LEGACY : int;
const ~wcn36xx_hal_ht_operating_mode~WCN36XX_HAL_HT_OP_MODE_NO_LEGACY_20MHZ_HT : int;
const ~wcn36xx_hal_ht_operating_mode~WCN36XX_HAL_HT_OP_MODE_MIXED : int;
const ~wcn36xx_hal_ht_operating_mode~WCN36XX_HAL_HT_OP_MODE_MAX : int;
const ~ani_key_direction~WCN36XX_HAL_TX_ONLY : int;
const ~ani_key_direction~WCN36XX_HAL_RX_ONLY : int;
const ~ani_key_direction~WCN36XX_HAL_TX_RX : int;
const ~ani_key_direction~WCN36XX_HAL_TX_DEFAULT : int;
const ~ani_key_direction~WCN36XX_HAL_DONOT_USE_KEY_DIRECTION : int;
const ~ani_wep_type~WCN36XX_HAL_WEP_STATIC : int;
const ~ani_wep_type~WCN36XX_HAL_WEP_DYNAMIC : int;
const ~ani_wep_type~WCN36XX_HAL_WEP_MAX : int;
axiom #funAddr~wcn36xx_tx.base == -1 && #funAddr~wcn36xx_tx.offset == 0;
axiom #funAddr~wcn36xx_start.base == -1 && #funAddr~wcn36xx_start.offset == 1;
axiom #funAddr~wcn36xx_stop.base == -1 && #funAddr~wcn36xx_stop.offset == 2;
axiom #funAddr~wcn36xx_suspend.base == -1 && #funAddr~wcn36xx_suspend.offset == 3;
axiom #funAddr~wcn36xx_resume.base == -1 && #funAddr~wcn36xx_resume.offset == 4;
axiom #funAddr~wcn36xx_add_interface.base == -1 && #funAddr~wcn36xx_add_interface.offset == 5;
axiom #funAddr~wcn36xx_remove_interface.base == -1 && #funAddr~wcn36xx_remove_interface.offset == 6;
axiom #funAddr~wcn36xx_config.base == -1 && #funAddr~wcn36xx_config.offset == 7;
axiom #funAddr~wcn36xx_bss_info_changed.base == -1 && #funAddr~wcn36xx_bss_info_changed.offset == 8;
axiom #funAddr~wcn36xx_configure_filter.base == -1 && #funAddr~wcn36xx_configure_filter.offset == 9;
axiom #funAddr~wcn36xx_set_key.base == -1 && #funAddr~wcn36xx_set_key.offset == 10;
axiom #funAddr~wcn36xx_sw_scan_start.base == -1 && #funAddr~wcn36xx_sw_scan_start.offset == 11;
axiom #funAddr~wcn36xx_sw_scan_complete.base == -1 && #funAddr~wcn36xx_sw_scan_complete.offset == 12;
axiom #funAddr~wcn36xx_set_rts_threshold.base == -1 && #funAddr~wcn36xx_set_rts_threshold.offset == 13;
axiom #funAddr~wcn36xx_sta_add.base == -1 && #funAddr~wcn36xx_sta_add.offset == 14;
axiom #funAddr~wcn36xx_sta_remove.base == -1 && #funAddr~wcn36xx_sta_remove.offset == 15;
axiom #funAddr~wcn36xx_ampdu_action.base == -1 && #funAddr~wcn36xx_ampdu_action.offset == 16;
axiom #funAddr~wcn36xx_probe.base == -1 && #funAddr~wcn36xx_probe.offset == 17;
axiom #funAddr~wcn36xx_remove.base == -1 && #funAddr~wcn36xx_remove.offset == 18;
axiom #funAddr~wcn36xx_irq_tx_complete.base == -1 && #funAddr~wcn36xx_irq_tx_complete.offset == 19;
axiom #funAddr~wcn36xx_irq_rx_ready.base == -1 && #funAddr~wcn36xx_irq_rx_ready.offset == 20;
axiom #funAddr~wcn36xx_ind_smd_work.base == -1 && #funAddr~wcn36xx_ind_smd_work.offset == 21;
axiom #funAddr~wcn36xx_smd_rsp_process.base == -1 && #funAddr~wcn36xx_smd_rsp_process.offset == 22;
axiom #funAddr~read_file_bool_bmps.base == -1 && #funAddr~read_file_bool_bmps.offset == 23;
axiom #funAddr~write_file_bool_bmps.base == -1 && #funAddr~write_file_bool_bmps.offset == 24;
axiom #funAddr~simple_open.base == -1 && #funAddr~simple_open.offset == 25;
axiom #funAddr~write_file_dump.base == -1 && #funAddr~write_file_dump.offset == 26;
axiom ~rpm_status~RPM_ACTIVE == 0;
axiom ~rpm_status~RPM_RESUMING == 1;
axiom ~rpm_status~RPM_SUSPENDED == 2;
axiom ~rpm_status~RPM_SUSPENDING == 3;
axiom ~rpm_request~RPM_REQ_NONE == 0;
axiom ~rpm_request~RPM_REQ_IDLE == 1;
axiom ~rpm_request~RPM_REQ_SUSPEND == 2;
axiom ~rpm_request~RPM_REQ_AUTOSUSPEND == 3;
axiom ~rpm_request~RPM_REQ_RESUME == 4;
axiom ~ldv_13278~SS_FREE == 0;
axiom ~ldv_13278~SS_UNCONNECTED == 1;
axiom ~ldv_13278~SS_CONNECTING == 2;
axiom ~ldv_13278~SS_CONNECTED == 3;
axiom ~ldv_13278~SS_DISCONNECTING == 4;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NONE == 0;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NET == 1;
axiom ~kobj_ns_type~KOBJ_NS_TYPES == 2;
axiom ~dma_data_direction~DMA_BIDIRECTIONAL == 0;
axiom ~dma_data_direction~DMA_TO_DEVICE == 1;
axiom ~dma_data_direction~DMA_FROM_DEVICE == 2;
axiom ~dma_data_direction~DMA_NONE == 3;
axiom ~pid_type~PIDTYPE_PID == 0;
axiom ~pid_type~PIDTYPE_PGID == 1;
axiom ~pid_type~PIDTYPE_SID == 2;
axiom ~pid_type~PIDTYPE_MAX == 3;
axiom ~module_state~MODULE_STATE_LIVE == 0;
axiom ~module_state~MODULE_STATE_COMING == 1;
axiom ~module_state~MODULE_STATE_GOING == 2;
axiom ~module_state~MODULE_STATE_UNFORMED == 3;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_RESUME_LATENCY == 1;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_LATENCY_TOLERANCE == 2;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_FLAGS == 3;
axiom ~pm_qos_type~PM_QOS_UNITIALIZED == 0;
axiom ~pm_qos_type~PM_QOS_MAX == 1;
axiom ~pm_qos_type~PM_QOS_MIN == 2;
axiom ~migrate_mode~MIGRATE_ASYNC == 0;
axiom ~migrate_mode~MIGRATE_SYNC_LIGHT == 1;
axiom ~migrate_mode~MIGRATE_SYNC == 2;
axiom ~quota_type~USRQUOTA == 0;
axiom ~quota_type~GRPQUOTA == 1;
axiom ~quota_type~PRJQUOTA == 2;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_INACTIVE == 0;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_ACTIVE == 1;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_ON == 2;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_OFF == 3;
axiom ~netdev_tx~__NETDEV_TX_MIN == -2147483648;
axiom ~netdev_tx~NETDEV_TX_OK == 0;
axiom ~netdev_tx~NETDEV_TX_BUSY == 16;
axiom ~netdev_tx~NETDEV_TX_LOCKED == 32;
axiom ~rx_handler_result~RX_HANDLER_CONSUMED == 0;
axiom ~rx_handler_result~RX_HANDLER_ANOTHER == 1;
axiom ~rx_handler_result~RX_HANDLER_EXACT == 2;
axiom ~rx_handler_result~RX_HANDLER_PASS == 3;
axiom ~nl80211_iftype~NL80211_IFTYPE_UNSPECIFIED == 0;
axiom ~nl80211_iftype~NL80211_IFTYPE_ADHOC == 1;
axiom ~nl80211_iftype~NL80211_IFTYPE_STATION == 2;
axiom ~nl80211_iftype~NL80211_IFTYPE_AP == 3;
axiom ~nl80211_iftype~NL80211_IFTYPE_AP_VLAN == 4;
axiom ~nl80211_iftype~NL80211_IFTYPE_WDS == 5;
axiom ~nl80211_iftype~NL80211_IFTYPE_MONITOR == 6;
axiom ~nl80211_iftype~NL80211_IFTYPE_MESH_POINT == 7;
axiom ~nl80211_iftype~NL80211_IFTYPE_P2P_CLIENT == 8;
axiom ~nl80211_iftype~NL80211_IFTYPE_P2P_GO == 9;
axiom ~nl80211_iftype~NL80211_IFTYPE_P2P_DEVICE == 10;
axiom ~nl80211_iftype~NUM_NL80211_IFTYPES == 11;
axiom ~nl80211_iftype~NL80211_IFTYPE_MAX == 10;
axiom ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_CORE == 0;
axiom ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_USER == 1;
axiom ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_DRIVER == 2;
axiom ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_COUNTRY_IE == 3;
axiom ~nl80211_dfs_regions~NL80211_DFS_UNSET == 0;
axiom ~nl80211_dfs_regions~NL80211_DFS_FCC == 1;
axiom ~nl80211_dfs_regions~NL80211_DFS_ETSI == 2;
axiom ~nl80211_dfs_regions~NL80211_DFS_JP == 3;
axiom ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_USER == 0;
axiom ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_CELL_BASE == 1;
axiom ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_INDOOR == 2;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_20_NOHT == 0;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_20 == 1;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_40 == 2;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_80 == 3;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_80P80 == 4;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_160 == 5;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_5 == 6;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_10 == 7;
axiom ~nl80211_bss_scan_width~NL80211_BSS_CHAN_WIDTH_20 == 0;
axiom ~nl80211_bss_scan_width~NL80211_BSS_CHAN_WIDTH_10 == 1;
axiom ~nl80211_bss_scan_width~NL80211_BSS_CHAN_WIDTH_5 == 2;
axiom ~nl80211_auth_type~NL80211_AUTHTYPE_OPEN_SYSTEM == 0;
axiom ~nl80211_auth_type~NL80211_AUTHTYPE_SHARED_KEY == 1;
axiom ~nl80211_auth_type~NL80211_AUTHTYPE_FT == 2;
axiom ~nl80211_auth_type~NL80211_AUTHTYPE_NETWORK_EAP == 3;
axiom ~nl80211_auth_type~NL80211_AUTHTYPE_SAE == 4;
axiom ~nl80211_auth_type~__NL80211_AUTHTYPE_NUM == 5;
axiom ~nl80211_auth_type~NL80211_AUTHTYPE_MAX == 4;
axiom ~nl80211_auth_type~NL80211_AUTHTYPE_AUTOMATIC == 5;
axiom ~nl80211_mfp~NL80211_MFP_NO == 0;
axiom ~nl80211_mfp~NL80211_MFP_REQUIRED == 1;
axiom ~nl80211_txrate_gi~NL80211_TXRATE_DEFAULT_GI == 0;
axiom ~nl80211_txrate_gi~NL80211_TXRATE_FORCE_SGI == 1;
axiom ~nl80211_txrate_gi~NL80211_TXRATE_FORCE_LGI == 2;
axiom ~nl80211_dfs_state~NL80211_DFS_USABLE == 0;
axiom ~nl80211_dfs_state~NL80211_DFS_UNAVAILABLE == 1;
axiom ~nl80211_dfs_state~NL80211_DFS_AVAILABLE == 2;
axiom ~environment_cap~ENVIRON_ANY == 0;
axiom ~environment_cap~ENVIRON_INDOOR == 1;
axiom ~environment_cap~ENVIRON_OUTDOOR == 2;
axiom ~ieee80211_band~IEEE80211_BAND_2GHZ == 0;
axiom ~ieee80211_band~IEEE80211_BAND_5GHZ == 1;
axiom ~ieee80211_band~IEEE80211_BAND_60GHZ == 2;
axiom ~ieee80211_band~IEEE80211_NUM_BANDS == 3;
axiom ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_NONE == 0;
axiom ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_MBM == 1;
axiom ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_UNSPEC == 2;
axiom ~ieee80211_chanctx_switch_mode~CHANCTX_SWMODE_REASSIGN_VIF == 0;
axiom ~ieee80211_chanctx_switch_mode~CHANCTX_SWMODE_SWAP_CONTEXTS == 1;
axiom ~ieee80211_rssi_event~RSSI_EVENT_HIGH == 0;
axiom ~ieee80211_rssi_event~RSSI_EVENT_LOW == 1;
axiom ~ieee80211_smps_mode~IEEE80211_SMPS_AUTOMATIC == 0;
axiom ~ieee80211_smps_mode~IEEE80211_SMPS_OFF == 1;
axiom ~ieee80211_smps_mode~IEEE80211_SMPS_STATIC == 2;
axiom ~ieee80211_smps_mode~IEEE80211_SMPS_DYNAMIC == 3;
axiom ~ieee80211_smps_mode~IEEE80211_SMPS_NUM_MODES == 4;
axiom ~set_key_cmd~SET_KEY == 0;
axiom ~set_key_cmd~DISABLE_KEY == 1;
axiom ~ieee80211_sta_state~IEEE80211_STA_NOTEXIST == 0;
axiom ~ieee80211_sta_state~IEEE80211_STA_NONE == 1;
axiom ~ieee80211_sta_state~IEEE80211_STA_AUTH == 2;
axiom ~ieee80211_sta_state~IEEE80211_STA_ASSOC == 3;
axiom ~ieee80211_sta_state~IEEE80211_STA_AUTHORIZED == 4;
axiom ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_20 == 0;
axiom ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_40 == 1;
axiom ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_80 == 2;
axiom ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_160 == 3;
axiom ~sta_notify_cmd~STA_NOTIFY_SLEEP == 0;
axiom ~sta_notify_cmd~STA_NOTIFY_AWAKE == 1;
axiom ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_RX_START == 0;
axiom ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_RX_STOP == 1;
axiom ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_START == 2;
axiom ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_STOP_CONT == 3;
axiom ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_STOP_FLUSH == 4;
axiom ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_STOP_FLUSH_CONT == 5;
axiom ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_OPERATIONAL == 6;
axiom ~ieee80211_frame_release_type~IEEE80211_FRAME_RELEASE_PSPOLL == 0;
axiom ~ieee80211_frame_release_type~IEEE80211_FRAME_RELEASE_UAPSD == 1;
axiom ~ieee80211_roc_type~IEEE80211_ROC_TYPE_NORMAL == 0;
axiom ~ieee80211_roc_type~IEEE80211_ROC_TYPE_MGMT_TX == 1;
axiom ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_NORMAL == 0;
axiom ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_LEARN == 1;
axiom ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_SCAN == 2;
axiom ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_PROMISC == 3;
axiom ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_SUSPEND_LINK == 4;
axiom ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_ROAM_SCAN == 5;
axiom ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_ROAM_SUSPEND_LINK == 6;
axiom ~wcn36xx_hal_sys_mode~HAL_SYS_MODE_MAX == 2147483647;
axiom ~sta_rate_mode~STA_TAURUS == 0;
axiom ~sta_rate_mode~STA_TITAN == 1;
axiom ~sta_rate_mode~STA_POLARIS == 2;
axiom ~sta_rate_mode~STA_11b == 3;
axiom ~sta_rate_mode~STA_11bg == 4;
axiom ~sta_rate_mode~STA_11a == 5;
axiom ~sta_rate_mode~STA_11n == 6;
axiom ~sta_rate_mode~STA_11ac == 7;
axiom ~sta_rate_mode~STA_INVALID_RATE_MODE == 2147483647;
axiom ~ani_ed_type~WCN36XX_HAL_ED_NONE == 0;
axiom ~ani_ed_type~WCN36XX_HAL_ED_WEP40 == 1;
axiom ~ani_ed_type~WCN36XX_HAL_ED_WEP104 == 2;
axiom ~ani_ed_type~WCN36XX_HAL_ED_TKIP == 3;
axiom ~ani_ed_type~WCN36XX_HAL_ED_CCMP == 4;
axiom ~ani_ed_type~WCN36XX_HAL_ED_WPI == 5;
axiom ~ani_ed_type~WCN36XX_HAL_ED_AES_128_CMAC == 6;
axiom ~ani_ed_type~WCN36XX_HAL_ED_NOT_IMPLEMENTED == 2147483647;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_IDLE_STATE == 0;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_PREASSOC_STATE == 1;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_POSTASSOC_STATE == 2;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_AP_STATE == 3;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_IBSS_STATE == 4;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_BTAMP_PREASSOC_STATE == 5;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_BTAMP_POSTASSOC_STATE == 6;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_BTAMP_AP_STATE == 7;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_BTAMP_STA_STATE == 8;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_LEARN_STATE == 9;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_SCAN_STATE == 10;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_FINISH_SCAN_STATE == 11;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_INIT_CAL_STATE == 12;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_FINISH_CAL_STATE == 13;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_LISTEN_STATE == 14;
axiom ~wcn36xx_hal_link_state~WCN36XX_HAL_LINK_MAX == 2147483647;
axiom ~place_holder_in_cap_bitmap~MCC == 0;
axiom ~place_holder_in_cap_bitmap~P2P == 1;
axiom ~place_holder_in_cap_bitmap~DOT11AC == 2;
axiom ~place_holder_in_cap_bitmap~SLM_SESSIONIZATION == 3;
axiom ~place_holder_in_cap_bitmap~DOT11AC_OPMODE == 4;
axiom ~place_holder_in_cap_bitmap~SAP32STA == 5;
axiom ~place_holder_in_cap_bitmap~TDLS == 6;
axiom ~place_holder_in_cap_bitmap~P2P_GO_NOA_DECOUPLE_INIT_SCAN == 7;
axiom ~place_holder_in_cap_bitmap~WLANACTIVE_OFFLOAD == 8;
axiom ~place_holder_in_cap_bitmap~BEACON_OFFLOAD == 9;
axiom ~place_holder_in_cap_bitmap~SCAN_OFFLOAD == 10;
axiom ~place_holder_in_cap_bitmap~ROAM_OFFLOAD == 11;
axiom ~place_holder_in_cap_bitmap~BCN_MISS_OFFLOAD == 12;
axiom ~place_holder_in_cap_bitmap~STA_POWERSAVE == 13;
axiom ~place_holder_in_cap_bitmap~STA_ADVANCED_PWRSAVE == 14;
axiom ~place_holder_in_cap_bitmap~AP_UAPSD == 15;
axiom ~place_holder_in_cap_bitmap~AP_DFS == 16;
axiom ~place_holder_in_cap_bitmap~BLOCKACK == 17;
axiom ~place_holder_in_cap_bitmap~PHY_ERR == 18;
axiom ~place_holder_in_cap_bitmap~BCN_FILTER == 19;
axiom ~place_holder_in_cap_bitmap~RTT == 20;
axiom ~place_holder_in_cap_bitmap~RATECTRL == 21;
axiom ~place_holder_in_cap_bitmap~WOW == 22;
axiom ~place_holder_in_cap_bitmap~MAX_FEATURE_SUPPORTED == 128;
axiom ~wcn36xx_dxe_ch_type~WCN36XX_DXE_CH_TX_L == 0;
axiom ~wcn36xx_dxe_ch_type~WCN36XX_DXE_CH_TX_H == 1;
axiom ~wcn36xx_dxe_ch_type~WCN36XX_DXE_CH_RX_L == 2;
axiom ~wcn36xx_dxe_ch_type~WCN36XX_DXE_CH_RX_H == 3;
axiom ~wcn36xx_dxe_ch_desc_num~WCN36XX_DXE_CH_DESC_NUMB_TX_L == 128;
axiom ~wcn36xx_dxe_ch_desc_num~WCN36XX_DXE_CH_DESC_NUMB_TX_H == 10;
axiom ~wcn36xx_dxe_ch_desc_num~WCN36XX_DXE_CH_DESC_NUMB_RX_L == 512;
axiom ~wcn36xx_dxe_ch_desc_num~WCN36XX_DXE_CH_DESC_NUMB_RX_H == 40;
axiom ~wcn36xx_power_state~WCN36XX_FULL_POWER == 0;
axiom ~wcn36xx_power_state~WCN36XX_BMPS == 1;
axiom ~irqreturn~IRQ_NONE == 0;
axiom ~irqreturn~IRQ_HANDLED == 1;
axiom ~irqreturn~IRQ_WAKE_THREAD == 2;
axiom ~driver_type~DRIVER_TYPE_PRODUCTION == 0;
axiom ~driver_type~DRIVER_TYPE_MFG == 1;
axiom ~driver_type~DRIVER_TYPE_DVT == 2;
axiom ~driver_type~DRIVER_TYPE_MAX == 2147483647;
axiom ~wcn36xx_hal_stop_type~HAL_STOP_TYPE_SYS_RESET == 0;
axiom ~wcn36xx_hal_stop_type~HAL_STOP_TYPE_SYS_DEEP_SLEEP == 1;
axiom ~wcn36xx_hal_stop_type~HAL_STOP_TYPE_RF_KILL == 2;
axiom ~wcn36xx_hal_stop_type~HAL_STOP_TYPE_MAX == 2147483647;
axiom ~phy_chan_bond_state~PHY_SINGLE_CHANNEL_CENTERED == 0;
axiom ~phy_chan_bond_state~PHY_DOUBLE_CHANNEL_LOW_PRIMARY == 1;
axiom ~phy_chan_bond_state~PHY_DOUBLE_CHANNEL_CENTERED == 2;
axiom ~phy_chan_bond_state~PHY_DOUBLE_CHANNEL_HIGH_PRIMARY == 3;
axiom ~phy_chan_bond_state~PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED == 4;
axiom ~phy_chan_bond_state~PHY_QUADRUPLE_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED == 5;
axiom ~phy_chan_bond_state~PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED == 6;
axiom ~phy_chan_bond_state~PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW == 7;
axiom ~phy_chan_bond_state~PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_LOW == 8;
axiom ~phy_chan_bond_state~PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH == 9;
axiom ~phy_chan_bond_state~PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH == 10;
axiom ~phy_chan_bond_state~PHY_CHANNEL_BONDING_STATE_MAX == 2147483647;
axiom ~wcn36xx_hal_ht_mimo_state~WCN36XX_HAL_HT_MIMO_PS_STATIC == 0;
axiom ~wcn36xx_hal_ht_mimo_state~WCN36XX_HAL_HT_MIMO_PS_DYNAMIC == 1;
axiom ~wcn36xx_hal_ht_mimo_state~WCN36XX_HAL_HT_MIMO_PS_NA == 2;
axiom ~wcn36xx_hal_ht_mimo_state~WCN36XX_HAL_HT_MIMO_PS_NO_LIMIT == 3;
axiom ~wcn36xx_hal_ht_mimo_state~WCN36XX_HAL_HT_MIMO_PS_MAX == 2147483647;
axiom ~wcn36xx_hal_bss_type~WCN36XX_HAL_INFRASTRUCTURE_MODE == 0;
axiom ~wcn36xx_hal_bss_type~WCN36XX_HAL_INFRA_AP_MODE == 1;
axiom ~wcn36xx_hal_bss_type~WCN36XX_HAL_IBSS_MODE == 2;
axiom ~wcn36xx_hal_bss_type~WCN36XX_HAL_BTAMP_STA_MODE == 3;
axiom ~wcn36xx_hal_bss_type~WCN36XX_HAL_BTAMP_AP_MODE == 4;
axiom ~wcn36xx_hal_bss_type~WCN36XX_HAL_AUTO_MODE == 5;
axiom ~wcn36xx_hal_bss_type~WCN36XX_HAL_DONOT_USE_BSS_TYPE == 2147483647;
axiom ~wcn36xx_hal_nw_type~WCN36XX_HAL_11A_NW_TYPE == 0;
axiom ~wcn36xx_hal_nw_type~WCN36XX_HAL_11B_NW_TYPE == 1;
axiom ~wcn36xx_hal_nw_type~WCN36XX_HAL_11G_NW_TYPE == 2;
axiom ~wcn36xx_hal_nw_type~WCN36XX_HAL_11N_NW_TYPE == 3;
axiom ~wcn36xx_hal_nw_type~WCN36XX_HAL_DONOT_USE_NW_TYPE == 2147483647;
axiom ~wcn36xx_hal_ht_operating_mode~WCN36XX_HAL_HT_OP_MODE_PURE == 0;
axiom ~wcn36xx_hal_ht_operating_mode~WCN36XX_HAL_HT_OP_MODE_OVERLAP_LEGACY == 1;
axiom ~wcn36xx_hal_ht_operating_mode~WCN36XX_HAL_HT_OP_MODE_NO_LEGACY_20MHZ_HT == 2;
axiom ~wcn36xx_hal_ht_operating_mode~WCN36XX_HAL_HT_OP_MODE_MIXED == 3;
axiom ~wcn36xx_hal_ht_operating_mode~WCN36XX_HAL_HT_OP_MODE_MAX == 2147483647;
axiom ~ani_key_direction~WCN36XX_HAL_TX_ONLY == 0;
axiom ~ani_key_direction~WCN36XX_HAL_RX_ONLY == 1;
axiom ~ani_key_direction~WCN36XX_HAL_TX_RX == 2;
axiom ~ani_key_direction~WCN36XX_HAL_TX_DEFAULT == 3;
axiom ~ani_key_direction~WCN36XX_HAL_DONOT_USE_KEY_DIRECTION == 2147483647;
axiom ~ani_wep_type~WCN36XX_HAL_WEP_STATIC == 0;
axiom ~ani_wep_type~WCN36XX_HAL_WEP_DYNAMIC == 1;
axiom ~ani_wep_type~WCN36XX_HAL_WEP_MAX == 2147483647;
function { :overapproximation "bitwiseOr" } ~bitwiseOr(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseAnd" } ~bitwiseAnd(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "shiftRight" } ~shiftRight(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "shiftLeft" } ~shiftLeft(in0 : int, in1 : int) returns (out : int);
var ~ldv_irq_1_3 : int;

var ~ldv_irq_data_1_1.base : int, ~ldv_irq_data_1_1.offset : int;

var ~ldv_irq_1_0 : int;

var ~ldv_state_variable_6 : int;

var ~ldv_irq_data_1_0.base : int, ~ldv_irq_data_1_0.offset : int;

var ~ldv_state_variable_0 : int;

var ~ldv_state_variable_5 : int;

var ~ldv_state_variable_2 : int;

var ~ldv_irq_data_1_3.base : int, ~ldv_irq_data_1_3.offset : int;

var ~ldv_irq_data_1_2.base : int, ~ldv_irq_data_1_2.offset : int;

var ~ldv_irq_1_2 : int;

var ~ldv_irq_1_1 : int;

var ~ldv_irq_line_1_3 : int;

var ~ldv_state_variable_3 : int;

var ~ldv_irq_line_1_0 : int;

var ~ref_cnt : int;

var ~ldv_irq_line_1_1 : int;

var ~ldv_state_variable_1 : int;

var ~ldv_irq_line_1_2 : int;

var ~ldv_state_variable_4 : int;

var ~wcn36xx_dbg_mask : int;

var ~#wcn36xx_caps_names.base : int, ~#wcn36xx_caps_names.offset : int;

var ~ldv_retval_0 : int;

var ~ldv_retval_4 : int;

var ~ldv_retval_6 : int;

var ~ldv_retval_1 : int;

var ~ldv_retval_2 : int;

var ~jiffies : int;

var ~ldv_retval_5 : int;

var ~ldv_retval_3 : int;

var ~last_index : int;

var ~#__this_module.base : int, ~#__this_module.offset : int;

var ~#rcu_lock_map.base : int, ~#rcu_lock_map.offset : int;

var ~wcn36xx_ops_group1.base : int, ~wcn36xx_ops_group1.offset : int;

var ~fops_wcn36xx_bmps_group2.base : int, ~fops_wcn36xx_bmps_group2.offset : int;

var ~fops_wcn36xx_dump_group2.base : int, ~fops_wcn36xx_dump_group2.offset : int;

var ~fops_wcn36xx_dump_group1.base : int, ~fops_wcn36xx_dump_group1.offset : int;

var ~wcn36xx_driver_group0.base : int, ~wcn36xx_driver_group0.offset : int;

var ~wcn36xx_ops_group2.base : int, ~wcn36xx_ops_group2.offset : int;

var ~wcn36xx_ops_group0.base : int, ~wcn36xx_ops_group0.offset : int;

var ~fops_wcn36xx_bmps_group1.base : int, ~fops_wcn36xx_bmps_group1.offset : int;

var ~#wcn_2ghz_channels.base : int, ~#wcn_2ghz_channels.offset : int;

var ~#wcn_5ghz_channels.base : int, ~#wcn_5ghz_channels.offset : int;

var ~#wcn_2ghz_rates.base : int, ~#wcn_2ghz_rates.offset : int;

var ~#wcn_5ghz_rates.base : int, ~#wcn_5ghz_rates.offset : int;

var ~#wcn_band_2ghz.base : int, ~#wcn_band_2ghz.offset : int;

var ~#wcn_band_5ghz.base : int, ~#wcn_band_5ghz.offset : int;

var ~#wowlan_support.base : int, ~#wowlan_support.offset : int;

var ~#wcn36xx_ops.base : int, ~#wcn36xx_ops.offset : int;

var ~#wcn36xx_platform_id_table.base : int, ~#wcn36xx_platform_id_table.offset : int;

var ~#wcn36xx_driver.base : int, ~#wcn36xx_driver.offset : int;

var ~pv_irq_ops.save_fl.func.base : int, ~pv_irq_ops.save_fl.func.offset : int, ~pv_irq_ops.restore_fl.func.base : int, ~pv_irq_ops.restore_fl.func.offset : int, ~pv_irq_ops.irq_disable.func.base : int, ~pv_irq_ops.irq_disable.func.offset : int, ~pv_irq_ops.irq_enable.func.base : int, ~pv_irq_ops.irq_enable.func.offset : int, ~pv_irq_ops.safe_halt.base : int, ~pv_irq_ops.safe_halt.offset : int, ~pv_irq_ops.halt.base : int, ~pv_irq_ops.halt.offset : int, ~pv_irq_ops.adjust_exception_frame.base : int, ~pv_irq_ops.adjust_exception_frame.offset : int;

var ~#x86_dma_fallback_dev.base : int, ~#x86_dma_fallback_dev.offset : int;

var ~dma_ops.base : int, ~dma_ops.offset : int;

var ~#fops_wcn36xx_bmps.base : int, ~#fops_wcn36xx_bmps.offset : int;

var ~#fops_wcn36xx_dump.base : int, ~#fops_wcn36xx_dump.offset : int;

var ~#set_impl.base : int, ~#set_impl.offset : int;

var ~LDV_SKBS.base : int, ~LDV_SKBS.offset : int;

var #NULL.base : int, #NULL.offset : int;

var #valid : [int]int;

var #length : [int]int;

var #memory_int : [int,int]int;

var #memory_$Pointer$.base : [int,int]int, #memory_$Pointer$.offset : [int,int]int;

implementation ldv___platform_driver_register_12(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int, #in~ldv_func_arg2.base : int, #in~ldv_func_arg2.offset : int) returns (#res : int){
    var #t~ret612 : int;
    var ~ldv_func_arg1.base : int, ~ldv_func_arg1.offset : int;
    var ~ldv_func_arg2.base : int, ~ldv_func_arg2.offset : int;
    var ~ldv_func_res~563 : ~ldv_func_ret_type;
    var ~tmp~563 : int;

  loc0:
    ~ldv_func_arg1.base, ~ldv_func_arg1.offset := #in~ldv_func_arg1.base, #in~ldv_func_arg1.offset;
    ~ldv_func_arg2.base, ~ldv_func_arg2.offset := #in~ldv_func_arg2.base, #in~ldv_func_arg2.offset;
    havoc ~ldv_func_res~563;
    havoc ~tmp~563;
    call #t~ret612 := __platform_driver_register(~ldv_func_arg1.base, ~ldv_func_arg1.offset, ~ldv_func_arg2.base, ~ldv_func_arg2.offset);
    assume -2147483648 <= #t~ret612 && #t~ret612 <= 2147483647;
    ~tmp~563 := #t~ret612;
    havoc #t~ret612;
    ~ldv_func_res~563 := ~tmp~563;
    ~ldv_state_variable_5 := 1;
    call ldv_initialize_platform_driver_5();
    #res := ~ldv_func_res~563;
    assume true;
    return;
}

procedure ldv___platform_driver_register_12(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int, #in~ldv_func_arg2.base : int, #in~ldv_func_arg2.offset : int) returns (#res : int);
modifies ~ldv_state_variable_5, #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~wcn36xx_driver_group0.base, ~wcn36xx_driver_group0.offset;

implementation ldv_set_is_empty(#in~set.base : int, #in~set.offset : int) returns (#res : int){
    var ~set.base : int, ~set.offset : int;

  loc1:
    ~set.base, ~set.offset := #in~set.base, #in~set.offset;
    #res := (if ~last_index == 0 then 1 else 0);
    assume true;
    return;
}

procedure ldv_set_is_empty(#in~set.base : int, #in~set.offset : int) returns (#res : int);
modifies ;

implementation #Ultimate.C_memset(#ptr.base : int, #ptr.offset : int, #value : int, #amount : int) returns (#res.base : int, #res.offset : int){
    var #t~loopctr2826 : int;

  loc2:
    #t~loopctr2826 := 0;
    goto loc3;
  loc3:
    goto loc3_0, loc3_1;
  loc3_0:
    assume #t~loopctr2826 < #amount;
    #memory_int := #memory_int[#ptr.base,#ptr.offset + #t~loopctr2826 * 1 := #value];
    #memory_$Pointer$.base, #memory_$Pointer$.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset + #t~loopctr2826 * 1 := 0], #memory_$Pointer$.offset[#ptr.base,#ptr.offset + #t~loopctr2826 * 1 := #value % 256];
    #t~loopctr2826 := #t~loopctr2826 + 1;
    goto loc3;
  loc3_1:
    assume !(#t~loopctr2826 < #amount);
    assume #res.base == #ptr.base && #res.offset == #ptr.offset;
    return;
}

procedure #Ultimate.C_memset(#ptr.base : int, #ptr.offset : int, #value : int, #amount : int) returns (#res.base : int, #res.offset : int);
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
free ensures #res.base == #ptr.base && #res.offset == #ptr.offset;

implementation main() returns (#res : int){
    var #t~ret552.base : int, #t~ret552.offset : int;
    var #t~ret553 : ~u16;
    var #t~nondet554 : int;
    var #t~ret555.base : int, #t~ret555.offset : int;
    var #t~ret556.base : int, #t~ret556.offset : int;
    var #t~ret557 : ~u32;
    var #t~ret558.base : int, #t~ret558.offset : int;
    var #t~ret559 : ~u32;
    var #t~ret560 : ~u8;
    var #t~ret561 : ~u32;
    var #t~ret562.base : int, #t~ret562.offset : int;
    var #t~ret563.base : int, #t~ret563.offset : int;
    var #t~ret564.base : int, #t~ret564.offset : int;
    var #t~memset565.base : int, #t~memset565.offset : int;
    var #t~memset566.base : int, #t~memset566.offset : int;
    var #t~memset567.base : int, #t~memset567.offset : int;
    var #t~nondet568 : int;
    var #t~switch569 : bool;
    var #t~nondet570 : int;
    var #t~switch571 : bool;
    var #t~ret572 : int;
    var #t~ret573 : int;
    var #t~ret574 : int;
    var #t~ret575 : int;
    var #t~mem576 : int;
    var #t~ret577 : int;
    var #t~mem578 : int;
    var #t~ret579 : int;
    var #t~mem580 : int;
    var #t~ret581 : int;
    var #t~ret582 : int;
    var #t~ret583 : int;
    var #t~ret584 : int;
    var #t~ret585 : int;
    var #t~ret586 : int;
    var #t~mem587 : int;
    var #t~ret588 : int;
    var #t~mem589 : int;
    var #t~ret590 : int;
    var #t~mem591 : int;
    var #t~ret592 : int;
    var #t~mem593 : int;
    var #t~mem594 : int;
    var #t~mem595 : int;
    var #t~ret596 : int;
    var #t~ret597 : int;
    var #t~ret598 : int;
    var #t~ret599 : int;
    var #t~ret600 : int;
    var #t~ret601 : int;
    var #t~ret602 : int;
    var #t~ret603 : int;
    var #t~ret604 : int;
    var #t~nondet605 : int;
    var #t~switch606 : bool;
    var #t~ret607 : int;
    var #t~nondet608 : int;
    var #t~switch609 : bool;
    var #t~ret610 : int;
    var #t~ret611 : int;
    var ~ldvarg11~439.base : int, ~ldvarg11~439.offset : int;
    var ~tmp~439.base : int, ~tmp~439.offset : int;
    var ~ldvarg7~439 : ~u16;
    var ~tmp___0~439 : ~u16;
    var ~ldvarg3~439 : int;
    var ~tmp___1~439 : int;
    var ~ldvarg12~439.base : int, ~ldvarg12~439.offset : int;
    var ~tmp___2~439.base : int, ~tmp___2~439.offset : int;
    var ~ldvarg8~439.base : int, ~ldvarg8~439.offset : int;
    var ~tmp___3~439.base : int, ~tmp___3~439.offset : int;
    var ~#ldvarg1~439.base : int, ~#ldvarg1~439.offset : int;
    var ~#ldvarg13~439.base : int, ~#ldvarg13~439.offset : int;
    var ~ldvarg10~439 : ~u32;
    var ~tmp___4~439 : ~u32;
    var ~ldvarg9~439.base : int, ~ldvarg9~439.offset : int;
    var ~tmp___5~439.base : int, ~tmp___5~439.offset : int;
    var ~ldvarg0~439 : ~u32;
    var ~tmp___6~439 : ~u32;
    var ~#ldvarg5~439.base : int, ~#ldvarg5~439.offset : int;
    var ~ldvarg6~439 : ~u8;
    var ~tmp___7~439 : ~u8;
    var ~ldvarg15~439 : ~u32;
    var ~tmp___8~439 : ~u32;
    var ~ldvarg4~439.base : int, ~ldvarg4~439.offset : int;
    var ~tmp___9~439.base : int, ~tmp___9~439.offset : int;
    var ~ldvarg14~439.base : int, ~ldvarg14~439.offset : int;
    var ~tmp___10~439.base : int, ~tmp___10~439.offset : int;
    var ~ldvarg2~439.base : int, ~ldvarg2~439.offset : int;
    var ~tmp___11~439.base : int, ~tmp___11~439.offset : int;
    var ~tmp___12~439 : int;
    var ~tmp___13~439 : int;
    var ~tmp___14~439 : int;
    var ~tmp___15~439 : int;

  loc4:
    havoc ~ldvarg11~439.base, ~ldvarg11~439.offset;
    havoc ~tmp~439.base, ~tmp~439.offset;
    havoc ~ldvarg7~439;
    havoc ~tmp___0~439;
    havoc ~ldvarg3~439;
    havoc ~tmp___1~439;
    havoc ~ldvarg12~439.base, ~ldvarg12~439.offset;
    havoc ~tmp___2~439.base, ~tmp___2~439.offset;
    havoc ~ldvarg8~439.base, ~ldvarg8~439.offset;
    havoc ~tmp___3~439.base, ~tmp___3~439.offset;
    call ~#ldvarg1~439.base, ~#ldvarg1~439.offset := #Ultimate.alloc(8);
    call ~#ldvarg13~439.base, ~#ldvarg13~439.offset := #Ultimate.alloc(4);
    havoc ~ldvarg10~439;
    havoc ~tmp___4~439;
    havoc ~ldvarg9~439.base, ~ldvarg9~439.offset;
    havoc ~tmp___5~439.base, ~tmp___5~439.offset;
    havoc ~ldvarg0~439;
    havoc ~tmp___6~439;
    call ~#ldvarg5~439.base, ~#ldvarg5~439.offset := #Ultimate.alloc(4);
    havoc ~ldvarg6~439;
    havoc ~tmp___7~439;
    havoc ~ldvarg15~439;
    havoc ~tmp___8~439;
    havoc ~ldvarg4~439.base, ~ldvarg4~439.offset;
    havoc ~tmp___9~439.base, ~tmp___9~439.offset;
    havoc ~ldvarg14~439.base, ~ldvarg14~439.offset;
    havoc ~tmp___10~439.base, ~tmp___10~439.offset;
    havoc ~ldvarg2~439.base, ~ldvarg2~439.offset;
    havoc ~tmp___11~439.base, ~tmp___11~439.offset;
    havoc ~tmp___12~439;
    havoc ~tmp___13~439;
    havoc ~tmp___14~439;
    havoc ~tmp___15~439;
    call #t~ret552.base, #t~ret552.offset := ldv_zalloc(232);
    ~tmp~439.base, ~tmp~439.offset := #t~ret552.base, #t~ret552.offset;
    havoc #t~ret552.base, #t~ret552.offset;
    ~ldvarg11~439.base, ~ldvarg11~439.offset := ~tmp~439.base, ~tmp~439.offset;
    call #t~ret553 := __VERIFIER_nondet_u16();
    ~tmp___0~439 := #t~ret553;
    havoc #t~ret553;
    ~ldvarg7~439 := ~tmp___0~439;
    ~tmp___1~439 := #t~nondet554;
    havoc #t~nondet554;
    ~ldvarg3~439 := ~tmp___1~439;
    call #t~ret555.base, #t~ret555.offset := ldv_zalloc(32);
    ~tmp___2~439.base, ~tmp___2~439.offset := #t~ret555.base, #t~ret555.offset;
    havoc #t~ret555.base, #t~ret555.offset;
    ~ldvarg12~439.base, ~ldvarg12~439.offset := ~tmp___2~439.base, ~tmp___2~439.offset;
    call #t~ret556.base, #t~ret556.offset := ldv_zalloc(232);
    ~tmp___3~439.base, ~tmp___3~439.offset := #t~ret556.base, #t~ret556.offset;
    havoc #t~ret556.base, #t~ret556.offset;
    ~ldvarg8~439.base, ~ldvarg8~439.offset := ~tmp___3~439.base, ~tmp___3~439.offset;
    call #t~ret557 := __VERIFIER_nondet_u32();
    ~tmp___4~439 := #t~ret557;
    havoc #t~ret557;
    ~ldvarg10~439 := ~tmp___4~439;
    call #t~ret558.base, #t~ret558.offset := ldv_zalloc(8);
    ~tmp___5~439.base, ~tmp___5~439.offset := #t~ret558.base, #t~ret558.offset;
    havoc #t~ret558.base, #t~ret558.offset;
    ~ldvarg9~439.base, ~ldvarg9~439.offset := ~tmp___5~439.base, ~tmp___5~439.offset;
    call #t~ret559 := __VERIFIER_nondet_u32();
    ~tmp___6~439 := #t~ret559;
    havoc #t~ret559;
    ~ldvarg0~439 := ~tmp___6~439;
    call #t~ret560 := __VERIFIER_nondet_u8();
    ~tmp___7~439 := #t~ret560;
    havoc #t~ret560;
    ~ldvarg6~439 := ~tmp___7~439;
    call #t~ret561 := __VERIFIER_nondet_u32();
    ~tmp___8~439 := #t~ret561;
    havoc #t~ret561;
    ~ldvarg15~439 := ~tmp___8~439;
    call #t~ret562.base, #t~ret562.offset := ldv_zalloc(2);
    ~tmp___9~439.base, ~tmp___9~439.offset := #t~ret562.base, #t~ret562.offset;
    havoc #t~ret562.base, #t~ret562.offset;
    ~ldvarg4~439.base, ~ldvarg4~439.offset := ~tmp___9~439.base, ~tmp___9~439.offset;
    call #t~ret563.base, #t~ret563.offset := ldv_zalloc(12);
    ~tmp___10~439.base, ~tmp___10~439.offset := #t~ret563.base, #t~ret563.offset;
    havoc #t~ret563.base, #t~ret563.offset;
    ~ldvarg14~439.base, ~ldvarg14~439.offset := ~tmp___10~439.base, ~tmp___10~439.offset;
    call #t~ret564.base, #t~ret564.offset := ldv_zalloc(4);
    ~tmp___11~439.base, ~tmp___11~439.offset := #t~ret564.base, #t~ret564.offset;
    havoc #t~ret564.base, #t~ret564.offset;
    ~ldvarg2~439.base, ~ldvarg2~439.offset := ~tmp___11~439.base, ~tmp___11~439.offset;
    call ldv_initialize();
    call #t~memset565.base, #t~memset565.offset := #Ultimate.C_memset(~#ldvarg1~439.base, ~#ldvarg1~439.offset, 0, 8);
    havoc #t~memset565.base, #t~memset565.offset;
    call #t~memset566.base, #t~memset566.offset := #Ultimate.C_memset(~#ldvarg13~439.base, ~#ldvarg13~439.offset, 0, 4);
    havoc #t~memset566.base, #t~memset566.offset;
    call #t~memset567.base, #t~memset567.offset := #Ultimate.C_memset(~#ldvarg5~439.base, ~#ldvarg5~439.offset, 0, 4);
    havoc #t~memset567.base, #t~memset567.offset;
    ~ldv_state_variable_6 := 0;
    ~ldv_state_variable_4 := 0;
    ~ldv_state_variable_1 := 1;
    ~ref_cnt := 0;
    ~ldv_state_variable_0 := 1;
    ~ldv_state_variable_3 := 0;
    ~ldv_state_variable_2 := 1;
    ~ldv_state_variable_5 := 0;
    assume -2147483648 <= #t~nondet568 && #t~nondet568 <= 2147483647;
    ~tmp___12~439 := #t~nondet568;
    havoc #t~nondet568;
    #t~switch569 := ~tmp___12~439 == 0;
    assume !#t~switch569;
    #t~switch569 := #t~switch569 || ~tmp___12~439 == 1;
    assume !#t~switch569;
    #t~switch569 := #t~switch569 || ~tmp___12~439 == 2;
    assume !#t~switch569;
    #t~switch569 := #t~switch569 || ~tmp___12~439 == 3;
    assume #t~switch569;
    assume ~ldv_state_variable_0 != 0;
    assume -2147483648 <= #t~nondet605 && #t~nondet605 <= 2147483647;
    ~tmp___14~439 := #t~nondet605;
    havoc #t~nondet605;
    #t~switch606 := ~tmp___14~439 == 0;
    assume !#t~switch606;
    #t~switch606 := #t~switch606 || ~tmp___14~439 == 1;
    assume #t~switch606;
    assume ~ldv_state_variable_0 == 1;
    call #t~ret607 := wcn36xx_init();
    assume -2147483648 <= #t~ret607 && #t~ret607 <= 2147483647;
    ~ldv_retval_4 := #t~ret607;
    havoc #t~ret607;
    assume !(~ldv_retval_4 == 0);
    assume ~ldv_retval_4 != 0;
    ~ldv_state_variable_0 := 2;
    call ldv_check_final_state();
    return;
}

procedure main() returns (#res : int);
modifies ~ldv_state_variable_6, ~ldv_state_variable_4, ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_state_variable_3, ~ldv_state_variable_2, ~ldv_state_variable_5, ~ldv_retval_2, ~ldv_retval_1, ~ldv_retval_0, ~ldv_retval_4, ~ldv_retval_6, #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~last_index, ~fops_wcn36xx_dump_group1.base, ~fops_wcn36xx_dump_group1.offset, ~fops_wcn36xx_dump_group2.base, ~fops_wcn36xx_dump_group2.offset, ~wcn36xx_ops_group0.base, ~wcn36xx_ops_group0.offset, ~wcn36xx_ops_group1.base, ~wcn36xx_ops_group1.offset, ~wcn36xx_ops_group2.base, ~wcn36xx_ops_group2.offset, ~fops_wcn36xx_bmps_group1.base, ~fops_wcn36xx_bmps_group1.offset, ~fops_wcn36xx_bmps_group2.base, ~fops_wcn36xx_bmps_group2.offset, ~wcn36xx_driver_group0.base, ~wcn36xx_driver_group0.offset, ~ldv_irq_1_0, ~ldv_irq_1_1, ~ldv_irq_1_2, ~ldv_irq_1_3, ~ldv_retval_5, ~ldv_retval_3, ~ldv_irq_line_1_0, ~ldv_irq_data_1_0.base, ~ldv_irq_data_1_0.offset, ~ldv_irq_line_1_1, ~ldv_irq_data_1_1.base, ~ldv_irq_data_1_1.offset, ~ldv_irq_line_1_2, ~ldv_irq_data_1_2.base, ~ldv_irq_data_1_2.offset, ~ldv_irq_line_1_3, ~ldv_irq_data_1_3.base, ~ldv_irq_data_1_3.offset;

implementation ldv_set_init(#in~set.base : int, #in~set.offset : int) returns (){
    var ~set.base : int, ~set.offset : int;

  loc5:
    ~set.base, ~set.offset := #in~set.base, #in~set.offset;
    ~set.base, ~set.offset := ~#set_impl.base, ~#set_impl.offset;
    ~last_index := 0;
    assume true;
    return;
}

procedure ldv_set_init(#in~set.base : int, #in~set.offset : int) returns ();
modifies ~last_index;

implementation ULTIMATE.init() returns (){
    var #t~nondet0.base : int, #t~nondet0.offset : int;
    var #t~nondet1.base : int, #t~nondet1.offset : int;
    var #t~nondet2.base : int, #t~nondet2.offset : int;
    var #t~nondet3.base : int, #t~nondet3.offset : int;
    var #t~nondet4.base : int, #t~nondet4.offset : int;
    var #t~nondet5.base : int, #t~nondet5.offset : int;
    var #t~nondet6.base : int, #t~nondet6.offset : int;
    var #t~nondet7.base : int, #t~nondet7.offset : int;
    var #t~nondet8.base : int, #t~nondet8.offset : int;
    var #t~nondet9.base : int, #t~nondet9.offset : int;
    var #t~nondet10.base : int, #t~nondet10.offset : int;
    var #t~nondet11.base : int, #t~nondet11.offset : int;
    var #t~nondet12.base : int, #t~nondet12.offset : int;
    var #t~nondet13.base : int, #t~nondet13.offset : int;
    var #t~nondet14.base : int, #t~nondet14.offset : int;
    var #t~nondet15.base : int, #t~nondet15.offset : int;
    var #t~nondet16.base : int, #t~nondet16.offset : int;
    var #t~nondet17.base : int, #t~nondet17.offset : int;
    var #t~nondet18.base : int, #t~nondet18.offset : int;
    var #t~nondet19.base : int, #t~nondet19.offset : int;
    var #t~nondet20.base : int, #t~nondet20.offset : int;
    var #t~nondet21.base : int, #t~nondet21.offset : int;
    var #t~nondet22.base : int, #t~nondet22.offset : int;
    var #t~nondet546.base : int, #t~nondet546.offset : int;

  loc6:
    #NULL.base, #NULL.offset := 0, 0;
    #valid := #valid[0 := 0];
    ~ldv_irq_1_3 := 0;
    ~ldv_irq_data_1_1.base, ~ldv_irq_data_1_1.offset := 0, 0;
    ~ldv_irq_1_0 := 0;
    ~ldv_state_variable_6 := 0;
    ~ldv_irq_data_1_0.base, ~ldv_irq_data_1_0.offset := 0, 0;
    ~ldv_state_variable_0 := 0;
    ~ldv_state_variable_5 := 0;
    ~ldv_state_variable_2 := 0;
    ~ldv_irq_data_1_3.base, ~ldv_irq_data_1_3.offset := 0, 0;
    ~ldv_irq_data_1_2.base, ~ldv_irq_data_1_2.offset := 0, 0;
    ~ldv_irq_1_2 := 0;
    ~ldv_irq_1_1 := 0;
    ~ldv_irq_line_1_3 := 0;
    ~ldv_state_variable_3 := 0;
    ~ldv_irq_line_1_0 := 0;
    ~ref_cnt := 0;
    ~ldv_irq_line_1_1 := 0;
    ~ldv_state_variable_1 := 0;
    ~ldv_irq_line_1_2 := 0;
    ~ldv_state_variable_4 := 0;
    ~wcn36xx_dbg_mask := 0;
    call ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset := #Ultimate.alloc(184);
    call #t~nondet0.base, #t~nondet0.offset := #Ultimate.alloc(4);
    #memory_int := #memory_int[#t~nondet0.base,#t~nondet0.offset + 0 := 77];
    #memory_int := #memory_int[#t~nondet0.base,#t~nondet0.offset + 1 := 67];
    #memory_int := #memory_int[#t~nondet0.base,#t~nondet0.offset + 2 := 67];
    #memory_int := #memory_int[#t~nondet0.base,#t~nondet0.offset + 3 := 0];
    call write~$Pointer$(#t~nondet0.base, #t~nondet0.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 0, 8);
    call #t~nondet1.base, #t~nondet1.offset := #Ultimate.alloc(4);
    #memory_int := #memory_int[#t~nondet1.base,#t~nondet1.offset + 0 := 80];
    #memory_int := #memory_int[#t~nondet1.base,#t~nondet1.offset + 1 := 50];
    #memory_int := #memory_int[#t~nondet1.base,#t~nondet1.offset + 2 := 80];
    #memory_int := #memory_int[#t~nondet1.base,#t~nondet1.offset + 3 := 0];
    call write~$Pointer$(#t~nondet1.base, #t~nondet1.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 8, 8);
    call #t~nondet2.base, #t~nondet2.offset := #Ultimate.alloc(8);
    call write~$Pointer$(#t~nondet2.base, #t~nondet2.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 16, 8);
    call #t~nondet3.base, #t~nondet3.offset := #Ultimate.alloc(19);
    call write~$Pointer$(#t~nondet3.base, #t~nondet3.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 24, 8);
    call #t~nondet4.base, #t~nondet4.offset := #Ultimate.alloc(15);
    call write~$Pointer$(#t~nondet4.base, #t~nondet4.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 32, 8);
    call #t~nondet5.base, #t~nondet5.offset := #Ultimate.alloc(9);
    call write~$Pointer$(#t~nondet5.base, #t~nondet5.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 40, 8);
    call #t~nondet6.base, #t~nondet6.offset := #Ultimate.alloc(5);
    #memory_int := #memory_int[#t~nondet6.base,#t~nondet6.offset + 0 := 84];
    #memory_int := #memory_int[#t~nondet6.base,#t~nondet6.offset + 1 := 68];
    #memory_int := #memory_int[#t~nondet6.base,#t~nondet6.offset + 2 := 76];
    #memory_int := #memory_int[#t~nondet6.base,#t~nondet6.offset + 3 := 83];
    #memory_int := #memory_int[#t~nondet6.base,#t~nondet6.offset + 4 := 0];
    call write~$Pointer$(#t~nondet6.base, #t~nondet6.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 48, 8);
    call #t~nondet7.base, #t~nondet7.offset := #Ultimate.alloc(30);
    call write~$Pointer$(#t~nondet7.base, #t~nondet7.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 56, 8);
    call #t~nondet8.base, #t~nondet8.offset := #Ultimate.alloc(19);
    call write~$Pointer$(#t~nondet8.base, #t~nondet8.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 64, 8);
    call #t~nondet9.base, #t~nondet9.offset := #Ultimate.alloc(15);
    call write~$Pointer$(#t~nondet9.base, #t~nondet9.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 72, 8);
    call #t~nondet10.base, #t~nondet10.offset := #Ultimate.alloc(13);
    call write~$Pointer$(#t~nondet10.base, #t~nondet10.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 80, 8);
    call #t~nondet11.base, #t~nondet11.offset := #Ultimate.alloc(13);
    call write~$Pointer$(#t~nondet11.base, #t~nondet11.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 88, 8);
    call #t~nondet12.base, #t~nondet12.offset := #Ultimate.alloc(17);
    call write~$Pointer$(#t~nondet12.base, #t~nondet12.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 96, 8);
    call #t~nondet13.base, #t~nondet13.offset := #Ultimate.alloc(14);
    call write~$Pointer$(#t~nondet13.base, #t~nondet13.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 104, 8);
    call #t~nondet14.base, #t~nondet14.offset := #Ultimate.alloc(21);
    call write~$Pointer$(#t~nondet14.base, #t~nondet14.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 112, 8);
    call #t~nondet15.base, #t~nondet15.offset := #Ultimate.alloc(9);
    call write~$Pointer$(#t~nondet15.base, #t~nondet15.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 120, 8);
    call #t~nondet16.base, #t~nondet16.offset := #Ultimate.alloc(7);
    #memory_int := #memory_int[#t~nondet16.base,#t~nondet16.offset + 0 := 65];
    #memory_int := #memory_int[#t~nondet16.base,#t~nondet16.offset + 1 := 80];
    #memory_int := #memory_int[#t~nondet16.base,#t~nondet16.offset + 2 := 95];
    #memory_int := #memory_int[#t~nondet16.base,#t~nondet16.offset + 3 := 68];
    #memory_int := #memory_int[#t~nondet16.base,#t~nondet16.offset + 4 := 70];
    #memory_int := #memory_int[#t~nondet16.base,#t~nondet16.offset + 5 := 83];
    #memory_int := #memory_int[#t~nondet16.base,#t~nondet16.offset + 6 := 0];
    call write~$Pointer$(#t~nondet16.base, #t~nondet16.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 128, 8);
    call #t~nondet17.base, #t~nondet17.offset := #Ultimate.alloc(9);
    call write~$Pointer$(#t~nondet17.base, #t~nondet17.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 136, 8);
    call #t~nondet18.base, #t~nondet18.offset := #Ultimate.alloc(8);
    call write~$Pointer$(#t~nondet18.base, #t~nondet18.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 144, 8);
    call #t~nondet19.base, #t~nondet19.offset := #Ultimate.alloc(11);
    call write~$Pointer$(#t~nondet19.base, #t~nondet19.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 152, 8);
    call #t~nondet20.base, #t~nondet20.offset := #Ultimate.alloc(4);
    #memory_int := #memory_int[#t~nondet20.base,#t~nondet20.offset + 0 := 82];
    #memory_int := #memory_int[#t~nondet20.base,#t~nondet20.offset + 1 := 84];
    #memory_int := #memory_int[#t~nondet20.base,#t~nondet20.offset + 2 := 84];
    #memory_int := #memory_int[#t~nondet20.base,#t~nondet20.offset + 3 := 0];
    call write~$Pointer$(#t~nondet20.base, #t~nondet20.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 160, 8);
    call #t~nondet21.base, #t~nondet21.offset := #Ultimate.alloc(9);
    call write~$Pointer$(#t~nondet21.base, #t~nondet21.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 168, 8);
    call #t~nondet22.base, #t~nondet22.offset := #Ultimate.alloc(4);
    #memory_int := #memory_int[#t~nondet22.base,#t~nondet22.offset + 0 := 87];
    #memory_int := #memory_int[#t~nondet22.base,#t~nondet22.offset + 1 := 79];
    #memory_int := #memory_int[#t~nondet22.base,#t~nondet22.offset + 2 := 87];
    #memory_int := #memory_int[#t~nondet22.base,#t~nondet22.offset + 3 := 0];
    call write~$Pointer$(#t~nondet22.base, #t~nondet22.offset, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset + 176, 8);
    havoc #t~nondet0.base, #t~nondet0.offset;
    havoc #t~nondet1.base, #t~nondet1.offset;
    havoc #t~nondet2.base, #t~nondet2.offset;
    havoc #t~nondet3.base, #t~nondet3.offset;
    havoc #t~nondet4.base, #t~nondet4.offset;
    havoc #t~nondet5.base, #t~nondet5.offset;
    havoc #t~nondet6.base, #t~nondet6.offset;
    havoc #t~nondet7.base, #t~nondet7.offset;
    havoc #t~nondet8.base, #t~nondet8.offset;
    havoc #t~nondet9.base, #t~nondet9.offset;
    havoc #t~nondet10.base, #t~nondet10.offset;
    havoc #t~nondet11.base, #t~nondet11.offset;
    havoc #t~nondet12.base, #t~nondet12.offset;
    havoc #t~nondet13.base, #t~nondet13.offset;
    havoc #t~nondet14.base, #t~nondet14.offset;
    havoc #t~nondet15.base, #t~nondet15.offset;
    havoc #t~nondet16.base, #t~nondet16.offset;
    havoc #t~nondet17.base, #t~nondet17.offset;
    havoc #t~nondet18.base, #t~nondet18.offset;
    havoc #t~nondet19.base, #t~nondet19.offset;
    havoc #t~nondet20.base, #t~nondet20.offset;
    havoc #t~nondet21.base, #t~nondet21.offset;
    havoc #t~nondet22.base, #t~nondet22.offset;
    ~ldv_retval_0 := 0;
    ~ldv_retval_4 := 0;
    ~ldv_retval_6 := 0;
    ~ldv_retval_1 := 0;
    ~ldv_retval_2 := 0;
    ~ldv_retval_5 := 0;
    ~ldv_retval_3 := 0;
    ~last_index := 0;
    ~wcn36xx_ops_group1.base, ~wcn36xx_ops_group1.offset := 0, 0;
    ~fops_wcn36xx_bmps_group2.base, ~fops_wcn36xx_bmps_group2.offset := 0, 0;
    ~fops_wcn36xx_dump_group2.base, ~fops_wcn36xx_dump_group2.offset := 0, 0;
    ~fops_wcn36xx_dump_group1.base, ~fops_wcn36xx_dump_group1.offset := 0, 0;
    ~wcn36xx_driver_group0.base, ~wcn36xx_driver_group0.offset := 0, 0;
    ~wcn36xx_ops_group2.base, ~wcn36xx_ops_group2.offset := 0, 0;
    ~wcn36xx_ops_group0.base, ~wcn36xx_ops_group0.offset := 0, 0;
    ~fops_wcn36xx_bmps_group1.base, ~fops_wcn36xx_bmps_group1.offset := 0, 0;
    call ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset := #Ultimate.alloc(742);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 0 + 0, 4);
    call write~int(2412, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 0 + 4, 2);
    call write~int(1, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 0 + 6, 2);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 0 + 8, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 0 + 12, 4);
    call write~int(25, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 0 + 16, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 0 + 20, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 0 + 24, 1);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 0 + 25, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 0 + 29, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 0 + 33, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 0 + 37, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 0 + 41, 8);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 0 + 49, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 53 + 0, 4);
    call write~int(2417, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 53 + 4, 2);
    call write~int(2, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 53 + 6, 2);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 53 + 8, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 53 + 12, 4);
    call write~int(25, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 53 + 16, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 53 + 20, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 53 + 24, 1);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 53 + 25, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 53 + 29, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 53 + 33, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 53 + 37, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 53 + 41, 8);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 53 + 49, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 106 + 0, 4);
    call write~int(2422, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 106 + 4, 2);
    call write~int(3, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 106 + 6, 2);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 106 + 8, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 106 + 12, 4);
    call write~int(25, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 106 + 16, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 106 + 20, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 106 + 24, 1);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 106 + 25, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 106 + 29, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 106 + 33, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 106 + 37, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 106 + 41, 8);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 106 + 49, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 159 + 0, 4);
    call write~int(2427, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 159 + 4, 2);
    call write~int(4, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 159 + 6, 2);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 159 + 8, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 159 + 12, 4);
    call write~int(25, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 159 + 16, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 159 + 20, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 159 + 24, 1);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 159 + 25, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 159 + 29, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 159 + 33, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 159 + 37, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 159 + 41, 8);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 159 + 49, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 212 + 0, 4);
    call write~int(2432, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 212 + 4, 2);
    call write~int(5, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 212 + 6, 2);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 212 + 8, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 212 + 12, 4);
    call write~int(25, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 212 + 16, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 212 + 20, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 212 + 24, 1);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 212 + 25, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 212 + 29, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 212 + 33, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 212 + 37, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 212 + 41, 8);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 212 + 49, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 265 + 0, 4);
    call write~int(2437, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 265 + 4, 2);
    call write~int(6, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 265 + 6, 2);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 265 + 8, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 265 + 12, 4);
    call write~int(25, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 265 + 16, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 265 + 20, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 265 + 24, 1);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 265 + 25, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 265 + 29, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 265 + 33, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 265 + 37, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 265 + 41, 8);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 265 + 49, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 318 + 0, 4);
    call write~int(2442, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 318 + 4, 2);
    call write~int(7, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 318 + 6, 2);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 318 + 8, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 318 + 12, 4);
    call write~int(25, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 318 + 16, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 318 + 20, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 318 + 24, 1);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 318 + 25, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 318 + 29, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 318 + 33, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 318 + 37, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 318 + 41, 8);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 318 + 49, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 371 + 0, 4);
    call write~int(2447, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 371 + 4, 2);
    call write~int(8, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 371 + 6, 2);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 371 + 8, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 371 + 12, 4);
    call write~int(25, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 371 + 16, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 371 + 20, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 371 + 24, 1);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 371 + 25, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 371 + 29, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 371 + 33, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 371 + 37, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 371 + 41, 8);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 371 + 49, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 424 + 0, 4);
    call write~int(2452, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 424 + 4, 2);
    call write~int(9, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 424 + 6, 2);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 424 + 8, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 424 + 12, 4);
    call write~int(25, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 424 + 16, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 424 + 20, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 424 + 24, 1);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 424 + 25, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 424 + 29, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 424 + 33, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 424 + 37, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 424 + 41, 8);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 424 + 49, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 477 + 0, 4);
    call write~int(2457, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 477 + 4, 2);
    call write~int(10, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 477 + 6, 2);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 477 + 8, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 477 + 12, 4);
    call write~int(25, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 477 + 16, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 477 + 20, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 477 + 24, 1);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 477 + 25, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 477 + 29, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 477 + 33, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 477 + 37, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 477 + 41, 8);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 477 + 49, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 530 + 0, 4);
    call write~int(2462, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 530 + 4, 2);
    call write~int(11, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 530 + 6, 2);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 530 + 8, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 530 + 12, 4);
    call write~int(25, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 530 + 16, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 530 + 20, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 530 + 24, 1);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 530 + 25, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 530 + 29, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 530 + 33, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 530 + 37, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 530 + 41, 8);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 530 + 49, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 583 + 0, 4);
    call write~int(2467, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 583 + 4, 2);
    call write~int(12, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 583 + 6, 2);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 583 + 8, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 583 + 12, 4);
    call write~int(25, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 583 + 16, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 583 + 20, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 583 + 24, 1);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 583 + 25, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 583 + 29, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 583 + 33, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 583 + 37, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 583 + 41, 8);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 583 + 49, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 636 + 0, 4);
    call write~int(2472, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 636 + 4, 2);
    call write~int(13, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 636 + 6, 2);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 636 + 8, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 636 + 12, 4);
    call write~int(25, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 636 + 16, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 636 + 20, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 636 + 24, 1);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 636 + 25, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 636 + 29, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 636 + 33, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 636 + 37, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 636 + 41, 8);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 636 + 49, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 689 + 0, 4);
    call write~int(2484, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 689 + 4, 2);
    call write~int(14, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 689 + 6, 2);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 689 + 8, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 689 + 12, 4);
    call write~int(25, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 689 + 16, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 689 + 20, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 689 + 24, 1);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 689 + 25, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 689 + 29, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 689 + 33, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 689 + 37, 4);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 689 + 41, 8);
    call write~int(0, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset + 689 + 49, 4);
    call ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset := #Ultimate.alloc(1219);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 0 + 0, 4);
    call write~int(5180, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 0 + 4, 2);
    call write~int(36, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 0 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 0 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 0 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 0 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 0 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 0 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 0 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 0 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 0 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 0 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 0 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 0 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 53 + 0, 4);
    call write~int(5200, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 53 + 4, 2);
    call write~int(40, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 53 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 53 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 53 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 53 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 53 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 53 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 53 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 53 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 53 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 53 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 53 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 53 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 106 + 0, 4);
    call write~int(5220, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 106 + 4, 2);
    call write~int(44, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 106 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 106 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 106 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 106 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 106 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 106 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 106 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 106 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 106 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 106 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 106 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 106 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 159 + 0, 4);
    call write~int(5240, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 159 + 4, 2);
    call write~int(48, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 159 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 159 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 159 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 159 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 159 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 159 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 159 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 159 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 159 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 159 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 159 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 159 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 212 + 0, 4);
    call write~int(5260, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 212 + 4, 2);
    call write~int(52, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 212 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 212 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 212 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 212 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 212 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 212 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 212 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 212 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 212 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 212 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 212 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 212 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 265 + 0, 4);
    call write~int(5280, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 265 + 4, 2);
    call write~int(56, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 265 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 265 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 265 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 265 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 265 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 265 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 265 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 265 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 265 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 265 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 265 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 265 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 318 + 0, 4);
    call write~int(5300, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 318 + 4, 2);
    call write~int(60, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 318 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 318 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 318 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 318 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 318 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 318 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 318 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 318 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 318 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 318 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 318 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 318 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 371 + 0, 4);
    call write~int(5320, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 371 + 4, 2);
    call write~int(64, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 371 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 371 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 371 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 371 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 371 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 371 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 371 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 371 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 371 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 371 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 371 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 371 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 424 + 0, 4);
    call write~int(5500, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 424 + 4, 2);
    call write~int(100, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 424 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 424 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 424 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 424 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 424 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 424 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 424 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 424 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 424 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 424 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 424 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 424 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 477 + 0, 4);
    call write~int(5520, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 477 + 4, 2);
    call write~int(104, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 477 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 477 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 477 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 477 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 477 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 477 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 477 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 477 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 477 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 477 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 477 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 477 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 530 + 0, 4);
    call write~int(5540, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 530 + 4, 2);
    call write~int(108, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 530 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 530 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 530 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 530 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 530 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 530 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 530 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 530 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 530 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 530 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 530 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 530 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 583 + 0, 4);
    call write~int(5560, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 583 + 4, 2);
    call write~int(112, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 583 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 583 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 583 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 583 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 583 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 583 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 583 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 583 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 583 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 583 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 583 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 583 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 636 + 0, 4);
    call write~int(5580, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 636 + 4, 2);
    call write~int(116, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 636 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 636 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 636 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 636 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 636 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 636 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 636 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 636 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 636 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 636 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 636 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 636 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 689 + 0, 4);
    call write~int(5600, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 689 + 4, 2);
    call write~int(120, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 689 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 689 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 689 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 689 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 689 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 689 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 689 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 689 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 689 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 689 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 689 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 689 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 742 + 0, 4);
    call write~int(5620, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 742 + 4, 2);
    call write~int(124, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 742 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 742 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 742 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 742 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 742 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 742 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 742 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 742 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 742 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 742 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 742 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 742 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 795 + 0, 4);
    call write~int(5640, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 795 + 4, 2);
    call write~int(128, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 795 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 795 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 795 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 795 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 795 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 795 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 795 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 795 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 795 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 795 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 795 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 795 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 848 + 0, 4);
    call write~int(5660, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 848 + 4, 2);
    call write~int(132, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 848 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 848 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 848 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 848 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 848 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 848 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 848 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 848 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 848 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 848 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 848 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 848 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 901 + 0, 4);
    call write~int(5700, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 901 + 4, 2);
    call write~int(140, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 901 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 901 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 901 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 901 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 901 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 901 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 901 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 901 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 901 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 901 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 901 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 901 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 954 + 0, 4);
    call write~int(5745, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 954 + 4, 2);
    call write~int(149, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 954 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 954 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 954 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 954 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 954 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 954 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 954 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 954 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 954 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 954 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 954 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 954 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1007 + 0, 4);
    call write~int(5765, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1007 + 4, 2);
    call write~int(153, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1007 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1007 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1007 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1007 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1007 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1007 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1007 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1007 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1007 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1007 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1007 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1007 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1060 + 0, 4);
    call write~int(5785, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1060 + 4, 2);
    call write~int(157, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1060 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1060 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1060 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1060 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1060 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1060 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1060 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1060 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1060 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1060 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1060 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1060 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1113 + 0, 4);
    call write~int(5805, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1113 + 4, 2);
    call write~int(161, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1113 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1113 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1113 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1113 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1113 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1113 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1113 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1113 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1113 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1113 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1113 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1113 + 49, 4);
    call write~int(1, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1166 + 0, 4);
    call write~int(5825, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1166 + 4, 2);
    call write~int(165, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1166 + 6, 2);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1166 + 8, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1166 + 12, 4);
    call write~int(25, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1166 + 16, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1166 + 20, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1166 + 24, 1);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1166 + 25, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1166 + 29, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1166 + 33, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1166 + 37, 4);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1166 + 41, 8);
    call write~int(0, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset + 1166 + 49, 4);
    call ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset := #Ultimate.alloc(120);
    call write~int(0, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 0 + 0, 4);
    call write~int(10, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 0 + 4, 2);
    call write~int(130, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 0 + 6, 2);
    call write~int(130, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 0 + 8, 2);
    call write~int(1, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 10 + 0, 4);
    call write~int(20, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 10 + 4, 2);
    call write~int(132, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 10 + 6, 2);
    call write~int(132, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 10 + 8, 2);
    call write~int(1, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 20 + 0, 4);
    call write~int(55, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 20 + 4, 2);
    call write~int(139, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 20 + 6, 2);
    call write~int(139, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 20 + 8, 2);
    call write~int(1, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 30 + 0, 4);
    call write~int(110, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 30 + 4, 2);
    call write~int(150, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 30 + 6, 2);
    call write~int(150, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 30 + 8, 2);
    call write~int(0, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 40 + 0, 4);
    call write~int(60, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 40 + 4, 2);
    call write~int(12, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 40 + 6, 2);
    call write~int(12, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 40 + 8, 2);
    call write~int(0, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 50 + 0, 4);
    call write~int(90, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 50 + 4, 2);
    call write~int(18, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 50 + 6, 2);
    call write~int(18, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 50 + 8, 2);
    call write~int(0, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 60 + 0, 4);
    call write~int(120, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 60 + 4, 2);
    call write~int(24, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 60 + 6, 2);
    call write~int(24, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 60 + 8, 2);
    call write~int(0, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 70 + 0, 4);
    call write~int(180, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 70 + 4, 2);
    call write~int(36, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 70 + 6, 2);
    call write~int(36, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 70 + 8, 2);
    call write~int(0, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 80 + 0, 4);
    call write~int(240, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 80 + 4, 2);
    call write~int(48, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 80 + 6, 2);
    call write~int(48, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 80 + 8, 2);
    call write~int(0, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 90 + 0, 4);
    call write~int(360, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 90 + 4, 2);
    call write~int(72, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 90 + 6, 2);
    call write~int(72, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 90 + 8, 2);
    call write~int(0, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 100 + 0, 4);
    call write~int(480, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 100 + 4, 2);
    call write~int(96, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 100 + 6, 2);
    call write~int(96, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 100 + 8, 2);
    call write~int(0, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 110 + 0, 4);
    call write~int(540, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 110 + 4, 2);
    call write~int(108, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 110 + 6, 2);
    call write~int(108, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset + 110 + 8, 2);
    call ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset := #Ultimate.alloc(80);
    call write~int(0, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 0 + 0, 4);
    call write~int(60, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 0 + 4, 2);
    call write~int(12, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 0 + 6, 2);
    call write~int(12, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 0 + 8, 2);
    call write~int(0, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 10 + 0, 4);
    call write~int(90, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 10 + 4, 2);
    call write~int(18, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 10 + 6, 2);
    call write~int(18, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 10 + 8, 2);
    call write~int(0, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 20 + 0, 4);
    call write~int(120, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 20 + 4, 2);
    call write~int(24, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 20 + 6, 2);
    call write~int(24, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 20 + 8, 2);
    call write~int(0, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 30 + 0, 4);
    call write~int(180, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 30 + 4, 2);
    call write~int(36, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 30 + 6, 2);
    call write~int(36, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 30 + 8, 2);
    call write~int(0, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 40 + 0, 4);
    call write~int(240, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 40 + 4, 2);
    call write~int(48, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 40 + 6, 2);
    call write~int(48, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 40 + 8, 2);
    call write~int(0, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 50 + 0, 4);
    call write~int(360, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 50 + 4, 2);
    call write~int(72, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 50 + 6, 2);
    call write~int(72, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 50 + 8, 2);
    call write~int(0, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 60 + 0, 4);
    call write~int(480, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 60 + 4, 2);
    call write~int(96, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 60 + 6, 2);
    call write~int(96, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 60 + 8, 2);
    call write~int(0, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 70 + 0, 4);
    call write~int(540, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 70 + 4, 2);
    call write~int(108, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 70 + 6, 2);
    call write~int(108, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset + 70 + 8, 2);
    call ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset := #Ultimate.alloc(62);
    call write~$Pointer$(~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 0, 8);
    call write~$Pointer$(~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 8, 8);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 16, 4);
    call write~int(14, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 20, 4);
    call write~int(12, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 24, 4);
    call write~int(36912, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 0, 2);
    call write~int(1, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 2, 1);
    call write~int(3, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 3, 1);
    call write~int(7, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 4, 1);
    call write~int(255, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 5 + 0 + 0, 1);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 5 + 0 + 1, 1);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 5 + 0 + 2, 1);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 5 + 0 + 3, 1);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 5 + 0 + 4, 1);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 5 + 0 + 5, 1);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 5 + 0 + 6, 1);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 5 + 0 + 7, 1);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 5 + 0 + 8, 1);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 5 + 0 + 9, 1);
    call write~int(72, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 5 + 10, 2);
    call write~int(1, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 5 + 12, 1);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 5 + 13 + 0, 1);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 5 + 13 + 1, 1);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 28 + 5 + 13 + 2, 1);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 49 + 0, 1);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 49 + 1, 4);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 49 + 5 + 0, 2);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 49 + 5 + 2, 2);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 49 + 5 + 4, 2);
    call write~int(0, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset + 49 + 5 + 6, 2);
    call ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset := #Ultimate.alloc(62);
    call write~$Pointer$(~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 0, 8);
    call write~$Pointer$(~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 8, 8);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 16, 4);
    call write~int(23, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 20, 4);
    call write~int(8, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 24, 4);
    call write~int(36978, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 0, 2);
    call write~int(1, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 2, 1);
    call write~int(3, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 3, 1);
    call write~int(7, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 4, 1);
    call write~int(255, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 5 + 0 + 0, 1);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 5 + 0 + 1, 1);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 5 + 0 + 2, 1);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 5 + 0 + 3, 1);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 5 + 0 + 4, 1);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 5 + 0 + 5, 1);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 5 + 0 + 6, 1);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 5 + 0 + 7, 1);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 5 + 0 + 8, 1);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 5 + 0 + 9, 1);
    call write~int(72, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 5 + 10, 2);
    call write~int(1, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 5 + 12, 1);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 5 + 13 + 0, 1);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 5 + 13 + 1, 1);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 28 + 5 + 13 + 2, 1);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 49 + 0, 1);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 49 + 1, 4);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 49 + 5 + 0, 2);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 49 + 5 + 2, 2);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 49 + 5 + 4, 2);
    call write~int(0, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset + 49 + 5 + 6, 2);
    call ~#wowlan_support.base, ~#wowlan_support.offset := #Ultimate.alloc(28);
    call write~int(1, ~#wowlan_support.base, ~#wowlan_support.offset + 0, 4);
    call write~int(0, ~#wowlan_support.base, ~#wowlan_support.offset + 4, 4);
    call write~int(0, ~#wowlan_support.base, ~#wowlan_support.offset + 8, 4);
    call write~int(0, ~#wowlan_support.base, ~#wowlan_support.offset + 12, 4);
    call write~int(0, ~#wowlan_support.base, ~#wowlan_support.offset + 16, 4);
    call write~$Pointer$(0, 0, ~#wowlan_support.base, ~#wowlan_support.offset + 20, 8);
    call ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset := #Ultimate.alloc(632);
    call write~$Pointer$(#funAddr~wcn36xx_tx.base, #funAddr~wcn36xx_tx.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 0, 8);
    call write~$Pointer$(#funAddr~wcn36xx_start.base, #funAddr~wcn36xx_start.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 8, 8);
    call write~$Pointer$(#funAddr~wcn36xx_stop.base, #funAddr~wcn36xx_stop.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 16, 8);
    call write~$Pointer$(#funAddr~wcn36xx_suspend.base, #funAddr~wcn36xx_suspend.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 24, 8);
    call write~$Pointer$(#funAddr~wcn36xx_resume.base, #funAddr~wcn36xx_resume.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 40, 8);
    call write~$Pointer$(#funAddr~wcn36xx_add_interface.base, #funAddr~wcn36xx_add_interface.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 56, 8);
    call write~$Pointer$(#funAddr~wcn36xx_remove_interface.base, #funAddr~wcn36xx_remove_interface.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 64, 8);
    call write~$Pointer$(#funAddr~wcn36xx_config.base, #funAddr~wcn36xx_config.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 72, 8);
    call write~$Pointer$(#funAddr~wcn36xx_bss_info_changed.base, #funAddr~wcn36xx_bss_info_changed.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 96, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 104, 8);
    call write~$Pointer$(#funAddr~wcn36xx_configure_filter.base, #funAddr~wcn36xx_configure_filter.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 112, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 120, 8);
    call write~$Pointer$(#funAddr~wcn36xx_set_key.base, #funAddr~wcn36xx_set_key.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 128, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 136, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 144, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 152, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 160, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 168, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 176, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 184, 8);
    call write~$Pointer$(#funAddr~wcn36xx_sw_scan_start.base, #funAddr~wcn36xx_sw_scan_start.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 192, 8);
    call write~$Pointer$(#funAddr~wcn36xx_sw_scan_complete.base, #funAddr~wcn36xx_sw_scan_complete.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 200, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 208, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 216, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 224, 8);
    call write~$Pointer$(#funAddr~wcn36xx_set_rts_threshold.base, #funAddr~wcn36xx_set_rts_threshold.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 232, 8);
    call write~$Pointer$(#funAddr~wcn36xx_sta_add.base, #funAddr~wcn36xx_sta_add.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 240, 8);
    call write~$Pointer$(#funAddr~wcn36xx_sta_remove.base, #funAddr~wcn36xx_sta_remove.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 248, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 256, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 264, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 272, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 280, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 288, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 296, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 304, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 312, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 320, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 328, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 336, 8);
    call write~$Pointer$(#funAddr~wcn36xx_ampdu_action.base, #funAddr~wcn36xx_ampdu_action.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 344, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 352, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 360, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 368, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 376, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 384, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 392, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 400, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 408, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 416, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 424, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 432, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 440, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 448, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 456, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 464, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 472, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 480, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 488, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 496, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 504, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 512, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 520, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 528, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 536, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 544, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 552, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 560, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 568, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 576, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 584, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 592, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 600, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 608, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 616, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset + 624, 8);
    call ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset := #Ultimate.alloc(56);
    call write~int(119, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 0, 1);
    call write~int(99, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 1, 1);
    call write~int(110, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 2, 1);
    call write~int(51, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 3, 1);
    call write~int(54, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 4, 1);
    call write~int(120, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 5, 1);
    call write~int(120, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 6, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 7, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 8, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 9, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 10, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 11, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 12, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 13, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 14, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 15, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 16, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 17, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 18, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 0 + 19, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 0 + 20, 8);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 0, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 1, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 2, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 3, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 4, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 5, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 6, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 7, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 8, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 9, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 10, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 11, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 12, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 13, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 14, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 15, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 16, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 17, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 18, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 0 + 19, 1);
    call write~int(0, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset + 28 + 20, 8);
    call ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset := #Ultimate.alloc(162);
    call write~$Pointer$(#funAddr~wcn36xx_probe.base, #funAddr~wcn36xx_probe.offset, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 0, 8);
    call write~$Pointer$(#funAddr~wcn36xx_remove.base, #funAddr~wcn36xx_remove.offset, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 8, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 16, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 32, 8);
    call #t~nondet546.base, #t~nondet546.offset := #Ultimate.alloc(8);
    call write~$Pointer$(#t~nondet546.base, #t~nondet546.offset, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 40 + 0, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 40 + 8, 8);
    call write~$Pointer$(~#__this_module.base, ~#__this_module.offset, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 40 + 16, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 40 + 24, 8);
    call write~int(0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 40 + 32, 1);
    call write~$Pointer$(0, 0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 40 + 33, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 40 + 41, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 40 + 49, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 40 + 57, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 40 + 65, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 40 + 73, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 40 + 81, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 40 + 89, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 40 + 97, 8);
    call write~$Pointer$(0, 0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 40 + 105, 8);
    call write~$Pointer$(~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 153, 8);
    call write~int(0, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset + 161, 1);
    havoc #t~nondet546.base, #t~nondet546.offset;
    call ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset := #Ultimate.alloc(232);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 0, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 8, 8);
    call write~$Pointer$(#funAddr~read_file_bool_bmps.base, #funAddr~read_file_bool_bmps.offset, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 16, 8);
    call write~$Pointer$(#funAddr~write_file_bool_bmps.base, #funAddr~write_file_bool_bmps.offset, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 56, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 64, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 72, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 96, 8);
    call write~$Pointer$(#funAddr~simple_open.base, #funAddr~simple_open.offset, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 104, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 112, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 120, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 128, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 136, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 144, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 152, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 160, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 168, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 176, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 184, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 192, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 200, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 208, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 216, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset + 224, 8);
    call ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset := #Ultimate.alloc(232);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 0, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 8, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 16, 8);
    call write~$Pointer$(#funAddr~write_file_dump.base, #funAddr~write_file_dump.offset, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 56, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 64, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 72, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 96, 8);
    call write~$Pointer$(#funAddr~simple_open.base, #funAddr~simple_open.offset, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 104, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 112, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 120, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 128, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 136, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 144, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 152, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 160, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 168, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 176, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 184, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 192, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 200, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 208, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 216, 8);
    call write~$Pointer$(0, 0, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset + 224, 8);
    call ~#set_impl.base, ~#set_impl.offset := #Ultimate.alloc(120);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 0, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 8, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 16, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 56, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 64, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 72, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 96, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 104, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 112, 8);
    ~LDV_SKBS.base, ~LDV_SKBS.offset := 0, 0;
    assume true;
    return;
}

procedure ULTIMATE.init() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~ldv_irq_1_3, ~ldv_irq_data_1_1.base, ~ldv_irq_data_1_1.offset, ~ldv_irq_1_0, ~ldv_state_variable_6, ~ldv_irq_data_1_0.base, ~ldv_irq_data_1_0.offset, ~ldv_state_variable_0, ~ldv_state_variable_5, ~ldv_state_variable_2, ~ldv_irq_data_1_3.base, ~ldv_irq_data_1_3.offset, ~ldv_irq_data_1_2.base, ~ldv_irq_data_1_2.offset, ~ldv_irq_1_2, ~ldv_irq_1_1, ~ldv_irq_line_1_3, ~ldv_state_variable_3, ~ldv_irq_line_1_0, ~ref_cnt, ~ldv_irq_line_1_1, ~ldv_state_variable_1, ~ldv_irq_line_1_2, ~ldv_state_variable_4, ~wcn36xx_dbg_mask, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset, ~ldv_retval_0, ~ldv_retval_4, ~ldv_retval_6, ~ldv_retval_1, ~ldv_retval_2, ~ldv_retval_5, ~ldv_retval_3, ~last_index, ~wcn36xx_ops_group1.base, ~wcn36xx_ops_group1.offset, ~fops_wcn36xx_bmps_group2.base, ~fops_wcn36xx_bmps_group2.offset, ~fops_wcn36xx_dump_group2.base, ~fops_wcn36xx_dump_group2.offset, ~fops_wcn36xx_dump_group1.base, ~fops_wcn36xx_dump_group1.offset, ~wcn36xx_driver_group0.base, ~wcn36xx_driver_group0.offset, ~wcn36xx_ops_group2.base, ~wcn36xx_ops_group2.offset, ~wcn36xx_ops_group0.base, ~wcn36xx_ops_group0.offset, ~fops_wcn36xx_bmps_group1.base, ~fops_wcn36xx_bmps_group1.offset, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset, ~#wowlan_support.base, ~#wowlan_support.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset, ~#set_impl.base, ~#set_impl.offset, ~LDV_SKBS.base, ~LDV_SKBS.offset, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int, #valid, #length;

implementation ldv_error() returns (){
  loc7:
    assume !false;
    goto loc8;
  loc8:
    assert false;
}

procedure ldv_error() returns ();
modifies ;

implementation ldv_check_final_state() returns (){
    var #t~ret2815 : int;
    var ~tmp___7~1728 : int;

  loc9:
    havoc ~tmp___7~1728;
    call #t~ret2815 := ldv_set_is_empty(~LDV_SKBS.base, ~LDV_SKBS.offset);
    assume -2147483648 <= #t~ret2815 && #t~ret2815 <= 2147483647;
    ~tmp___7~1728 := #t~ret2815;
    havoc #t~ret2815;
    assume !(~tmp___7~1728 != 0);
    call ldv_error();
    return;
}

procedure ldv_check_final_state() returns ();
modifies ;

implementation ldv_zalloc(#in~size : int) returns (#res.base : int, #res.offset : int){
    var #t~nondet86 : int;
    var #t~malloc87.base : int, #t~malloc87.offset : int;
    var ~size : int;
    var ~p~98.base : int, ~p~98.offset : int;
    var ~tmp~98.base : int, ~tmp~98.offset : int;
    var ~tmp___0~98 : int;

  loc10:
    ~size := #in~size;
    havoc ~p~98.base, ~p~98.offset;
    havoc ~tmp~98.base, ~tmp~98.offset;
    havoc ~tmp___0~98;
    assume -2147483648 <= #t~nondet86 && #t~nondet86 <= 2147483647;
    ~tmp___0~98 := #t~nondet86;
    havoc #t~nondet86;
    assume ~tmp___0~98 != 0;
    #res.base, #res.offset := 0, 0;
    assume true;
    return;
}

procedure ldv_zalloc(#in~size : int) returns (#res.base : int, #res.offset : int);
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation wcn36xx_init() returns (#res : int){
    var #t~ret547 : int;

  loc11:
    call #t~ret547 := ldv___platform_driver_register_12(~#wcn36xx_driver.base, ~#wcn36xx_driver.offset, ~#__this_module.base, ~#__this_module.offset);
    assume -2147483648 <= #t~ret547 && #t~ret547 <= 2147483647;
    havoc #t~ret547;
    #res := 0;
    assume true;
    return;
}

procedure wcn36xx_init() returns (#res : int);
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~wcn36xx_driver_group0.base, ~wcn36xx_driver_group0.offset, ~ldv_state_variable_5;

implementation ULTIMATE.start() returns (){
    var #t~ret2816 : int;

  loc12:
    call ULTIMATE.init();
    call #t~ret2816 := main();
    return;
}

procedure ULTIMATE.start() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~ldv_irq_1_3, ~ldv_irq_data_1_1.base, ~ldv_irq_data_1_1.offset, ~ldv_irq_1_0, ~ldv_state_variable_6, ~ldv_irq_data_1_0.base, ~ldv_irq_data_1_0.offset, ~ldv_state_variable_0, ~ldv_state_variable_5, ~ldv_state_variable_2, ~ldv_irq_data_1_3.base, ~ldv_irq_data_1_3.offset, ~ldv_irq_data_1_2.base, ~ldv_irq_data_1_2.offset, ~ldv_irq_1_2, ~ldv_irq_1_1, ~ldv_irq_line_1_3, ~ldv_state_variable_3, ~ldv_irq_line_1_0, ~ref_cnt, ~ldv_irq_line_1_1, ~ldv_state_variable_1, ~ldv_irq_line_1_2, ~ldv_state_variable_4, ~wcn36xx_dbg_mask, ~#wcn36xx_caps_names.base, ~#wcn36xx_caps_names.offset, ~ldv_retval_0, ~ldv_retval_4, ~ldv_retval_6, ~ldv_retval_1, ~ldv_retval_2, ~ldv_retval_5, ~ldv_retval_3, ~last_index, ~wcn36xx_ops_group1.base, ~wcn36xx_ops_group1.offset, ~fops_wcn36xx_bmps_group2.base, ~fops_wcn36xx_bmps_group2.offset, ~fops_wcn36xx_dump_group2.base, ~fops_wcn36xx_dump_group2.offset, ~fops_wcn36xx_dump_group1.base, ~fops_wcn36xx_dump_group1.offset, ~wcn36xx_driver_group0.base, ~wcn36xx_driver_group0.offset, ~wcn36xx_ops_group2.base, ~wcn36xx_ops_group2.offset, ~wcn36xx_ops_group0.base, ~wcn36xx_ops_group0.offset, ~fops_wcn36xx_bmps_group1.base, ~fops_wcn36xx_bmps_group1.offset, ~#wcn_2ghz_channels.base, ~#wcn_2ghz_channels.offset, ~#wcn_5ghz_channels.base, ~#wcn_5ghz_channels.offset, ~#wcn_2ghz_rates.base, ~#wcn_2ghz_rates.offset, ~#wcn_5ghz_rates.base, ~#wcn_5ghz_rates.offset, ~#wcn_band_2ghz.base, ~#wcn_band_2ghz.offset, ~#wcn_band_5ghz.base, ~#wcn_band_5ghz.offset, ~#wowlan_support.base, ~#wowlan_support.offset, ~#wcn36xx_ops.base, ~#wcn36xx_ops.offset, ~#wcn36xx_platform_id_table.base, ~#wcn36xx_platform_id_table.offset, ~#wcn36xx_driver.base, ~#wcn36xx_driver.offset, ~#fops_wcn36xx_bmps.base, ~#fops_wcn36xx_bmps.offset, ~#fops_wcn36xx_dump.base, ~#fops_wcn36xx_dump.offset, ~#set_impl.base, ~#set_impl.offset, ~LDV_SKBS.base, ~LDV_SKBS.offset, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int, ~ldv_state_variable_6, ~ldv_state_variable_4, ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_state_variable_3, ~ldv_state_variable_2, ~ldv_state_variable_5, ~ldv_retval_2, ~ldv_retval_1, ~ldv_retval_0, ~ldv_retval_4, ~ldv_retval_6;
modifies #valid, #length, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int, ~last_index, ~fops_wcn36xx_dump_group1.base, ~fops_wcn36xx_dump_group1.offset, ~fops_wcn36xx_dump_group2.base, ~fops_wcn36xx_dump_group2.offset, ~wcn36xx_ops_group0.base, ~wcn36xx_ops_group0.offset, ~wcn36xx_ops_group1.base, ~wcn36xx_ops_group1.offset, ~wcn36xx_ops_group2.base, ~wcn36xx_ops_group2.offset, ~fops_wcn36xx_bmps_group1.base, ~fops_wcn36xx_bmps_group1.offset, ~fops_wcn36xx_bmps_group2.base, ~fops_wcn36xx_bmps_group2.offset, ~ldv_state_variable_5, ~wcn36xx_driver_group0.base, ~wcn36xx_driver_group0.offset, ~ldv_irq_1_0, ~ldv_irq_1_1, ~ldv_irq_1_2, ~ldv_irq_1_3, ~ldv_retval_5, ~ldv_state_variable_3, ~ref_cnt, ~ldv_retval_3, ~ldv_state_variable_4, ~ldv_irq_line_1_0, ~ldv_irq_data_1_0.base, ~ldv_irq_data_1_0.offset, ~ldv_irq_line_1_1, ~ldv_irq_data_1_1.base, ~ldv_irq_data_1_1.offset, ~ldv_irq_line_1_2, ~ldv_irq_data_1_2.base, ~ldv_irq_data_1_2.offset, ~ldv_irq_line_1_3, ~ldv_irq_data_1_3.base, ~ldv_irq_data_1_3.offset, ~ldv_state_variable_6, ~ldv_state_variable_1, ~ldv_state_variable_0, ~ldv_state_variable_2, ~ldv_retval_2, ~ldv_retval_1, ~ldv_retval_0, ~ldv_retval_4, ~ldv_retval_6;

implementation ldv_initialize() returns (){
  loc13:
    call ldv_set_init(~LDV_SKBS.base, ~LDV_SKBS.offset);
    assume true;
    return;
}

procedure ldv_initialize() returns ();
modifies ~last_index;

implementation ldv_initialize_platform_driver_5() returns (){
    var #t~ret548.base : int, #t~ret548.offset : int;
    var ~tmp~433.base : int, ~tmp~433.offset : int;

  loc14:
    havoc ~tmp~433.base, ~tmp~433.offset;
    call #t~ret548.base, #t~ret548.offset := ldv_zalloc(1464);
    ~tmp~433.base, ~tmp~433.offset := #t~ret548.base, #t~ret548.offset;
    havoc #t~ret548.base, #t~ret548.offset;
    ~wcn36xx_driver_group0.base, ~wcn36xx_driver_group0.offset := ~tmp~433.base, ~tmp~433.offset;
    assume true;
    return;
}

procedure ldv_initialize_platform_driver_5() returns ();
modifies ~wcn36xx_driver_group0.base, ~wcn36xx_driver_group0.offset, #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

procedure platform_driver_unregister(#in~94.base : int, #in~94.offset : int) returns ();
modifies ;

procedure ieee80211_free_txskb(#in~102.base : int, #in~102.offset : int, #in~103.base : int, #in~103.offset : int) returns ();
modifies ;

procedure debug_lockdep_rcu_enabled() returns (#res : int);
modifies ;

procedure wait_for_completion_timeout(#in~1245.base : int, #in~1245.offset : int, #in~1246 : int) returns (#res : int);
modifies ;

procedure destroy_workqueue(#in~1260.base : int, #in~1260.offset : int) returns ();
modifies ;

procedure ioremap_nocache(#in~67 : int, #in~68 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure free_irq(#in~713 : int, #in~714.base : int, #in~714.offset : int) returns ();
modifies ;

procedure ieee80211_tx_status_irqsafe(#in~720.base : int, #in~720.offset : int, #in~721.base : int, #in~721.offset : int) returns ();
modifies ;

procedure mutex_unlock(#in~1250.base : int, #in~1250.offset : int) returns ();
modifies ;

procedure ldv_release_3() returns (#res : int);
modifies ;

procedure __memcpy(#in~39.base : int, #in~39.offset : int, #in~40.base : int, #in~40.offset : int, #in~41 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure ldv_release_4() returns (#res : int);
modifies ;

procedure strsep(#in~2689.base : int, #in~2689.offset : int, #in~2690.base : int, #in~2690.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure lock_release(#in~54.base : int, #in~54.offset : int, #in~55 : int, #in~56 : int) returns ();
modifies ;

procedure __VERIFIER_nondet_uint() returns (#res : int);
modifies ;

procedure ieee80211_unregister_hw(#in~107.base : int, #in~107.offset : int) returns ();
modifies ;

procedure debug_dma_unmap_page(#in~632.base : int, #in~632.offset : int, #in~633 : int, #in~634 : int, #in~635 : int, #in~636 : int) returns ();
modifies ;

procedure ieee80211_start_tx_ba_session(#in~115.base : int, #in~115.offset : int, #in~116 : int, #in~117 : int) returns (#res : int);
modifies ;

procedure debug_dma_alloc_coherent(#in~637.base : int, #in~637.offset : int, #in~638 : int, #in~639 : int, #in~640.base : int, #in~640.offset : int) returns ();
modifies ;

procedure __kmalloc(#in~80 : int, #in~81 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure ieee80211_stop_tx_ba_cb_irqsafe(#in~121.base : int, #in~121.offset : int, #in~122.base : int, #in~122.offset : int, #in~123 : int) returns ();
modifies ;

procedure memcmp(#in~1050.base : int, #in~1050.offset : int, #in~1051.base : int, #in~1051.offset : int, #in~1052 : int) returns (#res : int);
modifies ;

procedure ieee80211_find_sta(#in~124.base : int, #in~124.offset : int, #in~125.base : int, #in~125.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure read~$Pointer$(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value.base : int, #value.offset : int);
ensures #value.base == #memory_$Pointer$.base[#ptr.base,#ptr.offset] && #value.offset == #memory_$Pointer$.offset[#ptr.base,#ptr.offset];

procedure disable_irq_nosync(#in~715 : int) returns ();
modifies ;

procedure __VERIFIER_nondet_u32() returns (#res : ~u32);
modifies ;

procedure ULTIMATE.dealloc(~addr.base : int, ~addr.offset : int) returns ();
free ensures #valid == old(#valid)[~addr.base := 0];
modifies #valid;

procedure iounmap(#in~70.base : int, #in~70.offset : int) returns ();
modifies ;

procedure might_fault() returns ();
modifies ;

procedure printk(#in~23.base : int, #in~23.offset : int) returns (#res : int);
modifies ;

procedure calloc(#in~nmemb : int, #in~size : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure list_del(#in~38.base : int, #in~38.offset : int) returns ();
modifies ;

procedure debugfs_create_dir(#in~2710.base : int, #in~2710.offset : int, #in~2711.base : int, #in~2711.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __mutex_init(#in~61.base : int, #in~61.offset : int, #in~62.base : int, #in~62.offset : int, #in~63.base : int, #in~63.offset : int) returns ();
modifies ;

procedure queue_work_on(#in~1261 : int, #in~1262.base : int, #in~1262.offset : int, #in~1263.base : int, #in~1263.offset : int) returns (#res : ~bool);
modifies ;

procedure __platform_driver_register(#in~92.base : int, #in~92.offset : int, #in~93.base : int, #in~93.offset : int) returns (#res : int);
modifies ;

procedure ieee80211_alloc_hw(#in~104 : int, #in~105.base : int, #in~105.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure _raw_spin_lock_irqsave(#in~617.base : int, #in~617.offset : int) returns (#res : int);
modifies ;

procedure mutex_lock_nested(#in~1248.base : int, #in~1248.offset : int, #in~1249 : int) returns ();
modifies ;

procedure simple_read_from_buffer(#in~2700.base : int, #in~2700.offset : int, #in~2701 : int, #in~2702.base : int, #in~2702.offset : int, #in~2703.base : int, #in~2703.offset : int, #in~2704 : int) returns (#res : int);
modifies ;

procedure lockdep_init_map(#in~1236.base : int, #in~1236.offset : int, #in~1237.base : int, #in~1237.offset : int, #in~1238.base : int, #in~1238.offset : int, #in~1239 : int) returns ();
modifies ;

procedure release_firmware(#in~88.base : int, #in~88.offset : int) returns ();
modifies ;

procedure ieee80211_start_tx_ba_cb_irqsafe(#in~118.base : int, #in~118.offset : int, #in~119.base : int, #in~119.offset : int, #in~120 : int) returns ();
modifies ;

procedure __VERIFIER_nondet_size_t() returns (#res : int);
modifies ;

procedure debug_dma_free_coherent(#in~641.base : int, #in~641.offset : int, #in~642 : int, #in~643.base : int, #in~643.offset : int, #in~644 : int) returns ();
modifies ;

procedure flush_workqueue(#in~66.base : int, #in~66.offset : int) returns ();
modifies ;

procedure __VERIFIER_nondet_int() returns (#res : int);
modifies ;

procedure _copy_from_user(#in~2691.base : int, #in~2691.offset : int, #in~2692.base : int, #in~2692.offset : int, #in~2693 : int) returns (#res : int);
modifies ;

procedure ieee80211_rx_irqsafe(#in~1061.base : int, #in~1061.offset : int, #in~1062.base : int, #in~1062.offset : int) returns ();
modifies ;

procedure ieee80211_register_hw(#in~106.base : int, #in~106.offset : int) returns (#res : int);
modifies ;

procedure jiffies_to_msecs(#in~1251 : int) returns (#res : int);
modifies ;

procedure #Ultimate.alloc(~size : int) returns (#res.base : int, #res.offset : int);
ensures old(#valid)[#res.base] == 0;
ensures #valid == old(#valid)[#res.base := 1];
ensures #res.offset == 0;
ensures #res.base != 0;
ensures #length == old(#length)[#res.base := ~size];
modifies #valid, #length;

procedure ULTIMATE.free(~addr.base : int, ~addr.offset : int) returns ();
free requires ~addr.offset == 0;
free requires ~addr.base == 0 || #valid[~addr.base] == 1;
free ensures (if ~addr.base == 0 then #valid == old(#valid) else #valid == old(#valid)[~addr.base := 0]);
modifies #valid;

procedure read~int(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value : int);
ensures #value == #memory_int[#ptr.base,#ptr.offset];

procedure __alloc_workqueue_key(#in~1255.base : int, #in~1255.offset : int, #in~1256 : int, #in~1257 : int, #in~1258.base : int, #in~1258.offset : int, #in~1259.base : int, #in~1259.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __phys_addr(#in~615 : int) returns (#res : int);
modifies ;

procedure irq_set_irq_wake(#in~717 : int, #in~718 : int) returns (#res : int);
modifies ;

procedure ieee80211_report_low_ack(#in~1268.base : int, #in~1268.offset : int, #in~1269 : int) returns ();
modifies ;

procedure mutex_destroy(#in~60.base : int, #in~60.offset : int) returns ();
modifies ;

procedure rcu_is_watching() returns (#res : ~bool);
modifies ;

procedure ieee80211_connection_loss(#in~1270.base : int, #in~1270.offset : int) returns ();
modifies ;

procedure debugfs_remove_recursive(#in~2712.base : int, #in~2712.offset : int) returns ();
modifies ;

procedure ieee80211_beacon_get_tim(#in~109.base : int, #in~109.offset : int, #in~110.base : int, #in~110.offset : int, #in~111.base : int, #in~111.offset : int, #in~112.base : int, #in~112.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure print_hex_dump(#in~24.base : int, #in~24.offset : int, #in~25.base : int, #in~25.offset : int, #in~26 : int, #in~27 : int, #in~28 : int, #in~29.base : int, #in~29.offset : int, #in~30 : int, #in~31 : int) returns ();
modifies ;

procedure kfree(#in~79.base : int, #in~79.offset : int) returns ();
modifies ;

procedure debugfs_create_file(#in~2705.base : int, #in~2705.offset : int, #in~2706 : int, #in~2707.base : int, #in~2707.offset : int, #in~2708.base : int, #in~2708.offset : int, #in~2709.base : int, #in~2709.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure write~int(#value : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #value];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset]] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #memory_$Pointer$.offset[#ptr.base,#ptr.offset]];

procedure skb_pull(#in~1055.base : int, #in~1055.offset : int, #in~1056 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __VERIFIER_error() returns ();
modifies ;

procedure __VERIFIER_nondet_u16() returns (#res : ~u16);
modifies ;

procedure enable_irq(#in~716 : int) returns ();
modifies ;

procedure ieee80211_stop_queues(#in~722.base : int, #in~722.offset : int) returns ();
modifies ;

procedure C.complete(#in~1247.base : int, #in~1247.offset : int) returns ();
modifies ;

procedure __list_add(#in~34.base : int, #in~34.offset : int, #in~35.base : int, #in~35.offset : int, #in~36.base : int, #in~36.offset : int) returns ();
modifies ;

procedure __VERIFIER_assume(#in~expression : int) returns ();
modifies ;

procedure ieee80211_proberesp_get(#in~113.base : int, #in~113.offset : int, #in~114.base : int, #in~114.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure lock_acquire(#in~47.base : int, #in~47.offset : int, #in~48 : int, #in~49 : int, #in~50 : int, #in~51 : int, #in~52.base : int, #in~52.offset : int, #in~53 : int) returns ();
modifies ;

procedure ieee80211_free_hw(#in~108.base : int, #in~108.offset : int) returns ();
modifies ;

procedure write~$Pointer$(#value.base : int, #value.offset : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #memory_int[#ptr.base,#ptr.offset]];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #value.base] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #value.offset];

procedure lockdep_rcu_suspicious(#in~57.base : int, #in~57.offset : int, #in~58 : int, #in~59.base : int, #in~59.offset : int) returns ();
modifies ;

procedure __bad_percpu_size() returns ();
modifies ;

procedure _raw_spin_unlock_irqrestore(#in~618.base : int, #in~618.offset : int, #in~619 : int) returns ();
modifies ;

procedure memset(#in~42.base : int, #in~42.offset : int, #in~43 : int, #in~44 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __init_work(#in~1253.base : int, #in~1253.offset : int, #in~1254 : int) returns ();
modifies ;

procedure debug_dma_map_page(#in~625.base : int, #in~625.offset : int, #in~626.base : int, #in~626.offset : int, #in~627 : int, #in~628 : int, #in~629 : int, #in~630 : int, #in~631 : int) returns ();
modifies ;

procedure kmemdup(#in~1233.base : int, #in~1233.offset : int, #in~1234 : int, #in~1235 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure warn_slowpath_null(#in~613.base : int, #in~613.offset : int, #in~614 : int) returns ();
modifies ;

procedure skb_put(#in~1053.base : int, #in~1053.offset : int, #in~1054 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure msecs_to_jiffies(#in~1252 : int) returns (#res : int);
modifies ;

procedure request_firmware(#in~1265.base : int, #in~1265.offset : int, #in~1266.base : int, #in~1266.offset : int, #in~1267.base : int, #in~1267.offset : int) returns (#res : int);
modifies ;

procedure simple_open(#in~2698.base : int, #in~2698.offset : int, #in~2699.base : int, #in~2699.offset : int) returns (#res : int);
modifies ;

procedure __init_waitqueue_head(#in~1240.base : int, #in~1240.offset : int, #in~1241.base : int, #in~1241.offset : int, #in~1242.base : int, #in~1242.offset : int) returns ();
modifies ;

procedure platform_get_resource_byname(#in~89.base : int, #in~89.offset : int, #in~90 : int, #in~91.base : int, #in~91.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __copy_from_user_overflow() returns ();
modifies ;

procedure request_threaded_irq(#in~706 : int, #in~707.base : int, #in~707.offset : int, #in~708.base : int, #in~708.offset : int, #in~709 : int, #in~710.base : int, #in~710.offset : int, #in~711.base : int, #in~711.offset : int) returns (#res : int);
modifies ;

procedure __VERIFIER_nondet_u8() returns (#res : ~u8);
modifies ;

procedure kstrtouint(#in~2685.base : int, #in~2685.offset : int, #in~2686 : int, #in~2687.base : int, #in~2687.offset : int) returns (#res : int);
modifies ;

procedure ieee80211_wake_queues(#in~723.base : int, #in~723.offset : int) returns ();
modifies ;

