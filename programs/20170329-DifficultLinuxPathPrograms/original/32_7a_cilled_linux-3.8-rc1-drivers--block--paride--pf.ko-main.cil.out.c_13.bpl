type STRUCT~perf_event;
type STRUCT~tvec_base;
type STRUCT~dev_pm_qos;
type STRUCT~sock;
type STRUCT~sysfs_dirent;
type STRUCT~module_param_attrs;
type STRUCT~module_sect_attrs;
type STRUCT~module_notes_attrs;
type STRUCT~ftrace_event_call;
type STRUCT~vfsmount;
type STRUCT~radix_tree_node;
type STRUCT~pid_namespace;
type STRUCT~cgroup_subsys_state;
type STRUCT~writeback_control;
type STRUCT~kiocb;
type STRUCT~iovec;
type STRUCT~swap_info_struct;
type STRUCT~pipe_inode_info;
type STRUCT~cdev;
type STRUCT~posix_acl;
type STRUCT~files_struct;
type STRUCT~nlm_lockowner;
type STRUCT~nfs4_lock_state;
type STRUCT~export_operations;
type STRUCT~xattr_handler;
type STRUCT~mtd_info;
type STRUCT~poll_table_struct;
type STRUCT~seq_file;
type STRUCT~nameidata;
type STRUCT~kstatfs;
type STRUCT~uprobe;
type STRUCT~slab;
type STRUCT~anon_vma;
type STRUCT~mempolicy;
type STRUCT~linux_binfmt;
type STRUCT~mmu_notifier_mm;
type STRUCT~sem_undo_list;
type STRUCT~seccomp_filter;
type STRUCT~keyring_list;
type STRUCT~key_type;
type STRUCT~key_user;
type STRUCT~thread_group_cred;
type STRUCT~user_namespace;
type STRUCT~tty_struct;
type STRUCT~autogroup;
type STRUCT~taskstats;
type STRUCT~tty_audit_buf;
type STRUCT~rq;
type STRUCT~cfs_rq;
type STRUCT~rt_rq;
type STRUCT~mem_cgroup;
type STRUCT~task_group;
type STRUCT~fs_struct;
type STRUCT~nsproxy;
type STRUCT~audit_context;
type STRUCT~rt_mutex_waiter;
type STRUCT~reclaim_state;
type STRUCT~css_set;
type STRUCT~robust_list_head;
type STRUCT~compat_robust_list_head;
type STRUCT~futex_pi_state;
type STRUCT~perf_event_context;
type STRUCT~dma_map_ops;
type STRUCT~iommu_ops;
type STRUCT~subsys_private;
type STRUCT~of_device_id;
type STRUCT~acpi_device_id;
type STRUCT~driver_private;
type STRUCT~device_private;
type STRUCT~dma_coherent_mem;
type STRUCT~device_node;
type STRUCT~iommu_group;
type STRUCT~timer_rand_state;
type STRUCT~disk_events;
type STRUCT~blkcg_gq;
type STRUCT~bsg_job;
type STRUCT~throtl_data;
type ~__s8 = int;
type ~__s16 = int;
type ~__u16 = int;
type ~__s32 = int;
type ~__u32 = int;
type ~__u64 = int;
type ~u8 = int;
type ~s16 = int;
type ~u16 = int;
type ~s32 = int;
type ~u32 = int;
type ~s64 = int;
type ~u64 = int;
type ~__kernel_long_t = int;
type ~__kernel_ulong_t = int;
type ~__kernel_pid_t = int;
type ~__kernel_uid32_t = int;
type ~__kernel_gid32_t = int;
type ~__kernel_loff_t = int;
type ~__kernel_timer_t = int;
type ~__kernel_clockid_t = int;
type ~umode_t = int;
type ~bool = int;
type ~sector_t = int;
type ~blkcnt_t = int;
type ~gfp_t = int;
type ~fmode_t = int;
type ~oom_flags_t = int;
type ~pgdval_t = int;
type ~pgprotval_t = int;
type ~qsize_t = int;
type ~cputime_t = int;
type ~__kernel_size_t = ~__kernel_ulong_t;
type ~__kernel_ssize_t = ~__kernel_long_t;
type ~__kernel_time_t = ~__kernel_long_t;
type ~__kernel_clock_t = ~__kernel_long_t;
type ~__kernel_dev_t = ~__u32;
type ~dev_t = ~__kernel_dev_t;
type ~pid_t = ~__kernel_pid_t;
type ~clockid_t = ~__kernel_clockid_t;
type ~uid_t = ~__kernel_uid32_t;
type ~gid_t = ~__kernel_gid32_t;
type ~loff_t = ~__kernel_loff_t;
type ~size_t = ~__kernel_size_t;
type ~ssize_t = ~__kernel_ssize_t;
type ~time_t = ~__kernel_time_t;
type ~int32_t = ~__s32;
type ~uint32_t = ~__u32;
type ~__ticket_t = ~u16;
type ~__ticketpair_t = ~u32;
type ~kuid_t = ~uid_t;
type ~kgid_t = ~gid_t;
type ~Elf64_Addr = ~__u64;
type ~Elf64_Half = ~__u16;
type ~Elf64_Word = ~__u32;
type ~Elf64_Xword = ~__u64;
type ~projid_t = ~__kernel_uid32_t;
type ~kprojid_t = ~projid_t;
type ~key_serial_t = ~int32_t;
type ~key_perm_t = ~uint32_t;
const #funAddr~ps_tq_int.base : int;
const #funAddr~ps_tq_int.offset : int;
const #funAddr~delayed_work_timer_fn.base : int;
const #funAddr~delayed_work_timer_fn.offset : int;
const #funAddr~pf_open.base : int;
const #funAddr~pf_open.offset : int;
const #funAddr~pf_release.base : int;
const #funAddr~pf_release.offset : int;
const #funAddr~pf_ioctl.base : int;
const #funAddr~pf_ioctl.offset : int;
const #funAddr~pf_check_events.base : int;
const #funAddr~pf_check_events.offset : int;
const #funAddr~pf_getgeo.base : int;
const #funAddr~pf_getgeo.offset : int;
const #funAddr~do_pf_read.base : int;
const #funAddr~do_pf_read.offset : int;
const #funAddr~do_pf_write.base : int;
const #funAddr~do_pf_write.offset : int;
const #funAddr~do_pf_read_start.base : int;
const #funAddr~do_pf_read_start.offset : int;
const #funAddr~do_pf_read_drq.base : int;
const #funAddr~do_pf_read_drq.offset : int;
const #funAddr~pf_ready.base : int;
const #funAddr~pf_ready.offset : int;
const #funAddr~do_pf_write_start.base : int;
const #funAddr~do_pf_write_start.offset : int;
const #funAddr~do_pf_write_done.base : int;
const #funAddr~do_pf_write_done.offset : int;
const #funAddr~do_pf_request.base : int;
const #funAddr~do_pf_request.offset : int;
const ~rpm_status~RPM_ACTIVE : int;
const ~rpm_status~RPM_RESUMING : int;
const ~rpm_status~RPM_SUSPENDED : int;
const ~rpm_status~RPM_SUSPENDING : int;
const ~rpm_request~RPM_REQ_NONE : int;
const ~rpm_request~RPM_REQ_IDLE : int;
const ~rpm_request~RPM_REQ_SUSPEND : int;
const ~rpm_request~RPM_REQ_AUTOSUSPEND : int;
const ~rpm_request~RPM_REQ_RESUME : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NONE : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NET : int;
const ~kobj_ns_type~KOBJ_NS_TYPES : int;
const ~module_state~MODULE_STATE_LIVE : int;
const ~module_state~MODULE_STATE_COMING : int;
const ~module_state~MODULE_STATE_GOING : int;
const ~pid_type~PIDTYPE_PID : int;
const ~pid_type~PIDTYPE_PGID : int;
const ~pid_type~PIDTYPE_SID : int;
const ~pid_type~PIDTYPE_MAX : int;
const ~migrate_mode~MIGRATE_ASYNC : int;
const ~migrate_mode~MIGRATE_SYNC_LIGHT : int;
const ~migrate_mode~MIGRATE_SYNC : int;
const ~quota_type~USRQUOTA : int;
const ~quota_type~GRPQUOTA : int;
const ~quota_type~PRJQUOTA : int;
const ~uprobe_task_state~UTASK_RUNNING : int;
const ~uprobe_task_state~UTASK_SSTEP : int;
const ~uprobe_task_state~UTASK_SSTEP_ACK : int;
const ~uprobe_task_state~UTASK_SSTEP_TRAPPED : int;
const ~hrtimer_restart~HRTIMER_NORESTART : int;
const ~hrtimer_restart~HRTIMER_RESTART : int;
const ~rq_cmd_type_bits~REQ_TYPE_FS : int;
const ~rq_cmd_type_bits~REQ_TYPE_BLOCK_PC : int;
const ~rq_cmd_type_bits~REQ_TYPE_SENSE : int;
const ~rq_cmd_type_bits~REQ_TYPE_PM_SUSPEND : int;
const ~rq_cmd_type_bits~REQ_TYPE_PM_RESUME : int;
const ~rq_cmd_type_bits~REQ_TYPE_PM_SHUTDOWN : int;
const ~rq_cmd_type_bits~REQ_TYPE_SPECIAL : int;
const ~rq_cmd_type_bits~REQ_TYPE_ATA_TASKFILE : int;
const ~rq_cmd_type_bits~REQ_TYPE_ATA_PC : int;
const ~blk_eh_timer_return~BLK_EH_NOT_HANDLED : int;
const ~blk_eh_timer_return~BLK_EH_HANDLED : int;
const ~blk_eh_timer_return~BLK_EH_RESET_TIMER : int;
axiom #funAddr~ps_tq_int.base == -1 && #funAddr~ps_tq_int.offset == 0;
axiom #funAddr~delayed_work_timer_fn.base == -1 && #funAddr~delayed_work_timer_fn.offset == 1;
axiom #funAddr~pf_open.base == -1 && #funAddr~pf_open.offset == 2;
axiom #funAddr~pf_release.base == -1 && #funAddr~pf_release.offset == 3;
axiom #funAddr~pf_ioctl.base == -1 && #funAddr~pf_ioctl.offset == 4;
axiom #funAddr~pf_check_events.base == -1 && #funAddr~pf_check_events.offset == 5;
axiom #funAddr~pf_getgeo.base == -1 && #funAddr~pf_getgeo.offset == 6;
axiom #funAddr~do_pf_read.base == -1 && #funAddr~do_pf_read.offset == 7;
axiom #funAddr~do_pf_write.base == -1 && #funAddr~do_pf_write.offset == 8;
axiom #funAddr~do_pf_read_start.base == -1 && #funAddr~do_pf_read_start.offset == 9;
axiom #funAddr~do_pf_read_drq.base == -1 && #funAddr~do_pf_read_drq.offset == 10;
axiom #funAddr~pf_ready.base == -1 && #funAddr~pf_ready.offset == 11;
axiom #funAddr~do_pf_write_start.base == -1 && #funAddr~do_pf_write_start.offset == 12;
axiom #funAddr~do_pf_write_done.base == -1 && #funAddr~do_pf_write_done.offset == 13;
axiom #funAddr~do_pf_request.base == -1 && #funAddr~do_pf_request.offset == 14;
axiom ~rpm_status~RPM_ACTIVE == 0;
axiom ~rpm_status~RPM_RESUMING == 1;
axiom ~rpm_status~RPM_SUSPENDED == 2;
axiom ~rpm_status~RPM_SUSPENDING == 3;
axiom ~rpm_request~RPM_REQ_NONE == 0;
axiom ~rpm_request~RPM_REQ_IDLE == 1;
axiom ~rpm_request~RPM_REQ_SUSPEND == 2;
axiom ~rpm_request~RPM_REQ_AUTOSUSPEND == 3;
axiom ~rpm_request~RPM_REQ_RESUME == 4;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NONE == 0;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NET == 1;
axiom ~kobj_ns_type~KOBJ_NS_TYPES == 2;
axiom ~module_state~MODULE_STATE_LIVE == 0;
axiom ~module_state~MODULE_STATE_COMING == 1;
axiom ~module_state~MODULE_STATE_GOING == 2;
axiom ~pid_type~PIDTYPE_PID == 0;
axiom ~pid_type~PIDTYPE_PGID == 1;
axiom ~pid_type~PIDTYPE_SID == 2;
axiom ~pid_type~PIDTYPE_MAX == 3;
axiom ~migrate_mode~MIGRATE_ASYNC == 0;
axiom ~migrate_mode~MIGRATE_SYNC_LIGHT == 1;
axiom ~migrate_mode~MIGRATE_SYNC == 2;
axiom ~quota_type~USRQUOTA == 0;
axiom ~quota_type~GRPQUOTA == 1;
axiom ~quota_type~PRJQUOTA == 2;
axiom ~uprobe_task_state~UTASK_RUNNING == 0;
axiom ~uprobe_task_state~UTASK_SSTEP == 1;
axiom ~uprobe_task_state~UTASK_SSTEP_ACK == 2;
axiom ~uprobe_task_state~UTASK_SSTEP_TRAPPED == 3;
axiom ~hrtimer_restart~HRTIMER_NORESTART == 0;
axiom ~hrtimer_restart~HRTIMER_RESTART == 1;
axiom ~rq_cmd_type_bits~REQ_TYPE_FS == 1;
axiom ~rq_cmd_type_bits~REQ_TYPE_BLOCK_PC == 2;
axiom ~rq_cmd_type_bits~REQ_TYPE_SENSE == 3;
axiom ~rq_cmd_type_bits~REQ_TYPE_PM_SUSPEND == 4;
axiom ~rq_cmd_type_bits~REQ_TYPE_PM_RESUME == 5;
axiom ~rq_cmd_type_bits~REQ_TYPE_PM_SHUTDOWN == 6;
axiom ~rq_cmd_type_bits~REQ_TYPE_SPECIAL == 7;
axiom ~rq_cmd_type_bits~REQ_TYPE_ATA_TASKFILE == 8;
axiom ~rq_cmd_type_bits~REQ_TYPE_ATA_PC == 9;
axiom ~blk_eh_timer_return~BLK_EH_NOT_HANDLED == 0;
axiom ~blk_eh_timer_return~BLK_EH_HANDLED == 1;
axiom ~blk_eh_timer_return~BLK_EH_RESET_TIMER == 2;
function { :overapproximation "bitwiseAnd" } ~bitwiseAnd(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseOr" } ~bitwiseOr(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "shiftLeft" } ~shiftLeft(in0 : int, in1 : int) returns (out : int);
var ~ldv_state_variable_1 : int;

var ~ref_cnt : int;

var ~ldv_state_variable_0 : int;

var ~major : int;

var ~name.base : int, ~name.offset : int;

var ~cluster : int;

var ~nice : int;

var ~disable : int;

var ~#drive0.base : int, ~#drive0.offset : int;

var ~#drive1.base : int, ~#drive1.offset : int;

var ~#drive2.base : int, ~#drive2.offset : int;

var ~#drive3.base : int, ~#drive3.offset : int;

var ~#drives.base : int, ~#drives.offset : int;

var ~pf_drive_count : int;

var ~#pf_scratch.base : int, ~#pf_scratch.offset : int;

var ~pf_busy : int;

var ~ldv_retval_pf_init : int;

var ~ldvarg3 : int;

var ~ldvarg6 : int;

var ~ldv_retval_pf_open : int;

var ~ldvarg2 : int;

var ~ldv_mutex_cred_guard_mutex_of_signal_struct : int;

var ~ldv_mutex_lock : int;

var ~ldv_mutex_mutex_of_device : int;

var ~ldv_mutex_pf_mutex : int;

var ~verbose : ~bool;

var ~#__this_module.base : int, ~#__this_module.offset : int;

var ~#pf_mutex.base : int, ~#pf_mutex.offset : int;

var ~#pf_spin_lock.base : int, ~#pf_spin_lock.offset : int;

var ~#units.base : int, ~#units.offset : int;

var ~#pf_fops.base : int, ~#pf_fops.offset : int;

var ~pf_queue.base : int, ~pf_queue.offset : int;

var ~ldvarg0 : ~fmode_t;

var ~pf_fops_group2.base : int, ~pf_fops_group2.offset : int;

var ~pf_fops_group1.base : int, ~pf_fops_group1.offset : int;

var ~ldvarg5.base : int, ~ldvarg5.offset : int;

var ~ldvarg1 : ~fmode_t;

var ~ldvarg4 : ~fmode_t;

var ~pf_fops_group0.base : int, ~pf_fops_group0.offset : int;

var #NULL.base : int, #NULL.offset : int;

var #valid : [int]int;

var #length : [int]int;

var #memory_$Pointer$.base : [int,int]int, #memory_$Pointer$.offset : [int,int]int;

var #memory_int : [int,int]int;

implementation ldv_mutex_unlock_pf_mutex(#in~lock.base : int, #in~lock.offset : int) returns (){
    var ~lock.base : int, ~lock.offset : int;

  loc0:
    ~lock.base, ~lock.offset := #in~lock.base, #in~lock.offset;
    assume !(~ldv_mutex_pf_mutex == 2);
    call ldv_error();
    return;
}

procedure ldv_mutex_unlock_pf_mutex(#in~lock.base : int, #in~lock.offset : int) returns ();
modifies ~ldv_mutex_pf_mutex;

implementation pf_open(#in~bdev.base : int, #in~bdev.offset : int, #in~mode : int) returns (#res : int){
    var #t~mem74.base : int, #t~mem74.offset : int;
    var #t~mem75.base : int, #t~mem75.offset : int;
    var #t~ret76 : int;
    var #t~mem77 : int;
    var #t~mem78 : int;
    var #t~mem79 : int;
    var #t~mem81 : int;
    var ~bdev.base : int, ~bdev.offset : int;
    var ~mode : int;
    var ~pf~58.base : int, ~pf~58.offset : int;
    var ~ret~58 : int;

  loc1:
    ~bdev.base, ~bdev.offset := #in~bdev.base, #in~bdev.offset;
    ~mode := #in~mode;
    havoc ~pf~58.base, ~pf~58.offset;
    havoc ~ret~58;
    call #t~mem74.base, #t~mem74.offset := read~$Pointer$(~bdev.base, ~bdev.offset + 261, 8);
    call #t~mem75.base, #t~mem75.offset := read~$Pointer$(#t~mem74.base, #t~mem74.offset + 1275, 8);
    ~pf~58.base, ~pf~58.offset := #t~mem75.base, #t~mem75.offset;
    havoc #t~mem74.base, #t~mem74.offset;
    havoc #t~mem75.base, #t~mem75.offset;
    call ldv_mutex_lock_8(~#pf_mutex.base, ~#pf_mutex.offset);
    call #t~ret76 := pf_identify(~pf~58.base, ~pf~58.offset);
    assume -2147483648 <= #t~ret76 && #t~ret76 <= 2147483647;
    havoc #t~ret76;
    ~ret~58 := -19;
    call #t~mem77 := read~int(~pf~58.base, ~pf~58.offset + 180, 4);
    assume #t~mem77 == 0;
    havoc #t~mem77;
    call ldv_mutex_unlock_9(~#pf_mutex.base, ~#pf_mutex.offset);
    return;
}

procedure pf_open(#in~bdev.base : int, #in~bdev.offset : int, #in~mode : int) returns (#res : int);
modifies #memory_int, ~ldv_mutex_pf_mutex, #valid, #length, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation pf_wait(#in~pf.base : int, #in~pf.offset : int, #in~go : int, #in~stop : int, #in~fun.base : int, #in~fun.offset : int, #in~msg.base : int, #in~msg.offset : int) returns (#res : int){
    var #t~ret107 : int;
    var #t~ret108 : int;
    var #t~ret109 : int;
    var #t~ret110 : int;
    var #t~nondet111.base : int, #t~nondet111.offset : int;
    var #t~ret112 : int;
    var ~pf.base : int, ~pf.offset : int;
    var ~go : int;
    var ~stop : int;
    var ~fun.base : int, ~fun.offset : int;
    var ~msg.base : int, ~msg.offset : int;
    var ~j~90 : int;
    var ~r~90 : int;
    var ~e~90 : int;
    var ~s~90 : int;
    var ~p~90 : int;
    var ~tmp~90 : int;

  loc2:
    ~pf.base, ~pf.offset := #in~pf.base, #in~pf.offset;
    ~go := #in~go;
    ~stop := #in~stop;
    ~fun.base, ~fun.offset := #in~fun.base, #in~fun.offset;
    ~msg.base, ~msg.offset := #in~msg.base, #in~msg.offset;
    havoc ~j~90;
    havoc ~r~90;
    havoc ~e~90;
    havoc ~s~90;
    havoc ~p~90;
    havoc ~tmp~90;
    ~j~90 := 0;
    call #t~ret107 := status_reg(~pf.base, ~pf.offset);
    assume -2147483648 <= #t~ret107 && #t~ret107 <= 2147483647;
    ~r~90 := #t~ret107;
    havoc #t~ret107;
    assume !(~bitwiseAnd(~r~90, ~go) != 0 || (~stop != 0 && ~bitwiseAnd(~r~90, ~stop) == 0));
    assume !(~bitwiseAnd(~bitwiseAnd(~stop, 1), ~r~90) != 0 || ~j~90 > 64000);
    #res := 0;
    assume true;
    return;
}

procedure pf_wait(#in~pf.base : int, #in~pf.offset : int, #in~go : int, #in~stop : int, #in~fun.base : int, #in~fun.offset : int, #in~msg.base : int, #in~msg.offset : int) returns (#res : int);
modifies #valid, #length;

implementation read_reg(#in~pf.base : int, #in~pf.offset : int, #in~reg : int) returns (#res : int){
    var #t~mem104.base : int, #t~mem104.offset : int;
    var #t~ret105 : int;
    var ~pf.base : int, ~pf.offset : int;
    var ~reg : int;
    var ~tmp~86 : int;

  loc3:
    ~pf.base, ~pf.offset := #in~pf.base, #in~pf.offset;
    ~reg := #in~reg;
    havoc ~tmp~86;
    call #t~mem104.base, #t~mem104.offset := read~$Pointer$(~pf.base, ~pf.offset + 168, 8);
    call #t~ret105 := pi_read_regr(#t~mem104.base, #t~mem104.offset, 0, ~reg);
    assume -2147483648 <= #t~ret105 && #t~ret105 <= 2147483647;
    ~tmp~86 := #t~ret105;
    havoc #t~mem104.base, #t~mem104.offset;
    havoc #t~ret105;
    #res := ~tmp~86;
    assume true;
    return;
}

procedure read_reg(#in~pf.base : int, #in~pf.offset : int, #in~reg : int) returns (#res : int);
modifies ;

implementation pf_init_units() returns (){
    var #t~ret56.base : int, #t~ret56.offset : int;
    var #t~mem60.base : int, #t~mem60.offset : int;
    var #t~mem62 : int;
    var #t~mem63.base : int, #t~mem63.offset : int;
    var #t~mem65 : int;
    var #t~nondet66.base : int, #t~nondet66.offset : int;
    var #t~ret67 : int;
    var #t~ret70.base : int, #t~ret70.offset : int;
    var #t~mem72.base : int, #t~mem72.offset : int;
    var #t~mem73 : int;
    var ~pf~50.base : int, ~pf~50.offset : int;
    var ~unit~50 : int;
    var ~disk~50.base : int, ~disk~50.offset : int;
    var ~tmp~50.base : int, ~tmp~50.offset : int;

  loc4:
    havoc ~pf~50.base, ~pf~50.offset;
    havoc ~unit~50;
    havoc ~disk~50.base, ~disk~50.offset;
    havoc ~tmp~50.base, ~tmp~50.offset;
    ~pf_drive_count := 0;
    ~unit~50 := 0;
    ~pf~50.base, ~pf~50.offset := ~#units.base, ~#units.offset;
    goto loc5;
  loc5:
    goto loc5_0, loc5_1;
  loc5_0:
    assume ~unit~50 <= 3;
    call #t~ret56.base, #t~ret56.offset := alloc_disk(1);
    ~tmp~50.base, ~tmp~50.offset := #t~ret56.base, #t~ret56.offset;
    havoc #t~ret56.base, #t~ret56.offset;
    ~disk~50.base, ~disk~50.offset := ~tmp~50.base, ~tmp~50.offset;
    assume (~disk~50.base + ~disk~50.offset) % 18446744073709551616 == 0;
    ~unit~50 := ~unit~50 + 1;
    ~pf~50.base, ~pf~50.offset := ~pf~50.base, ~pf~50.offset + 216;
    goto loc5;
  loc5_1:
    assume !(~unit~50 <= 3);
    assume true;
    return;
}

procedure pf_init_units() returns ();
modifies ~pf_drive_count, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int, #valid, #length;

implementation write_reg(#in~pf.base : int, #in~pf.offset : int, #in~reg : int, #in~val : int) returns (){
    var #t~mem106.base : int, #t~mem106.offset : int;
    var ~pf.base : int, ~pf.offset : int;
    var ~reg : int;
    var ~val : int;

  loc6:
    ~pf.base, ~pf.offset := #in~pf.base, #in~pf.offset;
    ~reg := #in~reg;
    ~val := #in~val;
    call #t~mem106.base, #t~mem106.offset := read~$Pointer$(~pf.base, ~pf.offset + 168, 8);
    call pi_write_regr(#t~mem106.base, #t~mem106.offset, 0, ~reg, ~val);
    havoc #t~mem106.base, #t~mem106.offset;
    assume true;
    return;
}

procedure write_reg(#in~pf.base : int, #in~pf.offset : int, #in~reg : int, #in~val : int) returns ();
modifies ;

implementation ldv_mutex_unlock_9(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int) returns (){
    var ~ldv_func_arg1.base : int, ~ldv_func_arg1.offset : int;

  loc7:
    ~ldv_func_arg1.base, ~ldv_func_arg1.offset := #in~ldv_func_arg1.base, #in~ldv_func_arg1.offset;
    call ldv_mutex_unlock_pf_mutex(~ldv_func_arg1.base, ~ldv_func_arg1.offset);
    return;
}

procedure ldv_mutex_unlock_9(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int) returns ();
modifies ~ldv_mutex_pf_mutex;

implementation status_reg(#in~pf.base : int, #in~pf.offset : int) returns (#res : int){
    var #t~mem102.base : int, #t~mem102.offset : int;
    var #t~ret103 : int;
    var ~pf.base : int, ~pf.offset : int;
    var ~tmp~84 : int;

  loc8:
    ~pf.base, ~pf.offset := #in~pf.base, #in~pf.offset;
    havoc ~tmp~84;
    call #t~mem102.base, #t~mem102.offset := read~$Pointer$(~pf.base, ~pf.offset + 168, 8);
    call #t~ret103 := pi_read_regr(#t~mem102.base, #t~mem102.offset, 1, 6);
    assume -2147483648 <= #t~ret103 && #t~ret103 <= 2147483647;
    ~tmp~84 := #t~ret103;
    havoc #t~mem102.base, #t~mem102.offset;
    havoc #t~ret103;
    #res := ~tmp~84;
    assume true;
    return;
}

procedure status_reg(#in~pf.base : int, #in~pf.offset : int) returns (#res : int);
modifies ;

implementation main() returns (#res : int){
    var #t~nondet347 : int;
    var #t~switch348 : bool;
    var #t~nondet349 : int;
    var #t~switch350 : bool;
    var #t~ret351 : int;
    var #t~ret352 : int;
    var #t~ret353 : int;
    var #t~ret354 : int;
    var #t~ret355 : int;
    var #t~ret356 : int;
    var #t~ret357 : int;
    var #t~ret358 : int;
    var #t~nondet359 : int;
    var #t~switch360 : bool;
    var #t~ret361 : int;
    var ~tmp~268 : int;
    var ~tmp___0~268 : int;
    var ~tmp___1~268 : int;

  loc9:
    havoc ~tmp~268;
    havoc ~tmp___0~268;
    havoc ~tmp___1~268;
    call ldv_initialize();
    ~ldv_state_variable_1 := 0;
    ~ref_cnt := 0;
    ~ldv_state_variable_0 := 1;
    goto loc10;
  loc10:
    assume -2147483648 <= #t~nondet347 && #t~nondet347 <= 2147483647;
    ~tmp~268 := #t~nondet347;
    havoc #t~nondet347;
    #t~switch348 := ~tmp~268 == 0;
    goto loc11;
  loc11:
    goto loc11_0, loc11_1;
  loc11_0:
    assume #t~switch348;
    assume ~ldv_state_variable_1 != 0;
    assume -2147483648 <= #t~nondet349 && #t~nondet349 <= 2147483647;
    ~tmp___0~268 := #t~nondet349;
    havoc #t~nondet349;
    #t~switch350 := ~tmp___0~268 == 0;
    assume !#t~switch350;
    #t~switch350 := #t~switch350 || ~tmp___0~268 == 1;
    assume !#t~switch350;
    #t~switch350 := #t~switch350 || ~tmp___0~268 == 2;
    assume !#t~switch350;
    #t~switch350 := #t~switch350 || ~tmp___0~268 == 3;
    assume !#t~switch350;
    #t~switch350 := #t~switch350 || ~tmp___0~268 == 4;
    assume #t~switch350;
    assume ~ldv_state_variable_1 == 1;
    call #t~ret358 := pf_open(~pf_fops_group1.base, ~pf_fops_group1.offset, ~ldvarg0);
    return;
  loc11_1:
    assume !#t~switch348;
    #t~switch348 := #t~switch348 || ~tmp~268 == 1;
    assume #t~switch348;
    assume ~ldv_state_variable_0 != 0;
    assume -2147483648 <= #t~nondet359 && #t~nondet359 <= 2147483647;
    ~tmp___1~268 := #t~nondet359;
    havoc #t~nondet359;
    #t~switch360 := ~tmp___1~268 == 0;
    assume !#t~switch360;
    #t~switch360 := #t~switch360 || ~tmp___1~268 == 1;
    assume #t~switch360;
    assume ~ldv_state_variable_0 == 1;
    call #t~ret361 := pf_init();
    assume -2147483648 <= #t~ret361 && #t~ret361 <= 2147483647;
    ~ldv_retval_pf_init := #t~ret361;
    havoc #t~ret361;
    assume ~ldv_retval_pf_init == 0;
    ~ldv_state_variable_0 := 3;
    ~ldv_state_variable_1 := 1;
    assume !(~ldv_retval_pf_init != 0);
    goto loc10;
}

procedure main() returns (#res : int);
modifies ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_retval_pf_open, ~ldv_retval_pf_init, ~ldv_mutex_cred_guard_mutex_of_signal_struct, ~ldv_mutex_lock, ~ldv_mutex_mutex_of_device, ~ldv_mutex_pf_mutex, #memory_int, #valid, #length, ~pf_drive_count, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~pf_busy, ~pf_queue.base, ~pf_queue.offset;

implementation pf_identify(#in~pf.base : int, #in~pf.offset : int) returns (#res : int){
    var #t~nondet250.base : int, #t~nondet250.offset : int;
    var #t~nondet251.base : int, #t~nondet251.offset : int;
    var #t~mem253 : int;
    var #t~nondet265.base : int, #t~nondet265.offset : int;
    var #t~ret266 : int;
    var #t~mem267 : int;
    var #t~nondet268.base : int, #t~nondet268.offset : int;
    var #t~ret269 : int;
    var #t~mem270 : int;
    var #t~nondet272.base : int, #t~nondet272.offset : int;
    var #t~ret273 : int;
    var #t~mem274 : int;
    var #t~nondet275.base : int, #t~nondet275.offset : int;
    var #t~ret276 : int;
    var #t~mem277 : int;
    var #t~nondet278.base : int, #t~nondet278.offset : int;
    var #t~ret279 : int;
    var #t~mem280 : int;
    var #t~nondet281.base : int, #t~nondet281.offset : int;
    var #t~ret282 : int;
    var #t~mem283.base : int, #t~mem283.offset : int;
    var #t~ret284 : ~sector_t;
    var #t~nondet285.base : int, #t~nondet285.offset : int;
    var #t~ret286 : int;
    var ~pf.base : int, ~pf.offset : int;
    var ~dt~184 : int;
    var ~s~184 : int;
    var ~ms~184.base : [int]int, ~ms~184.offset : [int]int;
    var ~#mf~184.base : int, ~#mf~184.offset : int;
    var ~#id~184.base : int, ~#id~184.offset : int;
    var ~#id_cmd~184.base : int, ~#id_cmd~184.offset : int;
    var ~#buf~184.base : int, ~#buf~184.offset : int;
    var ~tmp~184 : ~sector_t;

  loc12:
    ~pf.base, ~pf.offset := #in~pf.base, #in~pf.offset;
    havoc ~dt~184;
    havoc ~s~184;
    havoc ~ms~184.base, ~ms~184.offset;
    call ~#mf~184.base, ~#mf~184.offset := #Ultimate.alloc(10);
    call ~#id~184.base, ~#id~184.offset := #Ultimate.alloc(18);
    call ~#id_cmd~184.base, ~#id_cmd~184.offset := #Ultimate.alloc(12);
    call ~#buf~184.base, ~#buf~184.offset := #Ultimate.alloc(36);
    havoc ~tmp~184;
    call #t~nondet250.base, #t~nondet250.offset := #Ultimate.alloc(7);
    #memory_int := #memory_int[#t~nondet250.base,#t~nondet250.offset + 0 := 109];
    #memory_int := #memory_int[#t~nondet250.base,#t~nondet250.offset + 1 := 97];
    #memory_int := #memory_int[#t~nondet250.base,#t~nondet250.offset + 2 := 115];
    #memory_int := #memory_int[#t~nondet250.base,#t~nondet250.offset + 3 := 116];
    #memory_int := #memory_int[#t~nondet250.base,#t~nondet250.offset + 4 := 101];
    #memory_int := #memory_int[#t~nondet250.base,#t~nondet250.offset + 5 := 114];
    #memory_int := #memory_int[#t~nondet250.base,#t~nondet250.offset + 6 := 0];
    ~ms~184.base, ~ms~184.offset := ~ms~184.base[0 := #t~nondet250.base], ~ms~184.offset[0 := #t~nondet250.offset];
    havoc #t~nondet250.base, #t~nondet250.offset;
    call #t~nondet251.base, #t~nondet251.offset := #Ultimate.alloc(6);
    #memory_int := #memory_int[#t~nondet251.base,#t~nondet251.offset + 0 := 115];
    #memory_int := #memory_int[#t~nondet251.base,#t~nondet251.offset + 1 := 108];
    #memory_int := #memory_int[#t~nondet251.base,#t~nondet251.offset + 2 := 97];
    #memory_int := #memory_int[#t~nondet251.base,#t~nondet251.offset + 3 := 118];
    #memory_int := #memory_int[#t~nondet251.base,#t~nondet251.offset + 4 := 101];
    #memory_int := #memory_int[#t~nondet251.base,#t~nondet251.offset + 5 := 0];
    ~ms~184.base, ~ms~184.offset := ~ms~184.base[1 := #t~nondet251.base], ~ms~184.offset[1 := #t~nondet251.offset];
    havoc #t~nondet251.base, #t~nondet251.offset;
    call write~int(18, ~#id_cmd~184.base, ~#id_cmd~184.offset + 0, 1);
    call #t~mem253 := read~int(~pf.base, ~pf.offset + 188, 4);
    call write~int((if ~shiftLeft(#t~mem253, 5) % 256 <= 127 then ~shiftLeft(#t~mem253, 5) % 256 else ~shiftLeft(#t~mem253, 5) % 256 - 256), ~#id_cmd~184.base, ~#id_cmd~184.offset + 1, 1);
    havoc #t~mem253;
    call write~int(0, ~#id_cmd~184.base, ~#id_cmd~184.offset + 2, 1);
    call write~int(0, ~#id_cmd~184.base, ~#id_cmd~184.offset + 3, 1);
    call write~int(36, ~#id_cmd~184.base, ~#id_cmd~184.offset + 4, 1);
    call write~int(0, ~#id_cmd~184.base, ~#id_cmd~184.offset + 5, 1);
    call write~int(0, ~#id_cmd~184.base, ~#id_cmd~184.offset + 6, 1);
    call write~int(0, ~#id_cmd~184.base, ~#id_cmd~184.offset + 7, 1);
    call write~int(0, ~#id_cmd~184.base, ~#id_cmd~184.offset + 8, 1);
    call write~int(0, ~#id_cmd~184.base, ~#id_cmd~184.offset + 9, 1);
    call write~int(0, ~#id_cmd~184.base, ~#id_cmd~184.offset + 10, 1);
    call write~int(0, ~#id_cmd~184.base, ~#id_cmd~184.offset + 11, 1);
    call #t~nondet265.base, #t~nondet265.offset := #Ultimate.alloc(9);
    call #t~ret266 := pf_atapi(~pf.base, ~pf.offset, ~#id_cmd~184.base, ~#id_cmd~184.offset, 36, ~#buf~184.base, ~#buf~184.offset, #t~nondet265.base, #t~nondet265.offset);
    assume -2147483648 <= #t~ret266 && #t~ret266 <= 2147483647;
    ~s~184 := #t~ret266;
    havoc #t~nondet265.base, #t~nondet265.offset;
    havoc #t~ret266;
    assume ~s~184 != 0;
    #res := -1;
    call ULTIMATE.dealloc(~#mf~184.base, ~#mf~184.offset);
    havoc ~#mf~184.base, ~#mf~184.offset;
    call ULTIMATE.dealloc(~#id~184.base, ~#id~184.offset);
    havoc ~#id~184.base, ~#id~184.offset;
    call ULTIMATE.dealloc(~#id_cmd~184.base, ~#id_cmd~184.offset);
    havoc ~#id_cmd~184.base, ~#id_cmd~184.offset;
    call ULTIMATE.dealloc(~#buf~184.base, ~#buf~184.offset);
    havoc ~#buf~184.base, ~#buf~184.offset;
    assume true;
    return;
}

procedure pf_identify(#in~pf.base : int, #in~pf.offset : int) returns (#res : int);
modifies #memory_int, #valid, #length, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation pf_init() returns (#res : int){
    var #t~ret334 : int;
    var #t~ret335 : int;
    var #t~mem336.base : int, #t~mem336.offset : int;
    var #t~ret337.base : int, #t~ret337.offset : int;
    var #t~mem338.base : int, #t~mem338.offset : int;
    var #t~mem339.base : int, #t~mem339.offset : int;
    var #t~mem340 : int;
    var ~pf~242.base : int, ~pf~242.offset : int;
    var ~unit~242 : int;
    var ~tmp~242 : int;
    var ~tmp___0~242 : int;
    var ~disk~242.base : int, ~disk~242.offset : int;

  loc13:
    havoc ~pf~242.base, ~pf~242.offset;
    havoc ~unit~242;
    havoc ~tmp~242;
    havoc ~tmp___0~242;
    havoc ~disk~242.base, ~disk~242.offset;
    assume !(~disable != 0);
    call pf_init_units();
    call #t~ret334 := pf_detect();
    assume -2147483648 <= #t~ret334 && #t~ret334 <= 2147483647;
    ~tmp~242 := #t~ret334;
    havoc #t~ret334;
    assume ~tmp~242 != 0;
    #res := -19;
    assume true;
    return;
}

procedure pf_init() returns (#res : int);
modifies ~pf_busy, ~pf_queue.base, ~pf_queue.offset, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length, ~pf_drive_count, #memory_int;

implementation pf_detect() returns (#res : int){
    var #t~nondet308.base : int, #t~nondet308.offset : int;
    var #t~ret309 : int;
    var #t~mem310.base : int, #t~mem310.offset : int;
    var #t~ret311 : int;
    var #t~ret312 : int;
    var #t~mem313.base : int, #t~mem313.offset : int;
    var #t~short314 : bool;
    var #t~mem316.base : int, #t~mem316.offset : int;
    var #t~mem317.base : int, #t~mem317.offset : int;
    var #t~mem318 : int;
    var #t~mem319.base : int, #t~mem319.offset : int;
    var #t~mem320 : int;
    var #t~mem321 : int;
    var #t~mem322 : int;
    var #t~mem323 : int;
    var #t~mem324 : int;
    var #t~ret325 : int;
    var #t~mem326.base : int, #t~mem326.offset : int;
    var #t~ret327 : int;
    var #t~mem329.base : int, #t~mem329.offset : int;
    var #t~mem330.base : int, #t~mem330.offset : int;
    var #t~nondet331.base : int, #t~nondet331.offset : int;
    var #t~ret332 : int;
    var #t~mem333.base : int, #t~mem333.offset : int;
    var ~pf~220.base : int, ~pf~220.offset : int;
    var ~k~220 : int;
    var ~unit~220 : int;
    var ~tmp~220 : int;
    var ~tmp___0~220 : int;
    var ~conf~220.base : int, ~conf~220.offset : int;
    var ~tmp___1~220 : int;
    var ~tmp___2~220 : int;

  loc14:
    havoc ~pf~220.base, ~pf~220.offset;
    havoc ~k~220;
    havoc ~unit~220;
    havoc ~tmp~220;
    havoc ~tmp___0~220;
    havoc ~conf~220.base, ~conf~220.offset;
    havoc ~tmp___1~220;
    havoc ~tmp___2~220;
    ~pf~220.base, ~pf~220.offset := ~#units.base, ~#units.offset;
    call #t~nondet308.base, #t~nondet308.offset := #Ultimate.alloc(51);
    call #t~ret309 := printk(#t~nondet308.base, #t~nondet308.offset);
    assume -2147483648 <= #t~ret309 && #t~ret309 <= 2147483647;
    havoc #t~nondet308.base, #t~nondet308.offset;
    havoc #t~ret309;
    ~k~220 := 0;
    assume ~pf_drive_count == 0;
    call #t~mem310.base, #t~mem310.offset := read~$Pointer$(~pf~220.base, ~pf~220.offset + 168, 8);
    call #t~ret311 := pi_init(#t~mem310.base, #t~mem310.offset, 1, -1, -1, -1, -1, -1, ~#pf_scratch.base, ~#pf_scratch.offset, 2, ~verbose % 256, ~pf~220.base, ~pf~220.offset + 200);
    assume -2147483648 <= #t~ret311 && #t~ret311 <= 2147483647;
    ~tmp___0~220 := #t~ret311;
    havoc #t~mem310.base, #t~mem310.offset;
    havoc #t~ret311;
    assume !(~tmp___0~220 != 0);
    assume !(~k~220 != 0);
    call #t~nondet331.base, #t~nondet331.offset := #Ultimate.alloc(29);
    call #t~ret332 := printk(#t~nondet331.base, #t~nondet331.offset);
    assume -2147483648 <= #t~ret332 && #t~ret332 <= 2147483647;
    havoc #t~nondet331.base, #t~nondet331.offset;
    havoc #t~ret332;
    ~pf~220.base, ~pf~220.offset := ~#units.base, ~#units.offset;
    ~unit~220 := 0;
    goto loc15;
  loc15:
    goto loc15_0, loc15_1;
  loc15_0:
    assume ~unit~220 <= 3;
    call #t~mem333.base, #t~mem333.offset := read~$Pointer$(~pf~220.base, ~pf~220.offset + 208, 8);
    call put_disk(#t~mem333.base, #t~mem333.offset);
    havoc #t~mem333.base, #t~mem333.offset;
    ~pf~220.base, ~pf~220.offset := ~pf~220.base, ~pf~220.offset + 216;
    ~unit~220 := ~unit~220 + 1;
    goto loc15;
  loc15_1:
    assume !(~unit~220 <= 3);
    #res := -1;
    assume true;
    return;
}

procedure pf_detect() returns (#res : int);
modifies #memory_int, #valid, #length, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation ldv_mutex_lock_pf_mutex(#in~lock.base : int, #in~lock.offset : int) returns (){
    var ~lock.base : int, ~lock.offset : int;

  loc16:
    ~lock.base, ~lock.offset := #in~lock.base, #in~lock.offset;
    assume ~ldv_mutex_pf_mutex == 1;
    ~ldv_mutex_pf_mutex := 2;
    assume true;
    return;
}

procedure ldv_mutex_lock_pf_mutex(#in~lock.base : int, #in~lock.offset : int) returns ();
modifies ~ldv_mutex_pf_mutex;

implementation ULTIMATE.init() returns (){
    var #t~nondet0.base : int, #t~nondet0.offset : int;
    var #t~union362.head : int, #t~union362.tail : int;
    var #t~nondet26.base : int, #t~nondet26.offset : int;
    var #t~union363.__padding : [int]int, #t~union363.dep_map.key.base : int, #t~union363.dep_map.key.offset : int, #t~union363.dep_map.class_cache.base : [int]int, #t~union363.dep_map.class_cache.offset : [int]int, #t~union363.dep_map.name.base : int, #t~union363.dep_map.name.offset : int, #t~union363.dep_map.cpu : int, #t~union363.dep_map.ip : int;
    var #t~nondet27.base : int, #t~nondet27.offset : int;
    var #t~union364.head : int, #t~union364.tail : int;
    var #t~nondet28.base : int, #t~nondet28.offset : int;
    var #t~union365.__padding : [int]int, #t~union365.dep_map.key.base : int, #t~union365.dep_map.key.offset : int, #t~union365.dep_map.class_cache.base : [int]int, #t~union365.dep_map.class_cache.offset : [int]int, #t~union365.dep_map.name.base : int, #t~union365.dep_map.name.offset : int, #t~union365.dep_map.cpu : int, #t~union365.dep_map.ip : int;
    var #t~union366.raw_lock.ldv_2024.head_tail : int, #t~union366.raw_lock.ldv_2024.tickets.head : int, #t~union366.raw_lock.ldv_2024.tickets.tail : int, #t~union366.magic : int, #t~union366.owner_cpu : int, #t~union366.owner.base : int, #t~union366.owner.offset : int, #t~union366.dep_map.key.base : int, #t~union366.dep_map.key.offset : int, #t~union366.dep_map.class_cache.base : [int]int, #t~union366.dep_map.class_cache.offset : [int]int, #t~union366.dep_map.name.base : int, #t~union366.dep_map.name.offset : int, #t~union366.dep_map.cpu : int, #t~union366.dep_map.ip : int;
    var #t~union367.__padding : [int]int, #t~union367.dep_map.key.base : int, #t~union367.dep_map.key.offset : int, #t~union367.dep_map.class_cache.base : [int]int, #t~union367.dep_map.class_cache.offset : [int]int, #t~union367.dep_map.name.base : int, #t~union367.dep_map.name.offset : int, #t~union367.dep_map.cpu : int, #t~union367.dep_map.ip : int;
    var #t~union368.raw_lock.ldv_2024.head_tail : int, #t~union368.raw_lock.ldv_2024.tickets.head : int, #t~union368.raw_lock.ldv_2024.tickets.tail : int, #t~union368.magic : int, #t~union368.owner_cpu : int, #t~union368.owner.base : int, #t~union368.owner.offset : int, #t~union368.dep_map.key.base : int, #t~union368.dep_map.key.offset : int, #t~union368.dep_map.class_cache.base : [int]int, #t~union368.dep_map.class_cache.offset : [int]int, #t~union368.dep_map.name.base : int, #t~union368.dep_map.name.offset : int, #t~union368.dep_map.cpu : int, #t~union368.dep_map.ip : int;
    var #t~union369.__padding : [int]int, #t~union369.dep_map.key.base : int, #t~union369.dep_map.key.offset : int, #t~union369.dep_map.class_cache.base : [int]int, #t~union369.dep_map.class_cache.offset : [int]int, #t~union369.dep_map.name.base : int, #t~union369.dep_map.name.offset : int, #t~union369.dep_map.cpu : int, #t~union369.dep_map.ip : int;
    var #t~union370.raw_lock.ldv_2024.head_tail : int, #t~union370.raw_lock.ldv_2024.tickets.head : int, #t~union370.raw_lock.ldv_2024.tickets.tail : int, #t~union370.magic : int, #t~union370.owner_cpu : int, #t~union370.owner.base : int, #t~union370.owner.offset : int, #t~union370.dep_map.key.base : int, #t~union370.dep_map.key.offset : int, #t~union370.dep_map.class_cache.base : [int]int, #t~union370.dep_map.class_cache.offset : [int]int, #t~union370.dep_map.name.base : int, #t~union370.dep_map.name.offset : int, #t~union370.dep_map.cpu : int, #t~union370.dep_map.ip : int;
    var #t~union371.__padding : [int]int, #t~union371.dep_map.key.base : int, #t~union371.dep_map.key.offset : int, #t~union371.dep_map.class_cache.base : [int]int, #t~union371.dep_map.class_cache.offset : [int]int, #t~union371.dep_map.name.base : int, #t~union371.dep_map.name.offset : int, #t~union371.dep_map.cpu : int, #t~union371.dep_map.ip : int;
    var #t~union372.raw_lock.ldv_2024.head_tail : int, #t~union372.raw_lock.ldv_2024.tickets.head : int, #t~union372.raw_lock.ldv_2024.tickets.tail : int, #t~union372.magic : int, #t~union372.owner_cpu : int, #t~union372.owner.base : int, #t~union372.owner.offset : int, #t~union372.dep_map.key.base : int, #t~union372.dep_map.key.offset : int, #t~union372.dep_map.class_cache.base : [int]int, #t~union372.dep_map.class_cache.offset : [int]int, #t~union372.dep_map.name.base : int, #t~union372.dep_map.name.offset : int, #t~union372.dep_map.cpu : int, #t~union372.dep_map.ip : int;
    var #t~union373.__padding : [int]int, #t~union373.dep_map.key.base : int, #t~union373.dep_map.key.offset : int, #t~union373.dep_map.class_cache.base : [int]int, #t~union373.dep_map.class_cache.offset : [int]int, #t~union373.dep_map.name.base : int, #t~union373.dep_map.name.offset : int, #t~union373.dep_map.cpu : int, #t~union373.dep_map.ip : int;

  loc17:
    #NULL.base, #NULL.offset := 0, 0;
    #valid := #valid[0 := 0];
    ~ldv_state_variable_1 := 0;
    ~ref_cnt := 0;
    ~ldv_state_variable_0 := 0;
    ~major := 47;
    call #t~nondet0.base, #t~nondet0.offset := #Ultimate.alloc(3);
    #memory_int := #memory_int[#t~nondet0.base,#t~nondet0.offset + 0 := 112];
    #memory_int := #memory_int[#t~nondet0.base,#t~nondet0.offset + 1 := 102];
    #memory_int := #memory_int[#t~nondet0.base,#t~nondet0.offset + 2 := 0];
    ~name.base, ~name.offset := #t~nondet0.base, #t~nondet0.offset;
    havoc #t~nondet0.base, #t~nondet0.offset;
    ~cluster := 64;
    ~nice := 0;
    ~disable := 0;
    call ~#drive0.base, ~#drive0.offset := #Ultimate.alloc(28);
    call write~int(0, ~#drive0.base, ~#drive0.offset + 0, 4);
    call write~int(0, ~#drive0.base, ~#drive0.offset + 4, 4);
    call write~int(0, ~#drive0.base, ~#drive0.offset + 8, 4);
    call write~int(-1, ~#drive0.base, ~#drive0.offset + 12, 4);
    call write~int(-1, ~#drive0.base, ~#drive0.offset + 16, 4);
    call write~int(-1, ~#drive0.base, ~#drive0.offset + 20, 4);
    call write~int(-1, ~#drive0.base, ~#drive0.offset + 24, 4);
    call ~#drive1.base, ~#drive1.offset := #Ultimate.alloc(28);
    call write~int(0, ~#drive1.base, ~#drive1.offset + 0, 4);
    call write~int(0, ~#drive1.base, ~#drive1.offset + 4, 4);
    call write~int(0, ~#drive1.base, ~#drive1.offset + 8, 4);
    call write~int(-1, ~#drive1.base, ~#drive1.offset + 12, 4);
    call write~int(-1, ~#drive1.base, ~#drive1.offset + 16, 4);
    call write~int(-1, ~#drive1.base, ~#drive1.offset + 20, 4);
    call write~int(-1, ~#drive1.base, ~#drive1.offset + 24, 4);
    call ~#drive2.base, ~#drive2.offset := #Ultimate.alloc(28);
    call write~int(0, ~#drive2.base, ~#drive2.offset + 0, 4);
    call write~int(0, ~#drive2.base, ~#drive2.offset + 4, 4);
    call write~int(0, ~#drive2.base, ~#drive2.offset + 8, 4);
    call write~int(-1, ~#drive2.base, ~#drive2.offset + 12, 4);
    call write~int(-1, ~#drive2.base, ~#drive2.offset + 16, 4);
    call write~int(-1, ~#drive2.base, ~#drive2.offset + 20, 4);
    call write~int(-1, ~#drive2.base, ~#drive2.offset + 24, 4);
    call ~#drive3.base, ~#drive3.offset := #Ultimate.alloc(28);
    call write~int(0, ~#drive3.base, ~#drive3.offset + 0, 4);
    call write~int(0, ~#drive3.base, ~#drive3.offset + 4, 4);
    call write~int(0, ~#drive3.base, ~#drive3.offset + 8, 4);
    call write~int(-1, ~#drive3.base, ~#drive3.offset + 12, 4);
    call write~int(-1, ~#drive3.base, ~#drive3.offset + 16, 4);
    call write~int(-1, ~#drive3.base, ~#drive3.offset + 20, 4);
    call write~int(-1, ~#drive3.base, ~#drive3.offset + 24, 4);
    call ~#drives.base, ~#drives.offset := #Ultimate.alloc(32);
    call write~$Pointer$(~#drive0.base, ~#drive0.offset, ~#drives.base, ~#drives.offset + 0, 8);
    call write~$Pointer$(~#drive1.base, ~#drive1.offset, ~#drives.base, ~#drives.offset + 8, 8);
    call write~$Pointer$(~#drive2.base, ~#drive2.offset, ~#drives.base, ~#drives.offset + 16, 8);
    call write~$Pointer$(~#drive3.base, ~#drive3.offset, ~#drives.base, ~#drives.offset + 24, 8);
    ~pf_drive_count := 0;
    call ~#pf_scratch.base, ~#pf_scratch.offset := #Ultimate.alloc(512);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 0, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 1, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 2, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 3, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 4, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 5, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 6, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 7, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 8, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 9, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 10, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 11, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 12, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 13, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 14, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 15, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 16, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 17, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 18, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 19, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 20, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 21, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 22, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 23, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 24, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 25, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 26, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 27, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 28, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 29, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 30, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 31, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 32, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 33, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 34, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 35, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 36, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 37, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 38, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 39, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 40, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 41, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 42, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 43, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 44, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 45, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 46, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 47, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 48, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 49, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 50, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 51, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 52, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 53, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 54, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 55, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 56, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 57, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 58, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 59, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 60, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 61, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 62, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 63, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 64, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 65, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 66, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 67, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 68, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 69, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 70, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 71, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 72, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 73, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 74, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 75, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 76, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 77, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 78, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 79, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 80, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 81, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 82, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 83, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 84, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 85, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 86, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 87, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 88, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 89, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 90, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 91, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 92, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 93, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 94, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 95, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 96, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 97, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 98, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 99, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 100, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 101, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 102, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 103, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 104, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 105, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 106, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 107, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 108, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 109, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 110, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 111, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 112, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 113, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 114, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 115, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 116, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 117, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 118, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 119, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 120, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 121, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 122, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 123, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 124, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 125, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 126, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 127, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 128, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 129, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 130, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 131, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 132, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 133, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 134, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 135, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 136, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 137, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 138, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 139, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 140, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 141, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 142, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 143, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 144, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 145, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 146, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 147, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 148, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 149, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 150, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 151, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 152, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 153, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 154, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 155, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 156, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 157, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 158, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 159, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 160, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 161, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 162, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 163, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 164, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 165, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 166, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 167, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 168, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 169, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 170, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 171, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 172, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 173, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 174, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 175, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 176, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 177, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 178, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 179, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 180, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 181, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 182, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 183, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 184, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 185, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 186, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 187, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 188, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 189, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 190, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 191, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 192, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 193, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 194, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 195, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 196, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 197, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 198, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 199, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 200, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 201, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 202, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 203, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 204, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 205, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 206, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 207, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 208, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 209, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 210, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 211, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 212, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 213, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 214, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 215, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 216, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 217, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 218, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 219, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 220, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 221, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 222, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 223, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 224, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 225, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 226, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 227, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 228, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 229, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 230, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 231, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 232, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 233, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 234, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 235, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 236, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 237, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 238, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 239, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 240, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 241, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 242, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 243, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 244, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 245, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 246, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 247, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 248, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 249, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 250, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 251, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 252, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 253, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 254, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 255, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 256, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 257, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 258, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 259, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 260, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 261, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 262, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 263, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 264, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 265, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 266, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 267, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 268, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 269, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 270, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 271, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 272, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 273, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 274, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 275, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 276, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 277, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 278, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 279, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 280, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 281, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 282, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 283, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 284, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 285, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 286, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 287, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 288, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 289, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 290, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 291, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 292, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 293, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 294, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 295, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 296, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 297, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 298, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 299, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 300, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 301, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 302, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 303, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 304, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 305, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 306, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 307, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 308, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 309, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 310, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 311, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 312, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 313, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 314, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 315, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 316, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 317, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 318, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 319, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 320, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 321, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 322, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 323, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 324, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 325, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 326, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 327, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 328, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 329, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 330, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 331, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 332, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 333, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 334, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 335, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 336, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 337, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 338, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 339, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 340, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 341, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 342, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 343, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 344, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 345, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 346, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 347, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 348, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 349, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 350, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 351, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 352, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 353, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 354, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 355, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 356, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 357, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 358, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 359, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 360, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 361, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 362, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 363, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 364, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 365, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 366, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 367, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 368, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 369, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 370, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 371, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 372, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 373, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 374, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 375, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 376, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 377, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 378, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 379, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 380, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 381, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 382, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 383, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 384, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 385, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 386, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 387, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 388, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 389, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 390, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 391, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 392, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 393, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 394, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 395, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 396, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 397, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 398, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 399, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 400, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 401, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 402, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 403, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 404, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 405, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 406, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 407, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 408, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 409, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 410, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 411, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 412, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 413, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 414, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 415, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 416, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 417, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 418, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 419, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 420, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 421, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 422, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 423, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 424, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 425, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 426, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 427, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 428, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 429, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 430, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 431, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 432, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 433, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 434, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 435, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 436, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 437, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 438, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 439, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 440, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 441, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 442, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 443, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 444, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 445, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 446, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 447, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 448, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 449, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 450, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 451, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 452, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 453, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 454, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 455, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 456, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 457, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 458, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 459, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 460, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 461, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 462, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 463, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 464, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 465, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 466, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 467, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 468, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 469, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 470, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 471, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 472, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 473, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 474, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 475, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 476, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 477, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 478, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 479, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 480, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 481, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 482, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 483, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 484, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 485, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 486, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 487, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 488, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 489, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 490, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 491, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 492, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 493, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 494, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 495, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 496, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 497, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 498, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 499, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 500, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 501, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 502, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 503, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 504, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 505, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 506, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 507, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 508, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 509, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 510, 1);
    call write~int(0, ~#pf_scratch.base, ~#pf_scratch.offset + 511, 1);
    ~pf_busy := 0;
    ~ldv_retval_pf_init := 0;
    ~ldvarg3 := 0;
    ~ldvarg6 := 0;
    ~ldv_retval_pf_open := 0;
    ~ldvarg2 := 0;
    ~ldv_mutex_cred_guard_mutex_of_signal_struct := 0;
    ~ldv_mutex_lock := 0;
    ~ldv_mutex_mutex_of_device := 0;
    ~ldv_mutex_pf_mutex := 0;
    ~verbose := 0;
    call ~#pf_mutex.base, ~#pf_mutex.offset := #Ultimate.alloc(156);
    call write~int(1, ~#pf_mutex.base, ~#pf_mutex.offset + 0 + 0, 4);
    call write~int(0, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union362.head, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union362.tail, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(3735899821, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 4, 4);
    call write~int(4294967295, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 18446744073709551615, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 20 + 8 + 8, 8);
    call #t~nondet26.base, #t~nondet26.offset := #Ultimate.alloc(19);
    call write~$Pointer$(#t~nondet26.base, #t~nondet26.offset, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union363.__padding[0], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0, 1);
    call write~int(#t~union363.__padding[1], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union363.__padding[2], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union363.__padding[3], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[4], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[5], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[6], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[7], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[8], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[9], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[10], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[11], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[12], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[13], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[14], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[15], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[16], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[17], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[18], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[19], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[20], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[21], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[22], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union363.__padding[23], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union363.dep_map.key.base, #t~union363.dep_map.key.offset, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union363.dep_map.class_cache.base[0], #t~union363.dep_map.class_cache.offset[0], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union363.dep_map.class_cache.base[1], #t~union363.dep_map.class_cache.offset[1], ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union363.dep_map.name.base, #t~union363.dep_map.name.offset, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union363.dep_map.cpu, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union363.dep_map.ip, ~#pf_mutex.base, ~#pf_mutex.offset + 4 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(~#pf_mutex.base, ~#pf_mutex.offset + 72, ~#pf_mutex.base, ~#pf_mutex.offset + 72 + 0, 8);
    call write~$Pointer$(~#pf_mutex.base, ~#pf_mutex.offset + 72, ~#pf_mutex.base, ~#pf_mutex.offset + 72 + 8, 8);
    call write~$Pointer$(0, 0, ~#pf_mutex.base, ~#pf_mutex.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#pf_mutex.base, ~#pf_mutex.offset + 96, 8);
    call write~$Pointer$(~#pf_mutex.base, ~#pf_mutex.offset, ~#pf_mutex.base, ~#pf_mutex.offset + 104, 8);
    call write~$Pointer$(0, 0, ~#pf_mutex.base, ~#pf_mutex.offset + 112 + 0, 8);
    call write~int(0, ~#pf_mutex.base, ~#pf_mutex.offset + 112 + 8 + 0, 8);
    call write~int(0, ~#pf_mutex.base, ~#pf_mutex.offset + 112 + 8 + 8, 8);
    call #t~nondet27.base, #t~nondet27.offset := #Ultimate.alloc(9);
    call write~$Pointer$(#t~nondet27.base, #t~nondet27.offset, ~#pf_mutex.base, ~#pf_mutex.offset + 112 + 24, 8);
    call write~int(0, ~#pf_mutex.base, ~#pf_mutex.offset + 112 + 32, 4);
    call write~int(0, ~#pf_mutex.base, ~#pf_mutex.offset + 112 + 36, 8);
    havoc #t~union362.head, #t~union362.tail;
    havoc #t~nondet26.base, #t~nondet26.offset;
    havoc #t~union363.__padding, #t~union363.dep_map.key.base, #t~union363.dep_map.key.offset, #t~union363.dep_map.class_cache.base, #t~union363.dep_map.class_cache.offset, #t~union363.dep_map.name.base, #t~union363.dep_map.name.offset, #t~union363.dep_map.cpu, #t~union363.dep_map.ip;
    havoc #t~nondet27.base, #t~nondet27.offset;
    call ~#pf_spin_lock.base, ~#pf_spin_lock.offset := #Ultimate.alloc(68);
    call write~int(0, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union364.head, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union364.tail, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(3735899821, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 4, 4);
    call write~int(4294967295, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 18446744073709551615, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 20 + 8 + 8, 8);
    call #t~nondet28.base, #t~nondet28.offset := #Ultimate.alloc(13);
    call write~$Pointer$(#t~nondet28.base, #t~nondet28.offset, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union365.__padding[0], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0, 1);
    call write~int(#t~union365.__padding[1], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union365.__padding[2], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union365.__padding[3], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[4], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[5], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[6], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[7], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[8], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[9], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[10], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[11], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[12], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[13], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[14], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[15], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[16], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[17], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[18], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[19], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[20], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[21], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[22], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union365.__padding[23], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union365.dep_map.key.base, #t~union365.dep_map.key.offset, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union365.dep_map.class_cache.base[0], #t~union365.dep_map.class_cache.offset[0], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union365.dep_map.class_cache.base[1], #t~union365.dep_map.class_cache.offset[1], ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union365.dep_map.name.base, #t~union365.dep_map.name.offset, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union365.dep_map.cpu, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union365.dep_map.ip, ~#pf_spin_lock.base, ~#pf_spin_lock.offset + 0 + 0 + 24 + 36, 8);
    havoc #t~union364.head, #t~union364.tail;
    havoc #t~nondet28.base, #t~nondet28.offset;
    havoc #t~union365.__padding, #t~union365.dep_map.key.base, #t~union365.dep_map.key.offset, #t~union365.dep_map.class_cache.base, #t~union365.dep_map.class_cache.offset, #t~union365.dep_map.name.base, #t~union365.dep_map.name.offset, #t~union365.dep_map.cpu, #t~union365.dep_map.ip;
    call ~#units.base, ~#units.offset := #Ultimate.alloc(864);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 0 + 0 + 0, 8);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 0 + 8, 4);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 0 + 12, 4);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 0 + 16, 4);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 0 + 20, 4);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 0 + 0 + 24, 8);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 0 + 32, 4);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 0 + 36, 4);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 0 + 40, 4);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 0 + 44, 4);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 0 + 48, 8);
    call write~int(#t~union366.raw_lock.ldv_2024.head_tail, ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union366.raw_lock.ldv_2024.tickets.head, ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union366.raw_lock.ldv_2024.tickets.tail, ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(#t~union366.magic, ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 4, 4);
    call write~int(#t~union366.owner_cpu, ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 8, 4);
    call write~$Pointer$(#t~union366.owner.base, #t~union366.owner.offset, ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 12, 8);
    call write~$Pointer$(#t~union366.dep_map.key.base, #t~union366.dep_map.key.offset, ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 20 + 0, 8);
    call write~$Pointer$(#t~union366.dep_map.class_cache.base[0], #t~union366.dep_map.class_cache.offset[0], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 20 + 8, 8);
    call write~$Pointer$(#t~union366.dep_map.class_cache.base[1], #t~union366.dep_map.class_cache.offset[1], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(#t~union366.dep_map.name.base, #t~union366.dep_map.name.offset, ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 20 + 24, 8);
    call write~int(#t~union366.dep_map.cpu, ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 20 + 32, 4);
    call write~int(#t~union366.dep_map.ip, ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union367.__padding[0], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0, 1);
    call write~int(#t~union367.__padding[1], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union367.__padding[2], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union367.__padding[3], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[4], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[5], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[6], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[7], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[8], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[9], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[10], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[11], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[12], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[13], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[14], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[15], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[16], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[17], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[18], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[19], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[20], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[21], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[22], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union367.__padding[23], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union367.dep_map.key.base, #t~union367.dep_map.key.offset, ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union367.dep_map.class_cache.base[0], #t~union367.dep_map.class_cache.offset[0], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union367.dep_map.class_cache.base[1], #t~union367.dep_map.class_cache.offset[1], ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union367.dep_map.name.base, #t~union367.dep_map.name.offset, ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union367.dep_map.cpu, ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union367.dep_map.ip, ~#units.base, ~#units.offset + 0 + 0 + 56 + 0 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 0 + 0 + 56 + 68 + 0, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 0 + 0 + 56 + 68 + 8, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 0 + 0 + 140, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 0 + 0 + 148, 8);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 0 + 156, 4);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 0 + 0 + 160, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 0 + 168, 8);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 176, 4);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 180, 4);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 184, 4);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 188, 4);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 192, 4);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 196, 4);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 200 + 0, 1);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 200 + 1, 1);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 200 + 2, 1);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 200 + 3, 1);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 200 + 4, 1);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 200 + 5, 1);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 200 + 6, 1);
    call write~int(0, ~#units.base, ~#units.offset + 0 + 200 + 7, 1);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 0 + 208, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 216 + 0 + 0, 8);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 0 + 8, 4);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 0 + 12, 4);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 0 + 16, 4);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 0 + 20, 4);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 216 + 0 + 24, 8);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 0 + 32, 4);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 0 + 36, 4);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 0 + 40, 4);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 0 + 44, 4);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 0 + 48, 8);
    call write~int(#t~union368.raw_lock.ldv_2024.head_tail, ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union368.raw_lock.ldv_2024.tickets.head, ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union368.raw_lock.ldv_2024.tickets.tail, ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(#t~union368.magic, ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 4, 4);
    call write~int(#t~union368.owner_cpu, ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 8, 4);
    call write~$Pointer$(#t~union368.owner.base, #t~union368.owner.offset, ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 12, 8);
    call write~$Pointer$(#t~union368.dep_map.key.base, #t~union368.dep_map.key.offset, ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 20 + 0, 8);
    call write~$Pointer$(#t~union368.dep_map.class_cache.base[0], #t~union368.dep_map.class_cache.offset[0], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 20 + 8, 8);
    call write~$Pointer$(#t~union368.dep_map.class_cache.base[1], #t~union368.dep_map.class_cache.offset[1], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(#t~union368.dep_map.name.base, #t~union368.dep_map.name.offset, ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 20 + 24, 8);
    call write~int(#t~union368.dep_map.cpu, ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 20 + 32, 4);
    call write~int(#t~union368.dep_map.ip, ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union369.__padding[0], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0, 1);
    call write~int(#t~union369.__padding[1], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union369.__padding[2], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union369.__padding[3], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[4], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[5], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[6], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[7], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[8], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[9], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[10], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[11], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[12], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[13], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[14], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[15], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[16], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[17], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[18], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[19], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[20], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[21], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[22], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union369.__padding[23], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union369.dep_map.key.base, #t~union369.dep_map.key.offset, ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union369.dep_map.class_cache.base[0], #t~union369.dep_map.class_cache.offset[0], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union369.dep_map.class_cache.base[1], #t~union369.dep_map.class_cache.offset[1], ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union369.dep_map.name.base, #t~union369.dep_map.name.offset, ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union369.dep_map.cpu, ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union369.dep_map.ip, ~#units.base, ~#units.offset + 216 + 0 + 56 + 0 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 216 + 0 + 56 + 68 + 0, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 216 + 0 + 56 + 68 + 8, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 216 + 0 + 140, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 216 + 0 + 148, 8);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 0 + 156, 4);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 216 + 0 + 160, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 216 + 168, 8);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 176, 4);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 180, 4);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 184, 4);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 188, 4);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 192, 4);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 196, 4);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 200 + 0, 1);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 200 + 1, 1);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 200 + 2, 1);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 200 + 3, 1);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 200 + 4, 1);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 200 + 5, 1);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 200 + 6, 1);
    call write~int(0, ~#units.base, ~#units.offset + 216 + 200 + 7, 1);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 216 + 208, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 432 + 0 + 0, 8);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 0 + 8, 4);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 0 + 12, 4);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 0 + 16, 4);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 0 + 20, 4);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 432 + 0 + 24, 8);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 0 + 32, 4);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 0 + 36, 4);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 0 + 40, 4);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 0 + 44, 4);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 0 + 48, 8);
    call write~int(#t~union370.raw_lock.ldv_2024.head_tail, ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union370.raw_lock.ldv_2024.tickets.head, ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union370.raw_lock.ldv_2024.tickets.tail, ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(#t~union370.magic, ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 4, 4);
    call write~int(#t~union370.owner_cpu, ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 8, 4);
    call write~$Pointer$(#t~union370.owner.base, #t~union370.owner.offset, ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 12, 8);
    call write~$Pointer$(#t~union370.dep_map.key.base, #t~union370.dep_map.key.offset, ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 20 + 0, 8);
    call write~$Pointer$(#t~union370.dep_map.class_cache.base[0], #t~union370.dep_map.class_cache.offset[0], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 20 + 8, 8);
    call write~$Pointer$(#t~union370.dep_map.class_cache.base[1], #t~union370.dep_map.class_cache.offset[1], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(#t~union370.dep_map.name.base, #t~union370.dep_map.name.offset, ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 20 + 24, 8);
    call write~int(#t~union370.dep_map.cpu, ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 20 + 32, 4);
    call write~int(#t~union370.dep_map.ip, ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union371.__padding[0], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0, 1);
    call write~int(#t~union371.__padding[1], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union371.__padding[2], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union371.__padding[3], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[4], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[5], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[6], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[7], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[8], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[9], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[10], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[11], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[12], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[13], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[14], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[15], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[16], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[17], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[18], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[19], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[20], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[21], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[22], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union371.__padding[23], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union371.dep_map.key.base, #t~union371.dep_map.key.offset, ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union371.dep_map.class_cache.base[0], #t~union371.dep_map.class_cache.offset[0], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union371.dep_map.class_cache.base[1], #t~union371.dep_map.class_cache.offset[1], ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union371.dep_map.name.base, #t~union371.dep_map.name.offset, ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union371.dep_map.cpu, ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union371.dep_map.ip, ~#units.base, ~#units.offset + 432 + 0 + 56 + 0 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 432 + 0 + 56 + 68 + 0, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 432 + 0 + 56 + 68 + 8, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 432 + 0 + 140, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 432 + 0 + 148, 8);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 0 + 156, 4);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 432 + 0 + 160, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 432 + 168, 8);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 176, 4);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 180, 4);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 184, 4);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 188, 4);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 192, 4);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 196, 4);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 200 + 0, 1);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 200 + 1, 1);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 200 + 2, 1);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 200 + 3, 1);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 200 + 4, 1);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 200 + 5, 1);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 200 + 6, 1);
    call write~int(0, ~#units.base, ~#units.offset + 432 + 200 + 7, 1);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 432 + 208, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 648 + 0 + 0, 8);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 0 + 8, 4);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 0 + 12, 4);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 0 + 16, 4);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 0 + 20, 4);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 648 + 0 + 24, 8);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 0 + 32, 4);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 0 + 36, 4);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 0 + 40, 4);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 0 + 44, 4);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 0 + 48, 8);
    call write~int(#t~union372.raw_lock.ldv_2024.head_tail, ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union372.raw_lock.ldv_2024.tickets.head, ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union372.raw_lock.ldv_2024.tickets.tail, ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(#t~union372.magic, ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 4, 4);
    call write~int(#t~union372.owner_cpu, ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 8, 4);
    call write~$Pointer$(#t~union372.owner.base, #t~union372.owner.offset, ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 12, 8);
    call write~$Pointer$(#t~union372.dep_map.key.base, #t~union372.dep_map.key.offset, ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 20 + 0, 8);
    call write~$Pointer$(#t~union372.dep_map.class_cache.base[0], #t~union372.dep_map.class_cache.offset[0], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 20 + 8, 8);
    call write~$Pointer$(#t~union372.dep_map.class_cache.base[1], #t~union372.dep_map.class_cache.offset[1], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(#t~union372.dep_map.name.base, #t~union372.dep_map.name.offset, ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 20 + 24, 8);
    call write~int(#t~union372.dep_map.cpu, ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 20 + 32, 4);
    call write~int(#t~union372.dep_map.ip, ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union373.__padding[0], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0, 1);
    call write~int(#t~union373.__padding[1], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union373.__padding[2], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union373.__padding[3], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[4], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[5], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[6], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[7], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[8], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[9], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[10], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[11], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[12], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[13], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[14], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[15], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[16], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[17], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[18], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[19], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[20], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[21], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[22], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union373.__padding[23], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union373.dep_map.key.base, #t~union373.dep_map.key.offset, ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union373.dep_map.class_cache.base[0], #t~union373.dep_map.class_cache.offset[0], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union373.dep_map.class_cache.base[1], #t~union373.dep_map.class_cache.offset[1], ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union373.dep_map.name.base, #t~union373.dep_map.name.offset, ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union373.dep_map.cpu, ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union373.dep_map.ip, ~#units.base, ~#units.offset + 648 + 0 + 56 + 0 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 648 + 0 + 56 + 68 + 0, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 648 + 0 + 56 + 68 + 8, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 648 + 0 + 140, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 648 + 0 + 148, 8);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 0 + 156, 4);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 648 + 0 + 160, 8);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 648 + 168, 8);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 176, 4);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 180, 4);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 184, 4);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 188, 4);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 192, 4);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 196, 4);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 200 + 0, 1);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 200 + 1, 1);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 200 + 2, 1);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 200 + 3, 1);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 200 + 4, 1);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 200 + 5, 1);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 200 + 6, 1);
    call write~int(0, ~#units.base, ~#units.offset + 648 + 200 + 7, 1);
    call write~$Pointer$(0, 0, ~#units.base, ~#units.offset + 648 + 208, 8);
    havoc #t~union366.raw_lock.ldv_2024.head_tail, #t~union366.raw_lock.ldv_2024.tickets.head, #t~union366.raw_lock.ldv_2024.tickets.tail, #t~union366.magic, #t~union366.owner_cpu, #t~union366.owner.base, #t~union366.owner.offset, #t~union366.dep_map.key.base, #t~union366.dep_map.key.offset, #t~union366.dep_map.class_cache.base, #t~union366.dep_map.class_cache.offset, #t~union366.dep_map.name.base, #t~union366.dep_map.name.offset, #t~union366.dep_map.cpu, #t~union366.dep_map.ip;
    havoc #t~union367.__padding, #t~union367.dep_map.key.base, #t~union367.dep_map.key.offset, #t~union367.dep_map.class_cache.base, #t~union367.dep_map.class_cache.offset, #t~union367.dep_map.name.base, #t~union367.dep_map.name.offset, #t~union367.dep_map.cpu, #t~union367.dep_map.ip;
    havoc #t~union368.raw_lock.ldv_2024.head_tail, #t~union368.raw_lock.ldv_2024.tickets.head, #t~union368.raw_lock.ldv_2024.tickets.tail, #t~union368.magic, #t~union368.owner_cpu, #t~union368.owner.base, #t~union368.owner.offset, #t~union368.dep_map.key.base, #t~union368.dep_map.key.offset, #t~union368.dep_map.class_cache.base, #t~union368.dep_map.class_cache.offset, #t~union368.dep_map.name.base, #t~union368.dep_map.name.offset, #t~union368.dep_map.cpu, #t~union368.dep_map.ip;
    havoc #t~union369.__padding, #t~union369.dep_map.key.base, #t~union369.dep_map.key.offset, #t~union369.dep_map.class_cache.base, #t~union369.dep_map.class_cache.offset, #t~union369.dep_map.name.base, #t~union369.dep_map.name.offset, #t~union369.dep_map.cpu, #t~union369.dep_map.ip;
    havoc #t~union370.raw_lock.ldv_2024.head_tail, #t~union370.raw_lock.ldv_2024.tickets.head, #t~union370.raw_lock.ldv_2024.tickets.tail, #t~union370.magic, #t~union370.owner_cpu, #t~union370.owner.base, #t~union370.owner.offset, #t~union370.dep_map.key.base, #t~union370.dep_map.key.offset, #t~union370.dep_map.class_cache.base, #t~union370.dep_map.class_cache.offset, #t~union370.dep_map.name.base, #t~union370.dep_map.name.offset, #t~union370.dep_map.cpu, #t~union370.dep_map.ip;
    havoc #t~union371.__padding, #t~union371.dep_map.key.base, #t~union371.dep_map.key.offset, #t~union371.dep_map.class_cache.base, #t~union371.dep_map.class_cache.offset, #t~union371.dep_map.name.base, #t~union371.dep_map.name.offset, #t~union371.dep_map.cpu, #t~union371.dep_map.ip;
    havoc #t~union372.raw_lock.ldv_2024.head_tail, #t~union372.raw_lock.ldv_2024.tickets.head, #t~union372.raw_lock.ldv_2024.tickets.tail, #t~union372.magic, #t~union372.owner_cpu, #t~union372.owner.base, #t~union372.owner.offset, #t~union372.dep_map.key.base, #t~union372.dep_map.key.offset, #t~union372.dep_map.class_cache.base, #t~union372.dep_map.class_cache.offset, #t~union372.dep_map.name.base, #t~union372.dep_map.name.offset, #t~union372.dep_map.cpu, #t~union372.dep_map.ip;
    havoc #t~union373.__padding, #t~union373.dep_map.key.base, #t~union373.dep_map.key.offset, #t~union373.dep_map.class_cache.base, #t~union373.dep_map.class_cache.offset, #t~union373.dep_map.name.base, #t~union373.dep_map.name.offset, #t~union373.dep_map.cpu, #t~union373.dep_map.ip;
    call ~#pf_fops.base, ~#pf_fops.offset := #Ultimate.alloc(96);
    call write~$Pointer$(#funAddr~pf_open.base, #funAddr~pf_open.offset, ~#pf_fops.base, ~#pf_fops.offset + 0, 8);
    call write~$Pointer$(#funAddr~pf_release.base, #funAddr~pf_release.offset, ~#pf_fops.base, ~#pf_fops.offset + 8, 8);
    call write~$Pointer$(#funAddr~pf_ioctl.base, #funAddr~pf_ioctl.offset, ~#pf_fops.base, ~#pf_fops.offset + 16, 8);
    call write~$Pointer$(0, 0, ~#pf_fops.base, ~#pf_fops.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#pf_fops.base, ~#pf_fops.offset + 32, 8);
    call write~$Pointer$(#funAddr~pf_check_events.base, #funAddr~pf_check_events.offset, ~#pf_fops.base, ~#pf_fops.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#pf_fops.base, ~#pf_fops.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#pf_fops.base, ~#pf_fops.offset + 56, 8);
    call write~$Pointer$(0, 0, ~#pf_fops.base, ~#pf_fops.offset + 64, 8);
    call write~$Pointer$(#funAddr~pf_getgeo.base, #funAddr~pf_getgeo.offset, ~#pf_fops.base, ~#pf_fops.offset + 72, 8);
    call write~$Pointer$(0, 0, ~#pf_fops.base, ~#pf_fops.offset + 80, 8);
    call write~$Pointer$(~#__this_module.base, ~#__this_module.offset, ~#pf_fops.base, ~#pf_fops.offset + 88, 8);
    ~pf_queue.base, ~pf_queue.offset := 0, 0;
    ~ldvarg0 := 0;
    ~pf_fops_group2.base, ~pf_fops_group2.offset := 0, 0;
    ~pf_fops_group1.base, ~pf_fops_group1.offset := 0, 0;
    ~ldvarg5.base, ~ldvarg5.offset := 0, 0;
    ~ldvarg1 := 0;
    ~ldvarg4 := 0;
    ~pf_fops_group0.base, ~pf_fops_group0.offset := 0, 0;
    assume true;
    return;
}

procedure ULTIMATE.init() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~major, ~name.base, ~name.offset, ~cluster, ~nice, ~disable, ~#drive0.base, ~#drive0.offset, ~#drive1.base, ~#drive1.offset, ~#drive2.base, ~#drive2.offset, ~#drive3.base, ~#drive3.offset, ~#drives.base, ~#drives.offset, ~pf_drive_count, ~#pf_scratch.base, ~#pf_scratch.offset, ~pf_busy, ~ldv_retval_pf_init, ~ldvarg3, ~ldvarg6, ~ldv_retval_pf_open, ~ldvarg2, ~ldv_mutex_cred_guard_mutex_of_signal_struct, ~ldv_mutex_lock, ~ldv_mutex_mutex_of_device, ~ldv_mutex_pf_mutex, ~verbose, ~#pf_mutex.base, ~#pf_mutex.offset, ~#pf_spin_lock.base, ~#pf_spin_lock.offset, ~#units.base, ~#units.offset, ~#pf_fops.base, ~#pf_fops.offset, ~pf_queue.base, ~pf_queue.offset, ~ldvarg0, ~pf_fops_group2.base, ~pf_fops_group2.offset, ~pf_fops_group1.base, ~pf_fops_group1.offset, ~ldvarg5.base, ~ldvarg5.offset, ~ldvarg1, ~ldvarg4, ~pf_fops_group0.base, ~pf_fops_group0.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length;

implementation pf_completion(#in~pf.base : int, #in~pf.offset : int, #in~buf.base : int, #in~buf.offset : int, #in~fun.base : int, #in~fun.offset : int) returns (#res : int){
    var #t~nondet126.base : int, #t~nondet126.offset : int;
    var #t~ret127 : int;
    var #t~ret128 : int;
    var #t~ret129 : int;
    var #t~ret130 : int;
    var #t~ret131 : int;
    var #t~mem132.base : int, #t~mem132.offset : int;
    var #t~nondet133.base : int, #t~nondet133.offset : int;
    var #t~ret134 : int;
    var #t~mem135.base : int, #t~mem135.offset : int;
    var ~pf.base : int, ~pf.offset : int;
    var ~buf.base : int, ~buf.offset : int;
    var ~fun.base : int, ~fun.offset : int;
    var ~r~110 : int;
    var ~s~110 : int;
    var ~n~110 : int;
    var ~tmp~110 : int;
    var ~tmp___0~110 : int;
    var ~tmp___1~110 : int;
    var ~tmp___2~110 : int;
    var ~tmp___3~110 : int;

  loc18:
    ~pf.base, ~pf.offset := #in~pf.base, #in~pf.offset;
    ~buf.base, ~buf.offset := #in~buf.base, #in~buf.offset;
    ~fun.base, ~fun.offset := #in~fun.base, #in~fun.offset;
    havoc ~r~110;
    havoc ~s~110;
    havoc ~n~110;
    havoc ~tmp~110;
    havoc ~tmp___0~110;
    havoc ~tmp___1~110;
    havoc ~tmp___2~110;
    havoc ~tmp___3~110;
    call #t~nondet126.base, #t~nondet126.offset := #Ultimate.alloc(11);
    call #t~ret127 := pf_wait(~pf.base, ~pf.offset, 128, 73, ~fun.base, ~fun.offset, #t~nondet126.base, #t~nondet126.offset);
    assume -2147483648 <= #t~ret127 && #t~ret127 <= 2147483647;
    ~r~110 := #t~ret127;
    havoc #t~nondet126.base, #t~nondet126.offset;
    havoc #t~ret127;
    call #t~ret128 := read_reg(~pf.base, ~pf.offset, 2);
    assume -2147483648 <= #t~ret128 && #t~ret128 <= 2147483647;
    ~tmp___1~110 := #t~ret128;
    havoc #t~ret128;
    assume !(~bitwiseAnd(~tmp___1~110, 2) != 0);
    call #t~nondet133.base, #t~nondet133.offset := #Ultimate.alloc(10);
    call #t~ret134 := pf_wait(~pf.base, ~pf.offset, 128, 65, ~fun.base, ~fun.offset, #t~nondet133.base, #t~nondet133.offset);
    assume -2147483648 <= #t~ret134 && #t~ret134 <= 2147483647;
    ~s~110 := #t~ret134;
    havoc #t~nondet133.base, #t~nondet133.offset;
    havoc #t~ret134;
    call #t~mem135.base, #t~mem135.offset := read~$Pointer$(~pf.base, ~pf.offset + 168, 8);
    call pi_disconnect(#t~mem135.base, #t~mem135.offset);
    havoc #t~mem135.base, #t~mem135.offset;
    assume ~r~110 != 0;
    ~tmp___3~110 := ~r~110;
    #res := ~tmp___3~110;
    assume true;
    return;
}

procedure pf_completion(#in~pf.base : int, #in~pf.offset : int, #in~buf.base : int, #in~buf.offset : int, #in~fun.base : int, #in~fun.offset : int) returns (#res : int);
modifies #valid, #length;

implementation ldv_error() returns (){
  loc19:
    assume !false;
    goto loc20;
  loc20:
    assert false;
}

procedure ldv_error() returns ();
modifies ;

implementation pf_atapi(#in~pf.base : int, #in~pf.offset : int, #in~cmd.base : int, #in~cmd.offset : int, #in~dlen : int, #in~buf.base : int, #in~buf.offset : int, #in~fun.base : int, #in~fun.offset : int) returns (#res : int){
    var #t~ret155 : int;
    var #t~ret156 : int;
    var ~pf.base : int, ~pf.offset : int;
    var ~cmd.base : int, ~cmd.offset : int;
    var ~dlen : int;
    var ~buf.base : int, ~buf.offset : int;
    var ~fun.base : int, ~fun.offset : int;
    var ~r~128 : int;
    var ~__ms~128 : int;
    var ~tmp~128 : int;

  loc21:
    ~pf.base, ~pf.offset := #in~pf.base, #in~pf.offset;
    ~cmd.base, ~cmd.offset := #in~cmd.base, #in~cmd.offset;
    ~dlen := #in~dlen;
    ~buf.base, ~buf.offset := #in~buf.base, #in~buf.offset;
    ~fun.base, ~fun.offset := #in~fun.base, #in~fun.offset;
    havoc ~r~128;
    havoc ~__ms~128;
    havoc ~tmp~128;
    call #t~ret155 := pf_command(~pf.base, ~pf.offset, ~cmd.base, ~cmd.offset, ~dlen, ~fun.base, ~fun.offset);
    assume -2147483648 <= #t~ret155 && #t~ret155 <= 2147483647;
    ~r~128 := #t~ret155;
    havoc #t~ret155;
    assume true;
    call __const_udelay(4295000);
    assume ~r~128 == 0;
    call #t~ret156 := pf_completion(~pf.base, ~pf.offset, ~buf.base, ~buf.offset, ~fun.base, ~fun.offset);
    assume -2147483648 <= #t~ret156 && #t~ret156 <= 2147483647;
    ~r~128 := #t~ret156;
    havoc #t~ret156;
    assume !(~r~128 != 0);
    #res := ~r~128;
    assume true;
    return;
}

procedure pf_atapi(#in~pf.base : int, #in~pf.offset : int, #in~cmd.base : int, #in~cmd.offset : int, #in~dlen : int, #in~buf.base : int, #in~buf.offset : int, #in~fun.base : int, #in~fun.offset : int) returns (#res : int);
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation pf_command(#in~pf.base : int, #in~pf.offset : int, #in~cmd.base : int, #in~cmd.offset : int, #in~dlen : int, #in~fun.base : int, #in~fun.offset : int) returns (#res : int){
    var #t~mem113.base : int, #t~mem113.offset : int;
    var #t~mem114 : int;
    var #t~nondet115.base : int, #t~nondet115.offset : int;
    var #t~ret116 : int;
    var #t~mem117.base : int, #t~mem117.offset : int;
    var #t~nondet118.base : int, #t~nondet118.offset : int;
    var #t~ret119 : int;
    var #t~mem120.base : int, #t~mem120.offset : int;
    var #t~ret121 : int;
    var #t~nondet122.base : int, #t~nondet122.offset : int;
    var #t~ret123 : int;
    var #t~mem124.base : int, #t~mem124.offset : int;
    var #t~mem125.base : int, #t~mem125.offset : int;
    var ~pf.base : int, ~pf.offset : int;
    var ~cmd.base : int, ~cmd.offset : int;
    var ~dlen : int;
    var ~fun.base : int, ~fun.offset : int;
    var ~tmp~102 : int;
    var ~tmp___0~102 : int;
    var ~tmp___1~102 : int;

  loc22:
    ~pf.base, ~pf.offset := #in~pf.base, #in~pf.offset;
    ~cmd.base, ~cmd.offset := #in~cmd.base, #in~cmd.offset;
    ~dlen := #in~dlen;
    ~fun.base, ~fun.offset := #in~fun.base, #in~fun.offset;
    havoc ~tmp~102;
    havoc ~tmp___0~102;
    havoc ~tmp___1~102;
    call #t~mem113.base, #t~mem113.offset := read~$Pointer$(~pf.base, ~pf.offset + 168, 8);
    call pi_connect(#t~mem113.base, #t~mem113.offset);
    havoc #t~mem113.base, #t~mem113.offset;
    call #t~mem114 := read~int(~pf.base, ~pf.offset + 184, 4);
    call write_reg(~pf.base, ~pf.offset, 6, (#t~mem114 + 10) * 16);
    havoc #t~mem114;
    call #t~nondet115.base, #t~nondet115.offset := #Ultimate.alloc(15);
    call #t~ret116 := pf_wait(~pf.base, ~pf.offset, 136, 0, ~fun.base, ~fun.offset, #t~nondet115.base, #t~nondet115.offset);
    assume -2147483648 <= #t~ret116 && #t~ret116 <= 2147483647;
    ~tmp~102 := #t~ret116;
    havoc #t~nondet115.base, #t~nondet115.offset;
    havoc #t~ret116;
    assume ~tmp~102 != 0;
    call #t~mem117.base, #t~mem117.offset := read~$Pointer$(~pf.base, ~pf.offset + 168, 8);
    call pi_disconnect(#t~mem117.base, #t~mem117.offset);
    havoc #t~mem117.base, #t~mem117.offset;
    #res := -1;
    assume true;
    return;
}

procedure pf_command(#in~pf.base : int, #in~pf.offset : int, #in~cmd.base : int, #in~cmd.offset : int, #in~dlen : int, #in~fun.base : int, #in~fun.offset : int) returns (#res : int);
modifies #valid, #length;

implementation ldv_mutex_lock_8(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int) returns (){
    var ~ldv_func_arg1.base : int, ~ldv_func_arg1.offset : int;

  loc23:
    ~ldv_func_arg1.base, ~ldv_func_arg1.offset := #in~ldv_func_arg1.base, #in~ldv_func_arg1.offset;
    call ldv_mutex_lock_pf_mutex(~ldv_func_arg1.base, ~ldv_func_arg1.offset);
    call mutex_lock(~ldv_func_arg1.base, ~ldv_func_arg1.offset);
    assume true;
    return;
}

procedure ldv_mutex_lock_8(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int) returns ();
modifies ~ldv_mutex_pf_mutex;

implementation ULTIMATE.start() returns (){
    var #t~ret374 : int;

  loc24:
    call ULTIMATE.init();
    call #t~ret374 := main();
    return;
}

procedure ULTIMATE.start() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~major, ~name.base, ~name.offset, ~cluster, ~nice, ~disable, ~#drive0.base, ~#drive0.offset, ~#drive1.base, ~#drive1.offset, ~#drive2.base, ~#drive2.offset, ~#drive3.base, ~#drive3.offset, ~#drives.base, ~#drives.offset, ~pf_drive_count, ~#pf_scratch.base, ~#pf_scratch.offset, ~pf_busy, ~ldv_retval_pf_init, ~ldvarg3, ~ldvarg6, ~ldv_retval_pf_open, ~ldvarg2, ~ldv_mutex_cred_guard_mutex_of_signal_struct, ~ldv_mutex_lock, ~ldv_mutex_mutex_of_device, ~ldv_mutex_pf_mutex, ~verbose, ~#pf_mutex.base, ~#pf_mutex.offset, ~#pf_spin_lock.base, ~#pf_spin_lock.offset, ~#units.base, ~#units.offset, ~#pf_fops.base, ~#pf_fops.offset, ~pf_queue.base, ~pf_queue.offset, ~ldvarg0, ~pf_fops_group2.base, ~pf_fops_group2.offset, ~pf_fops_group1.base, ~pf_fops_group1.offset, ~ldvarg5.base, ~ldvarg5.offset, ~ldvarg1, ~ldvarg4, ~pf_fops_group0.base, ~pf_fops_group0.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_retval_pf_open, ~ldv_retval_pf_init;
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_mutex_cred_guard_mutex_of_signal_struct, ~ldv_mutex_lock, ~ldv_mutex_mutex_of_device, ~ldv_mutex_pf_mutex, ~pf_drive_count, ~pf_busy, ~pf_queue.base, ~pf_queue.offset, ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_retval_pf_open, ~ldv_retval_pf_init;

implementation ldv_initialize() returns (){
  loc25:
    ~ldv_mutex_cred_guard_mutex_of_signal_struct := 1;
    ~ldv_mutex_lock := 1;
    ~ldv_mutex_mutex_of_device := 1;
    ~ldv_mutex_pf_mutex := 1;
    assume true;
    return;
}

procedure ldv_initialize() returns ();
modifies ~ldv_mutex_cred_guard_mutex_of_signal_struct, ~ldv_mutex_lock, ~ldv_mutex_mutex_of_device, ~ldv_mutex_pf_mutex;

procedure pi_release(#in~40.base : int, #in~40.offset : int) returns ();
modifies ;

procedure pi_disconnect(#in~55.base : int, #in~55.offset : int) returns ();
modifies ;

procedure __const_udelay(#in~13 : int) returns ();
modifies ;

procedure write~$Pointer$(#value.base : int, #value.offset : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #value.base] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #value.offset];
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #memory_int[#ptr.base,#ptr.offset]];

procedure strcpy(#in~5.base : int, #in~5.offset : int, #in~6.base : int, #in~6.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure blk_cleanup_queue(#in~23.base : int, #in~23.offset : int) returns ();
modifies ;

procedure #Ultimate.alloc(~size : int) returns (#res.base : int, #res.offset : int);
ensures old(#valid)[#res.base] == 0;
ensures #valid == old(#valid)[#res.base := 1];
ensures #res.offset == 0;
ensures #res.base != 0;
ensures #length == old(#length)[#res.base := ~size];
modifies #valid, #length;

procedure ULTIMATE.free(~addr.base : int, ~addr.offset : int) returns ();
free requires ~addr.offset == 0;
free requires ~addr.base == 0 || #valid[~addr.base] == 1;
free ensures (if ~addr.base == 0 then #valid == old(#valid) else #valid == old(#valid)[~addr.base := 0]);
modifies #valid;

procedure read~int(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value : int);
ensures #value == #memory_int[#ptr.base,#ptr.offset];

procedure pi_read_block(#in~51.base : int, #in~51.offset : int, #in~52.base : int, #in~52.offset : int, #in~53 : int) returns ();
modifies ;

procedure read~$Pointer$(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value.base : int, #value.offset : int);
ensures #value.base == #memory_$Pointer$.base[#ptr.base,#ptr.offset] && #value.offset == #memory_$Pointer$.offset[#ptr.base,#ptr.offset];

procedure do_pf_request(#in~q.base : int, #in~q.offset : int) returns ();
modifies ;

procedure add_disk(#in~15.base : int, #in~15.offset : int) returns ();
modifies ;

procedure blk_queue_max_segments(#in~24.base : int, #in~24.offset : int, #in~25 : int) returns ();
modifies ;

procedure alloc_disk(#in~19 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure pi_write_block(#in~48.base : int, #in~48.offset : int, #in~49.base : int, #in~49.offset : int, #in~50 : int) returns ();
modifies ;

procedure ULTIMATE.dealloc(~addr.base : int, ~addr.offset : int) returns ();
free ensures #valid == old(#valid)[~addr.base := 0];
modifies #valid;

procedure pi_init(#in~29.base : int, #in~29.offset : int, #in~30 : int, #in~31 : int, #in~32 : int, #in~33 : int, #in~34 : int, #in~35 : int, #in~36.base : int, #in~36.offset : int, #in~37 : int, #in~38 : int, #in~39.base : int, #in~39.offset : int) returns (#res : int);
modifies ;

procedure unregister_blkdev(#in~11 : int, #in~12.base : int, #in~12.offset : int) returns ();
modifies ;

procedure pi_read_regr(#in~45.base : int, #in~45.offset : int, #in~46 : int, #in~47 : int) returns (#res : int);
modifies ;

procedure printk(#in~1.base : int, #in~1.offset : int) returns (#res : int);
modifies ;

procedure blk_init_queue(#in~21.base : int, #in~21.offset : int, #in~22.base : int, #in~22.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure del_gendisk(#in~16.base : int, #in~16.offset : int) returns ();
modifies ;

procedure write~int(#value : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset]] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #memory_$Pointer$.offset[#ptr.base,#ptr.offset]];
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #value];

procedure mutex_unlock(#in~7.base : int, #in~7.offset : int) returns ();
modifies ;

procedure register_blkdev(#in~9 : int, #in~10.base : int, #in~10.offset : int) returns (#res : int);
modifies ;

procedure pi_connect(#in~54.base : int, #in~54.offset : int) returns ();
modifies ;

procedure put_disk(#in~20.base : int, #in~20.offset : int) returns ();
modifies ;

procedure __VERIFIER_error() returns ();
modifies ;

procedure snprintf(#in~2.base : int, #in~2.offset : int, #in~3 : int, #in~4.base : int, #in~4.offset : int) returns (#res : int);
modifies ;

procedure pi_write_regr(#in~41.base : int, #in~41.offset : int, #in~42 : int, #in~43 : int, #in~44 : int) returns ();
modifies ;

procedure schedule_timeout_interruptible(#in~14 : int) returns (#res : int);
modifies ;

procedure __VERIFIER_nondet_int() returns (#res : int);
modifies ;

procedure mutex_lock(#in~8.base : int, #in~8.offset : int) returns ();
modifies ;

