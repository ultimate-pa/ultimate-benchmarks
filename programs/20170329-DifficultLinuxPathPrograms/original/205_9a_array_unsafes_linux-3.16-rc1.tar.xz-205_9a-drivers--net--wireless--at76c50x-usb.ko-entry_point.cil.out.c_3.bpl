type STRUCT~task_struct;
type STRUCT~optimistic_spin_queue;
type STRUCT~tvec_base;
type STRUCT~workqueue_struct;
type STRUCT~xol_area;
type STRUCT~slab;
type STRUCT~anon_vma;
type STRUCT~file;
type STRUCT~mempolicy;
type STRUCT~linux_binfmt;
type STRUCT~kioctx_table;
type STRUCT~mmu_notifier_mm;
type STRUCT~fasync_struct;
type STRUCT~sock;
type STRUCT~poll_table_struct;
type STRUCT~kiocb;
type STRUCT~pipe_inode_info;
type STRUCT~kernfs_open_node;
type STRUCT~kernfs_iattrs;
type STRUCT~seq_file;
type STRUCT~kmem_cache_node;
type STRUCT~mem_cgroup;
type STRUCT~pinctrl;
type STRUCT~pinctrl_state;
type STRUCT~iommu_ops;
type STRUCT~subsys_private;
type STRUCT~driver_private;
type STRUCT~acpi_device;
type STRUCT~device_private;
type STRUCT~dma_coherent_mem;
type STRUCT~cma;
type STRUCT~device_node;
type STRUCT~iommu_group;
type STRUCT~nsproxy;
type STRUCT~sec_path;
type STRUCT~module_param_attrs;
type STRUCT~module_sect_attrs;
type STRUCT~module_notes_attrs;
type STRUCT~tracepoint;
type STRUCT~ftrace_event_call;
type STRUCT~inode;
type STRUCT~super_block;
type STRUCT~vfsmount;
type STRUCT~path;
type STRUCT~writeback_control;
type STRUCT~swap_info_struct;
type STRUCT~backing_dev_info;
type STRUCT~ep_device;
type STRUCT~mon_bus;
type STRUCT~usb_tt;
type STRUCT~wusb_dev;
type STRUCT~prot_inuse;
type STRUCT~proc_dir_entry;
type STRUCT~ipv4_devconf;
type STRUCT~fib_rules_ops;
type STRUCT~fib_table;
type STRUCT~inet_peer_base;
type STRUCT~tcpm_hash_bucket;
type STRUCT~xt_table;
type STRUCT~dst_entry;
type STRUCT~neighbour;
type STRUCT~ipv6_devconf;
type STRUCT~rt6_info;
type STRUCT~rt6_statistics;
type STRUCT~fib6_table;
type STRUCT~sctp_mib;
type STRUCT~nf_logger;
type STRUCT~ebt_table;
type STRUCT~ip_conntrack_stat;
type STRUCT~nf_ct_event_notifier;
type STRUCT~nf_exp_event_notifier;
type STRUCT~nft_af_info;
type STRUCT~user_namespace;
type STRUCT~net_generic;
type STRUCT~netns_ipvs;
type STRUCT~mii_bus;
type STRUCT~Qdisc;
type STRUCT~neigh_parms;
type STRUCT~netpoll_info;
type STRUCT~pcpu_lstats;
type STRUCT~pcpu_dstats;
type STRUCT~pcpu_vstats;
type STRUCT~forwarding_accel_ops;
type STRUCT~vlan_info;
type STRUCT~tipc_bearer;
type STRUCT~in_device;
type STRUCT~dn_dev;
type STRUCT~inet6_dev;
type STRUCT~cpu_rmap;
type STRUCT~garp_port;
type STRUCT~mrp_port;
type STRUCT~rtnl_link_ops;
type STRUCT~phy_device;
type STRUCT~libipw_device;
type STRUCT~cfg80211_cached_keys;
type STRUCT~cfg80211_conn;
type STRUCT~cfg80211_internal_bss;
type ~__u8 = int;
type ~__s16 = int;
type ~__u16 = int;
type ~__s32 = int;
type ~__u32 = int;
type ~__u64 = int;
type ~s8 = int;
type ~u8 = int;
type ~s16 = int;
type ~u16 = int;
type ~s32 = int;
type ~u32 = int;
type ~s64 = int;
type ~u64 = int;
type ~__kernel_long_t = int;
type ~__kernel_ulong_t = int;
type ~__kernel_uid32_t = int;
type ~__kernel_gid32_t = int;
type ~__kernel_loff_t = int;
type ~umode_t = int;
type ~bool = int;
type ~u_char = int;
type ~uint = int;
type ~sector_t = int;
type ~gfp_t = int;
type ~pteval_t = int;
type ~pgdval_t = int;
type ~pgprotval_t = int;
type ~__kernel_sa_family_t = int;
type ~sk_buff_data_t = int;
type ~kernel_ulong_t = int;
type ~ldv_func_ret_type = int;
type ~__kernel_size_t = ~__kernel_ulong_t;
type ~__kernel_ssize_t = ~__kernel_long_t;
type ~__le16 = ~__u16;
type ~__be16 = ~__u16;
type ~__le32 = ~__u32;
type ~__be32 = ~__u32;
type ~__le64 = ~__u64;
type ~__wsum = ~__u32;
type ~__kernel_dev_t = ~__u32;
type ~dev_t = ~__kernel_dev_t;
type ~uid_t = ~__kernel_uid32_t;
type ~gid_t = ~__kernel_gid32_t;
type ~loff_t = ~__kernel_loff_t;
type ~size_t = ~__kernel_size_t;
type ~ssize_t = ~__kernel_ssize_t;
type ~uint8_t = ~__u8;
type ~uint64_t = ~__u64;
type ~dma_addr_t = ~u64;
type ~__ticket_t = ~u16;
type ~__ticketpair_t = ~u32;
type ~sa_family_t = ~__kernel_sa_family_t;
type ~socket_state = int;
type ~dma_cookie_t = ~s32;
type ~netdev_features_t = ~u64;
type ~Elf64_Addr = ~__u64;
type ~Elf64_Half = ~__u16;
type ~Elf64_Word = ~__u32;
type ~Elf64_Xword = ~__u64;
type ~netdev_tx_t = int;
type ~rx_handler_result_t = int;
const #funAddr~at76_ledtrig_tx_timerfunc.base : int;
const #funAddr~at76_ledtrig_tx_timerfunc.offset : int;
const #funAddr~at76_rx_callback.base : int;
const #funAddr~at76_rx_callback.offset : int;
const #funAddr~at76_mac80211_tx_callback.base : int;
const #funAddr~at76_mac80211_tx_callback.offset : int;
const #funAddr~at76_mac80211_tx.base : int;
const #funAddr~at76_mac80211_tx.offset : int;
const #funAddr~at76_mac80211_start.base : int;
const #funAddr~at76_mac80211_start.offset : int;
const #funAddr~at76_mac80211_stop.base : int;
const #funAddr~at76_mac80211_stop.offset : int;
const #funAddr~at76_add_interface.base : int;
const #funAddr~at76_add_interface.offset : int;
const #funAddr~at76_remove_interface.base : int;
const #funAddr~at76_remove_interface.offset : int;
const #funAddr~at76_config.base : int;
const #funAddr~at76_config.offset : int;
const #funAddr~at76_bss_info_changed.base : int;
const #funAddr~at76_bss_info_changed.offset : int;
const #funAddr~at76_configure_filter.base : int;
const #funAddr~at76_configure_filter.offset : int;
const #funAddr~at76_set_key.base : int;
const #funAddr~at76_set_key.offset : int;
const #funAddr~at76_hw_scan.base : int;
const #funAddr~at76_hw_scan.offset : int;
const #funAddr~at76_work_set_promisc.base : int;
const #funAddr~at76_work_set_promisc.offset : int;
const #funAddr~at76_work_submit_rx.base : int;
const #funAddr~at76_work_submit_rx.offset : int;
const #funAddr~at76_work_join_bssid.base : int;
const #funAddr~at76_work_join_bssid.offset : int;
const #funAddr~at76_dwork_hw_scan.base : int;
const #funAddr~at76_dwork_hw_scan.offset : int;
const #funAddr~delayed_work_timer_fn.base : int;
const #funAddr~delayed_work_timer_fn.offset : int;
const #funAddr~at76_rx_tasklet.base : int;
const #funAddr~at76_rx_tasklet.offset : int;
const #funAddr~at76_probe.base : int;
const #funAddr~at76_probe.offset : int;
const #funAddr~at76_disconnect.base : int;
const #funAddr~at76_disconnect.offset : int;
const ~rpm_status~RPM_ACTIVE : int;
const ~rpm_status~RPM_RESUMING : int;
const ~rpm_status~RPM_SUSPENDED : int;
const ~rpm_status~RPM_SUSPENDING : int;
const ~rpm_request~RPM_REQ_NONE : int;
const ~rpm_request~RPM_REQ_IDLE : int;
const ~rpm_request~RPM_REQ_SUSPEND : int;
const ~rpm_request~RPM_REQ_AUTOSUSPEND : int;
const ~rpm_request~RPM_REQ_RESUME : int;
const ~ldv_13278~SS_FREE : int;
const ~ldv_13278~SS_UNCONNECTED : int;
const ~ldv_13278~SS_CONNECTING : int;
const ~ldv_13278~SS_CONNECTED : int;
const ~ldv_13278~SS_DISCONNECTING : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NONE : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NET : int;
const ~kobj_ns_type~KOBJ_NS_TYPES : int;
const ~dma_data_direction~DMA_BIDIRECTIONAL : int;
const ~dma_data_direction~DMA_TO_DEVICE : int;
const ~dma_data_direction~DMA_FROM_DEVICE : int;
const ~dma_data_direction~DMA_NONE : int;
const ~module_state~MODULE_STATE_LIVE : int;
const ~module_state~MODULE_STATE_COMING : int;
const ~module_state~MODULE_STATE_GOING : int;
const ~module_state~MODULE_STATE_UNFORMED : int;
const ~usb_device_speed~USB_SPEED_UNKNOWN : int;
const ~usb_device_speed~USB_SPEED_LOW : int;
const ~usb_device_speed~USB_SPEED_FULL : int;
const ~usb_device_speed~USB_SPEED_HIGH : int;
const ~usb_device_speed~USB_SPEED_WIRELESS : int;
const ~usb_device_speed~USB_SPEED_SUPER : int;
const ~usb_device_state~USB_STATE_NOTATTACHED : int;
const ~usb_device_state~USB_STATE_ATTACHED : int;
const ~usb_device_state~USB_STATE_POWERED : int;
const ~usb_device_state~USB_STATE_RECONNECTING : int;
const ~usb_device_state~USB_STATE_UNAUTHENTICATED : int;
const ~usb_device_state~USB_STATE_DEFAULT : int;
const ~usb_device_state~USB_STATE_ADDRESS : int;
const ~usb_device_state~USB_STATE_CONFIGURED : int;
const ~usb_device_state~USB_STATE_SUSPENDED : int;
const ~migrate_mode~MIGRATE_ASYNC : int;
const ~migrate_mode~MIGRATE_SYNC_LIGHT : int;
const ~migrate_mode~MIGRATE_SYNC : int;
const ~usb_interface_condition~USB_INTERFACE_UNBOUND : int;
const ~usb_interface_condition~USB_INTERFACE_BINDING : int;
const ~usb_interface_condition~USB_INTERFACE_BOUND : int;
const ~usb_interface_condition~USB_INTERFACE_UNBINDING : int;
const ~usb_device_removable~USB_DEVICE_REMOVABLE_UNKNOWN : int;
const ~usb_device_removable~USB_DEVICE_REMOVABLE : int;
const ~usb_device_removable~USB_DEVICE_FIXED : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_RESUME_LATENCY : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_LATENCY_TOLERANCE : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_FLAGS : int;
const ~pm_qos_type~PM_QOS_UNITIALIZED : int;
const ~pm_qos_type~PM_QOS_MAX : int;
const ~pm_qos_type~PM_QOS_MIN : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_INACTIVE : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_ACTIVE : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_ON : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_OFF : int;
const ~netdev_tx~__NETDEV_TX_MIN : int;
const ~netdev_tx~NETDEV_TX_OK : int;
const ~netdev_tx~NETDEV_TX_BUSY : int;
const ~netdev_tx~NETDEV_TX_LOCKED : int;
const ~rx_handler_result~RX_HANDLER_CONSUMED : int;
const ~rx_handler_result~RX_HANDLER_ANOTHER : int;
const ~rx_handler_result~RX_HANDLER_EXACT : int;
const ~rx_handler_result~RX_HANDLER_PASS : int;
const ~skb_free_reason~SKB_REASON_CONSUMED : int;
const ~skb_free_reason~SKB_REASON_DROPPED : int;
const ~led_brightness~LED_OFF : int;
const ~led_brightness~LED_HALF : int;
const ~led_brightness~LED_FULL : int;
const ~nl80211_iftype~NL80211_IFTYPE_UNSPECIFIED : int;
const ~nl80211_iftype~NL80211_IFTYPE_ADHOC : int;
const ~nl80211_iftype~NL80211_IFTYPE_STATION : int;
const ~nl80211_iftype~NL80211_IFTYPE_AP : int;
const ~nl80211_iftype~NL80211_IFTYPE_AP_VLAN : int;
const ~nl80211_iftype~NL80211_IFTYPE_WDS : int;
const ~nl80211_iftype~NL80211_IFTYPE_MONITOR : int;
const ~nl80211_iftype~NL80211_IFTYPE_MESH_POINT : int;
const ~nl80211_iftype~NL80211_IFTYPE_P2P_CLIENT : int;
const ~nl80211_iftype~NL80211_IFTYPE_P2P_GO : int;
const ~nl80211_iftype~NL80211_IFTYPE_P2P_DEVICE : int;
const ~nl80211_iftype~NUM_NL80211_IFTYPES : int;
const ~nl80211_iftype~NL80211_IFTYPE_MAX : int;
const ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_CORE : int;
const ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_USER : int;
const ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_DRIVER : int;
const ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_COUNTRY_IE : int;
const ~nl80211_dfs_regions~NL80211_DFS_UNSET : int;
const ~nl80211_dfs_regions~NL80211_DFS_FCC : int;
const ~nl80211_dfs_regions~NL80211_DFS_ETSI : int;
const ~nl80211_dfs_regions~NL80211_DFS_JP : int;
const ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_USER : int;
const ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_CELL_BASE : int;
const ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_INDOOR : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_20_NOHT : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_20 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_40 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_80 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_80P80 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_160 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_5 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_10 : int;
const ~nl80211_bss_scan_width~NL80211_BSS_CHAN_WIDTH_20 : int;
const ~nl80211_bss_scan_width~NL80211_BSS_CHAN_WIDTH_10 : int;
const ~nl80211_bss_scan_width~NL80211_BSS_CHAN_WIDTH_5 : int;
const ~nl80211_auth_type~NL80211_AUTHTYPE_OPEN_SYSTEM : int;
const ~nl80211_auth_type~NL80211_AUTHTYPE_SHARED_KEY : int;
const ~nl80211_auth_type~NL80211_AUTHTYPE_FT : int;
const ~nl80211_auth_type~NL80211_AUTHTYPE_NETWORK_EAP : int;
const ~nl80211_auth_type~NL80211_AUTHTYPE_SAE : int;
const ~nl80211_auth_type~__NL80211_AUTHTYPE_NUM : int;
const ~nl80211_auth_type~NL80211_AUTHTYPE_MAX : int;
const ~nl80211_auth_type~NL80211_AUTHTYPE_AUTOMATIC : int;
const ~nl80211_mfp~NL80211_MFP_NO : int;
const ~nl80211_mfp~NL80211_MFP_REQUIRED : int;
const ~nl80211_txrate_gi~NL80211_TXRATE_DEFAULT_GI : int;
const ~nl80211_txrate_gi~NL80211_TXRATE_FORCE_SGI : int;
const ~nl80211_txrate_gi~NL80211_TXRATE_FORCE_LGI : int;
const ~nl80211_dfs_state~NL80211_DFS_USABLE : int;
const ~nl80211_dfs_state~NL80211_DFS_UNAVAILABLE : int;
const ~nl80211_dfs_state~NL80211_DFS_AVAILABLE : int;
const ~environment_cap~ENVIRON_ANY : int;
const ~environment_cap~ENVIRON_INDOOR : int;
const ~environment_cap~ENVIRON_OUTDOOR : int;
const ~ieee80211_band~IEEE80211_BAND_2GHZ : int;
const ~ieee80211_band~IEEE80211_BAND_5GHZ : int;
const ~ieee80211_band~IEEE80211_BAND_60GHZ : int;
const ~ieee80211_band~IEEE80211_NUM_BANDS : int;
const ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_NONE : int;
const ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_MBM : int;
const ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_UNSPEC : int;
const ~ieee80211_chanctx_switch_mode~CHANCTX_SWMODE_REASSIGN_VIF : int;
const ~ieee80211_chanctx_switch_mode~CHANCTX_SWMODE_SWAP_CONTEXTS : int;
const ~ieee80211_rssi_event~RSSI_EVENT_HIGH : int;
const ~ieee80211_rssi_event~RSSI_EVENT_LOW : int;
const ~ieee80211_smps_mode~IEEE80211_SMPS_AUTOMATIC : int;
const ~ieee80211_smps_mode~IEEE80211_SMPS_OFF : int;
const ~ieee80211_smps_mode~IEEE80211_SMPS_STATIC : int;
const ~ieee80211_smps_mode~IEEE80211_SMPS_DYNAMIC : int;
const ~ieee80211_smps_mode~IEEE80211_SMPS_NUM_MODES : int;
const ~set_key_cmd~SET_KEY : int;
const ~set_key_cmd~DISABLE_KEY : int;
const ~ieee80211_sta_state~IEEE80211_STA_NOTEXIST : int;
const ~ieee80211_sta_state~IEEE80211_STA_NONE : int;
const ~ieee80211_sta_state~IEEE80211_STA_AUTH : int;
const ~ieee80211_sta_state~IEEE80211_STA_ASSOC : int;
const ~ieee80211_sta_state~IEEE80211_STA_AUTHORIZED : int;
const ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_20 : int;
const ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_40 : int;
const ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_80 : int;
const ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_160 : int;
const ~sta_notify_cmd~STA_NOTIFY_SLEEP : int;
const ~sta_notify_cmd~STA_NOTIFY_AWAKE : int;
const ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_RX_START : int;
const ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_RX_STOP : int;
const ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_START : int;
const ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_STOP_CONT : int;
const ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_STOP_FLUSH : int;
const ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_STOP_FLUSH_CONT : int;
const ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_OPERATIONAL : int;
const ~ieee80211_frame_release_type~IEEE80211_FRAME_RELEASE_PSPOLL : int;
const ~ieee80211_frame_release_type~IEEE80211_FRAME_RELEASE_UAPSD : int;
const ~ieee80211_roc_type~IEEE80211_ROC_TYPE_NORMAL : int;
const ~ieee80211_roc_type~IEEE80211_ROC_TYPE_MGMT_TX : int;
const ~board_type~BOARD_503_ISL3861 : int;
const ~board_type~BOARD_503_ISL3863 : int;
const ~board_type~BOARD_503 : int;
const ~board_type~BOARD_503_ACC : int;
const ~board_type~BOARD_505 : int;
const ~board_type~BOARD_505_2958 : int;
const ~board_type~BOARD_505A : int;
const ~board_type~BOARD_505AMX : int;
axiom #funAddr~at76_ledtrig_tx_timerfunc.base == -1 && #funAddr~at76_ledtrig_tx_timerfunc.offset == 0;
axiom #funAddr~at76_rx_callback.base == -1 && #funAddr~at76_rx_callback.offset == 1;
axiom #funAddr~at76_mac80211_tx_callback.base == -1 && #funAddr~at76_mac80211_tx_callback.offset == 2;
axiom #funAddr~at76_mac80211_tx.base == -1 && #funAddr~at76_mac80211_tx.offset == 3;
axiom #funAddr~at76_mac80211_start.base == -1 && #funAddr~at76_mac80211_start.offset == 4;
axiom #funAddr~at76_mac80211_stop.base == -1 && #funAddr~at76_mac80211_stop.offset == 5;
axiom #funAddr~at76_add_interface.base == -1 && #funAddr~at76_add_interface.offset == 6;
axiom #funAddr~at76_remove_interface.base == -1 && #funAddr~at76_remove_interface.offset == 7;
axiom #funAddr~at76_config.base == -1 && #funAddr~at76_config.offset == 8;
axiom #funAddr~at76_bss_info_changed.base == -1 && #funAddr~at76_bss_info_changed.offset == 9;
axiom #funAddr~at76_configure_filter.base == -1 && #funAddr~at76_configure_filter.offset == 10;
axiom #funAddr~at76_set_key.base == -1 && #funAddr~at76_set_key.offset == 11;
axiom #funAddr~at76_hw_scan.base == -1 && #funAddr~at76_hw_scan.offset == 12;
axiom #funAddr~at76_work_set_promisc.base == -1 && #funAddr~at76_work_set_promisc.offset == 13;
axiom #funAddr~at76_work_submit_rx.base == -1 && #funAddr~at76_work_submit_rx.offset == 14;
axiom #funAddr~at76_work_join_bssid.base == -1 && #funAddr~at76_work_join_bssid.offset == 15;
axiom #funAddr~at76_dwork_hw_scan.base == -1 && #funAddr~at76_dwork_hw_scan.offset == 16;
axiom #funAddr~delayed_work_timer_fn.base == -1 && #funAddr~delayed_work_timer_fn.offset == 17;
axiom #funAddr~at76_rx_tasklet.base == -1 && #funAddr~at76_rx_tasklet.offset == 18;
axiom #funAddr~at76_probe.base == -1 && #funAddr~at76_probe.offset == 19;
axiom #funAddr~at76_disconnect.base == -1 && #funAddr~at76_disconnect.offset == 20;
axiom ~rpm_status~RPM_ACTIVE == 0;
axiom ~rpm_status~RPM_RESUMING == 1;
axiom ~rpm_status~RPM_SUSPENDED == 2;
axiom ~rpm_status~RPM_SUSPENDING == 3;
axiom ~rpm_request~RPM_REQ_NONE == 0;
axiom ~rpm_request~RPM_REQ_IDLE == 1;
axiom ~rpm_request~RPM_REQ_SUSPEND == 2;
axiom ~rpm_request~RPM_REQ_AUTOSUSPEND == 3;
axiom ~rpm_request~RPM_REQ_RESUME == 4;
axiom ~ldv_13278~SS_FREE == 0;
axiom ~ldv_13278~SS_UNCONNECTED == 1;
axiom ~ldv_13278~SS_CONNECTING == 2;
axiom ~ldv_13278~SS_CONNECTED == 3;
axiom ~ldv_13278~SS_DISCONNECTING == 4;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NONE == 0;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NET == 1;
axiom ~kobj_ns_type~KOBJ_NS_TYPES == 2;
axiom ~dma_data_direction~DMA_BIDIRECTIONAL == 0;
axiom ~dma_data_direction~DMA_TO_DEVICE == 1;
axiom ~dma_data_direction~DMA_FROM_DEVICE == 2;
axiom ~dma_data_direction~DMA_NONE == 3;
axiom ~module_state~MODULE_STATE_LIVE == 0;
axiom ~module_state~MODULE_STATE_COMING == 1;
axiom ~module_state~MODULE_STATE_GOING == 2;
axiom ~module_state~MODULE_STATE_UNFORMED == 3;
axiom ~usb_device_speed~USB_SPEED_UNKNOWN == 0;
axiom ~usb_device_speed~USB_SPEED_LOW == 1;
axiom ~usb_device_speed~USB_SPEED_FULL == 2;
axiom ~usb_device_speed~USB_SPEED_HIGH == 3;
axiom ~usb_device_speed~USB_SPEED_WIRELESS == 4;
axiom ~usb_device_speed~USB_SPEED_SUPER == 5;
axiom ~usb_device_state~USB_STATE_NOTATTACHED == 0;
axiom ~usb_device_state~USB_STATE_ATTACHED == 1;
axiom ~usb_device_state~USB_STATE_POWERED == 2;
axiom ~usb_device_state~USB_STATE_RECONNECTING == 3;
axiom ~usb_device_state~USB_STATE_UNAUTHENTICATED == 4;
axiom ~usb_device_state~USB_STATE_DEFAULT == 5;
axiom ~usb_device_state~USB_STATE_ADDRESS == 6;
axiom ~usb_device_state~USB_STATE_CONFIGURED == 7;
axiom ~usb_device_state~USB_STATE_SUSPENDED == 8;
axiom ~migrate_mode~MIGRATE_ASYNC == 0;
axiom ~migrate_mode~MIGRATE_SYNC_LIGHT == 1;
axiom ~migrate_mode~MIGRATE_SYNC == 2;
axiom ~usb_interface_condition~USB_INTERFACE_UNBOUND == 0;
axiom ~usb_interface_condition~USB_INTERFACE_BINDING == 1;
axiom ~usb_interface_condition~USB_INTERFACE_BOUND == 2;
axiom ~usb_interface_condition~USB_INTERFACE_UNBINDING == 3;
axiom ~usb_device_removable~USB_DEVICE_REMOVABLE_UNKNOWN == 0;
axiom ~usb_device_removable~USB_DEVICE_REMOVABLE == 1;
axiom ~usb_device_removable~USB_DEVICE_FIXED == 2;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_RESUME_LATENCY == 1;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_LATENCY_TOLERANCE == 2;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_FLAGS == 3;
axiom ~pm_qos_type~PM_QOS_UNITIALIZED == 0;
axiom ~pm_qos_type~PM_QOS_MAX == 1;
axiom ~pm_qos_type~PM_QOS_MIN == 2;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_INACTIVE == 0;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_ACTIVE == 1;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_ON == 2;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_OFF == 3;
axiom ~netdev_tx~__NETDEV_TX_MIN == -2147483648;
axiom ~netdev_tx~NETDEV_TX_OK == 0;
axiom ~netdev_tx~NETDEV_TX_BUSY == 16;
axiom ~netdev_tx~NETDEV_TX_LOCKED == 32;
axiom ~rx_handler_result~RX_HANDLER_CONSUMED == 0;
axiom ~rx_handler_result~RX_HANDLER_ANOTHER == 1;
axiom ~rx_handler_result~RX_HANDLER_EXACT == 2;
axiom ~rx_handler_result~RX_HANDLER_PASS == 3;
axiom ~skb_free_reason~SKB_REASON_CONSUMED == 0;
axiom ~skb_free_reason~SKB_REASON_DROPPED == 1;
axiom ~led_brightness~LED_OFF == 0;
axiom ~led_brightness~LED_HALF == 127;
axiom ~led_brightness~LED_FULL == 255;
axiom ~nl80211_iftype~NL80211_IFTYPE_UNSPECIFIED == 0;
axiom ~nl80211_iftype~NL80211_IFTYPE_ADHOC == 1;
axiom ~nl80211_iftype~NL80211_IFTYPE_STATION == 2;
axiom ~nl80211_iftype~NL80211_IFTYPE_AP == 3;
axiom ~nl80211_iftype~NL80211_IFTYPE_AP_VLAN == 4;
axiom ~nl80211_iftype~NL80211_IFTYPE_WDS == 5;
axiom ~nl80211_iftype~NL80211_IFTYPE_MONITOR == 6;
axiom ~nl80211_iftype~NL80211_IFTYPE_MESH_POINT == 7;
axiom ~nl80211_iftype~NL80211_IFTYPE_P2P_CLIENT == 8;
axiom ~nl80211_iftype~NL80211_IFTYPE_P2P_GO == 9;
axiom ~nl80211_iftype~NL80211_IFTYPE_P2P_DEVICE == 10;
axiom ~nl80211_iftype~NUM_NL80211_IFTYPES == 11;
axiom ~nl80211_iftype~NL80211_IFTYPE_MAX == 10;
axiom ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_CORE == 0;
axiom ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_USER == 1;
axiom ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_DRIVER == 2;
axiom ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_COUNTRY_IE == 3;
axiom ~nl80211_dfs_regions~NL80211_DFS_UNSET == 0;
axiom ~nl80211_dfs_regions~NL80211_DFS_FCC == 1;
axiom ~nl80211_dfs_regions~NL80211_DFS_ETSI == 2;
axiom ~nl80211_dfs_regions~NL80211_DFS_JP == 3;
axiom ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_USER == 0;
axiom ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_CELL_BASE == 1;
axiom ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_INDOOR == 2;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_20_NOHT == 0;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_20 == 1;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_40 == 2;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_80 == 3;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_80P80 == 4;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_160 == 5;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_5 == 6;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_10 == 7;
axiom ~nl80211_bss_scan_width~NL80211_BSS_CHAN_WIDTH_20 == 0;
axiom ~nl80211_bss_scan_width~NL80211_BSS_CHAN_WIDTH_10 == 1;
axiom ~nl80211_bss_scan_width~NL80211_BSS_CHAN_WIDTH_5 == 2;
axiom ~nl80211_auth_type~NL80211_AUTHTYPE_OPEN_SYSTEM == 0;
axiom ~nl80211_auth_type~NL80211_AUTHTYPE_SHARED_KEY == 1;
axiom ~nl80211_auth_type~NL80211_AUTHTYPE_FT == 2;
axiom ~nl80211_auth_type~NL80211_AUTHTYPE_NETWORK_EAP == 3;
axiom ~nl80211_auth_type~NL80211_AUTHTYPE_SAE == 4;
axiom ~nl80211_auth_type~__NL80211_AUTHTYPE_NUM == 5;
axiom ~nl80211_auth_type~NL80211_AUTHTYPE_MAX == 4;
axiom ~nl80211_auth_type~NL80211_AUTHTYPE_AUTOMATIC == 5;
axiom ~nl80211_mfp~NL80211_MFP_NO == 0;
axiom ~nl80211_mfp~NL80211_MFP_REQUIRED == 1;
axiom ~nl80211_txrate_gi~NL80211_TXRATE_DEFAULT_GI == 0;
axiom ~nl80211_txrate_gi~NL80211_TXRATE_FORCE_SGI == 1;
axiom ~nl80211_txrate_gi~NL80211_TXRATE_FORCE_LGI == 2;
axiom ~nl80211_dfs_state~NL80211_DFS_USABLE == 0;
axiom ~nl80211_dfs_state~NL80211_DFS_UNAVAILABLE == 1;
axiom ~nl80211_dfs_state~NL80211_DFS_AVAILABLE == 2;
axiom ~environment_cap~ENVIRON_ANY == 0;
axiom ~environment_cap~ENVIRON_INDOOR == 1;
axiom ~environment_cap~ENVIRON_OUTDOOR == 2;
axiom ~ieee80211_band~IEEE80211_BAND_2GHZ == 0;
axiom ~ieee80211_band~IEEE80211_BAND_5GHZ == 1;
axiom ~ieee80211_band~IEEE80211_BAND_60GHZ == 2;
axiom ~ieee80211_band~IEEE80211_NUM_BANDS == 3;
axiom ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_NONE == 0;
axiom ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_MBM == 1;
axiom ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_UNSPEC == 2;
axiom ~ieee80211_chanctx_switch_mode~CHANCTX_SWMODE_REASSIGN_VIF == 0;
axiom ~ieee80211_chanctx_switch_mode~CHANCTX_SWMODE_SWAP_CONTEXTS == 1;
axiom ~ieee80211_rssi_event~RSSI_EVENT_HIGH == 0;
axiom ~ieee80211_rssi_event~RSSI_EVENT_LOW == 1;
axiom ~ieee80211_smps_mode~IEEE80211_SMPS_AUTOMATIC == 0;
axiom ~ieee80211_smps_mode~IEEE80211_SMPS_OFF == 1;
axiom ~ieee80211_smps_mode~IEEE80211_SMPS_STATIC == 2;
axiom ~ieee80211_smps_mode~IEEE80211_SMPS_DYNAMIC == 3;
axiom ~ieee80211_smps_mode~IEEE80211_SMPS_NUM_MODES == 4;
axiom ~set_key_cmd~SET_KEY == 0;
axiom ~set_key_cmd~DISABLE_KEY == 1;
axiom ~ieee80211_sta_state~IEEE80211_STA_NOTEXIST == 0;
axiom ~ieee80211_sta_state~IEEE80211_STA_NONE == 1;
axiom ~ieee80211_sta_state~IEEE80211_STA_AUTH == 2;
axiom ~ieee80211_sta_state~IEEE80211_STA_ASSOC == 3;
axiom ~ieee80211_sta_state~IEEE80211_STA_AUTHORIZED == 4;
axiom ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_20 == 0;
axiom ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_40 == 1;
axiom ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_80 == 2;
axiom ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_160 == 3;
axiom ~sta_notify_cmd~STA_NOTIFY_SLEEP == 0;
axiom ~sta_notify_cmd~STA_NOTIFY_AWAKE == 1;
axiom ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_RX_START == 0;
axiom ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_RX_STOP == 1;
axiom ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_START == 2;
axiom ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_STOP_CONT == 3;
axiom ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_STOP_FLUSH == 4;
axiom ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_STOP_FLUSH_CONT == 5;
axiom ~ieee80211_ampdu_mlme_action~IEEE80211_AMPDU_TX_OPERATIONAL == 6;
axiom ~ieee80211_frame_release_type~IEEE80211_FRAME_RELEASE_PSPOLL == 0;
axiom ~ieee80211_frame_release_type~IEEE80211_FRAME_RELEASE_UAPSD == 1;
axiom ~ieee80211_roc_type~IEEE80211_ROC_TYPE_NORMAL == 0;
axiom ~ieee80211_roc_type~IEEE80211_ROC_TYPE_MGMT_TX == 1;
axiom ~board_type~BOARD_503_ISL3861 == 1;
axiom ~board_type~BOARD_503_ISL3863 == 2;
axiom ~board_type~BOARD_503 == 3;
axiom ~board_type~BOARD_503_ACC == 4;
axiom ~board_type~BOARD_505 == 5;
axiom ~board_type~BOARD_505_2958 == 6;
axiom ~board_type~BOARD_505A == 7;
axiom ~board_type~BOARD_505AMX == 8;
function { :overapproximation "bitwiseAnd" } ~bitwiseAnd(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "shiftLeft" } ~shiftLeft(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseOr" } ~bitwiseOr(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseXor" } ~bitwiseXor(in0 : int, in1 : int) returns (out : int);
var ~jiffies : int;

var ~ldv_state_variable_3 : int;

var ~ldv_state_variable_2 : int;

var ~ref_cnt : int;

var ~ldv_state_variable_1 : int;

var ~usb_counter : int;

var ~ldv_state_variable_0 : int;

var ~preambles.base : [int]int, ~preambles.offset : [int]int;

var ~tx_activity : int;

var ~ldv_retval_0 : int;

var ~ldv_retval_1 : int;

var ~ldv_retval_2 : int;

var ~last_index : int;

var ~#__this_module.base : int, ~#__this_module.offset : int;

var ~#boot_tvec_bases.base : int, ~#boot_tvec_bases.offset : int;

var ~at76_driver_group1.base : int, ~at76_driver_group1.offset : int;

var ~at76_ops_group1.base : int, ~at76_ops_group1.offset : int;

var ~at76_ops_group0.base : int, ~at76_ops_group0.offset : int;

var ~at76_debug : ~uint;

var ~#fw_mutex.base : int, ~#fw_mutex.offset : int;

var ~#firmwares.base : int, ~#firmwares.offset : int;

var ~#dev_table.base : int, ~#dev_table.offset : int;

var ~#hw_rates.base : int, ~#hw_rates.offset : int;

var ~#ledtrig_tx_timer.base : int, ~#ledtrig_tx_timer.offset : int;

var ~#ledtrig_tx.base : int, ~#ledtrig_tx.offset : int;

var ~#at76_ops.base : int, ~#at76_ops.offset : int;

var ~#at76_rates.base : int, ~#at76_rates.offset : int;

var ~#at76_channels.base : int, ~#at76_channels.offset : int;

var ~#at76_supported_band.base : int, ~#at76_supported_band.offset : int;

var ~#at76_driver.base : int, ~#at76_driver.offset : int;

var ~#set_impl.base : int, ~#set_impl.offset : int;

var ~LDV_SKBS.base : int, ~LDV_SKBS.offset : int;

var #NULL.base : int, #NULL.offset : int;

var #valid : [int]int;

var #length : [int]int;

var #memory_$Pointer$.base : [int,int]int, #memory_$Pointer$.offset : [int,int]int;

var #memory_int : [int,int]int;

implementation ldv_set_is_empty(#in~set.base : int, #in~set.offset : int) returns (#res : int){
    var ~set.base : int, ~set.offset : int;

  loc0:
    ~set.base, ~set.offset := #in~set.base, #in~set.offset;
    #res := (if ~last_index == 0 then 1 else 0);
    assume true;
    return;
}

procedure ldv_set_is_empty(#in~set.base : int, #in~set.offset : int) returns (#res : int);
modifies ;

implementation ldv_usb_register_driver_14(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int, #in~ldv_func_arg2.base : int, #in~ldv_func_arg2.offset : int, #in~ldv_func_arg3.base : int, #in~ldv_func_arg3.offset : int) returns (#res : int){
    var #t~ret1400 : int;
    var ~ldv_func_arg1.base : int, ~ldv_func_arg1.offset : int;
    var ~ldv_func_arg2.base : int, ~ldv_func_arg2.offset : int;
    var ~ldv_func_arg3.base : int, ~ldv_func_arg3.offset : int;
    var ~ldv_func_res~939 : ~ldv_func_ret_type;
    var ~tmp~939 : int;

  loc1:
    ~ldv_func_arg1.base, ~ldv_func_arg1.offset := #in~ldv_func_arg1.base, #in~ldv_func_arg1.offset;
    ~ldv_func_arg2.base, ~ldv_func_arg2.offset := #in~ldv_func_arg2.base, #in~ldv_func_arg2.offset;
    ~ldv_func_arg3.base, ~ldv_func_arg3.offset := #in~ldv_func_arg3.base, #in~ldv_func_arg3.offset;
    havoc ~ldv_func_res~939;
    havoc ~tmp~939;
    call #t~ret1400 := usb_register_driver(~ldv_func_arg1.base, ~ldv_func_arg1.offset, ~ldv_func_arg2.base, ~ldv_func_arg2.offset, ~ldv_func_arg3.base, ~ldv_func_arg3.offset);
    assume -2147483648 <= #t~ret1400 && #t~ret1400 <= 2147483647;
    ~tmp~939 := #t~ret1400;
    havoc #t~ret1400;
    ~ldv_func_res~939 := ~tmp~939;
    ~ldv_state_variable_1 := 1;
    ~usb_counter := 0;
    call ldv_usb_driver_1();
    #res := ~ldv_func_res~939;
    assume true;
    return;
}

procedure ldv_usb_register_driver_14(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int, #in~ldv_func_arg2.base : int, #in~ldv_func_arg2.offset : int, #in~ldv_func_arg3.base : int, #in~ldv_func_arg3.offset : int) returns (#res : int);
modifies ~ldv_state_variable_1, ~usb_counter, #valid, #length, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int, ~at76_driver_group1.base, ~at76_driver_group1.offset;

implementation #Ultimate.C_memset(#ptr.base : int, #ptr.offset : int, #value : int, #amount : int) returns (#res.base : int, #res.offset : int){
    var #t~loopctr1413 : int;

  loc2:
    #t~loopctr1413 := 0;
    goto loc3;
  loc3:
    goto loc3_0, loc3_1;
  loc3_0:
    assume #t~loopctr1413 < #amount;
    #memory_$Pointer$.base, #memory_$Pointer$.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset + #t~loopctr1413 * 1 := 0], #memory_$Pointer$.offset[#ptr.base,#ptr.offset + #t~loopctr1413 * 1 := #value % 256];
    #memory_int := #memory_int[#ptr.base,#ptr.offset + #t~loopctr1413 * 1 := #value];
    #t~loopctr1413 := #t~loopctr1413 + 1;
    goto loc3;
  loc3_1:
    assume !(#t~loopctr1413 < #amount);
    assume #res.base == #ptr.base && #res.offset == #ptr.offset;
    return;
}

procedure #Ultimate.C_memset(#ptr.base : int, #ptr.offset : int, #value : int, #amount : int) returns (#res.base : int, #res.offset : int);
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
free ensures #res.base == #ptr.base && #res.offset == #ptr.offset;

implementation main() returns (#res : int){
    var #t~ret1360.base : int, #t~ret1360.offset : int;
    var #t~nondet1361 : int;
    var #t~ret1362.base : int, #t~ret1362.offset : int;
    var #t~ret1363.base : int, #t~ret1363.offset : int;
    var #t~ret1364.base : int, #t~ret1364.offset : int;
    var #t~nondet1365 : int;
    var #t~ret1366 : ~u32;
    var #t~ret1367.base : int, #t~ret1367.offset : int;
    var #t~ret1368.base : int, #t~ret1368.offset : int;
    var #t~ret1369 : ~u32;
    var #t~ret1370.base : int, #t~ret1370.offset : int;
    var #t~ret1371.base : int, #t~ret1371.offset : int;
    var #t~memset1372.base : int, #t~memset1372.offset : int;
    var #t~memset1373.base : int, #t~memset1373.offset : int;
    var #t~nondet1374 : int;
    var #t~switch1375 : bool;
    var #t~nondet1376 : int;
    var #t~switch1377 : bool;
    var #t~ret1378 : int;
    var #t~nondet1379 : int;
    var #t~switch1380 : bool;
    var #t~ret1381 : int;
    var #t~nondet1382 : int;
    var #t~switch1383 : bool;
    var #t~nondet1384 : int;
    var #t~switch1385 : bool;
    var #t~ret1386 : int;
    var #t~ret1387 : int;
    var #t~ret1388 : int;
    var #t~mem1389 : int;
    var #t~mem1390 : int;
    var #t~mem1391 : int;
    var #t~ret1392 : int;
    var #t~mem1393 : int;
    var #t~ret1394 : int;
    var #t~ret1395 : int;
    var #t~ret1396 : int;
    var #t~ret1397 : int;
    var #t~ret1398 : int;
    var ~ldvarg0~866.base : int, ~ldvarg0~866.offset : int;
    var ~tmp~866.base : int, ~tmp~866.offset : int;
    var ~ldvarg1~866 : int;
    var ~tmp___0~866 : int;
    var ~ldvarg11~866.base : int, ~ldvarg11~866.offset : int;
    var ~tmp___1~866.base : int, ~tmp___1~866.offset : int;
    var ~ldvarg7~866.base : int, ~ldvarg7~866.offset : int;
    var ~tmp___2~866.base : int, ~tmp___2~866.offset : int;
    var ~ldvarg3~866.base : int, ~ldvarg3~866.offset : int;
    var ~tmp___3~866.base : int, ~tmp___3~866.offset : int;
    var ~ldvarg12~866 : int;
    var ~tmp___4~866 : int;
    var ~ldvarg5~866 : ~u32;
    var ~tmp___5~866 : ~u32;
    var ~ldvarg6~866.base : int, ~ldvarg6~866.offset : int;
    var ~tmp___6~866.base : int, ~tmp___6~866.offset : int;
    var ~#ldvarg8~866.base : int, ~#ldvarg8~866.offset : int;
    var ~ldvarg4~866.base : int, ~ldvarg4~866.offset : int;
    var ~tmp___7~866.base : int, ~tmp___7~866.offset : int;
    var ~ldvarg13~866 : ~u32;
    var ~tmp___8~866 : ~u32;
    var ~#ldvarg10~866.base : int, ~#ldvarg10~866.offset : int;
    var ~ldvarg9~866.base : int, ~ldvarg9~866.offset : int;
    var ~tmp___9~866.base : int, ~tmp___9~866.offset : int;
    var ~ldvarg2~866.base : int, ~ldvarg2~866.offset : int;
    var ~tmp___10~866.base : int, ~tmp___10~866.offset : int;
    var ~tmp___11~866 : int;
    var ~tmp___12~866 : int;
    var ~tmp___13~866 : int;
    var ~tmp___14~866 : int;
    var ~tmp___15~866 : int;

  loc4:
    havoc ~ldvarg0~866.base, ~ldvarg0~866.offset;
    havoc ~tmp~866.base, ~tmp~866.offset;
    havoc ~ldvarg1~866;
    havoc ~tmp___0~866;
    havoc ~ldvarg11~866.base, ~ldvarg11~866.offset;
    havoc ~tmp___1~866.base, ~tmp___1~866.offset;
    havoc ~ldvarg7~866.base, ~ldvarg7~866.offset;
    havoc ~tmp___2~866.base, ~tmp___2~866.offset;
    havoc ~ldvarg3~866.base, ~ldvarg3~866.offset;
    havoc ~tmp___3~866.base, ~tmp___3~866.offset;
    havoc ~ldvarg12~866;
    havoc ~tmp___4~866;
    havoc ~ldvarg5~866;
    havoc ~tmp___5~866;
    havoc ~ldvarg6~866.base, ~ldvarg6~866.offset;
    havoc ~tmp___6~866.base, ~tmp___6~866.offset;
    call ~#ldvarg8~866.base, ~#ldvarg8~866.offset := #Ultimate.alloc(4);
    havoc ~ldvarg4~866.base, ~ldvarg4~866.offset;
    havoc ~tmp___7~866.base, ~tmp___7~866.offset;
    havoc ~ldvarg13~866;
    havoc ~tmp___8~866;
    call ~#ldvarg10~866.base, ~#ldvarg10~866.offset := #Ultimate.alloc(8);
    havoc ~ldvarg9~866.base, ~ldvarg9~866.offset;
    havoc ~tmp___9~866.base, ~tmp___9~866.offset;
    havoc ~ldvarg2~866.base, ~ldvarg2~866.offset;
    havoc ~tmp___10~866.base, ~tmp___10~866.offset;
    havoc ~tmp___11~866;
    havoc ~tmp___12~866;
    havoc ~tmp___13~866;
    havoc ~tmp___14~866;
    havoc ~tmp___15~866;
    call #t~ret1360.base, #t~ret1360.offset := ldv_zalloc(32);
    ~tmp~866.base, ~tmp~866.offset := #t~ret1360.base, #t~ret1360.offset;
    havoc #t~ret1360.base, #t~ret1360.offset;
    ~ldvarg0~866.base, ~ldvarg0~866.offset := ~tmp~866.base, ~tmp~866.offset;
    ~tmp___0~866 := #t~nondet1361;
    havoc #t~nondet1361;
    ~ldvarg1~866 := ~tmp___0~866;
    call #t~ret1362.base, #t~ret1362.offset := ldv_zalloc(4);
    ~tmp___1~866.base, ~tmp___1~866.offset := #t~ret1362.base, #t~ret1362.offset;
    havoc #t~ret1362.base, #t~ret1362.offset;
    ~ldvarg11~866.base, ~ldvarg11~866.offset := ~tmp___1~866.base, ~tmp___1~866.offset;
    call #t~ret1363.base, #t~ret1363.offset := ldv_zalloc(88);
    ~tmp___2~866.base, ~tmp___2~866.offset := #t~ret1363.base, #t~ret1363.offset;
    havoc #t~ret1363.base, #t~ret1363.offset;
    ~ldvarg7~866.base, ~ldvarg7~866.offset := ~tmp___2~866.base, ~tmp___2~866.offset;
    call #t~ret1364.base, #t~ret1364.offset := ldv_zalloc(8);
    ~tmp___3~866.base, ~tmp___3~866.offset := #t~ret1364.base, #t~ret1364.offset;
    havoc #t~ret1364.base, #t~ret1364.offset;
    ~ldvarg3~866.base, ~ldvarg3~866.offset := ~tmp___3~866.base, ~tmp___3~866.offset;
    ~tmp___4~866 := #t~nondet1365;
    havoc #t~nondet1365;
    ~ldvarg12~866 := ~tmp___4~866;
    call #t~ret1366 := __VERIFIER_nondet_u32();
    ~tmp___5~866 := #t~ret1366;
    havoc #t~ret1366;
    ~ldvarg5~866 := ~tmp___5~866;
    call #t~ret1367.base, #t~ret1367.offset := ldv_zalloc(232);
    ~tmp___6~866.base, ~tmp___6~866.offset := #t~ret1367.base, #t~ret1367.offset;
    havoc #t~ret1367.base, #t~ret1367.offset;
    ~ldvarg6~866.base, ~ldvarg6~866.offset := ~tmp___6~866.base, ~tmp___6~866.offset;
    call #t~ret1368.base, #t~ret1368.offset := ldv_zalloc(88);
    ~tmp___7~866.base, ~tmp___7~866.offset := #t~ret1368.base, #t~ret1368.offset;
    havoc #t~ret1368.base, #t~ret1368.offset;
    ~ldvarg4~866.base, ~ldvarg4~866.offset := ~tmp___7~866.base, ~tmp___7~866.offset;
    call #t~ret1369 := __VERIFIER_nondet_u32();
    ~tmp___8~866 := #t~ret1369;
    havoc #t~ret1369;
    ~ldvarg13~866 := ~tmp___8~866;
    call #t~ret1370.base, #t~ret1370.offset := ldv_zalloc(12);
    ~tmp___9~866.base, ~tmp___9~866.offset := #t~ret1370.base, #t~ret1370.offset;
    havoc #t~ret1370.base, #t~ret1370.offset;
    ~ldvarg9~866.base, ~ldvarg9~866.offset := ~tmp___9~866.base, ~tmp___9~866.offset;
    call #t~ret1371.base, #t~ret1371.offset := ldv_zalloc(232);
    ~tmp___10~866.base, ~tmp___10~866.offset := #t~ret1371.base, #t~ret1371.offset;
    havoc #t~ret1371.base, #t~ret1371.offset;
    ~ldvarg2~866.base, ~ldvarg2~866.offset := ~tmp___10~866.base, ~tmp___10~866.offset;
    call ldv_initialize();
    call #t~memset1372.base, #t~memset1372.offset := #Ultimate.C_memset(~#ldvarg8~866.base, ~#ldvarg8~866.offset, 0, 4);
    havoc #t~memset1372.base, #t~memset1372.offset;
    call #t~memset1373.base, #t~memset1373.offset := #Ultimate.C_memset(~#ldvarg10~866.base, ~#ldvarg10~866.offset, 0, 8);
    havoc #t~memset1373.base, #t~memset1373.offset;
    ~ldv_state_variable_1 := 0;
    ~ref_cnt := 0;
    ~ldv_state_variable_0 := 1;
    ~ldv_state_variable_3 := 0;
    ~ldv_state_variable_2 := 0;
    assume -2147483648 <= #t~nondet1374 && #t~nondet1374 <= 2147483647;
    ~tmp___11~866 := #t~nondet1374;
    havoc #t~nondet1374;
    #t~switch1375 := ~tmp___11~866 == 0;
    assume !#t~switch1375;
    #t~switch1375 := #t~switch1375 || ~tmp___11~866 == 1;
    assume #t~switch1375;
    assume ~ldv_state_variable_0 != 0;
    assume -2147483648 <= #t~nondet1379 && #t~nondet1379 <= 2147483647;
    ~tmp___13~866 := #t~nondet1379;
    havoc #t~nondet1379;
    #t~switch1380 := ~tmp___13~866 == 0;
    assume !#t~switch1380;
    #t~switch1380 := #t~switch1380 || ~tmp___13~866 == 1;
    assume #t~switch1380;
    assume ~ldv_state_variable_0 == 1;
    call #t~ret1381 := at76_mod_init();
    assume -2147483648 <= #t~ret1381 && #t~ret1381 <= 2147483647;
    ~ldv_retval_1 := #t~ret1381;
    havoc #t~ret1381;
    assume !(~ldv_retval_1 == 0);
    assume ~ldv_retval_1 != 0;
    ~ldv_state_variable_0 := 2;
    call ldv_check_final_state();
    return;
}

procedure main() returns (#res : int);
modifies ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_state_variable_3, ~ldv_state_variable_2, ~ldv_retval_0, ~ldv_retval_1, ~ldv_retval_2, #valid, #length, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int, ~last_index, ~at76_ops_group0.base, ~at76_ops_group0.offset, ~at76_ops_group1.base, ~at76_ops_group1.offset, ~tx_activity, ~at76_driver_group1.base, ~at76_driver_group1.offset, ~usb_counter;

implementation ldv_set_init(#in~set.base : int, #in~set.offset : int) returns (){
    var ~set.base : int, ~set.offset : int;

  loc5:
    ~set.base, ~set.offset := #in~set.base, #in~set.offset;
    ~set.base, ~set.offset := ~#set_impl.base, ~#set_impl.offset;
    ~last_index := 0;
    assume true;
    return;
}

procedure ldv_set_init(#in~set.base : int, #in~set.offset : int) returns ();
modifies ~last_index;

implementation ULTIMATE.init() returns (){
    var #t~nondet0.base : int, #t~nondet0.offset : int;
    var #t~nondet1.base : int, #t~nondet1.offset : int;
    var #t~nondet2.base : int, #t~nondet2.offset : int;
    var #t~union1408.raw_lock.ldv_1452.head_tail : int, #t~union1408.raw_lock.ldv_1452.tickets.head : int, #t~union1408.raw_lock.ldv_1452.tickets.tail : int, #t~union1408.magic : int, #t~union1408.owner_cpu : int, #t~union1408.owner.base : int, #t~union1408.owner.offset : int, #t~union1408.dep_map.key.base : int, #t~union1408.dep_map.key.offset : int, #t~union1408.dep_map.class_cache.base : [int]int, #t~union1408.dep_map.class_cache.offset : [int]int, #t~union1408.dep_map.name.base : int, #t~union1408.dep_map.name.offset : int, #t~union1408.dep_map.cpu : int, #t~union1408.dep_map.ip : int;
    var #t~union1409.__padding : [int]int, #t~union1409.dep_map.key.base : int, #t~union1409.dep_map.key.offset : int, #t~union1409.dep_map.class_cache.base : [int]int, #t~union1409.dep_map.class_cache.offset : [int]int, #t~union1409.dep_map.name.base : int, #t~union1409.dep_map.name.offset : int, #t~union1409.dep_map.cpu : int, #t~union1409.dep_map.ip : int;
    var #t~nondet188.base : int, #t~nondet188.offset : int;
    var #t~nondet189.base : int, #t~nondet189.offset : int;
    var #t~nondet190.base : int, #t~nondet190.offset : int;
    var #t~nondet191.base : int, #t~nondet191.offset : int;
    var #t~nondet192.base : int, #t~nondet192.offset : int;
    var #t~nondet193.base : int, #t~nondet193.offset : int;
    var #t~nondet194.base : int, #t~nondet194.offset : int;
    var #t~nondet195.base : int, #t~nondet195.offset : int;
    var #t~nondet196.base : int, #t~nondet196.offset : int;
    var #t~nondet263.base : int, #t~nondet263.offset : int;
    var #t~nondet264.base : int, #t~nondet264.offset : int;
    var #t~nondet1344.base : int, #t~nondet1344.offset : int;
    var #t~union1410.head : int, #t~union1410.tail : int;
    var #t~union1411.__padding : [int]int, #t~union1411.dep_map.key.base : int, #t~union1411.dep_map.key.offset : int, #t~union1411.dep_map.class_cache.base : [int]int, #t~union1411.dep_map.class_cache.offset : [int]int, #t~union1411.dep_map.name.base : int, #t~union1411.dep_map.name.offset : int, #t~union1411.dep_map.cpu : int, #t~union1411.dep_map.ip : int;

  loc6:
    #NULL.base, #NULL.offset := 0, 0;
    #valid := #valid[0 := 0];
    ~ldv_state_variable_3 := 0;
    ~ldv_state_variable_2 := 0;
    ~ref_cnt := 0;
    ~ldv_state_variable_1 := 0;
    ~usb_counter := 0;
    ~ldv_state_variable_0 := 0;
    call #t~nondet0.base, #t~nondet0.offset := #Ultimate.alloc(5);
    #memory_int := #memory_int[#t~nondet0.base,#t~nondet0.offset + 0 := 108];
    #memory_int := #memory_int[#t~nondet0.base,#t~nondet0.offset + 1 := 111];
    #memory_int := #memory_int[#t~nondet0.base,#t~nondet0.offset + 2 := 110];
    #memory_int := #memory_int[#t~nondet0.base,#t~nondet0.offset + 3 := 103];
    #memory_int := #memory_int[#t~nondet0.base,#t~nondet0.offset + 4 := 0];
    ~preambles.base, ~preambles.offset := ~preambles.base[0 := #t~nondet0.base], ~preambles.offset[0 := #t~nondet0.offset];
    call #t~nondet1.base, #t~nondet1.offset := #Ultimate.alloc(6);
    #memory_int := #memory_int[#t~nondet1.base,#t~nondet1.offset + 0 := 115];
    #memory_int := #memory_int[#t~nondet1.base,#t~nondet1.offset + 1 := 104];
    #memory_int := #memory_int[#t~nondet1.base,#t~nondet1.offset + 2 := 111];
    #memory_int := #memory_int[#t~nondet1.base,#t~nondet1.offset + 3 := 114];
    #memory_int := #memory_int[#t~nondet1.base,#t~nondet1.offset + 4 := 116];
    #memory_int := #memory_int[#t~nondet1.base,#t~nondet1.offset + 5 := 0];
    ~preambles.base, ~preambles.offset := ~preambles.base[1 := #t~nondet1.base], ~preambles.offset[1 := #t~nondet1.offset];
    call #t~nondet2.base, #t~nondet2.offset := #Ultimate.alloc(5);
    #memory_int := #memory_int[#t~nondet2.base,#t~nondet2.offset + 0 := 97];
    #memory_int := #memory_int[#t~nondet2.base,#t~nondet2.offset + 1 := 117];
    #memory_int := #memory_int[#t~nondet2.base,#t~nondet2.offset + 2 := 116];
    #memory_int := #memory_int[#t~nondet2.base,#t~nondet2.offset + 3 := 111];
    #memory_int := #memory_int[#t~nondet2.base,#t~nondet2.offset + 4 := 0];
    ~preambles.base, ~preambles.offset := ~preambles.base[2 := #t~nondet2.base], ~preambles.offset[2 := #t~nondet2.offset];
    havoc #t~nondet0.base, #t~nondet0.offset;
    havoc #t~nondet1.base, #t~nondet1.offset;
    havoc #t~nondet2.base, #t~nondet2.offset;
    ~tx_activity := 0;
    ~ldv_retval_0 := 0;
    ~ldv_retval_1 := 0;
    ~ldv_retval_2 := 0;
    ~last_index := 0;
    ~at76_driver_group1.base, ~at76_driver_group1.offset := 0, 0;
    ~at76_ops_group1.base, ~at76_ops_group1.offset := 0, 0;
    ~at76_ops_group0.base, ~at76_ops_group0.offset := 0, 0;
    ~at76_debug := 0;
    call ~#fw_mutex.base, ~#fw_mutex.offset := #Ultimate.alloc(156);
    call write~int(0, ~#fw_mutex.base, ~#fw_mutex.offset + 0 + 0, 4);
    call write~int(#t~union1408.raw_lock.ldv_1452.head_tail, ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union1408.raw_lock.ldv_1452.tickets.head, ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union1408.raw_lock.ldv_1452.tickets.tail, ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(#t~union1408.magic, ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 4, 4);
    call write~int(#t~union1408.owner_cpu, ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 8, 4);
    call write~$Pointer$(#t~union1408.owner.base, #t~union1408.owner.offset, ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 12, 8);
    call write~$Pointer$(#t~union1408.dep_map.key.base, #t~union1408.dep_map.key.offset, ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 20 + 0, 8);
    call write~$Pointer$(#t~union1408.dep_map.class_cache.base[0], #t~union1408.dep_map.class_cache.offset[0], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 20 + 8, 8);
    call write~$Pointer$(#t~union1408.dep_map.class_cache.base[1], #t~union1408.dep_map.class_cache.offset[1], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(#t~union1408.dep_map.name.base, #t~union1408.dep_map.name.offset, ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 20 + 24, 8);
    call write~int(#t~union1408.dep_map.cpu, ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 20 + 32, 4);
    call write~int(#t~union1408.dep_map.ip, ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union1409.__padding[0], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0, 1);
    call write~int(#t~union1409.__padding[1], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union1409.__padding[2], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[3], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[4], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[5], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[6], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[7], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[8], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[9], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[10], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[11], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[12], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[13], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[14], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[15], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[16], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[17], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[18], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[19], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[20], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[21], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[22], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1409.__padding[23], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union1409.dep_map.key.base, #t~union1409.dep_map.key.offset, ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union1409.dep_map.class_cache.base[0], #t~union1409.dep_map.class_cache.offset[0], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union1409.dep_map.class_cache.base[1], #t~union1409.dep_map.class_cache.offset[1], ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union1409.dep_map.name.base, #t~union1409.dep_map.name.offset, ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union1409.dep_map.cpu, ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union1409.dep_map.ip, ~#fw_mutex.base, ~#fw_mutex.offset + 4 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#fw_mutex.base, ~#fw_mutex.offset + 72 + 0, 8);
    call write~$Pointer$(0, 0, ~#fw_mutex.base, ~#fw_mutex.offset + 72 + 8, 8);
    call write~$Pointer$(0, 0, ~#fw_mutex.base, ~#fw_mutex.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#fw_mutex.base, ~#fw_mutex.offset + 96, 8);
    call write~$Pointer$(0, 0, ~#fw_mutex.base, ~#fw_mutex.offset + 104, 8);
    call write~$Pointer$(0, 0, ~#fw_mutex.base, ~#fw_mutex.offset + 112 + 0, 8);
    call write~$Pointer$(0, 0, ~#fw_mutex.base, ~#fw_mutex.offset + 112 + 8 + 0, 8);
    call write~$Pointer$(0, 0, ~#fw_mutex.base, ~#fw_mutex.offset + 112 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#fw_mutex.base, ~#fw_mutex.offset + 112 + 24, 8);
    call write~int(0, ~#fw_mutex.base, ~#fw_mutex.offset + 112 + 32, 4);
    call write~int(0, ~#fw_mutex.base, ~#fw_mutex.offset + 112 + 36, 8);
    havoc #t~union1408.raw_lock.ldv_1452.head_tail, #t~union1408.raw_lock.ldv_1452.tickets.head, #t~union1408.raw_lock.ldv_1452.tickets.tail, #t~union1408.magic, #t~union1408.owner_cpu, #t~union1408.owner.base, #t~union1408.owner.offset, #t~union1408.dep_map.key.base, #t~union1408.dep_map.key.offset, #t~union1408.dep_map.class_cache.base, #t~union1408.dep_map.class_cache.offset, #t~union1408.dep_map.name.base, #t~union1408.dep_map.name.offset, #t~union1408.dep_map.cpu, #t~union1408.dep_map.ip;
    havoc #t~union1409.__padding, #t~union1409.dep_map.key.base, #t~union1409.dep_map.key.offset, #t~union1409.dep_map.class_cache.base, #t~union1409.dep_map.class_cache.offset, #t~union1409.dep_map.name.base, #t~union1409.dep_map.name.offset, #t~union1409.dep_map.cpu, #t~union1409.dep_map.ip;
    call ~#firmwares.base, ~#firmwares.offset := #Ultimate.alloc(468);
    call #t~nondet188.base, #t~nondet188.offset := #Ultimate.alloc(1);
    #memory_int := #memory_int[#t~nondet188.base,#t~nondet188.offset + 0 := 0];
    call write~$Pointer$(#t~nondet188.base, #t~nondet188.offset, ~#firmwares.base, ~#firmwares.offset + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 0 + 8, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 0 + 16, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 0 + 20, 4);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 0 + 24, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 0 + 32, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 0 + 40, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 0 + 44 + 0, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 0 + 44 + 1, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 0 + 44 + 2, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 0 + 44 + 3, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 0 + 48, 4);
    call #t~nondet189.base, #t~nondet189.offset := #Ultimate.alloc(25);
    call write~$Pointer$(#t~nondet189.base, #t~nondet189.offset, ~#firmwares.base, ~#firmwares.offset + 52 + 0, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 52 + 8, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 52 + 16, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 52 + 20, 4);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 52 + 24, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 52 + 32, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 52 + 40, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 52 + 44 + 0, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 52 + 44 + 1, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 52 + 44 + 2, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 52 + 44 + 3, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 52 + 48, 4);
    call #t~nondet190.base, #t~nondet190.offset := #Ultimate.alloc(25);
    call write~$Pointer$(#t~nondet190.base, #t~nondet190.offset, ~#firmwares.base, ~#firmwares.offset + 104 + 0, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 104 + 8, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 104 + 16, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 104 + 20, 4);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 104 + 24, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 104 + 32, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 104 + 40, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 104 + 44 + 0, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 104 + 44 + 1, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 104 + 44 + 2, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 104 + 44 + 3, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 104 + 48, 4);
    call #t~nondet191.base, #t~nondet191.offset := #Ultimate.alloc(24);
    call write~$Pointer$(#t~nondet191.base, #t~nondet191.offset, ~#firmwares.base, ~#firmwares.offset + 156 + 0, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 156 + 8, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 156 + 16, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 156 + 20, 4);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 156 + 24, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 156 + 32, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 156 + 40, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 156 + 44 + 0, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 156 + 44 + 1, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 156 + 44 + 2, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 156 + 44 + 3, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 156 + 48, 4);
    call #t~nondet192.base, #t~nondet192.offset := #Ultimate.alloc(28);
    call write~$Pointer$(#t~nondet192.base, #t~nondet192.offset, ~#firmwares.base, ~#firmwares.offset + 208 + 0, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 208 + 8, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 208 + 16, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 208 + 20, 4);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 208 + 24, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 208 + 32, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 208 + 40, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 208 + 44 + 0, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 208 + 44 + 1, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 208 + 44 + 2, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 208 + 44 + 3, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 208 + 48, 4);
    call #t~nondet193.base, #t~nondet193.offset := #Ultimate.alloc(24);
    call write~$Pointer$(#t~nondet193.base, #t~nondet193.offset, ~#firmwares.base, ~#firmwares.offset + 260 + 0, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 260 + 8, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 260 + 16, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 260 + 20, 4);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 260 + 24, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 260 + 32, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 260 + 40, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 260 + 44 + 0, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 260 + 44 + 1, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 260 + 44 + 2, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 260 + 44 + 3, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 260 + 48, 4);
    call #t~nondet194.base, #t~nondet194.offset := #Ultimate.alloc(28);
    call write~$Pointer$(#t~nondet194.base, #t~nondet194.offset, ~#firmwares.base, ~#firmwares.offset + 312 + 0, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 312 + 8, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 312 + 16, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 312 + 20, 4);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 312 + 24, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 312 + 32, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 312 + 40, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 312 + 44 + 0, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 312 + 44 + 1, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 312 + 44 + 2, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 312 + 44 + 3, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 312 + 48, 4);
    call #t~nondet195.base, #t~nondet195.offset := #Ultimate.alloc(29);
    call write~$Pointer$(#t~nondet195.base, #t~nondet195.offset, ~#firmwares.base, ~#firmwares.offset + 364 + 0, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 364 + 8, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 364 + 16, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 364 + 20, 4);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 364 + 24, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 364 + 32, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 364 + 40, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 364 + 44 + 0, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 364 + 44 + 1, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 364 + 44 + 2, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 364 + 44 + 3, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 364 + 48, 4);
    call #t~nondet196.base, #t~nondet196.offset := #Ultimate.alloc(27);
    call write~$Pointer$(#t~nondet196.base, #t~nondet196.offset, ~#firmwares.base, ~#firmwares.offset + 416 + 0, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 416 + 8, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 416 + 16, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 416 + 20, 4);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 416 + 24, 8);
    call write~$Pointer$(0, 0, ~#firmwares.base, ~#firmwares.offset + 416 + 32, 8);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 416 + 40, 4);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 416 + 44 + 0, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 416 + 44 + 1, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 416 + 44 + 2, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 416 + 44 + 3, 1);
    call write~int(0, ~#firmwares.base, ~#firmwares.offset + 416 + 48, 4);
    havoc #t~nondet188.base, #t~nondet188.offset;
    havoc #t~nondet189.base, #t~nondet189.offset;
    havoc #t~nondet190.base, #t~nondet190.offset;
    havoc #t~nondet191.base, #t~nondet191.offset;
    havoc #t~nondet192.base, #t~nondet192.offset;
    havoc #t~nondet193.base, #t~nondet193.offset;
    havoc #t~nondet194.base, #t~nondet194.offset;
    havoc #t~nondet195.base, #t~nondet195.offset;
    havoc #t~nondet196.base, #t~nondet196.offset;
    call ~#dev_table.base, ~#dev_table.offset := #Ultimate.alloc(1375);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 0 + 0, 2);
    call write~int(1003, ~#dev_table.base, ~#dev_table.offset + 0 + 2, 2);
    call write~int(30211, ~#dev_table.base, ~#dev_table.offset + 0 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 0 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 0 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 0 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 0 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 0 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 0 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 0 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 0 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 0 + 16, 1);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 0 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 25 + 0, 2);
    call write~int(1643, ~#dev_table.base, ~#dev_table.offset + 25 + 2, 2);
    call write~int(8721, ~#dev_table.base, ~#dev_table.offset + 25 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 25 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 25 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 25 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 25 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 25 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 25 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 25 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 25 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 25 + 16, 1);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 25 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 50 + 0, 2);
    call write~int(2148, ~#dev_table.base, ~#dev_table.offset + 50 + 2, 2);
    call write~int(16640, ~#dev_table.base, ~#dev_table.offset + 50 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 50 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 50 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 50 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 50 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 50 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 50 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 50 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 50 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 50 + 16, 1);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 50 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 75 + 0, 2);
    call write~int(2875, ~#dev_table.base, ~#dev_table.offset + 75 + 2, 2);
    call write~int(5650, ~#dev_table.base, ~#dev_table.offset + 75 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 75 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 75 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 75 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 75 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 75 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 75 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 75 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 75 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 75 + 16, 1);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 75 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 100 + 0, 2);
    call write~int(1008, ~#dev_table.base, ~#dev_table.offset + 100 + 2, 2);
    call write~int(284, ~#dev_table.base, ~#dev_table.offset + 100 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 100 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 100 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 100 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 100 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 100 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 100 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 100 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 100 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 100 + 16, 1);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 100 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 125 + 0, 2);
    call write~int(3294, ~#dev_table.base, ~#dev_table.offset + 125 + 2, 2);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 125 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 125 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 125 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 125 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 125 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 125 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 125 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 125 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 125 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 125 + 16, 1);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 125 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 150 + 0, 2);
    call write~int(1690, ~#dev_table.base, ~#dev_table.offset + 150 + 2, 2);
    call write~int(800, ~#dev_table.base, ~#dev_table.offset + 150 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 150 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 150 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 150 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 150 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 150 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 150 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 150 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 150 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 150 + 16, 1);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 150 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 175 + 0, 2);
    call write~int(3420, ~#dev_table.base, ~#dev_table.offset + 175 + 2, 2);
    call write~int(40961, ~#dev_table.base, ~#dev_table.offset + 175 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 175 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 175 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 175 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 175 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 175 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 175 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 175 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 175 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 175 + 16, 1);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 175 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 200 + 0, 2);
    call write~int(1189, ~#dev_table.base, ~#dev_table.offset + 200 + 2, 2);
    call write~int(36864, ~#dev_table.base, ~#dev_table.offset + 200 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 200 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 200 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 200 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 200 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 200 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 200 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 200 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 200 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 200 + 16, 1);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 200 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 225 + 0, 2);
    call write~int(1501, ~#dev_table.base, ~#dev_table.offset + 225 + 2, 2);
    call write~int(65329, ~#dev_table.base, ~#dev_table.offset + 225 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 225 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 225 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 225 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 225 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 225 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 225 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 225 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 225 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 225 + 16, 1);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 225 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 250 + 0, 2);
    call write~int(32902, ~#dev_table.base, ~#dev_table.offset + 250 + 2, 2);
    call write~int(512, ~#dev_table.base, ~#dev_table.offset + 250 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 250 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 250 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 250 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 250 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 250 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 250 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 250 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 250 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 250 + 16, 1);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 250 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 275 + 0, 2);
    call write~int(3470, ~#dev_table.base, ~#dev_table.offset + 275 + 2, 2);
    call write~int(28928, ~#dev_table.base, ~#dev_table.offset + 275 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 275 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 275 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 275 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 275 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 275 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 275 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 275 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 275 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 275 + 16, 1);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 275 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 300 + 0, 2);
    call write~int(3470, ~#dev_table.base, ~#dev_table.offset + 300 + 2, 2);
    call write~int(28944, ~#dev_table.base, ~#dev_table.offset + 300 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 300 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 300 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 300 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 300 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 300 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 300 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 300 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 300 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 300 + 16, 1);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 300 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 325 + 0, 2);
    call write~int(1211, ~#dev_table.base, ~#dev_table.offset + 325 + 2, 2);
    call write~int(2329, ~#dev_table.base, ~#dev_table.offset + 325 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 325 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 325 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 325 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 325 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 325 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 325 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 325 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 325 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 325 + 16, 1);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 325 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 350 + 0, 2);
    call write~int(1690, ~#dev_table.base, ~#dev_table.offset + 350 + 2, 2);
    call write~int(2081, ~#dev_table.base, ~#dev_table.offset + 350 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 350 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 350 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 350 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 350 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 350 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 350 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 350 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 350 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 350 + 16, 1);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 350 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 375 + 0, 2);
    call write~int(1003, ~#dev_table.base, ~#dev_table.offset + 375 + 2, 2);
    call write~int(30212, ~#dev_table.base, ~#dev_table.offset + 375 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 375 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 375 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 375 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 375 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 375 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 375 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 375 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 375 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 375 + 16, 1);
    call write~int(2, ~#dev_table.base, ~#dev_table.offset + 375 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 400 + 0, 2);
    call write~int(1373, ~#dev_table.base, ~#dev_table.offset + 400 + 2, 2);
    call write~int(40960, ~#dev_table.base, ~#dev_table.offset + 400 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 400 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 400 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 400 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 400 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 400 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 400 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 400 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 400 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 400 + 16, 1);
    call write~int(2, ~#dev_table.base, ~#dev_table.offset + 400 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 425 + 0, 2);
    call write~int(1003, ~#dev_table.base, ~#dev_table.offset + 425 + 2, 2);
    call write~int(30213, ~#dev_table.base, ~#dev_table.offset + 425 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 425 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 425 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 425 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 425 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 425 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 425 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 425 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 425 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 425 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 425 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 450 + 0, 2);
    call write~int(1690, ~#dev_table.base, ~#dev_table.offset + 450 + 2, 2);
    call write~int(801, ~#dev_table.base, ~#dev_table.offset + 450 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 450 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 450 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 450 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 450 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 450 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 450 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 450 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 450 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 450 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 450 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 475 + 0, 2);
    call write~int(1915, ~#dev_table.base, ~#dev_table.offset + 475 + 2, 2);
    call write~int(8729, ~#dev_table.base, ~#dev_table.offset + 475 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 475 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 475 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 475 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 475 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 475 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 475 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 475 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 475 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 475 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 475 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 500 + 0, 2);
    call write~int(1915, ~#dev_table.base, ~#dev_table.offset + 500 + 2, 2);
    call write~int(8743, ~#dev_table.base, ~#dev_table.offset + 500 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 500 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 500 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 500 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 500 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 500 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 500 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 500 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 500 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 500 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 500 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 525 + 0, 2);
    call write~int(2148, ~#dev_table.base, ~#dev_table.offset + 525 + 2, 2);
    call write~int(16642, ~#dev_table.base, ~#dev_table.offset + 525 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 525 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 525 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 525 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 525 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 525 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 525 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 525 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 525 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 525 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 525 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 550 + 0, 2);
    call write~int(8193, ~#dev_table.base, ~#dev_table.offset + 550 + 2, 2);
    call write~int(12800, ~#dev_table.base, ~#dev_table.offset + 550 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 550 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 550 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 550 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 550 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 550 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 550 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 550 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 550 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 550 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 550 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 575 + 0, 2);
    call write~int(5736, ~#dev_table.base, ~#dev_table.offset + 575 + 2, 2);
    call write~int(30213, ~#dev_table.base, ~#dev_table.offset + 575 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 575 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 575 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 575 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 575 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 575 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 575 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 575 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 575 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 575 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 575 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 600 + 0, 2);
    call write~int(1003, ~#dev_table.base, ~#dev_table.offset + 600 + 2, 2);
    call write~int(16642, ~#dev_table.base, ~#dev_table.offset + 600 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 600 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 600 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 600 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 600 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 600 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 600 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 600 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 600 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 600 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 600 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 625 + 0, 2);
    call write~int(4977, ~#dev_table.base, ~#dev_table.offset + 625 + 2, 2);
    call write~int(22339, ~#dev_table.base, ~#dev_table.offset + 625 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 625 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 625 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 625 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 625 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 625 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 625 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 625 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 625 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 625 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 625 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 650 + 0, 2);
    call write~int(4977, ~#dev_table.base, ~#dev_table.offset + 650 + 2, 2);
    call write~int(1, ~#dev_table.base, ~#dev_table.offset + 650 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 650 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 650 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 650 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 650 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 650 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 650 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 650 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 650 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 650 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 650 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 675 + 0, 2);
    call write~int(4977, ~#dev_table.base, ~#dev_table.offset + 675 + 2, 2);
    call write~int(2, ~#dev_table.base, ~#dev_table.offset + 675 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 675 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 675 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 675 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 675 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 675 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 675 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 675 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 675 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 675 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 675 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 700 + 0, 2);
    call write~int(1189, ~#dev_table.base, ~#dev_table.offset + 700 + 2, 2);
    call write~int(36865, ~#dev_table.base, ~#dev_table.offset + 700 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 700 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 700 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 700 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 700 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 700 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 700 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 700 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 700 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 700 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 700 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 725 + 0, 2);
    call write~int(1286, ~#dev_table.base, ~#dev_table.offset + 725 + 2, 2);
    call write~int(2561, ~#dev_table.base, ~#dev_table.offset + 725 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 725 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 725 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 725 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 725 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 725 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 725 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 725 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 725 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 725 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 725 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 750 + 0, 2);
    call write~int(1665, ~#dev_table.base, ~#dev_table.offset + 750 + 2, 2);
    call write~int(27, ~#dev_table.base, ~#dev_table.offset + 750 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 750 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 750 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 750 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 750 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 750 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 750 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 750 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 750 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 750 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 750 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 775 + 0, 2);
    call write~int(1293, ~#dev_table.base, ~#dev_table.offset + 775 + 2, 2);
    call write~int(80, ~#dev_table.base, ~#dev_table.offset + 775 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 775 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 775 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 775 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 775 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 775 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 775 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 775 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 775 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 775 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 775 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 800 + 0, 2);
    call write~int(1976, ~#dev_table.base, ~#dev_table.offset + 800 + 2, 2);
    call write~int(45056, ~#dev_table.base, ~#dev_table.offset + 800 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 800 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 800 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 800 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 800 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 800 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 800 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 800 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 800 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 800 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 800 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 825 + 0, 2);
    call write~int(4164, ~#dev_table.base, ~#dev_table.offset + 825 + 2, 2);
    call write~int(32771, ~#dev_table.base, ~#dev_table.offset + 825 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 825 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 825 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 825 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 825 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 825 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 825 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 825 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 825 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 825 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 825 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 850 + 0, 2);
    call write~int(8217, ~#dev_table.base, ~#dev_table.offset + 850 + 2, 2);
    call write~int(12832, ~#dev_table.base, ~#dev_table.offset + 850 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 850 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 850 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 850 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 850 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 850 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 850 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 850 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 850 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 850 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 850 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 875 + 0, 2);
    call write~int(1183, ~#dev_table.base, ~#dev_table.offset + 875 + 2, 2);
    call write~int(50, ~#dev_table.base, ~#dev_table.offset + 875 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 875 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 875 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 875 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 875 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 875 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 875 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 875 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 875 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 875 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 875 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 900 + 0, 2);
    call write~int(1962, ~#dev_table.base, ~#dev_table.offset + 900 + 2, 2);
    call write~int(17, ~#dev_table.base, ~#dev_table.offset + 900 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 900 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 900 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 900 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 900 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 900 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 900 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 900 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 900 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 900 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 900 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 925 + 0, 2);
    call write~int(1962, ~#dev_table.base, ~#dev_table.offset + 925 + 2, 2);
    call write~int(24, ~#dev_table.base, ~#dev_table.offset + 925 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 925 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 925 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 925 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 925 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 925 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 925 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 925 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 925 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 925 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 925 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 950 + 0, 2);
    call write~int(1501, ~#dev_table.base, ~#dev_table.offset + 950 + 2, 2);
    call write~int(65333, ~#dev_table.base, ~#dev_table.offset + 950 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 950 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 950 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 950 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 950 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 950 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 950 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 950 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 950 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 950 + 16, 1);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 950 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 975 + 0, 2);
    call write~int(2106, ~#dev_table.base, ~#dev_table.offset + 975 + 2, 2);
    call write~int(13569, ~#dev_table.base, ~#dev_table.offset + 975 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 975 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 975 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 975 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 975 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 975 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 975 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 975 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 975 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 975 + 16, 1);
    call write~int(4, ~#dev_table.base, ~#dev_table.offset + 975 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 1000 + 0, 2);
    call write~int(3420, ~#dev_table.base, ~#dev_table.offset + 1000 + 2, 2);
    call write~int(40962, ~#dev_table.base, ~#dev_table.offset + 1000 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1000 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1000 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1000 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1000 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1000 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1000 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1000 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1000 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1000 + 16, 1);
    call write~int(4, ~#dev_table.base, ~#dev_table.offset + 1000 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 1025 + 0, 2);
    call write~int(1003, ~#dev_table.base, ~#dev_table.offset + 1025 + 2, 2);
    call write~int(30214, ~#dev_table.base, ~#dev_table.offset + 1025 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1025 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1025 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1025 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1025 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1025 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1025 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1025 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1025 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1025 + 16, 1);
    call write~int(5, ~#dev_table.base, ~#dev_table.offset + 1025 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 1050 + 0, 2);
    call write~int(1003, ~#dev_table.base, ~#dev_table.offset + 1050 + 2, 2);
    call write~int(30227, ~#dev_table.base, ~#dev_table.offset + 1050 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1050 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1050 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1050 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1050 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1050 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1050 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1050 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1050 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1050 + 16, 1);
    call write~int(6, ~#dev_table.base, ~#dev_table.offset + 1050 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 1075 + 0, 2);
    call write~int(4977, ~#dev_table.base, ~#dev_table.offset + 1075 + 2, 2);
    call write~int(20, ~#dev_table.base, ~#dev_table.offset + 1075 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1075 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1075 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1075 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1075 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1075 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1075 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1075 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1075 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1075 + 16, 1);
    call write~int(6, ~#dev_table.base, ~#dev_table.offset + 1075 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 1100 + 0, 2);
    call write~int(4977, ~#dev_table.base, ~#dev_table.offset + 1100 + 2, 2);
    call write~int(19, ~#dev_table.base, ~#dev_table.offset + 1100 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1100 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1100 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1100 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1100 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1100 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1100 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1100 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1100 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1100 + 16, 1);
    call write~int(6, ~#dev_table.base, ~#dev_table.offset + 1100 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 1125 + 0, 2);
    call write~int(6421, ~#dev_table.base, ~#dev_table.offset + 1125 + 2, 2);
    call write~int(8755, ~#dev_table.base, ~#dev_table.offset + 1125 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1125 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1125 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1125 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1125 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1125 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1125 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1125 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1125 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1125 + 16, 1);
    call write~int(6, ~#dev_table.base, ~#dev_table.offset + 1125 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 1150 + 0, 2);
    call write~int(4861, ~#dev_table.base, ~#dev_table.offset + 1150 + 2, 2);
    call write~int(4097, ~#dev_table.base, ~#dev_table.offset + 1150 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1150 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1150 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1150 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1150 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1150 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1150 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1150 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1150 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1150 + 16, 1);
    call write~int(6, ~#dev_table.base, ~#dev_table.offset + 1150 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 1175 + 0, 2);
    call write~int(1962, ~#dev_table.base, ~#dev_table.offset + 1175 + 2, 2);
    call write~int(30227, ~#dev_table.base, ~#dev_table.offset + 1175 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1175 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1175 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1175 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1175 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1175 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1175 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1175 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1175 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1175 + 16, 1);
    call write~int(6, ~#dev_table.base, ~#dev_table.offset + 1175 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 1200 + 0, 2);
    call write~int(3504, ~#dev_table.base, ~#dev_table.offset + 1200 + 2, 2);
    call write~int(4128, ~#dev_table.base, ~#dev_table.offset + 1200 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1200 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1200 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1200 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1200 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1200 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1200 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1200 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1200 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1200 + 16, 1);
    call write~int(6, ~#dev_table.base, ~#dev_table.offset + 1200 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 1225 + 0, 2);
    call write~int(1003, ~#dev_table.base, ~#dev_table.offset + 1225 + 2, 2);
    call write~int(30228, ~#dev_table.base, ~#dev_table.offset + 1225 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1225 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1225 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1225 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1225 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1225 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1225 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1225 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1225 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1225 + 16, 1);
    call write~int(7, ~#dev_table.base, ~#dev_table.offset + 1225 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 1250 + 0, 2);
    call write~int(1003, ~#dev_table.base, ~#dev_table.offset + 1250 + 2, 2);
    call write~int(30231, ~#dev_table.base, ~#dev_table.offset + 1250 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1250 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1250 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1250 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1250 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1250 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1250 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1250 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1250 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1250 + 16, 1);
    call write~int(7, ~#dev_table.base, ~#dev_table.offset + 1250 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 1275 + 0, 2);
    call write~int(5776, ~#dev_table.base, ~#dev_table.offset + 1275 + 2, 2);
    call write~int(1793, ~#dev_table.base, ~#dev_table.offset + 1275 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1275 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1275 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1275 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1275 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1275 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1275 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1275 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1275 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1275 + 16, 1);
    call write~int(7, ~#dev_table.base, ~#dev_table.offset + 1275 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 1300 + 0, 2);
    call write~int(5463, ~#dev_table.base, ~#dev_table.offset + 1300 + 2, 2);
    call write~int(2, ~#dev_table.base, ~#dev_table.offset + 1300 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1300 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1300 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1300 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1300 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1300 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1300 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1300 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1300 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1300 + 16, 1);
    call write~int(7, ~#dev_table.base, ~#dev_table.offset + 1300 + 17, 8);
    call write~int(3, ~#dev_table.base, ~#dev_table.offset + 1325 + 0, 2);
    call write~int(1003, ~#dev_table.base, ~#dev_table.offset + 1325 + 2, 2);
    call write~int(30229, ~#dev_table.base, ~#dev_table.offset + 1325 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1325 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1325 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1325 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1325 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1325 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1325 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1325 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1325 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1325 + 16, 1);
    call write~int(8, ~#dev_table.base, ~#dev_table.offset + 1325 + 17, 8);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1350 + 0, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1350 + 2, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1350 + 4, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1350 + 6, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1350 + 8, 2);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1350 + 10, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1350 + 11, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1350 + 12, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1350 + 13, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1350 + 14, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1350 + 15, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1350 + 16, 1);
    call write~int(0, ~#dev_table.base, ~#dev_table.offset + 1350 + 17, 8);
    call ~#hw_rates.base, ~#hw_rates.offset := #Ultimate.alloc(4);
    call write~int(130, ~#hw_rates.base, ~#hw_rates.offset + 0, 1);
    call write~int(132, ~#hw_rates.base, ~#hw_rates.offset + 1, 1);
    call write~int(11, ~#hw_rates.base, ~#hw_rates.offset + 2, 1);
    call write~int(22, ~#hw_rates.base, ~#hw_rates.offset + 3, 1);
    call ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset := #Ultimate.alloc(124);
    call write~$Pointer$(0, 0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 0 + 0, 8);
    call write~$Pointer$(0, 1953723489, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 0 + 8, 8);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 16, 8);
    call write~$Pointer$(~#boot_tvec_bases.base, ~#boot_tvec_bases.offset, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 24, 8);
    call write~$Pointer$(#funAddr~at76_ledtrig_tx_timerfunc.base, #funAddr~at76_ledtrig_tx_timerfunc.offset, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 32, 8);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 40, 8);
    call write~int(-1, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 48, 4);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 52, 4);
    call write~$Pointer$(0, 0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 56, 8);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 0, 1);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 1, 1);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 2, 1);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 3, 1);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 4, 1);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 5, 1);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 6, 1);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 7, 1);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 8, 1);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 9, 1);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 10, 1);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 11, 1);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 12, 1);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 13, 1);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 14, 1);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 64 + 15, 1);
    call #t~nondet263.base, #t~nondet263.offset := #Ultimate.alloc(236);
    call write~$Pointer$(#t~nondet263.base, #t~nondet263.offset, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 80 + 0, 8);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 80 + 8 + 0, 8);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 80 + 8 + 8, 8);
    call #t~nondet264.base, #t~nondet264.offset := #Ultimate.alloc(236);
    call write~$Pointer$(#t~nondet264.base, #t~nondet264.offset, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 80 + 24, 8);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 80 + 32, 4);
    call write~int(0, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset + 80 + 36, 8);
    havoc #t~nondet263.base, #t~nondet263.offset;
    havoc #t~nondet264.base, #t~nondet264.offset;
    call ~#ledtrig_tx.base, ~#ledtrig_tx.offset := #Ultimate.alloc(8);
    call write~$Pointer$(0, 0, ~#ledtrig_tx.base, ~#ledtrig_tx.offset, 8);
    call ~#at76_ops.base, ~#at76_ops.offset := #Ultimate.alloc(632);
    call write~$Pointer$(#funAddr~at76_mac80211_tx.base, #funAddr~at76_mac80211_tx.offset, ~#at76_ops.base, ~#at76_ops.offset + 0, 8);
    call write~$Pointer$(#funAddr~at76_mac80211_start.base, #funAddr~at76_mac80211_start.offset, ~#at76_ops.base, ~#at76_ops.offset + 8, 8);
    call write~$Pointer$(#funAddr~at76_mac80211_stop.base, #funAddr~at76_mac80211_stop.offset, ~#at76_ops.base, ~#at76_ops.offset + 16, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 40, 8);
    call write~$Pointer$(#funAddr~at76_add_interface.base, #funAddr~at76_add_interface.offset, ~#at76_ops.base, ~#at76_ops.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 56, 8);
    call write~$Pointer$(#funAddr~at76_remove_interface.base, #funAddr~at76_remove_interface.offset, ~#at76_ops.base, ~#at76_ops.offset + 64, 8);
    call write~$Pointer$(#funAddr~at76_config.base, #funAddr~at76_config.offset, ~#at76_ops.base, ~#at76_ops.offset + 72, 8);
    call write~$Pointer$(#funAddr~at76_bss_info_changed.base, #funAddr~at76_bss_info_changed.offset, ~#at76_ops.base, ~#at76_ops.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 96, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 104, 8);
    call write~$Pointer$(#funAddr~at76_configure_filter.base, #funAddr~at76_configure_filter.offset, ~#at76_ops.base, ~#at76_ops.offset + 112, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 120, 8);
    call write~$Pointer$(#funAddr~at76_set_key.base, #funAddr~at76_set_key.offset, ~#at76_ops.base, ~#at76_ops.offset + 128, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 136, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 144, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 152, 8);
    call write~$Pointer$(#funAddr~at76_hw_scan.base, #funAddr~at76_hw_scan.offset, ~#at76_ops.base, ~#at76_ops.offset + 160, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 168, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 176, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 184, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 192, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 200, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 208, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 216, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 224, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 232, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 240, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 248, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 256, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 264, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 272, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 280, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 288, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 296, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 304, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 312, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 320, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 328, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 336, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 344, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 352, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 360, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 368, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 376, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 384, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 392, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 400, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 408, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 416, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 424, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 432, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 440, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 448, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 456, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 464, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 472, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 480, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 488, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 496, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 504, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 512, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 520, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 528, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 536, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 544, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 552, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 560, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 568, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 576, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 584, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 592, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 600, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 608, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 616, 8);
    call write~$Pointer$(0, 0, ~#at76_ops.base, ~#at76_ops.offset + 624, 8);
    call ~#at76_rates.base, ~#at76_rates.offset := #Ultimate.alloc(40);
    call write~int(0, ~#at76_rates.base, ~#at76_rates.offset + 0 + 0, 4);
    call write~int(10, ~#at76_rates.base, ~#at76_rates.offset + 0 + 4, 2);
    call write~int(0, ~#at76_rates.base, ~#at76_rates.offset + 0 + 6, 2);
    call write~int(0, ~#at76_rates.base, ~#at76_rates.offset + 0 + 8, 2);
    call write~int(0, ~#at76_rates.base, ~#at76_rates.offset + 10 + 0, 4);
    call write~int(20, ~#at76_rates.base, ~#at76_rates.offset + 10 + 4, 2);
    call write~int(1, ~#at76_rates.base, ~#at76_rates.offset + 10 + 6, 2);
    call write~int(0, ~#at76_rates.base, ~#at76_rates.offset + 10 + 8, 2);
    call write~int(0, ~#at76_rates.base, ~#at76_rates.offset + 20 + 0, 4);
    call write~int(55, ~#at76_rates.base, ~#at76_rates.offset + 20 + 4, 2);
    call write~int(2, ~#at76_rates.base, ~#at76_rates.offset + 20 + 6, 2);
    call write~int(0, ~#at76_rates.base, ~#at76_rates.offset + 20 + 8, 2);
    call write~int(0, ~#at76_rates.base, ~#at76_rates.offset + 30 + 0, 4);
    call write~int(110, ~#at76_rates.base, ~#at76_rates.offset + 30 + 4, 2);
    call write~int(3, ~#at76_rates.base, ~#at76_rates.offset + 30 + 6, 2);
    call write~int(0, ~#at76_rates.base, ~#at76_rates.offset + 30 + 8, 2);
    call ~#at76_channels.base, ~#at76_channels.offset := #Ultimate.alloc(742);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 0 + 0, 4);
    call write~int(2412, ~#at76_channels.base, ~#at76_channels.offset + 0 + 4, 2);
    call write~int(1, ~#at76_channels.base, ~#at76_channels.offset + 0 + 6, 2);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 0 + 8, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 0 + 12, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 0 + 16, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 0 + 20, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 0 + 24, 1);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 0 + 25, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 0 + 29, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 0 + 33, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 0 + 37, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 0 + 41, 8);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 0 + 49, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 53 + 0, 4);
    call write~int(2417, ~#at76_channels.base, ~#at76_channels.offset + 53 + 4, 2);
    call write~int(2, ~#at76_channels.base, ~#at76_channels.offset + 53 + 6, 2);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 53 + 8, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 53 + 12, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 53 + 16, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 53 + 20, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 53 + 24, 1);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 53 + 25, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 53 + 29, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 53 + 33, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 53 + 37, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 53 + 41, 8);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 53 + 49, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 106 + 0, 4);
    call write~int(2422, ~#at76_channels.base, ~#at76_channels.offset + 106 + 4, 2);
    call write~int(3, ~#at76_channels.base, ~#at76_channels.offset + 106 + 6, 2);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 106 + 8, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 106 + 12, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 106 + 16, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 106 + 20, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 106 + 24, 1);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 106 + 25, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 106 + 29, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 106 + 33, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 106 + 37, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 106 + 41, 8);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 106 + 49, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 159 + 0, 4);
    call write~int(2427, ~#at76_channels.base, ~#at76_channels.offset + 159 + 4, 2);
    call write~int(4, ~#at76_channels.base, ~#at76_channels.offset + 159 + 6, 2);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 159 + 8, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 159 + 12, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 159 + 16, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 159 + 20, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 159 + 24, 1);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 159 + 25, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 159 + 29, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 159 + 33, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 159 + 37, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 159 + 41, 8);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 159 + 49, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 212 + 0, 4);
    call write~int(2432, ~#at76_channels.base, ~#at76_channels.offset + 212 + 4, 2);
    call write~int(5, ~#at76_channels.base, ~#at76_channels.offset + 212 + 6, 2);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 212 + 8, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 212 + 12, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 212 + 16, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 212 + 20, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 212 + 24, 1);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 212 + 25, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 212 + 29, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 212 + 33, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 212 + 37, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 212 + 41, 8);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 212 + 49, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 265 + 0, 4);
    call write~int(2437, ~#at76_channels.base, ~#at76_channels.offset + 265 + 4, 2);
    call write~int(6, ~#at76_channels.base, ~#at76_channels.offset + 265 + 6, 2);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 265 + 8, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 265 + 12, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 265 + 16, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 265 + 20, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 265 + 24, 1);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 265 + 25, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 265 + 29, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 265 + 33, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 265 + 37, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 265 + 41, 8);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 265 + 49, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 318 + 0, 4);
    call write~int(2442, ~#at76_channels.base, ~#at76_channels.offset + 318 + 4, 2);
    call write~int(7, ~#at76_channels.base, ~#at76_channels.offset + 318 + 6, 2);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 318 + 8, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 318 + 12, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 318 + 16, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 318 + 20, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 318 + 24, 1);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 318 + 25, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 318 + 29, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 318 + 33, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 318 + 37, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 318 + 41, 8);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 318 + 49, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 371 + 0, 4);
    call write~int(2447, ~#at76_channels.base, ~#at76_channels.offset + 371 + 4, 2);
    call write~int(8, ~#at76_channels.base, ~#at76_channels.offset + 371 + 6, 2);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 371 + 8, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 371 + 12, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 371 + 16, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 371 + 20, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 371 + 24, 1);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 371 + 25, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 371 + 29, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 371 + 33, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 371 + 37, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 371 + 41, 8);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 371 + 49, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 424 + 0, 4);
    call write~int(2452, ~#at76_channels.base, ~#at76_channels.offset + 424 + 4, 2);
    call write~int(9, ~#at76_channels.base, ~#at76_channels.offset + 424 + 6, 2);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 424 + 8, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 424 + 12, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 424 + 16, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 424 + 20, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 424 + 24, 1);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 424 + 25, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 424 + 29, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 424 + 33, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 424 + 37, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 424 + 41, 8);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 424 + 49, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 477 + 0, 4);
    call write~int(2457, ~#at76_channels.base, ~#at76_channels.offset + 477 + 4, 2);
    call write~int(10, ~#at76_channels.base, ~#at76_channels.offset + 477 + 6, 2);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 477 + 8, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 477 + 12, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 477 + 16, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 477 + 20, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 477 + 24, 1);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 477 + 25, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 477 + 29, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 477 + 33, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 477 + 37, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 477 + 41, 8);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 477 + 49, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 530 + 0, 4);
    call write~int(2462, ~#at76_channels.base, ~#at76_channels.offset + 530 + 4, 2);
    call write~int(11, ~#at76_channels.base, ~#at76_channels.offset + 530 + 6, 2);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 530 + 8, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 530 + 12, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 530 + 16, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 530 + 20, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 530 + 24, 1);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 530 + 25, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 530 + 29, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 530 + 33, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 530 + 37, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 530 + 41, 8);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 530 + 49, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 583 + 0, 4);
    call write~int(2467, ~#at76_channels.base, ~#at76_channels.offset + 583 + 4, 2);
    call write~int(12, ~#at76_channels.base, ~#at76_channels.offset + 583 + 6, 2);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 583 + 8, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 583 + 12, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 583 + 16, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 583 + 20, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 583 + 24, 1);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 583 + 25, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 583 + 29, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 583 + 33, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 583 + 37, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 583 + 41, 8);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 583 + 49, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 636 + 0, 4);
    call write~int(2472, ~#at76_channels.base, ~#at76_channels.offset + 636 + 4, 2);
    call write~int(13, ~#at76_channels.base, ~#at76_channels.offset + 636 + 6, 2);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 636 + 8, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 636 + 12, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 636 + 16, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 636 + 20, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 636 + 24, 1);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 636 + 25, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 636 + 29, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 636 + 33, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 636 + 37, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 636 + 41, 8);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 636 + 49, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 689 + 0, 4);
    call write~int(2484, ~#at76_channels.base, ~#at76_channels.offset + 689 + 4, 2);
    call write~int(14, ~#at76_channels.base, ~#at76_channels.offset + 689 + 6, 2);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 689 + 8, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 689 + 12, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 689 + 16, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 689 + 20, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 689 + 24, 1);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 689 + 25, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 689 + 29, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 689 + 33, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 689 + 37, 4);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 689 + 41, 8);
    call write~int(0, ~#at76_channels.base, ~#at76_channels.offset + 689 + 49, 4);
    call ~#at76_supported_band.base, ~#at76_supported_band.offset := #Ultimate.alloc(62);
    call write~$Pointer$(~#at76_channels.base, ~#at76_channels.offset, ~#at76_supported_band.base, ~#at76_supported_band.offset + 0, 8);
    call write~$Pointer$(~#at76_rates.base, ~#at76_rates.offset, ~#at76_supported_band.base, ~#at76_supported_band.offset + 8, 8);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 16, 4);
    call write~int(14, ~#at76_supported_band.base, ~#at76_supported_band.offset + 20, 4);
    call write~int(4, ~#at76_supported_band.base, ~#at76_supported_band.offset + 24, 4);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 0, 2);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 2, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 3, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 4, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 5 + 0 + 0, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 5 + 0 + 1, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 5 + 0 + 2, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 5 + 0 + 3, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 5 + 0 + 4, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 5 + 0 + 5, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 5 + 0 + 6, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 5 + 0 + 7, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 5 + 0 + 8, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 5 + 0 + 9, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 5 + 10, 2);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 5 + 12, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 5 + 13 + 0, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 5 + 13 + 1, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 28 + 5 + 13 + 2, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 49 + 0, 1);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 49 + 1, 4);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 49 + 5 + 0, 2);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 49 + 5 + 2, 2);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 49 + 5 + 4, 2);
    call write~int(0, ~#at76_supported_band.base, ~#at76_supported_band.offset + 49 + 5 + 6, 2);
    call ~#at76_driver.base, ~#at76_driver.offset := #Ultimate.alloc(285);
    call #t~nondet1344.base, #t~nondet1344.offset := #Ultimate.alloc(13);
    call write~$Pointer$(#t~nondet1344.base, #t~nondet1344.offset, ~#at76_driver.base, ~#at76_driver.offset + 0, 8);
    call write~$Pointer$(#funAddr~at76_probe.base, #funAddr~at76_probe.offset, ~#at76_driver.base, ~#at76_driver.offset + 8, 8);
    call write~$Pointer$(#funAddr~at76_disconnect.base, #funAddr~at76_disconnect.offset, ~#at76_driver.base, ~#at76_driver.offset + 16, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 56, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 64, 8);
    call write~$Pointer$(~#dev_table.base, ~#dev_table.offset, ~#at76_driver.base, ~#at76_driver.offset + 72, 8);
    call write~int(0, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union1410.head, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union1410.tail, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 4, 4);
    call write~int(0, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union1411.__padding[0], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0, 1);
    call write~int(#t~union1411.__padding[1], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union1411.__padding[2], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[3], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[4], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[5], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[6], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[7], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[8], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[9], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[10], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[11], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[12], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[13], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[14], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[15], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[16], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[17], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[18], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[19], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[20], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[21], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[22], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1411.__padding[23], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union1411.dep_map.key.base, #t~union1411.dep_map.key.offset, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union1411.dep_map.class_cache.base[0], #t~union1411.dep_map.class_cache.offset[0], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union1411.dep_map.class_cache.base[1], #t~union1411.dep_map.class_cache.offset[1], ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union1411.dep_map.name.base, #t~union1411.dep_map.name.offset, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union1411.dep_map.cpu, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union1411.dep_map.ip, ~#at76_driver.base, ~#at76_driver.offset + 80 + 0 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 80 + 68 + 0, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 80 + 68 + 8, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 0 + 8, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 0 + 16, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 0 + 24, 8);
    call write~int(0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 0 + 32, 1);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 0 + 33, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 0 + 41, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 0 + 49, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 0 + 57, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 0 + 65, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 0 + 73, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 0 + 81, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 0 + 89, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 0 + 97, 8);
    call write~$Pointer$(0, 0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 0 + 105, 8);
    call write~int(0, ~#at76_driver.base, ~#at76_driver.offset + 164 + 113, 4);
    call write~int(0, ~#at76_driver.base, ~#at76_driver.offset + 281, 1);
    call write~int(0, ~#at76_driver.base, ~#at76_driver.offset + 282, 1);
    call write~int(1, ~#at76_driver.base, ~#at76_driver.offset + 283, 1);
    call write~int(0, ~#at76_driver.base, ~#at76_driver.offset + 284, 1);
    havoc #t~nondet1344.base, #t~nondet1344.offset;
    havoc #t~union1410.head, #t~union1410.tail;
    havoc #t~union1411.__padding, #t~union1411.dep_map.key.base, #t~union1411.dep_map.key.offset, #t~union1411.dep_map.class_cache.base, #t~union1411.dep_map.class_cache.offset, #t~union1411.dep_map.name.base, #t~union1411.dep_map.name.offset, #t~union1411.dep_map.cpu, #t~union1411.dep_map.ip;
    call ~#set_impl.base, ~#set_impl.offset := #Ultimate.alloc(120);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 0, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 8, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 16, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 56, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 64, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 72, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 96, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 104, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 112, 8);
    ~LDV_SKBS.base, ~LDV_SKBS.offset := 0, 0;
    assume true;
    return;
}

procedure ULTIMATE.init() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~ldv_state_variable_3, ~ldv_state_variable_2, ~ref_cnt, ~ldv_state_variable_1, ~usb_counter, ~ldv_state_variable_0, ~preambles.base, ~preambles.offset, ~tx_activity, ~ldv_retval_0, ~ldv_retval_1, ~ldv_retval_2, ~last_index, ~at76_driver_group1.base, ~at76_driver_group1.offset, ~at76_ops_group1.base, ~at76_ops_group1.offset, ~at76_ops_group0.base, ~at76_ops_group0.offset, ~at76_debug, ~#fw_mutex.base, ~#fw_mutex.offset, ~#firmwares.base, ~#firmwares.offset, ~#dev_table.base, ~#dev_table.offset, ~#hw_rates.base, ~#hw_rates.offset, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset, ~#ledtrig_tx.base, ~#ledtrig_tx.offset, ~#at76_ops.base, ~#at76_ops.offset, ~#at76_rates.base, ~#at76_rates.offset, ~#at76_channels.base, ~#at76_channels.offset, ~#at76_supported_band.base, ~#at76_supported_band.offset, ~#at76_driver.base, ~#at76_driver.offset, ~#set_impl.base, ~#set_impl.offset, ~LDV_SKBS.base, ~LDV_SKBS.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length;

implementation ldv_error() returns (){
  loc7:
    assume !false;
    goto loc8;
  loc8:
    assert false;
}

procedure ldv_error() returns ();
modifies ;

implementation at76_mod_init() returns (#res : int){
    var #t~nondet1345.base : int, #t~nondet1345.offset : int;
    var #t~ret1346 : int;
    var #t~nondet1347.base : int, #t~nondet1347.offset : int;
    var #t~nondet1348.base : int, #t~nondet1348.offset : int;
    var #t~ret1349 : int;
    var #t~nondet1350.base : int, #t~nondet1350.offset : int;
    var #t~ret1351 : int;
    var #t~nondet1352.base : int, #t~nondet1352.offset : int;
    var ~result~852 : int;
    var ~#__key~852.base : int, ~#__key~852.offset : int;

  loc9:
    havoc ~result~852;
    call ~#__key~852.base, ~#__key~852.offset := #Ultimate.alloc(8);
    call #t~nondet1345.base, #t~nondet1345.offset := #Ultimate.alloc(55);
    call #t~ret1346 := printk(#t~nondet1345.base, #t~nondet1345.offset);
    assume -2147483648 <= #t~ret1346 && #t~ret1346 <= 2147483647;
    havoc #t~nondet1345.base, #t~nondet1345.offset;
    havoc #t~ret1346;
    call #t~nondet1347.base, #t~nondet1347.offset := #Ultimate.alloc(10);
    call __mutex_init(~#fw_mutex.base, ~#fw_mutex.offset, #t~nondet1347.base, #t~nondet1347.offset, ~#__key~852.base, ~#__key~852.offset);
    havoc #t~nondet1347.base, #t~nondet1347.offset;
    call #t~nondet1348.base, #t~nondet1348.offset := #Ultimate.alloc(13);
    call #t~ret1349 := ldv_usb_register_driver_14(~#at76_driver.base, ~#at76_driver.offset, ~#__this_module.base, ~#__this_module.offset, #t~nondet1348.base, #t~nondet1348.offset);
    assume -2147483648 <= #t~ret1349 && #t~ret1349 <= 2147483647;
    ~result~852 := #t~ret1349;
    havoc #t~nondet1348.base, #t~nondet1348.offset;
    havoc #t~ret1349;
    assume !(~result~852 < 0);
    call #t~nondet1352.base, #t~nondet1352.offset := #Ultimate.alloc(12);
    call led_trigger_register_simple(#t~nondet1352.base, #t~nondet1352.offset, ~#ledtrig_tx.base, ~#ledtrig_tx.offset);
    havoc #t~nondet1352.base, #t~nondet1352.offset;
    #res := ~result~852;
    call ULTIMATE.dealloc(~#__key~852.base, ~#__key~852.offset);
    havoc ~#__key~852.base, ~#__key~852.offset;
    assume true;
    return;
}

procedure at76_mod_init() returns (#res : int);
modifies #valid, #length, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int, ~at76_driver_group1.base, ~at76_driver_group1.offset, ~ldv_state_variable_1, ~usb_counter;

implementation ldv_check_final_state() returns (){
    var #t~ret1407 : int;
    var ~tmp___7~981 : int;

  loc10:
    havoc ~tmp___7~981;
    call #t~ret1407 := ldv_set_is_empty(~LDV_SKBS.base, ~LDV_SKBS.offset);
    assume -2147483648 <= #t~ret1407 && #t~ret1407 <= 2147483647;
    ~tmp___7~981 := #t~ret1407;
    havoc #t~ret1407;
    assume !(~tmp___7~981 != 0);
    call ldv_error();
    return;
}

procedure ldv_check_final_state() returns ();
modifies ;

implementation ldv_zalloc(#in~size : int) returns (#res.base : int, #res.offset : int){
    var #t~nondet83 : int;
    var #t~malloc84.base : int, #t~malloc84.offset : int;
    var ~size : int;
    var ~p~65.base : int, ~p~65.offset : int;
    var ~tmp~65.base : int, ~tmp~65.offset : int;
    var ~tmp___0~65 : int;

  loc11:
    ~size := #in~size;
    havoc ~p~65.base, ~p~65.offset;
    havoc ~tmp~65.base, ~tmp~65.offset;
    havoc ~tmp___0~65;
    assume -2147483648 <= #t~nondet83 && #t~nondet83 <= 2147483647;
    ~tmp___0~65 := #t~nondet83;
    havoc #t~nondet83;
    assume ~tmp___0~65 != 0;
    #res.base, #res.offset := 0, 0;
    assume true;
    return;
}

procedure ldv_zalloc(#in~size : int) returns (#res.base : int, #res.offset : int);
modifies #valid, #length, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;

implementation ldv_usb_driver_1() returns (){
    var #t~ret1357.base : int, #t~ret1357.offset : int;
    var ~tmp~862.base : int, ~tmp~862.offset : int;

  loc12:
    havoc ~tmp~862.base, ~tmp~862.offset;
    call #t~ret1357.base, #t~ret1357.offset := ldv_zalloc(1560);
    ~tmp~862.base, ~tmp~862.offset := #t~ret1357.base, #t~ret1357.offset;
    havoc #t~ret1357.base, #t~ret1357.offset;
    ~at76_driver_group1.base, ~at76_driver_group1.offset := ~tmp~862.base, ~tmp~862.offset;
    assume true;
    return;
}

procedure ldv_usb_driver_1() returns ();
modifies ~at76_driver_group1.base, ~at76_driver_group1.offset, #valid, #length, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;

implementation ULTIMATE.start() returns (){
    var #t~ret1412 : int;

  loc13:
    call ULTIMATE.init();
    call #t~ret1412 := main();
    return;
}

procedure ULTIMATE.start() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~ldv_state_variable_3, ~ldv_state_variable_2, ~ref_cnt, ~ldv_state_variable_1, ~usb_counter, ~ldv_state_variable_0, ~preambles.base, ~preambles.offset, ~tx_activity, ~ldv_retval_0, ~ldv_retval_1, ~ldv_retval_2, ~last_index, ~at76_driver_group1.base, ~at76_driver_group1.offset, ~at76_ops_group1.base, ~at76_ops_group1.offset, ~at76_ops_group0.base, ~at76_ops_group0.offset, ~at76_debug, ~#fw_mutex.base, ~#fw_mutex.offset, ~#firmwares.base, ~#firmwares.offset, ~#dev_table.base, ~#dev_table.offset, ~#hw_rates.base, ~#hw_rates.offset, ~#ledtrig_tx_timer.base, ~#ledtrig_tx_timer.offset, ~#ledtrig_tx.base, ~#ledtrig_tx.offset, ~#at76_ops.base, ~#at76_ops.offset, ~#at76_rates.base, ~#at76_rates.offset, ~#at76_channels.base, ~#at76_channels.offset, ~#at76_supported_band.base, ~#at76_supported_band.offset, ~#at76_driver.base, ~#at76_driver.offset, ~#set_impl.base, ~#set_impl.offset, ~LDV_SKBS.base, ~LDV_SKBS.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_state_variable_3, ~ldv_state_variable_2, ~ldv_retval_0, ~ldv_retval_1, ~ldv_retval_2;
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~last_index, ~at76_ops_group0.base, ~at76_ops_group0.offset, ~at76_ops_group1.base, ~at76_ops_group1.offset, ~ldv_state_variable_1, ~tx_activity, ~at76_driver_group1.base, ~at76_driver_group1.offset, ~usb_counter, ~ref_cnt, ~ldv_state_variable_0, ~ldv_state_variable_3, ~ldv_state_variable_2, ~ldv_retval_0, ~ldv_retval_1, ~ldv_retval_2;

implementation ldv_initialize() returns (){
  loc14:
    call ldv_set_init(~LDV_SKBS.base, ~LDV_SKBS.offset);
    assume true;
    return;
}

procedure ldv_initialize() returns ();
modifies ~last_index;

procedure usb_submit_urb(#in~116.base : int, #in~116.offset : int, #in~117 : int) returns (#res : int);
modifies ;

procedure usb_put_dev(#in~101.base : int, #in~101.offset : int) returns ();
modifies ;

procedure usb_get_dev(#in~100.base : int, #in~100.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure skb_push(#in~70.base : int, #in~70.offset : int, #in~71 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure cancel_delayed_work(#in~48.base : int, #in~48.offset : int) returns (#res : ~bool);
modifies ;

procedure dev_printk(#in~59.base : int, #in~59.offset : int, #in~60.base : int, #in~60.offset : int, #in~61.base : int, #in~61.offset : int) returns (#res : int);
modifies ;

procedure ieee80211_tx_status_irqsafe(#in~177.base : int, #in~177.offset : int, #in~178.base : int, #in~178.offset : int) returns ();
modifies ;

procedure ieee80211_scan_completed(#in~181.base : int, #in~181.offset : int, #in~182 : int) returns ();
modifies ;

procedure mutex_unlock(#in~34.base : int, #in~34.offset : int) returns ();
modifies ;

procedure __memcpy(#in~19.base : int, #in~19.offset : int, #in~20.base : int, #in~20.offset : int, #in~21 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __VERIFIER_nondet_uint() returns (#res : int);
modifies ;

procedure ieee80211_unregister_hw(#in~173.base : int, #in~173.offset : int) returns ();
modifies ;

procedure tasklet_kill(#in~94.base : int, #in~94.offset : int) returns ();
modifies ;

procedure cfg80211_find_ie(#in~151 : int, #in~152.base : int, #in~152.offset : int, #in~153 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __kmalloc(#in~50 : int, #in~51 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure ieee80211_channel_to_frequency(#in~149 : int, #in~150 : int) returns (#res : int);
modifies ;

procedure read~$Pointer$(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value.base : int, #value.offset : int);
ensures #value.base == #memory_$Pointer$.base[#ptr.base,#ptr.offset] && #value.offset == #memory_$Pointer$.offset[#ptr.base,#ptr.offset];

procedure __VERIFIER_nondet_u32() returns (#res : ~u32);
modifies ;

procedure ULTIMATE.dealloc(~addr.base : int, ~addr.offset : int) returns ();
free ensures #valid == old(#valid)[~addr.base := 0];
modifies #valid;

procedure printk(#in~3.base : int, #in~3.offset : int) returns (#res : int);
modifies ;

procedure tasklet_init(#in~95.base : int, #in~95.offset : int, #in~96.base : int, #in~96.offset : int, #in~97 : int) returns ();
modifies ;

procedure led_trigger_event(#in~145.base : int, #in~145.offset : int, #in~146 : int) returns ();
modifies ;

procedure calloc(#in~nmemb : int, #in~size : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure dev_err(#in~62.base : int, #in~62.offset : int, #in~63.base : int, #in~63.offset : int) returns (#res : int);
modifies ;

procedure cancel_work_sync(#in~47.base : int, #in~47.offset : int) returns (#res : ~bool);
modifies ;

procedure __mutex_init(#in~29.base : int, #in~29.offset : int, #in~30.base : int, #in~30.offset : int, #in~31.base : int, #in~31.offset : int) returns ();
modifies ;

procedure ieee80211_alloc_hw(#in~170 : int, #in~171.base : int, #in~171.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure ieee80211_queue_delayed_work(#in~185.base : int, #in~185.offset : int, #in~186.base : int, #in~186.offset : int, #in~187 : int) returns ();
modifies ;

procedure mutex_lock_nested(#in~32.base : int, #in~32.offset : int, #in~33 : int) returns ();
modifies ;

procedure lockdep_init_map(#in~25.base : int, #in~25.offset : int, #in~26.base : int, #in~26.offset : int, #in~27.base : int, #in~27.offset : int, #in~28 : int) returns ();
modifies ;

procedure release_firmware(#in~141.base : int, #in~141.offset : int) returns ();
modifies ;

procedure led_trigger_register_simple(#in~142.base : int, #in~142.offset : int, #in~143.base : int, #in~143.offset : int) returns ();
modifies ;

procedure __dev_kfree_skb_any(#in~129.base : int, #in~129.offset : int, #in~130 : int) returns ();
modifies ;

procedure usb_alloc_urb(#in~113 : int, #in~114 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __VERIFIER_nondet_int() returns (#res : int);
modifies ;

procedure ieee80211_rx_irqsafe(#in~175.base : int, #in~175.offset : int, #in~176.base : int, #in~176.offset : int) returns ();
modifies ;

procedure ieee80211_register_hw(#in~172.base : int, #in~172.offset : int) returns (#res : int);
modifies ;

procedure _dev_info(#in~64.base : int, #in~64.offset : int, #in~65.base : int, #in~65.offset : int) returns (#res : int);
modifies ;

procedure #Ultimate.alloc(~size : int) returns (#res.base : int, #res.offset : int);
ensures old(#valid)[#res.base] == 0;
ensures #valid == old(#valid)[#res.base := 1];
ensures #res.offset == 0;
ensures #res.base != 0;
ensures #length == old(#length)[#res.base := ~size];
modifies #valid, #length;

procedure ULTIMATE.free(~addr.base : int, ~addr.offset : int) returns ();
free requires ~addr.offset == 0;
free requires ~addr.base == 0 || #valid[~addr.base] == 1;
free ensures (if ~addr.base == 0 then #valid == old(#valid) else #valid == old(#valid)[~addr.base := 0]);
modifies #valid;

procedure read~int(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value : int);
ensures #value == #memory_int[#ptr.base,#ptr.offset];

procedure usb_deregister(#in~106.base : int, #in~106.offset : int) returns ();
modifies ;

procedure del_timer_sync(#in~43.base : int, #in~43.offset : int) returns (#res : int);
modifies ;

procedure __tasklet_schedule(#in~92.base : int, #in~92.offset : int) returns ();
modifies ;

procedure skb_trim(#in~80.base : int, #in~80.offset : int, #in~81 : int) returns ();
modifies ;

procedure usb_kill_urb(#in~118.base : int, #in~118.offset : int) returns ();
modifies ;

procedure print_hex_dump(#in~4.base : int, #in~4.offset : int, #in~5.base : int, #in~5.offset : int, #in~6 : int, #in~7 : int, #in~8 : int, #in~9.base : int, #in~9.offset : int, #in~10 : int, #in~11 : int) returns ();
modifies ;

procedure kfree(#in~49.base : int, #in~49.offset : int) returns ();
modifies ;

procedure write~int(#value : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset]] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #memory_$Pointer$.offset[#ptr.base,#ptr.offset]];
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #value];

procedure skb_pull(#in~72.base : int, #in~72.offset : int, #in~73 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __VERIFIER_error() returns ();
modifies ;

procedure schedule_timeout_interruptible(#in~66 : int) returns (#res : int);
modifies ;

procedure ieee80211_stop_queues(#in~179.base : int, #in~179.offset : int) returns ();
modifies ;

procedure __VERIFIER_assume(#in~expression : int) returns ();
modifies ;

procedure ieee80211_free_hw(#in~174.base : int, #in~174.offset : int) returns ();
modifies ;

procedure write~$Pointer$(#value.base : int, #value.offset : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #value.base] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #value.offset];
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #memory_int[#ptr.base,#ptr.offset]];

procedure usb_control_msg(#in~119.base : int, #in~119.offset : int, #in~120 : int, #in~121 : int, #in~122 : int, #in~123 : int, #in~124 : int, #in~125.base : int, #in~125.offset : int, #in~126 : int, #in~127 : int) returns (#res : int);
modifies ;

procedure usb_register_driver(#in~103.base : int, #in~103.offset : int, #in~104.base : int, #in~104.offset : int, #in~105.base : int, #in~105.offset : int) returns (#res : int);
modifies ;

procedure mod_timer(#in~41.base : int, #in~41.offset : int, #in~42 : int) returns (#res : int);
modifies ;

procedure usb_free_urb(#in~115.base : int, #in~115.offset : int) returns ();
modifies ;

procedure memset(#in~22.base : int, #in~22.offset : int, #in~23 : int, #in~24 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure led_trigger_unregister_simple(#in~144.base : int, #in~144.offset : int) returns ();
modifies ;

procedure __VERIFIER_nondet_ulong() returns (#res : int);
modifies ;

procedure init_timer_key(#in~36.base : int, #in~36.offset : int, #in~37 : int, #in~38.base : int, #in~38.offset : int, #in~39.base : int, #in~39.offset : int) returns ();
modifies ;

procedure __init_work(#in~45.base : int, #in~45.offset : int, #in~46 : int) returns ();
modifies ;

procedure warn_slowpath_null(#in~17.base : int, #in~17.offset : int, #in~18 : int) returns ();
modifies ;

procedure ieee80211_queue_work(#in~183.base : int, #in~183.offset : int, #in~184.base : int, #in~184.offset : int) returns ();
modifies ;

procedure skb_put(#in~68.base : int, #in~68.offset : int, #in~69 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure msecs_to_jiffies(#in~35 : int) returns (#res : int);
modifies ;

procedure usb_reset_device(#in~102.base : int, #in~102.offset : int) returns (#res : int);
modifies ;

procedure request_firmware(#in~138.base : int, #in~138.offset : int, #in~139.base : int, #in~139.offset : int, #in~140.base : int, #in~140.offset : int) returns (#res : int);
modifies ;

procedure snprintf(#in~12.base : int, #in~12.offset : int, #in~13 : int, #in~14.base : int, #in~14.offset : int) returns (#res : int);
modifies ;

procedure delayed_work_timer_fn(#in~44 : int) returns ();
modifies ;

procedure ieee80211_wake_queues(#in~180.base : int, #in~180.offset : int) returns ();
modifies ;

