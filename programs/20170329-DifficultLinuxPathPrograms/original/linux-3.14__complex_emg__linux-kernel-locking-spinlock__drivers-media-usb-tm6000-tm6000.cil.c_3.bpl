type STRUCT~perf_event;
type STRUCT~static_key_mod;
type STRUCT~tvec_base;
type STRUCT~workqueue_struct;
type STRUCT~dev_pm_qos;
type STRUCT~kernfs_open_node;
type STRUCT~kernfs_iattrs;
type STRUCT~sock;
type STRUCT~user_namespace;
type STRUCT~pinctrl;
type STRUCT~pinctrl_state;
type STRUCT~iommu_ops;
type STRUCT~subsys_private;
type STRUCT~driver_private;
type STRUCT~acpi_device;
type STRUCT~dma_coherent_mem;
type STRUCT~iommu_group;
type STRUCT~vfsmount;
type STRUCT~radix_tree_node;
type STRUCT~pid_namespace;
type STRUCT~writeback_control;
type STRUCT~kiocb;
type STRUCT~iovec;
type STRUCT~swap_info_struct;
type STRUCT~backing_dev_info;
type STRUCT~hd_struct;
type STRUCT~gendisk;
type STRUCT~request_queue;
type STRUCT~pipe_inode_info;
type STRUCT~posix_acl;
type STRUCT~files_struct;
type STRUCT~nlm_lockowner;
type STRUCT~nfs4_lock_state;
type STRUCT~export_operations;
type STRUCT~xattr_handler;
type STRUCT~mtd_info;
type STRUCT~nameidata;
type STRUCT~kstatfs;
type STRUCT~uprobe;
type STRUCT~return_instance;
type STRUCT~xol_area;
type STRUCT~slab;
type STRUCT~anon_vma;
type STRUCT~mempolicy;
type STRUCT~linux_binfmt;
type STRUCT~kioctx_table;
type STRUCT~mmu_notifier_mm;
type STRUCT~sem_undo_list;
type STRUCT~seccomp_filter;
type STRUCT~assoc_array_ptr;
type STRUCT~key_type;
type STRUCT~key_user;
type STRUCT~tty_struct;
type STRUCT~autogroup;
type STRUCT~taskstats;
type STRUCT~tty_audit_buf;
type STRUCT~cfs_rq;
type STRUCT~rt_rq;
type STRUCT~mem_cgroup;
type STRUCT~sched_class;
type STRUCT~task_group;
type STRUCT~fs_struct;
type STRUCT~nsproxy;
type STRUCT~audit_context;
type STRUCT~rt_mutex_waiter;
type STRUCT~bio_list;
type STRUCT~blk_plug;
type STRUCT~reclaim_state;
type STRUCT~io_context;
type STRUCT~css_set;
type STRUCT~robust_list_head;
type STRUCT~compat_robust_list_head;
type STRUCT~futex_pi_state;
type STRUCT~perf_event_context;
type STRUCT~numa_group;
type STRUCT~ftrace_ret_stack;
type STRUCT~ep_device;
type STRUCT~mon_bus;
type STRUCT~usb_tt;
type STRUCT~wusb_dev;
type STRUCT~module_param_attrs;
type STRUCT~module_sect_attrs;
type STRUCT~module_notes_attrs;
type STRUCT~ftrace_event_call;
type STRUCT~kmem_cache_node;
type STRUCT~proc_dir_entry;
type STRUCT~vb2_queue;
type STRUCT~v4l2_m2m_ctx;
type STRUCT~v4l2_subdev_fh;
type STRUCT~regulator_bulk_data;
type STRUCT~v4l2_ctrl_helper;
type STRUCT~snd_card;
type STRUCT~snd_pcm_substream;
type STRUCT~input_mt;
type STRUCT~ir_raw_event_ctrl;
type ~__s8 = int;
type ~__u8 = int;
type ~__s16 = int;
type ~__u16 = int;
type ~__s32 = int;
type ~__u32 = int;
type ~__s64 = int;
type ~__u64 = int;
type ~u8 = int;
type ~s16 = int;
type ~u16 = int;
type ~s32 = int;
type ~u32 = int;
type ~s64 = int;
type ~u64 = int;
type ~__kernel_long_t = int;
type ~__kernel_ulong_t = int;
type ~__kernel_pid_t = int;
type ~__kernel_uid32_t = int;
type ~__kernel_gid32_t = int;
type ~__kernel_loff_t = int;
type ~__kernel_timer_t = int;
type ~__kernel_clockid_t = int;
type ~umode_t = int;
type ~bool = int;
type ~sector_t = int;
type ~blkcnt_t = int;
type ~gfp_t = int;
type ~fmode_t = int;
type ~oom_flags_t = int;
type ~pgdval_t = int;
type ~pgprotval_t = int;
type ~kernel_ulong_t = int;
type ~qsize_t = int;
type ~cputime_t = int;
type ~ldv_func_ret_type = int;
type ~__kernel_suseconds_t = ~__kernel_long_t;
type ~__kernel_size_t = ~__kernel_ulong_t;
type ~__kernel_ssize_t = ~__kernel_long_t;
type ~__kernel_time_t = ~__kernel_long_t;
type ~__kernel_clock_t = ~__kernel_long_t;
type ~__le16 = ~__u16;
type ~__le32 = ~__u32;
type ~__kernel_dev_t = ~__u32;
type ~dev_t = ~__kernel_dev_t;
type ~pid_t = ~__kernel_pid_t;
type ~clockid_t = ~__kernel_clockid_t;
type ~uid_t = ~__kernel_uid32_t;
type ~gid_t = ~__kernel_gid32_t;
type ~loff_t = ~__kernel_loff_t;
type ~size_t = ~__kernel_size_t;
type ~ssize_t = ~__kernel_ssize_t;
type ~time_t = ~__kernel_time_t;
type ~int32_t = ~__s32;
type ~uint8_t = ~__u8;
type ~uint32_t = ~__u32;
type ~dma_addr_t = ~u64;
type ~__ticket_t = ~u16;
type ~__ticketpair_t = ~u32;
type ~jump_label_t = ~u64;
type ~projid_t = ~__kernel_uid32_t;
type ~key_serial_t = ~int32_t;
type ~key_perm_t = ~uint32_t;
type ~Elf64_Addr = ~__u64;
type ~Elf64_Half = ~__u16;
type ~Elf64_Word = ~__u32;
type ~Elf64_Xword = ~__u64;
type ~phandle = ~u32;
type ~v4l2_std_id = ~__u64;
type ~fe_type_t = int;
type ~fe_caps_t = int;
type ~fe_sec_voltage_t = int;
type ~fe_sec_tone_mode_t = int;
type ~fe_sec_mini_cmd_t = int;
type ~fe_status_t = int;
type ~fe_spectral_inversion_t = int;
type ~fe_code_rate_t = int;
type ~fe_modulation_t = int;
type ~fe_transmit_mode_t = int;
type ~fe_guard_interval_t = int;
type ~fe_hierarchy_t = int;
type ~fe_pilot_t = int;
type ~fe_rolloff_t = int;
type ~fe_delivery_system_t = int;
type ~dmx_output_t = int;
type ~dmx_input_t = int;
type ~dmx_pes_type_t = int;
type ~dmx_source_t = int;
const #funAddr~tm6000_xc5000_callback.base : int;
const #funAddr~tm6000_xc5000_callback.offset : int;
const #funAddr~tm6000_tuner_callback.base : int;
const #funAddr~tm6000_tuner_callback.offset : int;
const #funAddr~request_module_async.base : int;
const #funAddr~request_module_async.offset : int;
const #funAddr~tm6000_usb_probe.base : int;
const #funAddr~tm6000_usb_probe.offset : int;
const #funAddr~tm6000_usb_disconnect.base : int;
const #funAddr~tm6000_usb_disconnect.offset : int;
const #funAddr~tm6000_usb_driver_exit.base : int;
const #funAddr~tm6000_usb_driver_exit.offset : int;
const #funAddr~tm6000_usb_driver_init.base : int;
const #funAddr~tm6000_usb_driver_init.offset : int;
const #funAddr~tm6000_set_reg.base : int;
const #funAddr~tm6000_set_reg.offset : int;
const #funAddr~tm6000_get_reg.base : int;
const #funAddr~tm6000_get_reg.offset : int;
const #funAddr~tm6000_set_reg_mask.base : int;
const #funAddr~tm6000_set_reg_mask.offset : int;
const #funAddr~tm6000_init_digital_mode.base : int;
const #funAddr~tm6000_init_digital_mode.offset : int;
const #funAddr~tm6000_set_audio_bitrate.base : int;
const #funAddr~tm6000_set_audio_bitrate.offset : int;
const #funAddr~tm6000_register_extension.base : int;
const #funAddr~tm6000_register_extension.offset : int;
const #funAddr~tm6000_unregister_extension.base : int;
const #funAddr~tm6000_unregister_extension.offset : int;
const #funAddr~tm6000_i2c_xfer.base : int;
const #funAddr~tm6000_i2c_xfer.offset : int;
const #funAddr~functionality.base : int;
const #funAddr~functionality.offset : int;
const #funAddr~tm6000_irq_callback.base : int;
const #funAddr~tm6000_irq_callback.offset : int;
const #funAddr~buffer_setup.base : int;
const #funAddr~buffer_setup.offset : int;
const #funAddr~buffer_prepare.base : int;
const #funAddr~buffer_prepare.offset : int;
const #funAddr~buffer_queue.base : int;
const #funAddr~buffer_queue.offset : int;
const #funAddr~buffer_release.base : int;
const #funAddr~buffer_release.offset : int;
const #funAddr~tm6000_s_ctrl.base : int;
const #funAddr~tm6000_s_ctrl.offset : int;
const #funAddr~tm6000_radio_s_ctrl.base : int;
const #funAddr~tm6000_radio_s_ctrl.offset : int;
const #funAddr~tm6000_read.base : int;
const #funAddr~tm6000_read.offset : int;
const #funAddr~tm6000_poll.base : int;
const #funAddr~tm6000_poll.offset : int;
const #funAddr~video_ioctl2.base : int;
const #funAddr~video_ioctl2.offset : int;
const #funAddr~tm6000_mmap.base : int;
const #funAddr~tm6000_mmap.offset : int;
const #funAddr~tm6000_open.base : int;
const #funAddr~tm6000_open.offset : int;
const #funAddr~tm6000_release.base : int;
const #funAddr~tm6000_release.offset : int;
const #funAddr~vidioc_querycap.base : int;
const #funAddr~vidioc_querycap.offset : int;
const #funAddr~vidioc_enum_fmt_vid_cap.base : int;
const #funAddr~vidioc_enum_fmt_vid_cap.offset : int;
const #funAddr~vidioc_g_fmt_vid_cap.base : int;
const #funAddr~vidioc_g_fmt_vid_cap.offset : int;
const #funAddr~vidioc_s_fmt_vid_cap.base : int;
const #funAddr~vidioc_s_fmt_vid_cap.offset : int;
const #funAddr~vidioc_try_fmt_vid_cap.base : int;
const #funAddr~vidioc_try_fmt_vid_cap.offset : int;
const #funAddr~vidioc_reqbufs.base : int;
const #funAddr~vidioc_reqbufs.offset : int;
const #funAddr~vidioc_querybuf.base : int;
const #funAddr~vidioc_querybuf.offset : int;
const #funAddr~vidioc_qbuf.base : int;
const #funAddr~vidioc_qbuf.offset : int;
const #funAddr~vidioc_dqbuf.base : int;
const #funAddr~vidioc_dqbuf.offset : int;
const #funAddr~vidioc_streamon.base : int;
const #funAddr~vidioc_streamon.offset : int;
const #funAddr~vidioc_streamoff.base : int;
const #funAddr~vidioc_streamoff.offset : int;
const #funAddr~vidioc_g_std.base : int;
const #funAddr~vidioc_g_std.offset : int;
const #funAddr~vidioc_s_std.base : int;
const #funAddr~vidioc_s_std.offset : int;
const #funAddr~vidioc_enum_input.base : int;
const #funAddr~vidioc_enum_input.offset : int;
const #funAddr~vidioc_g_input.base : int;
const #funAddr~vidioc_g_input.offset : int;
const #funAddr~vidioc_s_input.base : int;
const #funAddr~vidioc_s_input.offset : int;
const #funAddr~vidioc_g_tuner.base : int;
const #funAddr~vidioc_g_tuner.offset : int;
const #funAddr~vidioc_s_tuner.base : int;
const #funAddr~vidioc_s_tuner.offset : int;
const #funAddr~vidioc_g_frequency.base : int;
const #funAddr~vidioc_g_frequency.offset : int;
const #funAddr~vidioc_s_frequency.base : int;
const #funAddr~vidioc_s_frequency.offset : int;
const #funAddr~v4l2_ctrl_subscribe_event.base : int;
const #funAddr~v4l2_ctrl_subscribe_event.offset : int;
const #funAddr~v4l2_event_unsubscribe.base : int;
const #funAddr~v4l2_event_unsubscribe.offset : int;
const #funAddr~video_device_release.base : int;
const #funAddr~video_device_release.offset : int;
const #funAddr~v4l2_ctrl_poll.base : int;
const #funAddr~v4l2_ctrl_poll.offset : int;
const #funAddr~radio_g_tuner.base : int;
const #funAddr~radio_g_tuner.offset : int;
const #funAddr~radio_s_tuner.base : int;
const #funAddr~radio_s_tuner.offset : int;
const #funAddr~tm6000_ir_urb_received.base : int;
const #funAddr~tm6000_ir_urb_received.offset : int;
const #funAddr~tm6000_ir_change_protocol.base : int;
const #funAddr~tm6000_ir_change_protocol.offset : int;
const #funAddr~__tm6000_ir_int_start.base : int;
const #funAddr~__tm6000_ir_int_start.offset : int;
const #funAddr~__tm6000_ir_int_stop.base : int;
const #funAddr~__tm6000_ir_int_stop.offset : int;
const #funAddr~tm6000_ir_int_work.base : int;
const #funAddr~tm6000_ir_int_work.offset : int;
const #funAddr~delayed_work_timer_fn.base : int;
const #funAddr~delayed_work_timer_fn.offset : int;
const #funAddr~tm6000_ir_start.base : int;
const #funAddr~tm6000_ir_start.offset : int;
const #funAddr~tm6000_ir_stop.base : int;
const #funAddr~tm6000_ir_stop.offset : int;
const #funAddr~tm6000_ir_handle_key.base : int;
const #funAddr~tm6000_ir_handle_key.offset : int;
const ~usb_device_speed~USB_SPEED_UNKNOWN : int;
const ~usb_device_speed~USB_SPEED_LOW : int;
const ~usb_device_speed~USB_SPEED_FULL : int;
const ~usb_device_speed~USB_SPEED_HIGH : int;
const ~usb_device_speed~USB_SPEED_WIRELESS : int;
const ~usb_device_speed~USB_SPEED_SUPER : int;
const ~usb_device_state~USB_STATE_NOTATTACHED : int;
const ~usb_device_state~USB_STATE_ATTACHED : int;
const ~usb_device_state~USB_STATE_POWERED : int;
const ~usb_device_state~USB_STATE_RECONNECTING : int;
const ~usb_device_state~USB_STATE_UNAUTHENTICATED : int;
const ~usb_device_state~USB_STATE_DEFAULT : int;
const ~usb_device_state~USB_STATE_ADDRESS : int;
const ~usb_device_state~USB_STATE_CONFIGURED : int;
const ~usb_device_state~USB_STATE_SUSPENDED : int;
const ~rpm_status~RPM_ACTIVE : int;
const ~rpm_status~RPM_RESUMING : int;
const ~rpm_status~RPM_SUSPENDED : int;
const ~rpm_status~RPM_SUSPENDING : int;
const ~rpm_request~RPM_REQ_NONE : int;
const ~rpm_request~RPM_REQ_IDLE : int;
const ~rpm_request~RPM_REQ_SUSPEND : int;
const ~rpm_request~RPM_REQ_AUTOSUSPEND : int;
const ~rpm_request~RPM_REQ_RESUME : int;
const ~hrtimer_restart~HRTIMER_NORESTART : int;
const ~hrtimer_restart~HRTIMER_RESTART : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NONE : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NET : int;
const ~kobj_ns_type~KOBJ_NS_TYPES : int;
const ~pid_type~PIDTYPE_PID : int;
const ~pid_type~PIDTYPE_PGID : int;
const ~pid_type~PIDTYPE_SID : int;
const ~pid_type~PIDTYPE_MAX : int;
const ~migrate_mode~MIGRATE_ASYNC : int;
const ~migrate_mode~MIGRATE_SYNC_LIGHT : int;
const ~migrate_mode~MIGRATE_SYNC : int;
const ~quota_type~USRQUOTA : int;
const ~quota_type~GRPQUOTA : int;
const ~quota_type~PRJQUOTA : int;
const ~uprobe_task_state~UTASK_RUNNING : int;
const ~uprobe_task_state~UTASK_SSTEP : int;
const ~uprobe_task_state~UTASK_SSTEP_ACK : int;
const ~uprobe_task_state~UTASK_SSTEP_TRAPPED : int;
const ~usb_interface_condition~USB_INTERFACE_UNBOUND : int;
const ~usb_interface_condition~USB_INTERFACE_BINDING : int;
const ~usb_interface_condition~USB_INTERFACE_BOUND : int;
const ~usb_interface_condition~USB_INTERFACE_UNBINDING : int;
const ~usb_device_removable~USB_DEVICE_REMOVABLE_UNKNOWN : int;
const ~usb_device_removable~USB_DEVICE_REMOVABLE : int;
const ~usb_device_removable~USB_DEVICE_FIXED : int;
const ~module_state~MODULE_STATE_LIVE : int;
const ~module_state~MODULE_STATE_COMING : int;
const ~module_state~MODULE_STATE_GOING : int;
const ~module_state~MODULE_STATE_UNFORMED : int;
const ~dma_data_direction~DMA_BIDIRECTIONAL : int;
const ~dma_data_direction~DMA_TO_DEVICE : int;
const ~dma_data_direction~DMA_FROM_DEVICE : int;
const ~dma_data_direction~DMA_NONE : int;
const ~v4l2_field~V4L2_FIELD_ANY : int;
const ~v4l2_field~V4L2_FIELD_NONE : int;
const ~v4l2_field~V4L2_FIELD_TOP : int;
const ~v4l2_field~V4L2_FIELD_BOTTOM : int;
const ~v4l2_field~V4L2_FIELD_INTERLACED : int;
const ~v4l2_field~V4L2_FIELD_SEQ_TB : int;
const ~v4l2_field~V4L2_FIELD_SEQ_BT : int;
const ~v4l2_field~V4L2_FIELD_ALTERNATE : int;
const ~v4l2_field~V4L2_FIELD_INTERLACED_TB : int;
const ~v4l2_field~V4L2_FIELD_INTERLACED_BT : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_CAPTURE : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OUTPUT : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OVERLAY : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VBI_CAPTURE : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VBI_OUTPUT : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_SLICED_VBI_CAPTURE : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_SLICED_VBI_OUTPUT : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_PRIVATE : int;
const ~v4l2_memory~V4L2_MEMORY_MMAP : int;
const ~v4l2_memory~V4L2_MEMORY_USERPTR : int;
const ~v4l2_memory~V4L2_MEMORY_OVERLAY : int;
const ~v4l2_memory~V4L2_MEMORY_DMABUF : int;
const ~v4l2_priority~V4L2_PRIORITY_UNSET : int;
const ~v4l2_priority~V4L2_PRIORITY_BACKGROUND : int;
const ~v4l2_priority~V4L2_PRIORITY_INTERACTIVE : int;
const ~v4l2_priority~V4L2_PRIORITY_RECORD : int;
const ~v4l2_priority~V4L2_PRIORITY_DEFAULT : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_INTEGER : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_BOOLEAN : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_MENU : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_BUTTON : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_INTEGER64 : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_CTRL_CLASS : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_STRING : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_BITMASK : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_INTEGER_MENU : int;
const ~videobuf_state~VIDEOBUF_NEEDS_INIT : int;
const ~videobuf_state~VIDEOBUF_PREPARED : int;
const ~videobuf_state~VIDEOBUF_QUEUED : int;
const ~videobuf_state~VIDEOBUF_ACTIVE : int;
const ~videobuf_state~VIDEOBUF_DONE : int;
const ~videobuf_state~VIDEOBUF_ERROR : int;
const ~videobuf_state~VIDEOBUF_IDLE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_FIXED : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB444_2X8_PADHI_BE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB444_2X8_PADHI_LE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB555_2X8_PADHI_BE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB555_2X8_PADHI_LE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_BGR565_2X8_BE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_BGR565_2X8_LE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB565_2X8_BE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB565_2X8_LE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB666_1X18 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB888_1X24 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB888_2X12_BE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB888_2X12_LE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_ARGB8888_1X32 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_Y8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_UV8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_UYVY8_1_5X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_VYUY8_1_5X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV8_1_5X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU8_1_5X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_UYVY8_2X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_VYUY8_2X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV8_2X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU8_2X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_Y10_1X10 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV10_2X10 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU10_2X10 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_Y12_1X12 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_UYVY8_1X16 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_VYUY8_1X16 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV8_1X16 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU8_1X16 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YDYUYDYV8_1X16 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV10_1X20 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU10_1X20 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUV10_1X30 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_AYUV8_1X32 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_ALAW8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG10_ALAW8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG10_ALAW8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB10_ALAW8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_DPCM8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG10_DPCM8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG10_DPCM8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB10_DPCM8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_BE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_LE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_BE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_LE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_1X10 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG10_1X10 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG10_1X10 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB10_1X10 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR12_1X12 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG12_1X12 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG12_1X12 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB12_1X12 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_JPEG_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_S5C_UYVY_JPEG_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_AHSV8888_1X32 : int;
const ~v4l2_async_match_type~V4L2_ASYNC_MATCH_CUSTOM : int;
const ~v4l2_async_match_type~V4L2_ASYNC_MATCH_DEVNAME : int;
const ~v4l2_async_match_type~V4L2_ASYNC_MATCH_I2C : int;
const ~v4l2_async_match_type~V4L2_ASYNC_MATCH_OF : int;
const ~v4l2_mbus_type~V4L2_MBUS_PARALLEL : int;
const ~v4l2_mbus_type~V4L2_MBUS_BT656 : int;
const ~v4l2_mbus_type~V4L2_MBUS_CSI2 : int;
const ~v4l2_subdev_ir_mode~V4L2_SUBDEV_IR_MODE_PULSE_WIDTH : int;
const ~fe_type~FE_QPSK : int;
const ~fe_type~FE_QAM : int;
const ~fe_type~FE_OFDM : int;
const ~fe_type~FE_ATSC : int;
const ~fe_caps~FE_IS_STUPID : int;
const ~fe_caps~FE_CAN_INVERSION_AUTO : int;
const ~fe_caps~FE_CAN_FEC_1_2 : int;
const ~fe_caps~FE_CAN_FEC_2_3 : int;
const ~fe_caps~FE_CAN_FEC_3_4 : int;
const ~fe_caps~FE_CAN_FEC_4_5 : int;
const ~fe_caps~FE_CAN_FEC_5_6 : int;
const ~fe_caps~FE_CAN_FEC_6_7 : int;
const ~fe_caps~FE_CAN_FEC_7_8 : int;
const ~fe_caps~FE_CAN_FEC_8_9 : int;
const ~fe_caps~FE_CAN_FEC_AUTO : int;
const ~fe_caps~FE_CAN_QPSK : int;
const ~fe_caps~FE_CAN_QAM_16 : int;
const ~fe_caps~FE_CAN_QAM_32 : int;
const ~fe_caps~FE_CAN_QAM_64 : int;
const ~fe_caps~FE_CAN_QAM_128 : int;
const ~fe_caps~FE_CAN_QAM_256 : int;
const ~fe_caps~FE_CAN_QAM_AUTO : int;
const ~fe_caps~FE_CAN_TRANSMISSION_MODE_AUTO : int;
const ~fe_caps~FE_CAN_BANDWIDTH_AUTO : int;
const ~fe_caps~FE_CAN_GUARD_INTERVAL_AUTO : int;
const ~fe_caps~FE_CAN_HIERARCHY_AUTO : int;
const ~fe_caps~FE_CAN_8VSB : int;
const ~fe_caps~FE_CAN_16VSB : int;
const ~fe_caps~FE_HAS_EXTENDED_CAPS : int;
const ~fe_caps~FE_CAN_MULTISTREAM : int;
const ~fe_caps~FE_CAN_TURBO_FEC : int;
const ~fe_caps~FE_CAN_2G_MODULATION : int;
const ~fe_caps~FE_NEEDS_BENDING : int;
const ~fe_caps~FE_CAN_RECOVER : int;
const ~fe_caps~FE_CAN_MUTE_TS : int;
const ~fe_sec_voltage~SEC_VOLTAGE_13 : int;
const ~fe_sec_voltage~SEC_VOLTAGE_18 : int;
const ~fe_sec_voltage~SEC_VOLTAGE_OFF : int;
const ~fe_sec_tone_mode~SEC_TONE_ON : int;
const ~fe_sec_tone_mode~SEC_TONE_OFF : int;
const ~fe_sec_mini_cmd~SEC_MINI_A : int;
const ~fe_sec_mini_cmd~SEC_MINI_B : int;
const ~fe_status~FE_HAS_SIGNAL : int;
const ~fe_status~FE_HAS_CARRIER : int;
const ~fe_status~FE_HAS_VITERBI : int;
const ~fe_status~FE_HAS_SYNC : int;
const ~fe_status~FE_HAS_LOCK : int;
const ~fe_status~FE_TIMEDOUT : int;
const ~fe_status~FE_REINIT : int;
const ~fe_spectral_inversion~INVERSION_OFF : int;
const ~fe_spectral_inversion~INVERSION_ON : int;
const ~fe_spectral_inversion~INVERSION_AUTO : int;
const ~fe_code_rate~FEC_NONE : int;
const ~fe_code_rate~FEC_1_2 : int;
const ~fe_code_rate~FEC_2_3 : int;
const ~fe_code_rate~FEC_3_4 : int;
const ~fe_code_rate~FEC_4_5 : int;
const ~fe_code_rate~FEC_5_6 : int;
const ~fe_code_rate~FEC_6_7 : int;
const ~fe_code_rate~FEC_7_8 : int;
const ~fe_code_rate~FEC_8_9 : int;
const ~fe_code_rate~FEC_AUTO : int;
const ~fe_code_rate~FEC_3_5 : int;
const ~fe_code_rate~FEC_9_10 : int;
const ~fe_code_rate~FEC_2_5 : int;
const ~fe_modulation~QPSK : int;
const ~fe_modulation~QAM_16 : int;
const ~fe_modulation~QAM_32 : int;
const ~fe_modulation~QAM_64 : int;
const ~fe_modulation~QAM_128 : int;
const ~fe_modulation~QAM_256 : int;
const ~fe_modulation~QAM_AUTO : int;
const ~fe_modulation~VSB_8 : int;
const ~fe_modulation~VSB_16 : int;
const ~fe_modulation~PSK_8 : int;
const ~fe_modulation~APSK_16 : int;
const ~fe_modulation~APSK_32 : int;
const ~fe_modulation~DQPSK : int;
const ~fe_modulation~QAM_4_NR : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_2K : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_8K : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_AUTO : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_4K : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_1K : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_16K : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_32K : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_C1 : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_C3780 : int;
const ~fe_guard_interval~GUARD_INTERVAL_1_32 : int;
const ~fe_guard_interval~GUARD_INTERVAL_1_16 : int;
const ~fe_guard_interval~GUARD_INTERVAL_1_8 : int;
const ~fe_guard_interval~GUARD_INTERVAL_1_4 : int;
const ~fe_guard_interval~GUARD_INTERVAL_AUTO : int;
const ~fe_guard_interval~GUARD_INTERVAL_1_128 : int;
const ~fe_guard_interval~GUARD_INTERVAL_19_128 : int;
const ~fe_guard_interval~GUARD_INTERVAL_19_256 : int;
const ~fe_guard_interval~GUARD_INTERVAL_PN420 : int;
const ~fe_guard_interval~GUARD_INTERVAL_PN595 : int;
const ~fe_guard_interval~GUARD_INTERVAL_PN945 : int;
const ~fe_hierarchy~HIERARCHY_NONE : int;
const ~fe_hierarchy~HIERARCHY_1 : int;
const ~fe_hierarchy~HIERARCHY_2 : int;
const ~fe_hierarchy~HIERARCHY_4 : int;
const ~fe_hierarchy~HIERARCHY_AUTO : int;
const ~fe_interleaving~INTERLEAVING_NONE : int;
const ~fe_interleaving~INTERLEAVING_AUTO : int;
const ~fe_interleaving~INTERLEAVING_240 : int;
const ~fe_interleaving~INTERLEAVING_720 : int;
const ~fe_pilot~PILOT_ON : int;
const ~fe_pilot~PILOT_OFF : int;
const ~fe_pilot~PILOT_AUTO : int;
const ~fe_rolloff~ROLLOFF_35 : int;
const ~fe_rolloff~ROLLOFF_20 : int;
const ~fe_rolloff~ROLLOFF_25 : int;
const ~fe_rolloff~ROLLOFF_AUTO : int;
const ~fe_delivery_system~SYS_UNDEFINED : int;
const ~fe_delivery_system~SYS_DVBC_ANNEX_A : int;
const ~fe_delivery_system~SYS_DVBC_ANNEX_B : int;
const ~fe_delivery_system~SYS_DVBT : int;
const ~fe_delivery_system~SYS_DSS : int;
const ~fe_delivery_system~SYS_DVBS : int;
const ~fe_delivery_system~SYS_DVBS2 : int;
const ~fe_delivery_system~SYS_DVBH : int;
const ~fe_delivery_system~SYS_ISDBT : int;
const ~fe_delivery_system~SYS_ISDBS : int;
const ~fe_delivery_system~SYS_ISDBC : int;
const ~fe_delivery_system~SYS_ATSC : int;
const ~fe_delivery_system~SYS_ATSCMH : int;
const ~fe_delivery_system~SYS_DTMB : int;
const ~fe_delivery_system~SYS_CMMB : int;
const ~fe_delivery_system~SYS_DAB : int;
const ~fe_delivery_system~SYS_DVBT2 : int;
const ~fe_delivery_system~SYS_TURBO : int;
const ~fe_delivery_system~SYS_DVBC_ANNEX_C : int;
const ~ldv_26341~DMX_OUT_DECODER : int;
const ~ldv_26341~DMX_OUT_TAP : int;
const ~ldv_26341~DMX_OUT_TS_TAP : int;
const ~ldv_26341~DMX_OUT_TSDEMUX_TAP : int;
const ~ldv_26343~DMX_IN_FRONTEND : int;
const ~ldv_26343~DMX_IN_DVR : int;
const ~dmx_ts_pes~DMX_PES_AUDIO0 : int;
const ~dmx_ts_pes~DMX_PES_VIDEO0 : int;
const ~dmx_ts_pes~DMX_PES_TELETEXT0 : int;
const ~dmx_ts_pes~DMX_PES_SUBTITLE0 : int;
const ~dmx_ts_pes~DMX_PES_PCR0 : int;
const ~dmx_ts_pes~DMX_PES_AUDIO1 : int;
const ~dmx_ts_pes~DMX_PES_VIDEO1 : int;
const ~dmx_ts_pes~DMX_PES_TELETEXT1 : int;
const ~dmx_ts_pes~DMX_PES_SUBTITLE1 : int;
const ~dmx_ts_pes~DMX_PES_PCR1 : int;
const ~dmx_ts_pes~DMX_PES_AUDIO2 : int;
const ~dmx_ts_pes~DMX_PES_VIDEO2 : int;
const ~dmx_ts_pes~DMX_PES_TELETEXT2 : int;
const ~dmx_ts_pes~DMX_PES_SUBTITLE2 : int;
const ~dmx_ts_pes~DMX_PES_PCR2 : int;
const ~dmx_ts_pes~DMX_PES_AUDIO3 : int;
const ~dmx_ts_pes~DMX_PES_VIDEO3 : int;
const ~dmx_ts_pes~DMX_PES_TELETEXT3 : int;
const ~dmx_ts_pes~DMX_PES_SUBTITLE3 : int;
const ~dmx_ts_pes~DMX_PES_PCR3 : int;
const ~dmx_ts_pes~DMX_PES_OTHER : int;
const ~ldv_26359~DMX_SOURCE_FRONT0 : int;
const ~ldv_26359~DMX_SOURCE_FRONT1 : int;
const ~ldv_26359~DMX_SOURCE_FRONT2 : int;
const ~ldv_26359~DMX_SOURCE_FRONT3 : int;
const ~ldv_26359~DMX_SOURCE_DVR0 : int;
const ~ldv_26359~DMX_SOURCE_DVR1 : int;
const ~ldv_26359~DMX_SOURCE_DVR2 : int;
const ~ldv_26359~DMX_SOURCE_DVR3 : int;
const ~dmx_success~DMX_OK : int;
const ~dmx_success~DMX_LENGTH_ERROR : int;
const ~dmx_success~DMX_OVERRUN_ERROR : int;
const ~dmx_success~DMX_CRC_ERROR : int;
const ~dmx_success~DMX_FRAME_ERROR : int;
const ~dmx_success~DMX_FIFO_ERROR : int;
const ~dmx_success~DMX_MISSED_ERROR : int;
const ~dmx_frontend_source~DMX_MEMORY_FE : int;
const ~dmx_frontend_source~DMX_FRONTEND_0 : int;
const ~dmx_frontend_source~DMX_FRONTEND_1 : int;
const ~dmx_frontend_source~DMX_FRONTEND_2 : int;
const ~dmx_frontend_source~DMX_FRONTEND_3 : int;
const ~dmx_frontend_source~DMX_STREAM_0 : int;
const ~dmx_frontend_source~DMX_STREAM_1 : int;
const ~dmx_frontend_source~DMX_STREAM_2 : int;
const ~dmx_frontend_source~DMX_STREAM_3 : int;
const ~tuner_param~DVBFE_TUNER_FREQUENCY : int;
const ~tuner_param~DVBFE_TUNER_TUNERSTEP : int;
const ~tuner_param~DVBFE_TUNER_IFFREQ : int;
const ~tuner_param~DVBFE_TUNER_BANDWIDTH : int;
const ~tuner_param~DVBFE_TUNER_REFCLOCK : int;
const ~tuner_param~DVBFE_TUNER_IQSENSE : int;
const ~tuner_param~DVBFE_TUNER_DUMMY : int;
const ~dvbfe_algo~DVBFE_ALGO_HW : int;
const ~dvbfe_algo~DVBFE_ALGO_SW : int;
const ~dvbfe_algo~DVBFE_ALGO_CUSTOM : int;
const ~dvbfe_algo~DVBFE_ALGO_RECOVERY : int;
const ~dvbfe_search~DVBFE_ALGO_SEARCH_SUCCESS : int;
const ~dvbfe_search~DVBFE_ALGO_SEARCH_ASLEEP : int;
const ~dvbfe_search~DVBFE_ALGO_SEARCH_FAILED : int;
const ~dvbfe_search~DVBFE_ALGO_SEARCH_INVALID : int;
const ~dvbfe_search~DVBFE_ALGO_SEARCH_AGAIN : int;
const ~dvbfe_search~DVBFE_ALGO_SEARCH_ERROR : int;
const ~dmxdev_type~DMXDEV_TYPE_NONE : int;
const ~dmxdev_type~DMXDEV_TYPE_SEC : int;
const ~dmxdev_type~DMXDEV_TYPE_PES : int;
const ~dmxdev_state~DMXDEV_STATE_FREE : int;
const ~dmxdev_state~DMXDEV_STATE_ALLOCATED : int;
const ~dmxdev_state~DMXDEV_STATE_SET : int;
const ~dmxdev_state~DMXDEV_STATE_GO : int;
const ~dmxdev_state~DMXDEV_STATE_DONE : int;
const ~dmxdev_state~DMXDEV_STATE_TIMEDOUT : int;
const ~tm6000_itype~TM6000_INPUT_TV : int;
const ~tm6000_itype~TM6000_INPUT_COMPOSITE1 : int;
const ~tm6000_itype~TM6000_INPUT_COMPOSITE2 : int;
const ~tm6000_itype~TM6000_INPUT_SVIDEO : int;
const ~tm6000_itype~TM6000_INPUT_DVB : int;
const ~tm6000_itype~TM6000_INPUT_RADIO : int;
const ~tm6000_mux~TM6000_VMUX_VIDEO_A : int;
const ~tm6000_mux~TM6000_VMUX_VIDEO_B : int;
const ~tm6000_mux~TM6000_VMUX_VIDEO_AB : int;
const ~tm6000_mux~TM6000_AMUX_ADC1 : int;
const ~tm6000_mux~TM6000_AMUX_ADC2 : int;
const ~tm6000_mux~TM6000_AMUX_SIF1 : int;
const ~tm6000_mux~TM6000_AMUX_SIF2 : int;
const ~tm6000_mux~TM6000_AMUX_I2S : int;
const ~tm6000_devtype~TM6000 : int;
const ~tm6000_devtype~TM5600 : int;
const ~tm6000_devtype~TM6010 : int;
const ~tm6000_core_state~DEV_INITIALIZED : int;
const ~tm6000_core_state~DEV_DISCONNECTED : int;
const ~tm6000_core_state~DEV_MISCONFIGURED : int;
const ~tm6000_mode~TM6000_MODE_UNKNOWN : int;
const ~tm6000_mode~TM6000_MODE_ANALOG : int;
const ~tm6000_mode~TM6000_MODE_DIGITAL : int;
const ~firmware_type~XC2028_AUTO : int;
const ~firmware_type~XC2028_D2633 : int;
const ~firmware_type~XC2028_D2620 : int;
const ~tm6000_ops_type~TM6000_AUDIO : int;
const ~tm6000_ops_type~TM6000_DVB : int;
const ~rc_type~RC_TYPE_UNKNOWN : int;
const ~rc_type~RC_TYPE_OTHER : int;
const ~rc_type~RC_TYPE_LIRC : int;
const ~rc_type~RC_TYPE_RC5 : int;
const ~rc_type~RC_TYPE_RC5X : int;
const ~rc_type~RC_TYPE_RC5_SZ : int;
const ~rc_type~RC_TYPE_JVC : int;
const ~rc_type~RC_TYPE_SONY12 : int;
const ~rc_type~RC_TYPE_SONY15 : int;
const ~rc_type~RC_TYPE_SONY20 : int;
const ~rc_type~RC_TYPE_NEC : int;
const ~rc_type~RC_TYPE_SANYO : int;
const ~rc_type~RC_TYPE_MCE_KBD : int;
const ~rc_type~RC_TYPE_RC6_0 : int;
const ~rc_type~RC_TYPE_RC6_6A_20 : int;
const ~rc_type~RC_TYPE_RC6_6A_24 : int;
const ~rc_type~RC_TYPE_RC6_6A_32 : int;
const ~rc_type~RC_TYPE_RC6_MCE : int;
const ~rc_driver_type~RC_DRIVER_SCANCODE : int;
const ~rc_driver_type~RC_DRIVER_IR_RAW : int;
axiom #funAddr~tm6000_xc5000_callback.base == -1 && #funAddr~tm6000_xc5000_callback.offset == 0;
axiom #funAddr~tm6000_tuner_callback.base == -1 && #funAddr~tm6000_tuner_callback.offset == 1;
axiom #funAddr~request_module_async.base == -1 && #funAddr~request_module_async.offset == 2;
axiom #funAddr~tm6000_usb_probe.base == -1 && #funAddr~tm6000_usb_probe.offset == 3;
axiom #funAddr~tm6000_usb_disconnect.base == -1 && #funAddr~tm6000_usb_disconnect.offset == 4;
axiom #funAddr~tm6000_usb_driver_exit.base == -1 && #funAddr~tm6000_usb_driver_exit.offset == 5;
axiom #funAddr~tm6000_usb_driver_init.base == -1 && #funAddr~tm6000_usb_driver_init.offset == 6;
axiom #funAddr~tm6000_set_reg.base == -1 && #funAddr~tm6000_set_reg.offset == 7;
axiom #funAddr~tm6000_get_reg.base == -1 && #funAddr~tm6000_get_reg.offset == 8;
axiom #funAddr~tm6000_set_reg_mask.base == -1 && #funAddr~tm6000_set_reg_mask.offset == 9;
axiom #funAddr~tm6000_init_digital_mode.base == -1 && #funAddr~tm6000_init_digital_mode.offset == 10;
axiom #funAddr~tm6000_set_audio_bitrate.base == -1 && #funAddr~tm6000_set_audio_bitrate.offset == 11;
axiom #funAddr~tm6000_register_extension.base == -1 && #funAddr~tm6000_register_extension.offset == 12;
axiom #funAddr~tm6000_unregister_extension.base == -1 && #funAddr~tm6000_unregister_extension.offset == 13;
axiom #funAddr~tm6000_i2c_xfer.base == -1 && #funAddr~tm6000_i2c_xfer.offset == 14;
axiom #funAddr~functionality.base == -1 && #funAddr~functionality.offset == 15;
axiom #funAddr~tm6000_irq_callback.base == -1 && #funAddr~tm6000_irq_callback.offset == 16;
axiom #funAddr~buffer_setup.base == -1 && #funAddr~buffer_setup.offset == 17;
axiom #funAddr~buffer_prepare.base == -1 && #funAddr~buffer_prepare.offset == 18;
axiom #funAddr~buffer_queue.base == -1 && #funAddr~buffer_queue.offset == 19;
axiom #funAddr~buffer_release.base == -1 && #funAddr~buffer_release.offset == 20;
axiom #funAddr~tm6000_s_ctrl.base == -1 && #funAddr~tm6000_s_ctrl.offset == 21;
axiom #funAddr~tm6000_radio_s_ctrl.base == -1 && #funAddr~tm6000_radio_s_ctrl.offset == 22;
axiom #funAddr~tm6000_read.base == -1 && #funAddr~tm6000_read.offset == 23;
axiom #funAddr~tm6000_poll.base == -1 && #funAddr~tm6000_poll.offset == 24;
axiom #funAddr~video_ioctl2.base == -1 && #funAddr~video_ioctl2.offset == 25;
axiom #funAddr~tm6000_mmap.base == -1 && #funAddr~tm6000_mmap.offset == 26;
axiom #funAddr~tm6000_open.base == -1 && #funAddr~tm6000_open.offset == 27;
axiom #funAddr~tm6000_release.base == -1 && #funAddr~tm6000_release.offset == 28;
axiom #funAddr~vidioc_querycap.base == -1 && #funAddr~vidioc_querycap.offset == 29;
axiom #funAddr~vidioc_enum_fmt_vid_cap.base == -1 && #funAddr~vidioc_enum_fmt_vid_cap.offset == 30;
axiom #funAddr~vidioc_g_fmt_vid_cap.base == -1 && #funAddr~vidioc_g_fmt_vid_cap.offset == 31;
axiom #funAddr~vidioc_s_fmt_vid_cap.base == -1 && #funAddr~vidioc_s_fmt_vid_cap.offset == 32;
axiom #funAddr~vidioc_try_fmt_vid_cap.base == -1 && #funAddr~vidioc_try_fmt_vid_cap.offset == 33;
axiom #funAddr~vidioc_reqbufs.base == -1 && #funAddr~vidioc_reqbufs.offset == 34;
axiom #funAddr~vidioc_querybuf.base == -1 && #funAddr~vidioc_querybuf.offset == 35;
axiom #funAddr~vidioc_qbuf.base == -1 && #funAddr~vidioc_qbuf.offset == 36;
axiom #funAddr~vidioc_dqbuf.base == -1 && #funAddr~vidioc_dqbuf.offset == 37;
axiom #funAddr~vidioc_streamon.base == -1 && #funAddr~vidioc_streamon.offset == 38;
axiom #funAddr~vidioc_streamoff.base == -1 && #funAddr~vidioc_streamoff.offset == 39;
axiom #funAddr~vidioc_g_std.base == -1 && #funAddr~vidioc_g_std.offset == 40;
axiom #funAddr~vidioc_s_std.base == -1 && #funAddr~vidioc_s_std.offset == 41;
axiom #funAddr~vidioc_enum_input.base == -1 && #funAddr~vidioc_enum_input.offset == 42;
axiom #funAddr~vidioc_g_input.base == -1 && #funAddr~vidioc_g_input.offset == 43;
axiom #funAddr~vidioc_s_input.base == -1 && #funAddr~vidioc_s_input.offset == 44;
axiom #funAddr~vidioc_g_tuner.base == -1 && #funAddr~vidioc_g_tuner.offset == 45;
axiom #funAddr~vidioc_s_tuner.base == -1 && #funAddr~vidioc_s_tuner.offset == 46;
axiom #funAddr~vidioc_g_frequency.base == -1 && #funAddr~vidioc_g_frequency.offset == 47;
axiom #funAddr~vidioc_s_frequency.base == -1 && #funAddr~vidioc_s_frequency.offset == 48;
axiom #funAddr~v4l2_ctrl_subscribe_event.base == -1 && #funAddr~v4l2_ctrl_subscribe_event.offset == 49;
axiom #funAddr~v4l2_event_unsubscribe.base == -1 && #funAddr~v4l2_event_unsubscribe.offset == 50;
axiom #funAddr~video_device_release.base == -1 && #funAddr~video_device_release.offset == 51;
axiom #funAddr~v4l2_ctrl_poll.base == -1 && #funAddr~v4l2_ctrl_poll.offset == 52;
axiom #funAddr~radio_g_tuner.base == -1 && #funAddr~radio_g_tuner.offset == 53;
axiom #funAddr~radio_s_tuner.base == -1 && #funAddr~radio_s_tuner.offset == 54;
axiom #funAddr~tm6000_ir_urb_received.base == -1 && #funAddr~tm6000_ir_urb_received.offset == 55;
axiom #funAddr~tm6000_ir_change_protocol.base == -1 && #funAddr~tm6000_ir_change_protocol.offset == 56;
axiom #funAddr~__tm6000_ir_int_start.base == -1 && #funAddr~__tm6000_ir_int_start.offset == 57;
axiom #funAddr~__tm6000_ir_int_stop.base == -1 && #funAddr~__tm6000_ir_int_stop.offset == 58;
axiom #funAddr~tm6000_ir_int_work.base == -1 && #funAddr~tm6000_ir_int_work.offset == 59;
axiom #funAddr~delayed_work_timer_fn.base == -1 && #funAddr~delayed_work_timer_fn.offset == 60;
axiom #funAddr~tm6000_ir_start.base == -1 && #funAddr~tm6000_ir_start.offset == 61;
axiom #funAddr~tm6000_ir_stop.base == -1 && #funAddr~tm6000_ir_stop.offset == 62;
axiom #funAddr~tm6000_ir_handle_key.base == -1 && #funAddr~tm6000_ir_handle_key.offset == 63;
axiom ~usb_device_speed~USB_SPEED_UNKNOWN == 0;
axiom ~usb_device_speed~USB_SPEED_LOW == 1;
axiom ~usb_device_speed~USB_SPEED_FULL == 2;
axiom ~usb_device_speed~USB_SPEED_HIGH == 3;
axiom ~usb_device_speed~USB_SPEED_WIRELESS == 4;
axiom ~usb_device_speed~USB_SPEED_SUPER == 5;
axiom ~usb_device_state~USB_STATE_NOTATTACHED == 0;
axiom ~usb_device_state~USB_STATE_ATTACHED == 1;
axiom ~usb_device_state~USB_STATE_POWERED == 2;
axiom ~usb_device_state~USB_STATE_RECONNECTING == 3;
axiom ~usb_device_state~USB_STATE_UNAUTHENTICATED == 4;
axiom ~usb_device_state~USB_STATE_DEFAULT == 5;
axiom ~usb_device_state~USB_STATE_ADDRESS == 6;
axiom ~usb_device_state~USB_STATE_CONFIGURED == 7;
axiom ~usb_device_state~USB_STATE_SUSPENDED == 8;
axiom ~rpm_status~RPM_ACTIVE == 0;
axiom ~rpm_status~RPM_RESUMING == 1;
axiom ~rpm_status~RPM_SUSPENDED == 2;
axiom ~rpm_status~RPM_SUSPENDING == 3;
axiom ~rpm_request~RPM_REQ_NONE == 0;
axiom ~rpm_request~RPM_REQ_IDLE == 1;
axiom ~rpm_request~RPM_REQ_SUSPEND == 2;
axiom ~rpm_request~RPM_REQ_AUTOSUSPEND == 3;
axiom ~rpm_request~RPM_REQ_RESUME == 4;
axiom ~hrtimer_restart~HRTIMER_NORESTART == 0;
axiom ~hrtimer_restart~HRTIMER_RESTART == 1;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NONE == 0;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NET == 1;
axiom ~kobj_ns_type~KOBJ_NS_TYPES == 2;
axiom ~pid_type~PIDTYPE_PID == 0;
axiom ~pid_type~PIDTYPE_PGID == 1;
axiom ~pid_type~PIDTYPE_SID == 2;
axiom ~pid_type~PIDTYPE_MAX == 3;
axiom ~migrate_mode~MIGRATE_ASYNC == 0;
axiom ~migrate_mode~MIGRATE_SYNC_LIGHT == 1;
axiom ~migrate_mode~MIGRATE_SYNC == 2;
axiom ~quota_type~USRQUOTA == 0;
axiom ~quota_type~GRPQUOTA == 1;
axiom ~quota_type~PRJQUOTA == 2;
axiom ~uprobe_task_state~UTASK_RUNNING == 0;
axiom ~uprobe_task_state~UTASK_SSTEP == 1;
axiom ~uprobe_task_state~UTASK_SSTEP_ACK == 2;
axiom ~uprobe_task_state~UTASK_SSTEP_TRAPPED == 3;
axiom ~usb_interface_condition~USB_INTERFACE_UNBOUND == 0;
axiom ~usb_interface_condition~USB_INTERFACE_BINDING == 1;
axiom ~usb_interface_condition~USB_INTERFACE_BOUND == 2;
axiom ~usb_interface_condition~USB_INTERFACE_UNBINDING == 3;
axiom ~usb_device_removable~USB_DEVICE_REMOVABLE_UNKNOWN == 0;
axiom ~usb_device_removable~USB_DEVICE_REMOVABLE == 1;
axiom ~usb_device_removable~USB_DEVICE_FIXED == 2;
axiom ~module_state~MODULE_STATE_LIVE == 0;
axiom ~module_state~MODULE_STATE_COMING == 1;
axiom ~module_state~MODULE_STATE_GOING == 2;
axiom ~module_state~MODULE_STATE_UNFORMED == 3;
axiom ~dma_data_direction~DMA_BIDIRECTIONAL == 0;
axiom ~dma_data_direction~DMA_TO_DEVICE == 1;
axiom ~dma_data_direction~DMA_FROM_DEVICE == 2;
axiom ~dma_data_direction~DMA_NONE == 3;
axiom ~v4l2_field~V4L2_FIELD_ANY == 0;
axiom ~v4l2_field~V4L2_FIELD_NONE == 1;
axiom ~v4l2_field~V4L2_FIELD_TOP == 2;
axiom ~v4l2_field~V4L2_FIELD_BOTTOM == 3;
axiom ~v4l2_field~V4L2_FIELD_INTERLACED == 4;
axiom ~v4l2_field~V4L2_FIELD_SEQ_TB == 5;
axiom ~v4l2_field~V4L2_FIELD_SEQ_BT == 6;
axiom ~v4l2_field~V4L2_FIELD_ALTERNATE == 7;
axiom ~v4l2_field~V4L2_FIELD_INTERLACED_TB == 8;
axiom ~v4l2_field~V4L2_FIELD_INTERLACED_BT == 9;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_CAPTURE == 1;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OUTPUT == 2;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OVERLAY == 3;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VBI_CAPTURE == 4;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VBI_OUTPUT == 5;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_SLICED_VBI_CAPTURE == 6;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_SLICED_VBI_OUTPUT == 7;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY == 8;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE == 9;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE == 10;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_PRIVATE == 128;
axiom ~v4l2_memory~V4L2_MEMORY_MMAP == 1;
axiom ~v4l2_memory~V4L2_MEMORY_USERPTR == 2;
axiom ~v4l2_memory~V4L2_MEMORY_OVERLAY == 3;
axiom ~v4l2_memory~V4L2_MEMORY_DMABUF == 4;
axiom ~v4l2_priority~V4L2_PRIORITY_UNSET == 0;
axiom ~v4l2_priority~V4L2_PRIORITY_BACKGROUND == 1;
axiom ~v4l2_priority~V4L2_PRIORITY_INTERACTIVE == 2;
axiom ~v4l2_priority~V4L2_PRIORITY_RECORD == 3;
axiom ~v4l2_priority~V4L2_PRIORITY_DEFAULT == 2;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_INTEGER == 1;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_BOOLEAN == 2;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_MENU == 3;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_BUTTON == 4;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_INTEGER64 == 5;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_CTRL_CLASS == 6;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_STRING == 7;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_BITMASK == 8;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_INTEGER_MENU == 9;
axiom ~videobuf_state~VIDEOBUF_NEEDS_INIT == 0;
axiom ~videobuf_state~VIDEOBUF_PREPARED == 1;
axiom ~videobuf_state~VIDEOBUF_QUEUED == 2;
axiom ~videobuf_state~VIDEOBUF_ACTIVE == 3;
axiom ~videobuf_state~VIDEOBUF_DONE == 4;
axiom ~videobuf_state~VIDEOBUF_ERROR == 5;
axiom ~videobuf_state~VIDEOBUF_IDLE == 6;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_FIXED == 1;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB444_2X8_PADHI_BE == 4097;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB444_2X8_PADHI_LE == 4098;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB555_2X8_PADHI_BE == 4099;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB555_2X8_PADHI_LE == 4100;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_BGR565_2X8_BE == 4101;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_BGR565_2X8_LE == 4102;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB565_2X8_BE == 4103;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB565_2X8_LE == 4104;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB666_1X18 == 4105;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB888_1X24 == 4106;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB888_2X12_BE == 4107;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB888_2X12_LE == 4108;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_ARGB8888_1X32 == 4109;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_Y8_1X8 == 8193;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_UV8_1X8 == 8213;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_UYVY8_1_5X8 == 8194;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_VYUY8_1_5X8 == 8195;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV8_1_5X8 == 8196;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU8_1_5X8 == 8197;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_UYVY8_2X8 == 8198;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_VYUY8_2X8 == 8199;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV8_2X8 == 8200;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU8_2X8 == 8201;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_Y10_1X10 == 8202;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV10_2X10 == 8203;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU10_2X10 == 8204;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_Y12_1X12 == 8211;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_UYVY8_1X16 == 8207;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_VYUY8_1X16 == 8208;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV8_1X16 == 8209;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU8_1X16 == 8210;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YDYUYDYV8_1X16 == 8212;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV10_1X20 == 8205;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU10_1X20 == 8206;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUV10_1X30 == 8214;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_AYUV8_1X32 == 8215;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR8_1X8 == 12289;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG8_1X8 == 12307;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG8_1X8 == 12290;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB8_1X8 == 12308;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_ALAW8_1X8 == 12309;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG10_ALAW8_1X8 == 12310;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG10_ALAW8_1X8 == 12311;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB10_ALAW8_1X8 == 12312;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_DPCM8_1X8 == 12299;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG10_DPCM8_1X8 == 12300;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG10_DPCM8_1X8 == 12297;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB10_DPCM8_1X8 == 12301;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_BE == 12291;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_LE == 12292;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_BE == 12293;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_LE == 12294;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_1X10 == 12295;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG10_1X10 == 12302;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG10_1X10 == 12298;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB10_1X10 == 12303;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR12_1X12 == 12296;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG12_1X12 == 12304;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG12_1X12 == 12305;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB12_1X12 == 12306;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_JPEG_1X8 == 16385;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_S5C_UYVY_JPEG_1X8 == 20481;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_AHSV8888_1X32 == 24577;
axiom ~v4l2_async_match_type~V4L2_ASYNC_MATCH_CUSTOM == 0;
axiom ~v4l2_async_match_type~V4L2_ASYNC_MATCH_DEVNAME == 1;
axiom ~v4l2_async_match_type~V4L2_ASYNC_MATCH_I2C == 2;
axiom ~v4l2_async_match_type~V4L2_ASYNC_MATCH_OF == 3;
axiom ~v4l2_mbus_type~V4L2_MBUS_PARALLEL == 0;
axiom ~v4l2_mbus_type~V4L2_MBUS_BT656 == 1;
axiom ~v4l2_mbus_type~V4L2_MBUS_CSI2 == 2;
axiom ~v4l2_subdev_ir_mode~V4L2_SUBDEV_IR_MODE_PULSE_WIDTH == 0;
axiom ~fe_type~FE_QPSK == 0;
axiom ~fe_type~FE_QAM == 1;
axiom ~fe_type~FE_OFDM == 2;
axiom ~fe_type~FE_ATSC == 3;
axiom ~fe_caps~FE_IS_STUPID == 0;
axiom ~fe_caps~FE_CAN_INVERSION_AUTO == 1;
axiom ~fe_caps~FE_CAN_FEC_1_2 == 2;
axiom ~fe_caps~FE_CAN_FEC_2_3 == 4;
axiom ~fe_caps~FE_CAN_FEC_3_4 == 8;
axiom ~fe_caps~FE_CAN_FEC_4_5 == 16;
axiom ~fe_caps~FE_CAN_FEC_5_6 == 32;
axiom ~fe_caps~FE_CAN_FEC_6_7 == 64;
axiom ~fe_caps~FE_CAN_FEC_7_8 == 128;
axiom ~fe_caps~FE_CAN_FEC_8_9 == 256;
axiom ~fe_caps~FE_CAN_FEC_AUTO == 512;
axiom ~fe_caps~FE_CAN_QPSK == 1024;
axiom ~fe_caps~FE_CAN_QAM_16 == 2048;
axiom ~fe_caps~FE_CAN_QAM_32 == 4096;
axiom ~fe_caps~FE_CAN_QAM_64 == 8192;
axiom ~fe_caps~FE_CAN_QAM_128 == 16384;
axiom ~fe_caps~FE_CAN_QAM_256 == 32768;
axiom ~fe_caps~FE_CAN_QAM_AUTO == 65536;
axiom ~fe_caps~FE_CAN_TRANSMISSION_MODE_AUTO == 131072;
axiom ~fe_caps~FE_CAN_BANDWIDTH_AUTO == 262144;
axiom ~fe_caps~FE_CAN_GUARD_INTERVAL_AUTO == 524288;
axiom ~fe_caps~FE_CAN_HIERARCHY_AUTO == 1048576;
axiom ~fe_caps~FE_CAN_8VSB == 2097152;
axiom ~fe_caps~FE_CAN_16VSB == 4194304;
axiom ~fe_caps~FE_HAS_EXTENDED_CAPS == 8388608;
axiom ~fe_caps~FE_CAN_MULTISTREAM == 67108864;
axiom ~fe_caps~FE_CAN_TURBO_FEC == 134217728;
axiom ~fe_caps~FE_CAN_2G_MODULATION == 268435456;
axiom ~fe_caps~FE_NEEDS_BENDING == 536870912;
axiom ~fe_caps~FE_CAN_RECOVER == 1073741824;
axiom ~fe_caps~FE_CAN_MUTE_TS == 2147483648;
axiom ~fe_sec_voltage~SEC_VOLTAGE_13 == 0;
axiom ~fe_sec_voltage~SEC_VOLTAGE_18 == 1;
axiom ~fe_sec_voltage~SEC_VOLTAGE_OFF == 2;
axiom ~fe_sec_tone_mode~SEC_TONE_ON == 0;
axiom ~fe_sec_tone_mode~SEC_TONE_OFF == 1;
axiom ~fe_sec_mini_cmd~SEC_MINI_A == 0;
axiom ~fe_sec_mini_cmd~SEC_MINI_B == 1;
axiom ~fe_status~FE_HAS_SIGNAL == 1;
axiom ~fe_status~FE_HAS_CARRIER == 2;
axiom ~fe_status~FE_HAS_VITERBI == 4;
axiom ~fe_status~FE_HAS_SYNC == 8;
axiom ~fe_status~FE_HAS_LOCK == 16;
axiom ~fe_status~FE_TIMEDOUT == 32;
axiom ~fe_status~FE_REINIT == 64;
axiom ~fe_spectral_inversion~INVERSION_OFF == 0;
axiom ~fe_spectral_inversion~INVERSION_ON == 1;
axiom ~fe_spectral_inversion~INVERSION_AUTO == 2;
axiom ~fe_code_rate~FEC_NONE == 0;
axiom ~fe_code_rate~FEC_1_2 == 1;
axiom ~fe_code_rate~FEC_2_3 == 2;
axiom ~fe_code_rate~FEC_3_4 == 3;
axiom ~fe_code_rate~FEC_4_5 == 4;
axiom ~fe_code_rate~FEC_5_6 == 5;
axiom ~fe_code_rate~FEC_6_7 == 6;
axiom ~fe_code_rate~FEC_7_8 == 7;
axiom ~fe_code_rate~FEC_8_9 == 8;
axiom ~fe_code_rate~FEC_AUTO == 9;
axiom ~fe_code_rate~FEC_3_5 == 10;
axiom ~fe_code_rate~FEC_9_10 == 11;
axiom ~fe_code_rate~FEC_2_5 == 12;
axiom ~fe_modulation~QPSK == 0;
axiom ~fe_modulation~QAM_16 == 1;
axiom ~fe_modulation~QAM_32 == 2;
axiom ~fe_modulation~QAM_64 == 3;
axiom ~fe_modulation~QAM_128 == 4;
axiom ~fe_modulation~QAM_256 == 5;
axiom ~fe_modulation~QAM_AUTO == 6;
axiom ~fe_modulation~VSB_8 == 7;
axiom ~fe_modulation~VSB_16 == 8;
axiom ~fe_modulation~PSK_8 == 9;
axiom ~fe_modulation~APSK_16 == 10;
axiom ~fe_modulation~APSK_32 == 11;
axiom ~fe_modulation~DQPSK == 12;
axiom ~fe_modulation~QAM_4_NR == 13;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_2K == 0;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_8K == 1;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_AUTO == 2;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_4K == 3;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_1K == 4;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_16K == 5;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_32K == 6;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_C1 == 7;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_C3780 == 8;
axiom ~fe_guard_interval~GUARD_INTERVAL_1_32 == 0;
axiom ~fe_guard_interval~GUARD_INTERVAL_1_16 == 1;
axiom ~fe_guard_interval~GUARD_INTERVAL_1_8 == 2;
axiom ~fe_guard_interval~GUARD_INTERVAL_1_4 == 3;
axiom ~fe_guard_interval~GUARD_INTERVAL_AUTO == 4;
axiom ~fe_guard_interval~GUARD_INTERVAL_1_128 == 5;
axiom ~fe_guard_interval~GUARD_INTERVAL_19_128 == 6;
axiom ~fe_guard_interval~GUARD_INTERVAL_19_256 == 7;
axiom ~fe_guard_interval~GUARD_INTERVAL_PN420 == 8;
axiom ~fe_guard_interval~GUARD_INTERVAL_PN595 == 9;
axiom ~fe_guard_interval~GUARD_INTERVAL_PN945 == 10;
axiom ~fe_hierarchy~HIERARCHY_NONE == 0;
axiom ~fe_hierarchy~HIERARCHY_1 == 1;
axiom ~fe_hierarchy~HIERARCHY_2 == 2;
axiom ~fe_hierarchy~HIERARCHY_4 == 3;
axiom ~fe_hierarchy~HIERARCHY_AUTO == 4;
axiom ~fe_interleaving~INTERLEAVING_NONE == 0;
axiom ~fe_interleaving~INTERLEAVING_AUTO == 1;
axiom ~fe_interleaving~INTERLEAVING_240 == 2;
axiom ~fe_interleaving~INTERLEAVING_720 == 3;
axiom ~fe_pilot~PILOT_ON == 0;
axiom ~fe_pilot~PILOT_OFF == 1;
axiom ~fe_pilot~PILOT_AUTO == 2;
axiom ~fe_rolloff~ROLLOFF_35 == 0;
axiom ~fe_rolloff~ROLLOFF_20 == 1;
axiom ~fe_rolloff~ROLLOFF_25 == 2;
axiom ~fe_rolloff~ROLLOFF_AUTO == 3;
axiom ~fe_delivery_system~SYS_UNDEFINED == 0;
axiom ~fe_delivery_system~SYS_DVBC_ANNEX_A == 1;
axiom ~fe_delivery_system~SYS_DVBC_ANNEX_B == 2;
axiom ~fe_delivery_system~SYS_DVBT == 3;
axiom ~fe_delivery_system~SYS_DSS == 4;
axiom ~fe_delivery_system~SYS_DVBS == 5;
axiom ~fe_delivery_system~SYS_DVBS2 == 6;
axiom ~fe_delivery_system~SYS_DVBH == 7;
axiom ~fe_delivery_system~SYS_ISDBT == 8;
axiom ~fe_delivery_system~SYS_ISDBS == 9;
axiom ~fe_delivery_system~SYS_ISDBC == 10;
axiom ~fe_delivery_system~SYS_ATSC == 11;
axiom ~fe_delivery_system~SYS_ATSCMH == 12;
axiom ~fe_delivery_system~SYS_DTMB == 13;
axiom ~fe_delivery_system~SYS_CMMB == 14;
axiom ~fe_delivery_system~SYS_DAB == 15;
axiom ~fe_delivery_system~SYS_DVBT2 == 16;
axiom ~fe_delivery_system~SYS_TURBO == 17;
axiom ~fe_delivery_system~SYS_DVBC_ANNEX_C == 18;
axiom ~ldv_26341~DMX_OUT_DECODER == 0;
axiom ~ldv_26341~DMX_OUT_TAP == 1;
axiom ~ldv_26341~DMX_OUT_TS_TAP == 2;
axiom ~ldv_26341~DMX_OUT_TSDEMUX_TAP == 3;
axiom ~ldv_26343~DMX_IN_FRONTEND == 0;
axiom ~ldv_26343~DMX_IN_DVR == 1;
axiom ~dmx_ts_pes~DMX_PES_AUDIO0 == 0;
axiom ~dmx_ts_pes~DMX_PES_VIDEO0 == 1;
axiom ~dmx_ts_pes~DMX_PES_TELETEXT0 == 2;
axiom ~dmx_ts_pes~DMX_PES_SUBTITLE0 == 3;
axiom ~dmx_ts_pes~DMX_PES_PCR0 == 4;
axiom ~dmx_ts_pes~DMX_PES_AUDIO1 == 5;
axiom ~dmx_ts_pes~DMX_PES_VIDEO1 == 6;
axiom ~dmx_ts_pes~DMX_PES_TELETEXT1 == 7;
axiom ~dmx_ts_pes~DMX_PES_SUBTITLE1 == 8;
axiom ~dmx_ts_pes~DMX_PES_PCR1 == 9;
axiom ~dmx_ts_pes~DMX_PES_AUDIO2 == 10;
axiom ~dmx_ts_pes~DMX_PES_VIDEO2 == 11;
axiom ~dmx_ts_pes~DMX_PES_TELETEXT2 == 12;
axiom ~dmx_ts_pes~DMX_PES_SUBTITLE2 == 13;
axiom ~dmx_ts_pes~DMX_PES_PCR2 == 14;
axiom ~dmx_ts_pes~DMX_PES_AUDIO3 == 15;
axiom ~dmx_ts_pes~DMX_PES_VIDEO3 == 16;
axiom ~dmx_ts_pes~DMX_PES_TELETEXT3 == 17;
axiom ~dmx_ts_pes~DMX_PES_SUBTITLE3 == 18;
axiom ~dmx_ts_pes~DMX_PES_PCR3 == 19;
axiom ~dmx_ts_pes~DMX_PES_OTHER == 20;
axiom ~ldv_26359~DMX_SOURCE_FRONT0 == 0;
axiom ~ldv_26359~DMX_SOURCE_FRONT1 == 1;
axiom ~ldv_26359~DMX_SOURCE_FRONT2 == 2;
axiom ~ldv_26359~DMX_SOURCE_FRONT3 == 3;
axiom ~ldv_26359~DMX_SOURCE_DVR0 == 16;
axiom ~ldv_26359~DMX_SOURCE_DVR1 == 17;
axiom ~ldv_26359~DMX_SOURCE_DVR2 == 18;
axiom ~ldv_26359~DMX_SOURCE_DVR3 == 19;
axiom ~dmx_success~DMX_OK == 0;
axiom ~dmx_success~DMX_LENGTH_ERROR == 1;
axiom ~dmx_success~DMX_OVERRUN_ERROR == 2;
axiom ~dmx_success~DMX_CRC_ERROR == 3;
axiom ~dmx_success~DMX_FRAME_ERROR == 4;
axiom ~dmx_success~DMX_FIFO_ERROR == 5;
axiom ~dmx_success~DMX_MISSED_ERROR == 6;
axiom ~dmx_frontend_source~DMX_MEMORY_FE == 0;
axiom ~dmx_frontend_source~DMX_FRONTEND_0 == 1;
axiom ~dmx_frontend_source~DMX_FRONTEND_1 == 2;
axiom ~dmx_frontend_source~DMX_FRONTEND_2 == 3;
axiom ~dmx_frontend_source~DMX_FRONTEND_3 == 4;
axiom ~dmx_frontend_source~DMX_STREAM_0 == 5;
axiom ~dmx_frontend_source~DMX_STREAM_1 == 6;
axiom ~dmx_frontend_source~DMX_STREAM_2 == 7;
axiom ~dmx_frontend_source~DMX_STREAM_3 == 8;
axiom ~tuner_param~DVBFE_TUNER_FREQUENCY == 1;
axiom ~tuner_param~DVBFE_TUNER_TUNERSTEP == 2;
axiom ~tuner_param~DVBFE_TUNER_IFFREQ == 4;
axiom ~tuner_param~DVBFE_TUNER_BANDWIDTH == 8;
axiom ~tuner_param~DVBFE_TUNER_REFCLOCK == 16;
axiom ~tuner_param~DVBFE_TUNER_IQSENSE == 32;
axiom ~tuner_param~DVBFE_TUNER_DUMMY == -2147483648;
axiom ~dvbfe_algo~DVBFE_ALGO_HW == 1;
axiom ~dvbfe_algo~DVBFE_ALGO_SW == 2;
axiom ~dvbfe_algo~DVBFE_ALGO_CUSTOM == 4;
axiom ~dvbfe_algo~DVBFE_ALGO_RECOVERY == -2147483648;
axiom ~dvbfe_search~DVBFE_ALGO_SEARCH_SUCCESS == 1;
axiom ~dvbfe_search~DVBFE_ALGO_SEARCH_ASLEEP == 2;
axiom ~dvbfe_search~DVBFE_ALGO_SEARCH_FAILED == 4;
axiom ~dvbfe_search~DVBFE_ALGO_SEARCH_INVALID == 8;
axiom ~dvbfe_search~DVBFE_ALGO_SEARCH_AGAIN == 16;
axiom ~dvbfe_search~DVBFE_ALGO_SEARCH_ERROR == -2147483648;
axiom ~dmxdev_type~DMXDEV_TYPE_NONE == 0;
axiom ~dmxdev_type~DMXDEV_TYPE_SEC == 1;
axiom ~dmxdev_type~DMXDEV_TYPE_PES == 2;
axiom ~dmxdev_state~DMXDEV_STATE_FREE == 0;
axiom ~dmxdev_state~DMXDEV_STATE_ALLOCATED == 1;
axiom ~dmxdev_state~DMXDEV_STATE_SET == 2;
axiom ~dmxdev_state~DMXDEV_STATE_GO == 3;
axiom ~dmxdev_state~DMXDEV_STATE_DONE == 4;
axiom ~dmxdev_state~DMXDEV_STATE_TIMEDOUT == 5;
axiom ~tm6000_itype~TM6000_INPUT_TV == 1;
axiom ~tm6000_itype~TM6000_INPUT_COMPOSITE1 == 2;
axiom ~tm6000_itype~TM6000_INPUT_COMPOSITE2 == 3;
axiom ~tm6000_itype~TM6000_INPUT_SVIDEO == 4;
axiom ~tm6000_itype~TM6000_INPUT_DVB == 5;
axiom ~tm6000_itype~TM6000_INPUT_RADIO == 6;
axiom ~tm6000_mux~TM6000_VMUX_VIDEO_A == 1;
axiom ~tm6000_mux~TM6000_VMUX_VIDEO_B == 2;
axiom ~tm6000_mux~TM6000_VMUX_VIDEO_AB == 3;
axiom ~tm6000_mux~TM6000_AMUX_ADC1 == 4;
axiom ~tm6000_mux~TM6000_AMUX_ADC2 == 5;
axiom ~tm6000_mux~TM6000_AMUX_SIF1 == 6;
axiom ~tm6000_mux~TM6000_AMUX_SIF2 == 7;
axiom ~tm6000_mux~TM6000_AMUX_I2S == 8;
axiom ~tm6000_devtype~TM6000 == 0;
axiom ~tm6000_devtype~TM5600 == 1;
axiom ~tm6000_devtype~TM6010 == 2;
axiom ~tm6000_core_state~DEV_INITIALIZED == 1;
axiom ~tm6000_core_state~DEV_DISCONNECTED == 2;
axiom ~tm6000_core_state~DEV_MISCONFIGURED == 4;
axiom ~tm6000_mode~TM6000_MODE_UNKNOWN == 0;
axiom ~tm6000_mode~TM6000_MODE_ANALOG == 1;
axiom ~tm6000_mode~TM6000_MODE_DIGITAL == 2;
axiom ~firmware_type~XC2028_AUTO == 0;
axiom ~firmware_type~XC2028_D2633 == 1;
axiom ~firmware_type~XC2028_D2620 == 2;
axiom ~tm6000_ops_type~TM6000_AUDIO == 16;
axiom ~tm6000_ops_type~TM6000_DVB == 32;
axiom ~rc_type~RC_TYPE_UNKNOWN == 0;
axiom ~rc_type~RC_TYPE_OTHER == 1;
axiom ~rc_type~RC_TYPE_LIRC == 2;
axiom ~rc_type~RC_TYPE_RC5 == 3;
axiom ~rc_type~RC_TYPE_RC5X == 4;
axiom ~rc_type~RC_TYPE_RC5_SZ == 5;
axiom ~rc_type~RC_TYPE_JVC == 6;
axiom ~rc_type~RC_TYPE_SONY12 == 7;
axiom ~rc_type~RC_TYPE_SONY15 == 8;
axiom ~rc_type~RC_TYPE_SONY20 == 9;
axiom ~rc_type~RC_TYPE_NEC == 10;
axiom ~rc_type~RC_TYPE_SANYO == 11;
axiom ~rc_type~RC_TYPE_MCE_KBD == 12;
axiom ~rc_type~RC_TYPE_RC6_0 == 13;
axiom ~rc_type~RC_TYPE_RC6_6A_20 == 14;
axiom ~rc_type~RC_TYPE_RC6_6A_24 == 15;
axiom ~rc_type~RC_TYPE_RC6_6A_32 == 16;
axiom ~rc_type~RC_TYPE_RC6_MCE == 17;
axiom ~rc_driver_type~RC_DRIVER_SCANCODE == 0;
axiom ~rc_driver_type~RC_DRIVER_IR_RAW == 1;
function { :overapproximation "bitwiseOr" } ~bitwiseOr(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseAnd" } ~bitwiseAnd(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "shiftRight" } ~shiftRight(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "shiftLeft" } ~shiftLeft(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseComplement" } ~bitwiseComplement(in0 : int) returns (out : int);
var ~card : [int]int;

var ~#tm6000_devused.base : int, ~#tm6000_devused.offset : int;

var ~ldv_0_ldv_param_7_2_default : int;

var ~ldv_12_ret_default : int;

var ~ldv_3_ldv_param_9_1_default.base : int, ~ldv_3_ldv_param_9_1_default.offset : int;

var ~ldv_3_ldv_param_9_2_default.base : int, ~ldv_3_ldv_param_9_2_default.offset : int;

var ~ldv_6_probe_retval_default : int;

var ~ldv_6_reset_flag_default : int;

var ~ldv_8_ldv_param_19_1_default.base : int, ~ldv_8_ldv_param_19_1_default.offset : int;

var ~ldv_8_ldv_param_19_2_default : int;

var ~ldv_8_ldv_param_19_3_default.base : int, ~ldv_8_ldv_param_19_3_default.offset : int;

var ~ldv_8_ldv_param_22_1_default : int;

var ~ldv_8_ldv_param_22_2_default : int;

var ~ldv_8_ldv_param_30_2_default.base : int, ~ldv_8_ldv_param_30_2_default.offset : int;

var ~ldv_8_ldv_param_33_2_default.base : int, ~ldv_8_ldv_param_33_2_default.offset : int;

var ~ldv_8_ldv_param_43_2_default : int;

var ~ldv_8_ldv_param_46_2_default : int;

var ~ldv_8_ret_default : int;

var ~ldv_9_ldv_param_19_1_default.base : int, ~ldv_9_ldv_param_19_1_default.offset : int;

var ~ldv_9_ldv_param_19_2_default : int;

var ~ldv_9_ldv_param_19_3_default.base : int, ~ldv_9_ldv_param_19_3_default.offset : int;

var ~ldv_9_ldv_param_22_1_default : int;

var ~ldv_9_ldv_param_22_2_default : int;

var ~ldv_9_ldv_param_30_2_default.base : int, ~ldv_9_ldv_param_30_2_default.offset : int;

var ~ldv_9_ldv_param_33_2_default.base : int, ~ldv_9_ldv_param_33_2_default.offset : int;

var ~ldv_9_ldv_param_43_2_default : int;

var ~ldv_9_ldv_param_46_2_default : int;

var ~ldv_9_ret_default : int;

var ~ldv_statevar_0 : int;

var ~ldv_statevar_1 : int;

var ~ldv_statevar_12 : int;

var ~ldv_statevar_2 : int;

var ~ldv_statevar_3 : int;

var ~ldv_statevar_4 : int;

var ~ldv_statevar_5 : int;

var ~ldv_statevar_6 : int;

var ~ldv_statevar_7 : int;

var ~ldv_statevar_8 : int;

var ~ldv_statevar_9 : int;

var ~tm6000_debug : int;

var ~i2c_debug : int;

var ~jiffies : int;

var ~v4l2_type_names.base : [int]int, ~v4l2_type_names.offset : [int]int;

var ~vid_limit : int;

var ~video_nr : int;

var ~radio_nr : int;

var ~iname.base : [int]int, ~iname.offset : [int]int;

var ~tm6010_a_mode : int;

var ~ir_debug : int;

var ~enable_ir : int;

var ~ir_clock_mhz : int;

var ~ldv_spin_alloc_lock_of_task_struct : int;

var ~ldv_spin_i_lock_of_inode : int;

var ~ldv_spin_lock : int;

var ~ldv_spin_lock_of_NOT_ARG_SIGN : int;

var ~ldv_spin_node_size_lock_of_pglist_data : int;

var ~ldv_spin_ptl : int;

var ~ldv_spin_siglock_of_sighand_struct : int;

var ~ldv_spin_slock_of_tm6000_core : int;

var ~#__this_module.base : int, ~#__this_module.offset : int;

var ~system_wq.base : int, ~system_wq.offset : int;

var ~#tm6000_boards.base : int, ~#tm6000_boards.offset : int;

var ~#tm6000_id_table.base : int, ~#tm6000_id_table.offset : int;

var ~#tm6000_usb_driver.base : int, ~#tm6000_usb_driver.offset : int;

var ~ldv_0_callback_functionality.base : int, ~ldv_0_callback_functionality.offset : int;

var ~ldv_0_callback_master_xfer.base : int, ~ldv_0_callback_master_xfer.offset : int;

var ~ldv_0_container_struct_i2c_adapter_ptr.base : int, ~ldv_0_container_struct_i2c_adapter_ptr.offset : int;

var ~ldv_0_container_struct_i2c_msg_ptr.base : int, ~ldv_0_container_struct_i2c_msg_ptr.offset : int;

var ~ldv_1_callback_s_ctrl.base : int, ~ldv_1_callback_s_ctrl.offset : int;

var ~ldv_1_container_struct_v4l2_ctrl_ptr.base : int, ~ldv_1_container_struct_v4l2_ctrl_ptr.offset : int;

var ~ldv_2_callback_s_ctrl.base : int, ~ldv_2_callback_s_ctrl.offset : int;

var ~ldv_2_container_struct_v4l2_ctrl_ptr.base : int, ~ldv_2_container_struct_v4l2_ctrl_ptr.offset : int;

var ~ldv_3_callback_buf_prepare.base : int, ~ldv_3_callback_buf_prepare.offset : int;

var ~ldv_3_callback_buf_queue.base : int, ~ldv_3_callback_buf_queue.offset : int;

var ~ldv_3_callback_buf_release.base : int, ~ldv_3_callback_buf_release.offset : int;

var ~ldv_3_callback_buf_setup.base : int, ~ldv_3_callback_buf_setup.offset : int;

var ~ldv_3_container_enum_v4l2_field : int;

var ~ldv_3_container_struct_videobuf_buffer_ptr.base : int, ~ldv_3_container_struct_videobuf_buffer_ptr.offset : int;

var ~ldv_3_container_struct_videobuf_queue_ptr.base : int, ~ldv_3_container_struct_videobuf_queue_ptr.offset : int;

var ~ldv_4_container_timer_list.base : int, ~ldv_4_container_timer_list.offset : int;

var ~ldv_5_container_timer_list.base : int, ~ldv_5_container_timer_list.offset : int;

var ~ldv_6_container_usb_driver.base : int, ~ldv_6_container_usb_driver.offset : int;

var ~ldv_6_ldv_param_13_1_default.base : int, ~ldv_6_ldv_param_13_1_default.offset : int;

var ~ldv_6_resource_usb_interface.base : int, ~ldv_6_resource_usb_interface.offset : int;

var ~ldv_6_usb_device_usb_device.base : int, ~ldv_6_usb_device_usb_device.offset : int;

var ~ldv_7_container_usb_driver.base : int, ~ldv_7_container_usb_driver.offset : int;

var ~ldv_8_callback_mmap.base : int, ~ldv_8_callback_mmap.offset : int;

var ~ldv_8_callback_read.base : int, ~ldv_8_callback_read.offset : int;

var ~ldv_8_resource_enum_v4l2_buf_type : int;

var ~ldv_8_resource_file.base : int, ~ldv_8_resource_file.offset : int;

var ~ldv_8_resource_struct_poll_table_struct_ptr.base : int, ~ldv_8_resource_struct_poll_table_struct_ptr.offset : int;

var ~ldv_8_resource_struct_v4l2_buffer_ptr.base : int, ~ldv_8_resource_struct_v4l2_buffer_ptr.offset : int;

var ~ldv_8_resource_struct_v4l2_capability_ptr.base : int, ~ldv_8_resource_struct_v4l2_capability_ptr.offset : int;

var ~ldv_8_resource_struct_v4l2_event_subscription_ptr.base : int, ~ldv_8_resource_struct_v4l2_event_subscription_ptr.offset : int;

var ~ldv_8_resource_struct_v4l2_fh_ptr.base : int, ~ldv_8_resource_struct_v4l2_fh_ptr.offset : int;

var ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.base : int, ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.offset : int;

var ~ldv_8_resource_struct_v4l2_format_ptr.base : int, ~ldv_8_resource_struct_v4l2_format_ptr.offset : int;

var ~ldv_8_resource_struct_v4l2_frequency_ptr.base : int, ~ldv_8_resource_struct_v4l2_frequency_ptr.offset : int;

var ~ldv_8_resource_struct_v4l2_input_ptr.base : int, ~ldv_8_resource_struct_v4l2_input_ptr.offset : int;

var ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.base : int, ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.offset : int;

var ~ldv_8_resource_struct_v4l2_tuner_ptr.base : int, ~ldv_8_resource_struct_v4l2_tuner_ptr.offset : int;

var ~ldv_8_resource_struct_vm_area_struct_ptr.base : int, ~ldv_8_resource_struct_vm_area_struct_ptr.offset : int;

var ~ldv_9_resource_enum_v4l2_buf_type : int;

var ~ldv_9_resource_file.base : int, ~ldv_9_resource_file.offset : int;

var ~ldv_9_resource_struct_poll_table_struct_ptr.base : int, ~ldv_9_resource_struct_poll_table_struct_ptr.offset : int;

var ~ldv_9_resource_struct_v4l2_buffer_ptr.base : int, ~ldv_9_resource_struct_v4l2_buffer_ptr.offset : int;

var ~ldv_9_resource_struct_v4l2_capability_ptr.base : int, ~ldv_9_resource_struct_v4l2_capability_ptr.offset : int;

var ~ldv_9_resource_struct_v4l2_event_subscription_ptr.base : int, ~ldv_9_resource_struct_v4l2_event_subscription_ptr.offset : int;

var ~ldv_9_resource_struct_v4l2_fh_ptr.base : int, ~ldv_9_resource_struct_v4l2_fh_ptr.offset : int;

var ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.base : int, ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.offset : int;

var ~ldv_9_resource_struct_v4l2_format_ptr.base : int, ~ldv_9_resource_struct_v4l2_format_ptr.offset : int;

var ~ldv_9_resource_struct_v4l2_frequency_ptr.base : int, ~ldv_9_resource_struct_v4l2_frequency_ptr.offset : int;

var ~ldv_9_resource_struct_v4l2_input_ptr.base : int, ~ldv_9_resource_struct_v4l2_input_ptr.offset : int;

var ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.base : int, ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.offset : int;

var ~ldv_9_resource_struct_v4l2_tuner_ptr.base : int, ~ldv_9_resource_struct_v4l2_tuner_ptr.offset : int;

var ~ldv_9_resource_struct_vm_area_struct_ptr.base : int, ~ldv_9_resource_struct_vm_area_struct_ptr.offset : int;

var ~ldv_12_exit_tm6000_usb_driver_exit_default.base : int, ~ldv_12_exit_tm6000_usb_driver_exit_default.offset : int;

var ~ldv_12_init_tm6000_usb_driver_init_default.base : int, ~ldv_12_init_tm6000_usb_driver_init_default.offset : int;

var ~#tm6000_init_tab.base : int, ~#tm6000_init_tab.offset : int;

var ~#tm6010_init_tab.base : int, ~#tm6010_init_tab.offset : int;

var ~#tm6000_devlist.base : int, ~#tm6000_devlist.offset : int;

var ~#tm6000_devlist_mutex.base : int, ~#tm6000_devlist_mutex.offset : int;

var ~#tm6000_extension_devlist.base : int, ~#tm6000_extension_devlist.offset : int;

var ~#tm6000_algo.base : int, ~#tm6000_algo.offset : int;

var ~keep_urb : ~bool;

var ~#format.base : int, ~#format.offset : int;

var ~#tm6000_video_qops.base : int, ~#tm6000_video_qops.offset : int;

var ~#tm6000_ctrl_ops.base : int, ~#tm6000_ctrl_ops.offset : int;

var ~#tm6000_radio_ctrl_ops.base : int, ~#tm6000_radio_ctrl_ops.offset : int;

var ~#tm6000_fops.base : int, ~#tm6000_fops.offset : int;

var ~#video_ioctl_ops.base : int, ~#video_ioctl_ops.offset : int;

var ~#tm6000_template.base : int, ~#tm6000_template.offset : int;

var ~#radio_fops.base : int, ~#radio_fops.offset : int;

var ~#radio_ioctl_ops.base : int, ~#radio_ioctl_ops.offset : int;

var ~#tm6000_radio_template.base : int, ~#tm6000_radio_template.offset : int;

var ~ldv_8_container_v4l2_file_operations.base : int, ~ldv_8_container_v4l2_file_operations.offset : int;

var ~ldv_8_resource_struct_video_device.base : int, ~ldv_8_resource_struct_video_device.offset : int;

var ~ldv_9_container_v4l2_file_operations.base : int, ~ldv_9_container_v4l2_file_operations.offset : int;

var ~ldv_9_resource_struct_video_device.base : int, ~ldv_9_resource_struct_video_device.offset : int;

var ~ldv_8_callback_func_1_ptr.base : int, ~ldv_8_callback_func_1_ptr.offset : int;

var ~ldv_8_callback_poll.base : int, ~ldv_8_callback_poll.offset : int;

var ~ldv_8_callback_unlocked_ioctl.base : int, ~ldv_8_callback_unlocked_ioctl.offset : int;

var ~ldv_8_callback_vidioc_dqbuf.base : int, ~ldv_8_callback_vidioc_dqbuf.offset : int;

var ~ldv_8_callback_vidioc_enum_fmt_vid_cap.base : int, ~ldv_8_callback_vidioc_enum_fmt_vid_cap.offset : int;

var ~ldv_8_callback_vidioc_enum_input.base : int, ~ldv_8_callback_vidioc_enum_input.offset : int;

var ~ldv_8_callback_vidioc_g_fmt_vid_cap.base : int, ~ldv_8_callback_vidioc_g_fmt_vid_cap.offset : int;

var ~ldv_8_callback_vidioc_g_frequency.base : int, ~ldv_8_callback_vidioc_g_frequency.offset : int;

var ~ldv_8_callback_vidioc_g_input.base : int, ~ldv_8_callback_vidioc_g_input.offset : int;

var ~ldv_8_callback_vidioc_g_std.base : int, ~ldv_8_callback_vidioc_g_std.offset : int;

var ~ldv_8_callback_vidioc_g_tuner.base : int, ~ldv_8_callback_vidioc_g_tuner.offset : int;

var ~ldv_8_callback_vidioc_qbuf.base : int, ~ldv_8_callback_vidioc_qbuf.offset : int;

var ~ldv_8_callback_vidioc_querybuf.base : int, ~ldv_8_callback_vidioc_querybuf.offset : int;

var ~ldv_8_callback_vidioc_querycap.base : int, ~ldv_8_callback_vidioc_querycap.offset : int;

var ~ldv_8_callback_vidioc_reqbufs.base : int, ~ldv_8_callback_vidioc_reqbufs.offset : int;

var ~ldv_8_callback_vidioc_s_fmt_vid_cap.base : int, ~ldv_8_callback_vidioc_s_fmt_vid_cap.offset : int;

var ~ldv_8_callback_vidioc_s_frequency.base : int, ~ldv_8_callback_vidioc_s_frequency.offset : int;

var ~ldv_8_callback_vidioc_s_input.base : int, ~ldv_8_callback_vidioc_s_input.offset : int;

var ~ldv_8_callback_vidioc_s_std.base : int, ~ldv_8_callback_vidioc_s_std.offset : int;

var ~ldv_8_callback_vidioc_s_tuner.base : int, ~ldv_8_callback_vidioc_s_tuner.offset : int;

var ~ldv_8_callback_vidioc_streamoff.base : int, ~ldv_8_callback_vidioc_streamoff.offset : int;

var ~ldv_8_callback_vidioc_streamon.base : int, ~ldv_8_callback_vidioc_streamon.offset : int;

var ~ldv_8_callback_vidioc_subscribe_event.base : int, ~ldv_8_callback_vidioc_subscribe_event.offset : int;

var ~ldv_8_callback_vidioc_try_fmt_vid_cap.base : int, ~ldv_8_callback_vidioc_try_fmt_vid_cap.offset : int;

var ~ldv_8_callback_vidioc_unsubscribe_event.base : int, ~ldv_8_callback_vidioc_unsubscribe_event.offset : int;

var ~ldv_9_callback_func_1_ptr.base : int, ~ldv_9_callback_func_1_ptr.offset : int;

var ~ldv_9_callback_mmap.base : int, ~ldv_9_callback_mmap.offset : int;

var ~ldv_9_callback_poll.base : int, ~ldv_9_callback_poll.offset : int;

var ~ldv_9_callback_read.base : int, ~ldv_9_callback_read.offset : int;

var ~ldv_9_callback_unlocked_ioctl.base : int, ~ldv_9_callback_unlocked_ioctl.offset : int;

var ~ldv_9_callback_vidioc_dqbuf.base : int, ~ldv_9_callback_vidioc_dqbuf.offset : int;

var ~ldv_9_callback_vidioc_enum_fmt_vid_cap.base : int, ~ldv_9_callback_vidioc_enum_fmt_vid_cap.offset : int;

var ~ldv_9_callback_vidioc_enum_input.base : int, ~ldv_9_callback_vidioc_enum_input.offset : int;

var ~ldv_9_callback_vidioc_g_fmt_vid_cap.base : int, ~ldv_9_callback_vidioc_g_fmt_vid_cap.offset : int;

var ~ldv_9_callback_vidioc_g_frequency.base : int, ~ldv_9_callback_vidioc_g_frequency.offset : int;

var ~ldv_9_callback_vidioc_g_input.base : int, ~ldv_9_callback_vidioc_g_input.offset : int;

var ~ldv_9_callback_vidioc_g_std.base : int, ~ldv_9_callback_vidioc_g_std.offset : int;

var ~ldv_9_callback_vidioc_g_tuner.base : int, ~ldv_9_callback_vidioc_g_tuner.offset : int;

var ~ldv_9_callback_vidioc_qbuf.base : int, ~ldv_9_callback_vidioc_qbuf.offset : int;

var ~ldv_9_callback_vidioc_querybuf.base : int, ~ldv_9_callback_vidioc_querybuf.offset : int;

var ~ldv_9_callback_vidioc_querycap.base : int, ~ldv_9_callback_vidioc_querycap.offset : int;

var ~ldv_9_callback_vidioc_reqbufs.base : int, ~ldv_9_callback_vidioc_reqbufs.offset : int;

var ~ldv_9_callback_vidioc_s_fmt_vid_cap.base : int, ~ldv_9_callback_vidioc_s_fmt_vid_cap.offset : int;

var ~ldv_9_callback_vidioc_s_frequency.base : int, ~ldv_9_callback_vidioc_s_frequency.offset : int;

var ~ldv_9_callback_vidioc_s_input.base : int, ~ldv_9_callback_vidioc_s_input.offset : int;

var ~ldv_9_callback_vidioc_s_std.base : int, ~ldv_9_callback_vidioc_s_std.offset : int;

var ~ldv_9_callback_vidioc_s_tuner.base : int, ~ldv_9_callback_vidioc_s_tuner.offset : int;

var ~ldv_9_callback_vidioc_streamoff.base : int, ~ldv_9_callback_vidioc_streamoff.offset : int;

var ~ldv_9_callback_vidioc_streamon.base : int, ~ldv_9_callback_vidioc_streamon.offset : int;

var ~ldv_9_callback_vidioc_subscribe_event.base : int, ~ldv_9_callback_vidioc_subscribe_event.offset : int;

var ~ldv_9_callback_vidioc_try_fmt_vid_cap.base : int, ~ldv_9_callback_vidioc_try_fmt_vid_cap.offset : int;

var ~ldv_9_callback_vidioc_unsubscribe_event.base : int, ~ldv_9_callback_vidioc_unsubscribe_event.offset : int;

var ~#composite_pal_m.base : int, ~#composite_pal_m.offset : int;

var ~#composite_pal_nc.base : int, ~#composite_pal_nc.offset : int;

var ~#composite_pal.base : int, ~#composite_pal.offset : int;

var ~#composite_secam.base : int, ~#composite_secam.offset : int;

var ~#composite_ntsc.base : int, ~#composite_ntsc.offset : int;

var ~composite_stds.id : [int]int, ~composite_stds.common.base : [int]int, ~composite_stds.common.offset : [int]int;

var ~#svideo_pal_m.base : int, ~#svideo_pal_m.offset : int;

var ~#svideo_pal_nc.base : int, ~#svideo_pal_nc.offset : int;

var ~#svideo_pal.base : int, ~#svideo_pal.offset : int;

var ~#svideo_secam.base : int, ~#svideo_secam.offset : int;

var ~#svideo_ntsc.base : int, ~#svideo_ntsc.offset : int;

var ~svideo_stds.id : [int]int, ~svideo_stds.common.base : [int]int, ~svideo_stds.common.offset : [int]int;

var #NULL.base : int, #NULL.offset : int;

var #valid : [int]int;

var #length : [int]int;

var #memory_int : [int,int]int;

var #memory_$Pointer$.base : [int,int]int, #memory_$Pointer$.offset : [int,int]int;

implementation free_buffer(#in~vq.base : int, #in~vq.offset : int, #in~buf.base : int, #in~buf.offset : int) returns (){
    var #t~mem1486.base : int, #t~mem1486.offset : int;
    var #t~mem1487.base : int, #t~mem1487.offset : int;
    var #t~ret1488 : int;
    var #t~mem1489.base : int, #t~mem1489.offset : int;
    var ~vq.base : int, ~vq.offset : int;
    var ~buf.base : int, ~buf.offset : int;
    var ~fh~1891.base : int, ~fh~1891.offset : int;
    var ~dev~1891.base : int, ~dev~1891.offset : int;
    var ~flags~1891 : int;
    var ~tmp~1891 : int;

  loc0:
    ~vq.base, ~vq.offset := #in~vq.base, #in~vq.offset;
    ~buf.base, ~buf.offset := #in~buf.base, #in~buf.offset;
    havoc ~fh~1891.base, ~fh~1891.offset;
    havoc ~dev~1891.base, ~dev~1891.offset;
    havoc ~flags~1891;
    havoc ~tmp~1891;
    call #t~mem1486.base, #t~mem1486.offset := read~$Pointer$(~vq.base, ~vq.offset + 588, 8);
    ~fh~1891.base, ~fh~1891.offset := #t~mem1486.base, #t~mem1486.offset;
    havoc #t~mem1486.base, #t~mem1486.offset;
    call #t~mem1487.base, #t~mem1487.offset := read~$Pointer$(~fh~1891.base, ~fh~1891.offset + 168, 8);
    ~dev~1891.base, ~dev~1891.offset := #t~mem1487.base, #t~mem1487.offset;
    havoc #t~mem1487.base, #t~mem1487.offset;
    call #t~ret1488 := preempt_count();
    assume -2147483648 <= #t~ret1488 && #t~ret1488 <= 2147483647;
    ~tmp~1891 := #t~ret1488;
    havoc #t~ret1488;
    assume !(~bitwiseAnd(~tmp~1891, 2096896) % 18446744073709551616 != 0);
    call ldv___ldv_spin_lock_54(~dev~1891.base, ~dev~1891.offset + 5397);
    return;
}

procedure free_buffer(#in~vq.base : int, #in~vq.offset : int, #in~buf.base : int, #in~buf.offset : int) returns ();
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int, ~ldv_spin_slock_of_tm6000_core;

implementation ldv_initialize_external_data() returns (){
  loc1:
    call ldv_allocate_external_0();
    assume true;
    return;
}

procedure ldv_initialize_external_data() returns ();
modifies ~ldv_0_container_struct_i2c_adapter_ptr.base, ~ldv_0_container_struct_i2c_adapter_ptr.offset, ~ldv_0_container_struct_i2c_msg_ptr.base, ~ldv_0_container_struct_i2c_msg_ptr.offset, ~ldv_1_container_struct_v4l2_ctrl_ptr.base, ~ldv_1_container_struct_v4l2_ctrl_ptr.offset, ~ldv_2_container_struct_v4l2_ctrl_ptr.base, ~ldv_2_container_struct_v4l2_ctrl_ptr.offset, ~ldv_3_container_struct_videobuf_buffer_ptr.base, ~ldv_3_container_struct_videobuf_buffer_ptr.offset, ~ldv_3_container_struct_videobuf_queue_ptr.base, ~ldv_3_container_struct_videobuf_queue_ptr.offset, ~ldv_3_ldv_param_9_1_default.base, ~ldv_3_ldv_param_9_1_default.offset, ~ldv_3_ldv_param_9_2_default.base, ~ldv_3_ldv_param_9_2_default.offset, ~ldv_4_container_timer_list.base, ~ldv_4_container_timer_list.offset, ~ldv_5_container_timer_list.base, ~ldv_5_container_timer_list.offset, ~ldv_6_ldv_param_13_1_default.base, ~ldv_6_ldv_param_13_1_default.offset, ~ldv_6_resource_usb_interface.base, ~ldv_6_resource_usb_interface.offset, ~ldv_6_usb_device_usb_device.base, ~ldv_6_usb_device_usb_device.offset, ~ldv_8_callback_mmap.base, ~ldv_8_callback_mmap.offset, ~ldv_8_callback_read.base, ~ldv_8_callback_read.offset, ~ldv_8_ldv_param_19_1_default.base, ~ldv_8_ldv_param_19_1_default.offset, ~ldv_8_ldv_param_19_3_default.base, ~ldv_8_ldv_param_19_3_default.offset, ~ldv_8_ldv_param_30_2_default.base, ~ldv_8_ldv_param_30_2_default.offset, ~ldv_8_ldv_param_33_2_default.base, ~ldv_8_ldv_param_33_2_default.offset, ~ldv_8_resource_file.base, ~ldv_8_resource_file.offset, ~ldv_8_resource_struct_poll_table_struct_ptr.base, ~ldv_8_resource_struct_poll_table_struct_ptr.offset, ~ldv_8_resource_struct_v4l2_buffer_ptr.base, ~ldv_8_resource_struct_v4l2_buffer_ptr.offset, ~ldv_8_resource_struct_v4l2_capability_ptr.base, ~ldv_8_resource_struct_v4l2_capability_ptr.offset, ~ldv_8_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_8_resource_struct_v4l2_event_subscription_ptr.offset, ~ldv_8_resource_struct_v4l2_fh_ptr.base, ~ldv_8_resource_struct_v4l2_fh_ptr.offset, ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.offset, ~ldv_8_resource_struct_v4l2_format_ptr.base, ~ldv_8_resource_struct_v4l2_format_ptr.offset, ~ldv_8_resource_struct_v4l2_frequency_ptr.base, ~ldv_8_resource_struct_v4l2_frequency_ptr.offset, ~ldv_8_resource_struct_v4l2_input_ptr.base, ~ldv_8_resource_struct_v4l2_input_ptr.offset, ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.offset, ~ldv_8_resource_struct_v4l2_tuner_ptr.base, ~ldv_8_resource_struct_v4l2_tuner_ptr.offset, ~ldv_8_resource_struct_vm_area_struct_ptr.base, ~ldv_8_resource_struct_vm_area_struct_ptr.offset, ~ldv_9_ldv_param_19_1_default.base, ~ldv_9_ldv_param_19_1_default.offset, ~ldv_9_ldv_param_19_3_default.base, ~ldv_9_ldv_param_19_3_default.offset, ~ldv_9_ldv_param_30_2_default.base, ~ldv_9_ldv_param_30_2_default.offset, ~ldv_9_ldv_param_33_2_default.base, ~ldv_9_ldv_param_33_2_default.offset, ~ldv_9_resource_file.base, ~ldv_9_resource_file.offset, ~ldv_9_resource_struct_poll_table_struct_ptr.base, ~ldv_9_resource_struct_poll_table_struct_ptr.offset, ~ldv_9_resource_struct_v4l2_buffer_ptr.base, ~ldv_9_resource_struct_v4l2_buffer_ptr.offset, ~ldv_9_resource_struct_v4l2_capability_ptr.base, ~ldv_9_resource_struct_v4l2_capability_ptr.offset, ~ldv_9_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_9_resource_struct_v4l2_event_subscription_ptr.offset, ~ldv_9_resource_struct_v4l2_fh_ptr.base, ~ldv_9_resource_struct_v4l2_fh_ptr.offset, ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.offset, ~ldv_9_resource_struct_v4l2_format_ptr.base, ~ldv_9_resource_struct_v4l2_format_ptr.offset, ~ldv_9_resource_struct_v4l2_frequency_ptr.base, ~ldv_9_resource_struct_v4l2_frequency_ptr.offset, ~ldv_9_resource_struct_v4l2_input_ptr.base, ~ldv_9_resource_struct_v4l2_input_ptr.offset, ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.offset, ~ldv_9_resource_struct_v4l2_tuner_ptr.base, ~ldv_9_resource_struct_v4l2_tuner_ptr.offset, ~ldv_9_resource_struct_vm_area_struct_ptr.base, ~ldv_9_resource_struct_vm_area_struct_ptr.offset;

implementation ldv_undef_int() returns (#res : int){
    var #t~nondet3667 : int;
    var ~tmp~3194 : int;

  loc2:
    havoc ~tmp~3194;
    assume -2147483648 <= #t~nondet3667 && #t~nondet3667 <= 2147483647;
    ~tmp~3194 := #t~nondet3667;
    havoc #t~nondet3667;
    #res := ~tmp~3194;
    assume true;
    return;
}

procedure ldv_undef_int() returns (#res : int);
modifies ;

implementation main() returns (#res : int){
    var #t~ret601 : int;
    var ~tmp~604 : int;

  loc3:
    havoc ~tmp~604;
    call ldv_initialize();
    call ldv_initialize_external_data();
    ~ldv_statevar_12 := 17;
    ~ldv_statevar_0 := 5;
    ~ldv_statevar_1 := 5;
    ~ldv_statevar_2 := 5;
    ~ldv_statevar_3 := 5;
    ~ldv_statevar_4 := 3;
    ~ldv_statevar_5 := 4;
    ~ldv_6_reset_flag_default := 0;
    ~ldv_statevar_6 := 15;
    ~ldv_statevar_7 := 4;
    ~ldv_8_ret_default := 1;
    ~ldv_statevar_8 := 14;
    ~ldv_9_ret_default := 1;
    ~ldv_statevar_9 := 14;
    goto loc4;
  loc4:
    call #t~ret601 := ldv_undef_int();
    assume -2147483648 <= #t~ret601 && #t~ret601 <= 2147483647;
    ~tmp~604 := #t~ret601;
    havoc #t~ret601;
    assume !(~tmp~604 == 0);
    assume !(~tmp~604 == 1);
    assume !(~tmp~604 == 2);
    assume !(~tmp~604 == 3);
    assume ~tmp~604 == 4;
    call ldv_struct_videobuf_queue_ops_dummy_resourceless_instance_3(0, 0);
    goto loc4;
}

procedure main() returns (#res : int);
modifies ~ldv_statevar_12, ~ldv_statevar_0, ~ldv_statevar_1, ~ldv_statevar_2, ~ldv_statevar_3, ~ldv_statevar_4, ~ldv_statevar_5, ~ldv_6_reset_flag_default, ~ldv_statevar_6, ~ldv_statevar_7, ~ldv_8_ret_default, ~ldv_statevar_8, ~ldv_9_ret_default, ~ldv_statevar_9, ~ldv_0_container_struct_i2c_adapter_ptr.base, ~ldv_0_container_struct_i2c_adapter_ptr.offset, ~ldv_0_container_struct_i2c_msg_ptr.base, ~ldv_0_container_struct_i2c_msg_ptr.offset, ~ldv_1_container_struct_v4l2_ctrl_ptr.base, ~ldv_1_container_struct_v4l2_ctrl_ptr.offset, ~ldv_2_container_struct_v4l2_ctrl_ptr.base, ~ldv_2_container_struct_v4l2_ctrl_ptr.offset, ~ldv_3_container_struct_videobuf_buffer_ptr.base, ~ldv_3_container_struct_videobuf_buffer_ptr.offset, ~ldv_3_container_struct_videobuf_queue_ptr.base, ~ldv_3_container_struct_videobuf_queue_ptr.offset, ~ldv_3_ldv_param_9_1_default.base, ~ldv_3_ldv_param_9_1_default.offset, ~ldv_3_ldv_param_9_2_default.base, ~ldv_3_ldv_param_9_2_default.offset, ~ldv_4_container_timer_list.base, ~ldv_4_container_timer_list.offset, ~ldv_5_container_timer_list.base, ~ldv_5_container_timer_list.offset, ~ldv_6_ldv_param_13_1_default.base, ~ldv_6_ldv_param_13_1_default.offset, ~ldv_6_resource_usb_interface.base, ~ldv_6_resource_usb_interface.offset, ~ldv_6_usb_device_usb_device.base, ~ldv_6_usb_device_usb_device.offset, ~ldv_8_callback_mmap.base, ~ldv_8_callback_mmap.offset, ~ldv_8_callback_read.base, ~ldv_8_callback_read.offset, ~ldv_8_ldv_param_19_1_default.base, ~ldv_8_ldv_param_19_1_default.offset, ~ldv_8_ldv_param_19_3_default.base, ~ldv_8_ldv_param_19_3_default.offset, ~ldv_8_ldv_param_30_2_default.base, ~ldv_8_ldv_param_30_2_default.offset, ~ldv_8_ldv_param_33_2_default.base, ~ldv_8_ldv_param_33_2_default.offset, ~ldv_8_resource_file.base, ~ldv_8_resource_file.offset, ~ldv_8_resource_struct_poll_table_struct_ptr.base, ~ldv_8_resource_struct_poll_table_struct_ptr.offset, ~ldv_8_resource_struct_v4l2_buffer_ptr.base, ~ldv_8_resource_struct_v4l2_buffer_ptr.offset, ~ldv_8_resource_struct_v4l2_capability_ptr.base, ~ldv_8_resource_struct_v4l2_capability_ptr.offset, ~ldv_8_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_8_resource_struct_v4l2_event_subscription_ptr.offset, ~ldv_8_resource_struct_v4l2_fh_ptr.base, ~ldv_8_resource_struct_v4l2_fh_ptr.offset, ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.offset, ~ldv_8_resource_struct_v4l2_format_ptr.base, ~ldv_8_resource_struct_v4l2_format_ptr.offset, ~ldv_8_resource_struct_v4l2_frequency_ptr.base, ~ldv_8_resource_struct_v4l2_frequency_ptr.offset, ~ldv_8_resource_struct_v4l2_input_ptr.base, ~ldv_8_resource_struct_v4l2_input_ptr.offset, ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.offset, ~ldv_8_resource_struct_v4l2_tuner_ptr.base, ~ldv_8_resource_struct_v4l2_tuner_ptr.offset, ~ldv_8_resource_struct_vm_area_struct_ptr.base, ~ldv_8_resource_struct_vm_area_struct_ptr.offset, ~ldv_9_ldv_param_19_1_default.base, ~ldv_9_ldv_param_19_1_default.offset, ~ldv_9_ldv_param_19_3_default.base, ~ldv_9_ldv_param_19_3_default.offset, ~ldv_9_ldv_param_30_2_default.base, ~ldv_9_ldv_param_30_2_default.offset, ~ldv_9_ldv_param_33_2_default.base, ~ldv_9_ldv_param_33_2_default.offset, ~ldv_9_resource_file.base, ~ldv_9_resource_file.offset, ~ldv_9_resource_struct_poll_table_struct_ptr.base, ~ldv_9_resource_struct_poll_table_struct_ptr.offset, ~ldv_9_resource_struct_v4l2_buffer_ptr.base, ~ldv_9_resource_struct_v4l2_buffer_ptr.offset, ~ldv_9_resource_struct_v4l2_capability_ptr.base, ~ldv_9_resource_struct_v4l2_capability_ptr.offset, ~ldv_9_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_9_resource_struct_v4l2_event_subscription_ptr.offset, ~ldv_9_resource_struct_v4l2_fh_ptr.base, ~ldv_9_resource_struct_v4l2_fh_ptr.offset, ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.offset, ~ldv_9_resource_struct_v4l2_format_ptr.base, ~ldv_9_resource_struct_v4l2_format_ptr.offset, ~ldv_9_resource_struct_v4l2_frequency_ptr.base, ~ldv_9_resource_struct_v4l2_frequency_ptr.offset, ~ldv_9_resource_struct_v4l2_input_ptr.base, ~ldv_9_resource_struct_v4l2_input_ptr.offset, ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.offset, ~ldv_9_resource_struct_v4l2_tuner_ptr.base, ~ldv_9_resource_struct_v4l2_tuner_ptr.offset, ~ldv_9_resource_struct_vm_area_struct_ptr.base, ~ldv_9_resource_struct_vm_area_struct_ptr.offset, ~ldv_6_container_usb_driver.base, ~ldv_6_container_usb_driver.offset, #valid, #length, ~ldv_7_container_usb_driver.base, ~ldv_7_container_usb_driver.offset, #memory_int, ~ldv_12_ret_default, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_spin_slock_of_tm6000_core, ~ldv_6_probe_retval_default, ~ldv_8_resource_struct_video_device.base, ~ldv_8_resource_struct_video_device.offset, ~ldv_9_resource_struct_video_device.base, ~ldv_9_resource_struct_video_device.offset;

implementation ldv_dummy_resourceless_instance_callback_3_8(#in~arg0.base : int, #in~arg0.offset : int, #in~arg1.base : int, #in~arg1.offset : int, #in~arg2.base : int, #in~arg2.offset : int) returns (){
    var ~arg0.base : int, ~arg0.offset : int;
    var ~arg1.base : int, ~arg1.offset : int;
    var ~arg2.base : int, ~arg2.offset : int;

  loc5:
    ~arg0.base, ~arg0.offset := #in~arg0.base, #in~arg0.offset;
    ~arg1.base, ~arg1.offset := #in~arg1.base, #in~arg1.offset;
    ~arg2.base, ~arg2.offset := #in~arg2.base, #in~arg2.offset;
    call buffer_release(~arg1.base, ~arg1.offset, ~arg2.base, ~arg2.offset);
    return;
}

procedure ldv_dummy_resourceless_instance_callback_3_8(#in~arg0.base : int, #in~arg0.offset : int, #in~arg1.base : int, #in~arg1.offset : int, #in~arg2.base : int, #in~arg2.offset : int) returns ();
modifies ~ldv_spin_slock_of_tm6000_core, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;

implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(#in~expr : int) returns (){
    var ~expr : int;

  loc6:
    ~expr := #in~expr;
    assume ~expr == 0;
    assume !false;
    goto loc7;
  loc7:
    assert false;
}

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock(#in~expr : int) returns ();
modifies ;

implementation ldv_spin_lock_slock_of_tm6000_core() returns (){
  loc8:
    call ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock((if ~ldv_spin_slock_of_tm6000_core == 1 then 1 else 0));
    return;
}

procedure ldv_spin_lock_slock_of_tm6000_core() returns ();
modifies ~ldv_spin_slock_of_tm6000_core;

implementation ULTIMATE.init() returns (){
    var #t~nondet0.base : int, #t~nondet0.offset : int;
    var #t~nondet1.base : int, #t~nondet1.offset : int;
    var #t~nondet2.base : int, #t~nondet2.offset : int;
    var #t~nondet3.base : int, #t~nondet3.offset : int;
    var #t~nondet63.base : int, #t~nondet63.offset : int;
    var #t~nondet64.base : int, #t~nondet64.offset : int;
    var #t~nondet65.base : int, #t~nondet65.offset : int;
    var #t~nondet66.base : int, #t~nondet66.offset : int;
    var #t~nondet67.base : int, #t~nondet67.offset : int;
    var #t~nondet68.base : int, #t~nondet68.offset : int;
    var #t~nondet69.base : int, #t~nondet69.offset : int;
    var #t~nondet70.base : int, #t~nondet70.offset : int;
    var #t~nondet71.base : int, #t~nondet71.offset : int;
    var #t~nondet72.base : int, #t~nondet72.offset : int;
    var #t~nondet73.base : int, #t~nondet73.offset : int;
    var #t~nondet74.base : int, #t~nondet74.offset : int;
    var #t~nondet75.base : int, #t~nondet75.offset : int;
    var #t~nondet76.base : int, #t~nondet76.offset : int;
    var #t~nondet77.base : int, #t~nondet77.offset : int;
    var #t~nondet78.base : int, #t~nondet78.offset : int;
    var #t~nondet79.base : int, #t~nondet79.offset : int;
    var #t~nondet80.base : int, #t~nondet80.offset : int;
    var #t~nondet81.base : int, #t~nondet81.offset : int;
    var #t~nondet544.base : int, #t~nondet544.offset : int;
    var #t~union3668.head : int, #t~union3668.tail : int;
    var #t~union3669.__padding : [int]int, #t~union3669.dep_map.key.base : int, #t~union3669.dep_map.key.offset : int, #t~union3669.dep_map.class_cache.base : [int]int, #t~union3669.dep_map.class_cache.offset : [int]int, #t~union3669.dep_map.name.base : int, #t~union3669.dep_map.name.offset : int, #t~union3669.dep_map.cpu : int, #t~union3669.dep_map.ip : int;
    var #t~union3670.head : int, #t~union3670.tail : int;
    var #t~nondet896.base : int, #t~nondet896.offset : int;
    var #t~union3671.__padding : [int]int, #t~union3671.dep_map.key.base : int, #t~union3671.dep_map.key.offset : int, #t~union3671.dep_map.class_cache.base : [int]int, #t~union3671.dep_map.class_cache.offset : [int]int, #t~union3671.dep_map.name.base : int, #t~union3671.dep_map.name.offset : int, #t~union3671.dep_map.cpu : int, #t~union3671.dep_map.ip : int;
    var #t~nondet897.base : int, #t~nondet897.offset : int;
    var #t~nondet1213.base : int, #t~nondet1213.offset : int;
    var #t~nondet1214.base : int, #t~nondet1214.offset : int;
    var #t~nondet1215.base : int, #t~nondet1215.offset : int;
    var #t~union3672.major : int, #t~union3672.minor : int;
    var #t~union3673.major : int, #t~union3673.minor : int;
    var #t~union3674 : int;
    var #t~union3675.head : int, #t~union3675.tail : int;
    var #t~union3676.__padding : [int]int, #t~union3676.dep_map.key.base : int, #t~union3676.dep_map.key.offset : int, #t~union3676.dep_map.class_cache.base : [int]int, #t~union3676.dep_map.class_cache.offset : [int]int, #t~union3676.dep_map.name.base : int, #t~union3676.dep_map.name.offset : int, #t~union3676.dep_map.cpu : int, #t~union3676.dep_map.ip : int;
    var #t~union3677.head : int, #t~union3677.tail : int;
    var #t~union3678.__padding : [int]int, #t~union3678.dep_map.key.base : int, #t~union3678.dep_map.key.offset : int, #t~union3678.dep_map.class_cache.base : [int]int, #t~union3678.dep_map.class_cache.offset : [int]int, #t~union3678.dep_map.name.base : int, #t~union3678.dep_map.name.offset : int, #t~union3678.dep_map.cpu : int, #t~union3678.dep_map.ip : int;
    var #t~union3679.head : int, #t~union3679.tail : int;
    var #t~union3680.__padding : [int]int, #t~union3680.dep_map.key.base : int, #t~union3680.dep_map.key.offset : int, #t~union3680.dep_map.class_cache.base : [int]int, #t~union3680.dep_map.class_cache.offset : [int]int, #t~union3680.dep_map.name.base : int, #t~union3680.dep_map.name.offset : int, #t~union3680.dep_map.cpu : int, #t~union3680.dep_map.ip : int;
    var #t~union3681.head : int, #t~union3681.tail : int;
    var #t~union3682.__padding : [int]int, #t~union3682.dep_map.key.base : int, #t~union3682.dep_map.key.offset : int, #t~union3682.dep_map.class_cache.base : [int]int, #t~union3682.dep_map.class_cache.offset : [int]int, #t~union3682.dep_map.name.base : int, #t~union3682.dep_map.name.offset : int, #t~union3682.dep_map.cpu : int, #t~union3682.dep_map.ip : int;
    var #t~union3683.head : int, #t~union3683.tail : int;
    var #t~union3684.__padding : [int]int, #t~union3684.dep_map.key.base : int, #t~union3684.dep_map.key.offset : int, #t~union3684.dep_map.class_cache.base : [int]int, #t~union3684.dep_map.class_cache.offset : [int]int, #t~union3684.dep_map.name.base : int, #t~union3684.dep_map.name.offset : int, #t~union3684.dep_map.cpu : int, #t~union3684.dep_map.ip : int;
    var #t~union3685.head : int, #t~union3685.tail : int;
    var #t~union3686.__padding : [int]int, #t~union3686.dep_map.key.base : int, #t~union3686.dep_map.key.offset : int, #t~union3686.dep_map.class_cache.base : [int]int, #t~union3686.dep_map.class_cache.offset : [int]int, #t~union3686.dep_map.name.base : int, #t~union3686.dep_map.name.offset : int, #t~union3686.dep_map.cpu : int, #t~union3686.dep_map.ip : int;
    var #t~union3687.major : int, #t~union3687.minor : int;
    var #t~union3688.major : int, #t~union3688.minor : int;
    var #t~union3689 : int;
    var #t~union3690.head : int, #t~union3690.tail : int;
    var #t~union3691.__padding : [int]int, #t~union3691.dep_map.key.base : int, #t~union3691.dep_map.key.offset : int, #t~union3691.dep_map.class_cache.base : [int]int, #t~union3691.dep_map.class_cache.offset : [int]int, #t~union3691.dep_map.name.base : int, #t~union3691.dep_map.name.offset : int, #t~union3691.dep_map.cpu : int, #t~union3691.dep_map.ip : int;
    var #t~union3692.head : int, #t~union3692.tail : int;
    var #t~union3693.__padding : [int]int, #t~union3693.dep_map.key.base : int, #t~union3693.dep_map.key.offset : int, #t~union3693.dep_map.class_cache.base : [int]int, #t~union3693.dep_map.class_cache.offset : [int]int, #t~union3693.dep_map.name.base : int, #t~union3693.dep_map.name.offset : int, #t~union3693.dep_map.cpu : int, #t~union3693.dep_map.ip : int;
    var #t~union3694.head : int, #t~union3694.tail : int;
    var #t~union3695.__padding : [int]int, #t~union3695.dep_map.key.base : int, #t~union3695.dep_map.key.offset : int, #t~union3695.dep_map.class_cache.base : [int]int, #t~union3695.dep_map.class_cache.offset : [int]int, #t~union3695.dep_map.name.base : int, #t~union3695.dep_map.name.offset : int, #t~union3695.dep_map.cpu : int, #t~union3695.dep_map.ip : int;
    var #t~union3696.head : int, #t~union3696.tail : int;
    var #t~union3697.__padding : [int]int, #t~union3697.dep_map.key.base : int, #t~union3697.dep_map.key.offset : int, #t~union3697.dep_map.class_cache.base : [int]int, #t~union3697.dep_map.class_cache.offset : [int]int, #t~union3697.dep_map.name.base : int, #t~union3697.dep_map.name.offset : int, #t~union3697.dep_map.cpu : int, #t~union3697.dep_map.ip : int;
    var #t~union3698.head : int, #t~union3698.tail : int;
    var #t~union3699.__padding : [int]int, #t~union3699.dep_map.key.base : int, #t~union3699.dep_map.key.offset : int, #t~union3699.dep_map.class_cache.base : [int]int, #t~union3699.dep_map.class_cache.offset : [int]int, #t~union3699.dep_map.name.base : int, #t~union3699.dep_map.name.offset : int, #t~union3699.dep_map.cpu : int, #t~union3699.dep_map.ip : int;
    var #t~union3700.head : int, #t~union3700.tail : int;
    var #t~union3701.__padding : [int]int, #t~union3701.dep_map.key.base : int, #t~union3701.dep_map.key.offset : int, #t~union3701.dep_map.class_cache.base : [int]int, #t~union3701.dep_map.class_cache.offset : [int]int, #t~union3701.dep_map.name.base : int, #t~union3701.dep_map.name.offset : int, #t~union3701.dep_map.cpu : int, #t~union3701.dep_map.ip : int;

  loc9:
    #NULL.base, #NULL.offset := 0, 0;
    #valid := #valid[0 := 0];
    ~card := ~card[0 := 4294967295];
    ~card := ~card[1 := 4294967295];
    ~card := ~card[2 := 4294967295];
    ~card := ~card[3 := 4294967295];
    ~card := ~card[4 := 4294967295];
    ~card := ~card[5 := 4294967295];
    ~card := ~card[6 := 4294967295];
    ~card := ~card[7 := 4294967295];
    ~card := ~card[8 := 4294967295];
    ~card := ~card[9 := 4294967295];
    ~card := ~card[10 := 4294967295];
    ~card := ~card[11 := 4294967295];
    ~card := ~card[12 := 4294967295];
    ~card := ~card[13 := 4294967295];
    ~card := ~card[14 := 4294967295];
    ~card := ~card[15 := 4294967295];
    call ~#tm6000_devused.base, ~#tm6000_devused.offset := #Ultimate.alloc(8);
    call write~int(0, ~#tm6000_devused.base, ~#tm6000_devused.offset, 8);
    ~ldv_0_ldv_param_7_2_default := 0;
    ~ldv_12_ret_default := 0;
    ~ldv_3_ldv_param_9_1_default.base, ~ldv_3_ldv_param_9_1_default.offset := 0, 0;
    ~ldv_3_ldv_param_9_2_default.base, ~ldv_3_ldv_param_9_2_default.offset := 0, 0;
    ~ldv_6_probe_retval_default := 0;
    ~ldv_6_reset_flag_default := 0;
    ~ldv_8_ldv_param_19_1_default.base, ~ldv_8_ldv_param_19_1_default.offset := 0, 0;
    ~ldv_8_ldv_param_19_2_default := 0;
    ~ldv_8_ldv_param_19_3_default.base, ~ldv_8_ldv_param_19_3_default.offset := 0, 0;
    ~ldv_8_ldv_param_22_1_default := 0;
    ~ldv_8_ldv_param_22_2_default := 0;
    ~ldv_8_ldv_param_30_2_default.base, ~ldv_8_ldv_param_30_2_default.offset := 0, 0;
    ~ldv_8_ldv_param_33_2_default.base, ~ldv_8_ldv_param_33_2_default.offset := 0, 0;
    ~ldv_8_ldv_param_43_2_default := 0;
    ~ldv_8_ldv_param_46_2_default := 0;
    ~ldv_8_ret_default := 0;
    ~ldv_9_ldv_param_19_1_default.base, ~ldv_9_ldv_param_19_1_default.offset := 0, 0;
    ~ldv_9_ldv_param_19_2_default := 0;
    ~ldv_9_ldv_param_19_3_default.base, ~ldv_9_ldv_param_19_3_default.offset := 0, 0;
    ~ldv_9_ldv_param_22_1_default := 0;
    ~ldv_9_ldv_param_22_2_default := 0;
    ~ldv_9_ldv_param_30_2_default.base, ~ldv_9_ldv_param_30_2_default.offset := 0, 0;
    ~ldv_9_ldv_param_33_2_default.base, ~ldv_9_ldv_param_33_2_default.offset := 0, 0;
    ~ldv_9_ldv_param_43_2_default := 0;
    ~ldv_9_ldv_param_46_2_default := 0;
    ~ldv_9_ret_default := 0;
    ~ldv_statevar_0 := 0;
    ~ldv_statevar_1 := 0;
    ~ldv_statevar_12 := 0;
    ~ldv_statevar_2 := 0;
    ~ldv_statevar_3 := 0;
    ~ldv_statevar_4 := 0;
    ~ldv_statevar_5 := 0;
    ~ldv_statevar_6 := 0;
    ~ldv_statevar_7 := 0;
    ~ldv_statevar_8 := 0;
    ~ldv_statevar_9 := 0;
    ~tm6000_debug := 0;
    ~i2c_debug := 0;
    ~vid_limit := 16;
    ~video_nr := -1;
    ~radio_nr := -1;
    ~iname.base, ~iname.offset := ~iname.base[0 := 0], ~iname.offset[0 := 0];
    call #t~nondet0.base, #t~nondet0.offset := #Ultimate.alloc(11);
    ~iname.base, ~iname.offset := ~iname.base[1 := #t~nondet0.base], ~iname.offset[1 := #t~nondet0.offset];
    call #t~nondet1.base, #t~nondet1.offset := #Ultimate.alloc(12);
    ~iname.base, ~iname.offset := ~iname.base[2 := #t~nondet1.base], ~iname.offset[2 := #t~nondet1.offset];
    call #t~nondet2.base, #t~nondet2.offset := #Ultimate.alloc(12);
    ~iname.base, ~iname.offset := ~iname.base[3 := #t~nondet2.base], ~iname.offset[3 := #t~nondet2.offset];
    call #t~nondet3.base, #t~nondet3.offset := #Ultimate.alloc(8);
    ~iname.base, ~iname.offset := ~iname.base[4 := #t~nondet3.base], ~iname.offset[4 := #t~nondet3.offset];
    havoc #t~nondet0.base, #t~nondet0.offset;
    havoc #t~nondet1.base, #t~nondet1.offset;
    havoc #t~nondet2.base, #t~nondet2.offset;
    havoc #t~nondet3.base, #t~nondet3.offset;
    ~tm6010_a_mode := 0;
    ~ir_debug := 0;
    ~enable_ir := 1;
    ~ir_clock_mhz := 12;
    ~ldv_spin_alloc_lock_of_task_struct := 1;
    ~ldv_spin_i_lock_of_inode := 1;
    ~ldv_spin_lock := 1;
    ~ldv_spin_lock_of_NOT_ARG_SIGN := 1;
    ~ldv_spin_node_size_lock_of_pglist_data := 1;
    ~ldv_spin_ptl := 1;
    ~ldv_spin_siglock_of_sighand_struct := 1;
    ~ldv_spin_slock_of_tm6000_core := 1;
    call ~#tm6000_boards.base, ~#tm6000_boards.offset := #Ultimate.alloc(3264);
    call #t~nondet63.base, #t~nondet63.offset := #Ultimate.alloc(29);
    call write~$Pointer$(#t~nondet63.base, #t~nondet63.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 0, 8);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 1, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 3, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 5, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 7, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 9, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 11, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 8 + 15, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 32 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 32 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 32 + 12, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 32 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 32 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 32 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 60, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 64, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 68, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 72, 4);
    call write~int(258, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 76 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 76 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 76 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 76 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 76 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 76 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 104 + 0 + 4, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 104 + 0 + 16, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 104 + 20 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 104 + 20 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 104 + 20 + 16, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 104 + 40 + 0, 4);
    call write~int(3, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 104 + 40 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 104 + 40 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 164 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 164 + 16, 4);
    call write~$Pointer$(0, 0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 0 + 184, 8);
    call #t~nondet64.base, #t~nondet64.offset := #Ultimate.alloc(21);
    call write~$Pointer$(#t~nondet64.base, #t~nondet64.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 0, 8);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 1, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 3, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 5, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 7, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 9, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 11, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 8 + 15, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 32 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 32 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 32 + 12, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 32 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 32 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 32 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 60, 4);
    call write~int(71, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 64, 4);
    call write~int(97, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 68, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 72, 4);
    call write~int(258, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 76 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 76 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 76 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 76 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 76 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 76 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 104 + 0 + 4, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 104 + 0 + 16, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 104 + 20 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 104 + 20 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 104 + 20 + 16, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 104 + 40 + 0, 4);
    call write~int(3, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 104 + 40 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 104 + 40 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 164 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 164 + 16, 4);
    call write~$Pointer$(0, 0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 192 + 184, 8);
    call #t~nondet65.base, #t~nondet65.offset := #Ultimate.alloc(21);
    call write~$Pointer$(#t~nondet65.base, #t~nondet65.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 0, 8);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 1, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 3, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 5, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 7, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 9, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 11, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 8 + 15, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 32 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 32 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 32 + 12, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 32 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 32 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 32 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 60, 4);
    call write~int(71, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 64, 4);
    call write~int(97, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 68, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 72, 4);
    call write~int(258, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 76 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 76 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 76 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 76 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 76 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 76 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 104 + 0 + 4, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 104 + 0 + 16, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 104 + 20 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 104 + 20 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 104 + 20 + 16, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 104 + 40 + 0, 4);
    call write~int(3, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 104 + 40 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 104 + 40 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 164 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 164 + 16, 4);
    call write~$Pointer$(0, 0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 384 + 184, 8);
    call #t~nondet66.base, #t~nondet66.offset := #Ultimate.alloc(21);
    call write~$Pointer$(#t~nondet66.base, #t~nondet66.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 0, 8);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 1, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 3, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 5, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 7, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 9, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 11, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 8 + 15, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 32 + 4, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 32 + 8, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 32 + 12, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 32 + 16, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 32 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 32 + 24, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 60, 4);
    call write~int(71, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 64, 4);
    call write~int(97, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 68, 4);
    call write~int(15, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 72, 4);
    call write~int(260, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 76 + 0, 4);
    call write~int(261, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 76 + 4, 4);
    call write~int(259, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 76 + 8, 4);
    call write~int(262, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 76 + 12, 4);
    call write~int(769, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 76 + 16, 4);
    call write~int(263, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 76 + 20, 4);
    call write~int(258, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 104 + 0 + 4, 4);
    call write~int(6, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 104 + 0 + 16, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 104 + 20 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 104 + 20 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 104 + 20 + 16, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 104 + 40 + 0, 4);
    call write~int(3, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 104 + 40 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 104 + 40 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 164 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 164 + 16, 4);
    call write~$Pointer$(0, 0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 576 + 184, 8);
    call #t~nondet67.base, #t~nondet67.offset := #Ultimate.alloc(15);
    call write~$Pointer$(#t~nondet67.base, #t~nondet67.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 0, 8);
    call write~int(49, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 0, 1);
    call write~int(48, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 1, 1);
    call write~int(77, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 2, 1);
    call write~int(79, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 3, 1);
    call write~int(79, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 4, 1);
    call write~int(78, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 5, 1);
    call write~int(83, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 6, 1);
    call write~int(53, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 7, 1);
    call write~int(54, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 8, 1);
    call write~int(48, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 9, 1);
    call write~int(48, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 10, 1);
    call write~int(-1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 11, 1);
    call write~int(69, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 12, 1);
    call write~int(91, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 8 + 15, 1);
    call write~int(14, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 24, 4);
    call write~int(20, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 32 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 32 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 32 + 12, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 32 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 32 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 32 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 60, 4);
    call write~int(71, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 64, 4);
    call write~int(97, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 68, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 72, 4);
    call write~int(258, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 76 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 76 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 76 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 76 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 76 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 76 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 104 + 0 + 4, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 104 + 0 + 16, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 104 + 20 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 104 + 20 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 104 + 20 + 16, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 104 + 40 + 0, 4);
    call write~int(3, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 104 + 40 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 104 + 40 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 164 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 164 + 16, 4);
    call write~$Pointer$(0, 0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 768 + 184, 8);
    call #t~nondet68.base, #t~nondet68.offset := #Ultimate.alloc(15);
    call write~$Pointer$(#t~nondet68.base, #t~nondet68.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 0, 8);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 1, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 3, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 5, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 7, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 9, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 11, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 8 + 15, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 32 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 32 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 32 + 12, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 32 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 32 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 32 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 60, 4);
    call write~int(56, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 64, 4);
    call write~int(100, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 68, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 72, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 76 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 76 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 76 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 76 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 76 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 76 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 104 + 0 + 4, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 104 + 0 + 16, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 104 + 20 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 104 + 20 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 104 + 20 + 16, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 104 + 40 + 0, 4);
    call write~int(3, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 104 + 40 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 104 + 40 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 164 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 164 + 16, 4);
    call write~$Pointer$(0, 0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 960 + 184, 8);
    call #t~nondet69.base, #t~nondet69.offset := #Ultimate.alloc(20);
    call write~$Pointer$(#t~nondet69.base, #t~nondet69.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 0, 8);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 1, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 3, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 5, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 7, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 9, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 11, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 8 + 15, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 32 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 32 + 4, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 32 + 8, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 32 + 12, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 32 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 32 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 32 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 60, 4);
    call write~int(71, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 64, 4);
    call write~int(100, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 68, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 72, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 76 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 76 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 76 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 76 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 76 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 76 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 104 + 0 + 4, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 104 + 0 + 16, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 104 + 20 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 104 + 20 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 104 + 20 + 16, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 104 + 40 + 0, 4);
    call write~int(3, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 104 + 40 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 104 + 40 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 164 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 164 + 16, 4);
    call write~$Pointer$(0, 0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1152 + 184, 8);
    call #t~nondet70.base, #t~nondet70.offset := #Ultimate.alloc(48);
    call write~$Pointer$(#t~nondet70.base, #t~nondet70.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 0, 8);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 1, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 3, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 5, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 7, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 9, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 11, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 8 + 15, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 32 + 4, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 32 + 8, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 32 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 32 + 16, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 32 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 32 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 60, 4);
    call write~int(71, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 64, 4);
    call write~int(97, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 68, 4);
    call write~int(15, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 72, 4);
    call write~int(768, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 76 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 76 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 76 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 76 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 76 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 76 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 104 + 0 + 4, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 104 + 0 + 16, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 104 + 20 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 104 + 20 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 104 + 20 + 16, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 104 + 40 + 0, 4);
    call write~int(3, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 104 + 40 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 104 + 40 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 164 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 164 + 16, 4);
    call write~$Pointer$(0, 0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1344 + 184, 8);
    call #t~nondet71.base, #t~nondet71.offset := #Ultimate.alloc(25);
    call write~$Pointer$(#t~nondet71.base, #t~nondet71.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 0, 8);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 1, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 3, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 5, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 7, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 9, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 11, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 8 + 15, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 32 + 4, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 32 + 8, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 32 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 32 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 32 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 32 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 60, 4);
    call write~int(71, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 64, 4);
    call write~int(100, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 68, 4);
    call write~int(15, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 72, 4);
    call write~int(768, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 76 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 76 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 76 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 76 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 76 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 76 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 104 + 0 + 4, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 104 + 0 + 16, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 104 + 20 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 104 + 20 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 104 + 20 + 16, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 104 + 40 + 0, 4);
    call write~int(3, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 104 + 40 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 104 + 40 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 164 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 164 + 16, 4);
    call write~$Pointer$(0, 0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1536 + 184, 8);
    call #t~nondet72.base, #t~nondet72.offset := #Ultimate.alloc(44);
    call write~$Pointer$(#t~nondet72.base, #t~nondet72.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 0, 8);
    call write~int(72, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 1, 1);
    call write~int(86, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 3, 1);
    call write~int(82, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 5, 1);
    call write~int(57, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 7, 1);
    call write~int(48, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 9, 1);
    call write~int(48, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 11, 1);
    call write~int(72, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 8 + 15, 1);
    call write~int(14, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 24, 4);
    call write~int(66, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 32 + 4, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 32 + 8, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 32 + 12, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 32 + 16, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 32 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 32 + 24, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 60, 4);
    call write~int(71, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 64, 4);
    call write~int(97, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 68, 4);
    call write~int(15, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 72, 4);
    call write~int(260, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 76 + 0, 4);
    call write~int(261, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 76 + 4, 4);
    call write~int(259, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 76 + 8, 4);
    call write~int(262, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 76 + 12, 4);
    call write~int(769, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 76 + 16, 4);
    call write~int(263, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 76 + 20, 4);
    call write~int(258, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 104 + 0 + 4, 4);
    call write~int(6, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 104 + 0 + 16, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 104 + 20 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 104 + 20 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 104 + 20 + 16, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 104 + 40 + 0, 4);
    call write~int(3, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 104 + 40 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 104 + 40 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 164 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 164 + 16, 4);
    call #t~nondet73.base, #t~nondet73.offset := #Ultimate.alloc(13);
    call write~$Pointer$(#t~nondet73.base, #t~nondet73.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1728 + 184, 8);
    call #t~nondet74.base, #t~nondet74.offset := #Ultimate.alloc(35);
    call write~$Pointer$(#t~nondet74.base, #t~nondet74.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 0, 8);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 1, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 3, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 5, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 7, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 9, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 11, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 8 + 15, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 32 + 4, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 32 + 8, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 32 + 12, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 32 + 16, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 32 + 20, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 32 + 24, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 60, 4);
    call write~int(76, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 64, 4);
    call write~int(97, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 68, 4);
    call write~int(15, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 72, 4);
    call write~int(258, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 76 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 76 + 4, 4);
    call write~int(259, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 76 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 76 + 12, 4);
    call write~int(768, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 76 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 76 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 104 + 0 + 4, 4);
    call write~int(6, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 104 + 0 + 16, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 104 + 20 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 104 + 20 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 104 + 20 + 16, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 104 + 40 + 0, 4);
    call write~int(3, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 104 + 40 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 104 + 40 + 16, 4);
    call write~int(6, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 164 + 4, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 164 + 16, 4);
    call write~$Pointer$(0, 0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 1920 + 184, 8);
    call #t~nondet75.base, #t~nondet75.offset := #Ultimate.alloc(30);
    call write~$Pointer$(#t~nondet75.base, #t~nondet75.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 0, 8);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 1, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 3, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 5, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 7, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 9, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 11, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 8 + 15, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 32 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 32 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 32 + 12, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 32 + 16, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 32 + 20, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 32 + 24, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 60, 4);
    call write~int(76, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 64, 4);
    call write~int(97, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 68, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 72, 4);
    call write~int(258, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 76 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 76 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 76 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 76 + 12, 4);
    call write~int(768, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 76 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 76 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 104 + 0 + 4, 4);
    call write~int(6, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 104 + 0 + 16, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 104 + 20 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 104 + 20 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 104 + 20 + 16, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 104 + 40 + 0, 4);
    call write~int(3, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 104 + 40 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 104 + 40 + 16, 4);
    call write~int(6, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 164 + 4, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 164 + 16, 4);
    call write~$Pointer$(0, 0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2112 + 184, 8);
    call #t~nondet76.base, #t~nondet76.offset := #Ultimate.alloc(50);
    call write~$Pointer$(#t~nondet76.base, #t~nondet76.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 0, 8);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 1, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 3, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 5, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 7, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 9, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 11, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 8 + 15, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 32 + 4, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 32 + 8, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 32 + 12, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 32 + 16, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 32 + 20, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 32 + 24, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 60, 4);
    call write~int(71, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 64, 4);
    call write~int(97, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 68, 4);
    call write~int(15, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 72, 4);
    call write~int(260, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 76 + 0, 4);
    call write~int(261, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 76 + 4, 4);
    call write~int(259, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 76 + 8, 4);
    call write~int(262, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 76 + 12, 4);
    call write~int(769, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 76 + 16, 4);
    call write~int(263, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 76 + 20, 4);
    call write~int(258, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 104 + 0 + 4, 4);
    call write~int(6, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 104 + 0 + 16, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 104 + 20 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 104 + 20 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 104 + 20 + 16, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 104 + 40 + 0, 4);
    call write~int(3, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 104 + 40 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 104 + 40 + 16, 4);
    call write~int(6, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 164 + 4, 4);
    call write~int(6, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 164 + 16, 4);
    call #t~nondet77.base, #t~nondet77.offset := #Ultimate.alloc(27);
    call write~$Pointer$(#t~nondet77.base, #t~nondet77.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2304 + 184, 8);
    call #t~nondet78.base, #t~nondet78.offset := #Ultimate.alloc(21);
    call write~$Pointer$(#t~nondet78.base, #t~nondet78.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 0, 8);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 1, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 3, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 5, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 7, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 9, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 11, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 8 + 15, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 32 + 4, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 32 + 8, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 32 + 12, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 32 + 16, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 32 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 32 + 24, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 60, 4);
    call write~int(71, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 64, 4);
    call write~int(97, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 68, 4);
    call write~int(15, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 72, 4);
    call write~int(260, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 76 + 0, 4);
    call write~int(261, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 76 + 4, 4);
    call write~int(259, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 76 + 8, 4);
    call write~int(262, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 76 + 12, 4);
    call write~int(769, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 76 + 16, 4);
    call write~int(263, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 76 + 20, 4);
    call write~int(258, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 104 + 0 + 4, 4);
    call write~int(6, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 104 + 0 + 16, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 104 + 20 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 104 + 20 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 104 + 20 + 16, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 104 + 40 + 0, 4);
    call write~int(3, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 104 + 40 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 104 + 40 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 164 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 164 + 16, 4);
    call write~$Pointer$(0, 0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2496 + 184, 8);
    call #t~nondet79.base, #t~nondet79.offset := #Ultimate.alloc(40);
    call write~$Pointer$(#t~nondet79.base, #t~nondet79.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 0, 8);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 1, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 3, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 5, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 7, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 9, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 11, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 8 + 15, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 32 + 4, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 32 + 8, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 32 + 12, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 32 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 32 + 20, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 32 + 24, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 60, 4);
    call write~int(76, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 64, 4);
    call write~int(97, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 68, 4);
    call write~int(15, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 72, 4);
    call write~int(258, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 76 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 76 + 4, 4);
    call write~int(259, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 76 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 76 + 12, 4);
    call write~int(768, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 76 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 76 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 104 + 0 + 4, 4);
    call write~int(6, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 104 + 0 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 104 + 20 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 104 + 20 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 104 + 20 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 104 + 40 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 104 + 40 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 104 + 40 + 16, 4);
    call write~int(6, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 164 + 4, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 164 + 16, 4);
    call write~$Pointer$(0, 0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2688 + 184, 8);
    call #t~nondet80.base, #t~nondet80.offset := #Ultimate.alloc(35);
    call write~$Pointer$(#t~nondet80.base, #t~nondet80.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 0, 8);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 1, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 3, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 5, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 7, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 9, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 11, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 8 + 15, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 28, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 32 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 32 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 32 + 12, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 32 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 32 + 20, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 32 + 24, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 60, 4);
    call write~int(76, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 64, 4);
    call write~int(97, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 68, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 72, 4);
    call write~int(258, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 76 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 76 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 76 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 76 + 12, 4);
    call write~int(768, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 76 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 76 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 104 + 0 + 4, 4);
    call write~int(6, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 104 + 0 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 104 + 20 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 104 + 20 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 104 + 20 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 104 + 40 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 104 + 40 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 104 + 40 + 16, 4);
    call write~int(6, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 164 + 4, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 164 + 16, 4);
    call write~$Pointer$(0, 0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 2880 + 184, 8);
    call #t~nondet81.base, #t~nondet81.offset := #Ultimate.alloc(32);
    call write~$Pointer$(#t~nondet81.base, #t~nondet81.offset, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 0, 8);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 0, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 1, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 2, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 3, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 4, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 5, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 6, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 7, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 8, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 9, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 10, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 11, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 12, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 13, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 14, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 8 + 15, 1);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 24, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 28, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 32 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 32 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 32 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 32 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 32 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 32 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 32 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 60, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 64, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 68, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 72, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 76 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 76 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 76 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 76 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 76 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 76 + 20, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 76 + 24, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 104 + 0 + 0, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 104 + 0 + 4, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 104 + 0 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 104 + 0 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 104 + 0 + 16, 4);
    call write~int(2, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 104 + 20 + 0, 4);
    call write~int(1, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 104 + 20 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 104 + 20 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 104 + 20 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 104 + 20 + 16, 4);
    call write~int(4, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 104 + 40 + 0, 4);
    call write~int(3, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 104 + 40 + 4, 4);
    call write~int(5, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 104 + 40 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 104 + 40 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 104 + 40 + 16, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 164 + 0, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 164 + 4, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 164 + 8, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 164 + 12, 4);
    call write~int(0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 164 + 16, 4);
    call write~$Pointer$(0, 0, ~#tm6000_boards.base, ~#tm6000_boards.offset + 3072 + 184, 8);
    havoc #t~nondet63.base, #t~nondet63.offset;
    havoc #t~nondet64.base, #t~nondet64.offset;
    havoc #t~nondet65.base, #t~nondet65.offset;
    havoc #t~nondet66.base, #t~nondet66.offset;
    havoc #t~nondet67.base, #t~nondet67.offset;
    havoc #t~nondet68.base, #t~nondet68.offset;
    havoc #t~nondet69.base, #t~nondet69.offset;
    havoc #t~nondet70.base, #t~nondet70.offset;
    havoc #t~nondet71.base, #t~nondet71.offset;
    havoc #t~nondet72.base, #t~nondet72.offset;
    havoc #t~nondet73.base, #t~nondet73.offset;
    havoc #t~nondet74.base, #t~nondet74.offset;
    havoc #t~nondet75.base, #t~nondet75.offset;
    havoc #t~nondet76.base, #t~nondet76.offset;
    havoc #t~nondet77.base, #t~nondet77.offset;
    havoc #t~nondet78.base, #t~nondet78.offset;
    havoc #t~nondet79.base, #t~nondet79.offset;
    havoc #t~nondet80.base, #t~nondet80.offset;
    havoc #t~nondet81.base, #t~nondet81.offset;
    call ~#tm6000_id_table.base, ~#tm6000_id_table.offset := #Ultimate.alloc(525);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 0 + 0, 2);
    call write~int(24576, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 0 + 2, 2);
    call write~int(1, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 0 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 0 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 0 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 0 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 0 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 0 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 0 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 0 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 0 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 0 + 16, 1);
    call write~int(1, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 0 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 25 + 0, 2);
    call write~int(24576, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 25 + 2, 2);
    call write~int(2, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 25 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 25 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 25 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 25 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 25 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 25 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 25 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 25 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 25 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 25 + 16, 1);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 25 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 50 + 0, 2);
    call write~int(1761, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 50 + 2, 2);
    call write~int(62258, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 50 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 50 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 50 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 50 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 50 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 50 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 50 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 50 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 50 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 50 + 16, 1);
    call write~int(6, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 50 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 75 + 0, 2);
    call write~int(5290, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 75 + 2, 2);
    call write~int(1568, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 75 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 75 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 75 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 75 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 75 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 75 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 75 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 75 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 75 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 75 + 16, 1);
    call write~int(7, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 75 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 100 + 0, 2);
    call write~int(1761, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 100 + 2, 2);
    call write~int(45881, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 100 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 100 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 100 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 100 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 100 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 100 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 100 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 100 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 100 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 100 + 16, 1);
    call write~int(8, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 100 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 125 + 0, 2);
    call write~int(8256, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 125 + 2, 2);
    call write~int(26112, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 125 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 125 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 125 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 125 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 125 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 125 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 125 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 125 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 125 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 125 + 16, 1);
    call write~int(9, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 125 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 150 + 0, 2);
    call write~int(8256, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 150 + 2, 2);
    call write~int(26113, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 150 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 150 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 150 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 150 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 150 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 150 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 150 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 150 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 150 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 150 + 16, 1);
    call write~int(9, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 150 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 175 + 0, 2);
    call write~int(8256, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 175 + 2, 2);
    call write~int(26128, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 175 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 175 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 175 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 175 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 175 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 175 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 175 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 175 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 175 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 175 + 16, 1);
    call write~int(9, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 175 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 200 + 0, 2);
    call write~int(8256, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 200 + 2, 2);
    call write~int(26129, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 200 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 200 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 200 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 200 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 200 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 200 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 200 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 200 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 200 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 200 + 16, 1);
    call write~int(9, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 200 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 225 + 0, 2);
    call write~int(24576, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 225 + 2, 2);
    call write~int(57024, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 225 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 225 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 225 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 225 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 225 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 225 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 225 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 225 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 225 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 225 + 16, 1);
    call write~int(10, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 225 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 250 + 0, 2);
    call write~int(24576, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 250 + 2, 2);
    call write~int(57025, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 250 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 250 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 250 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 250 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 250 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 250 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 250 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 250 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 250 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 250 + 16, 1);
    call write~int(11, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 250 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 275 + 0, 2);
    call write~int(3277, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 275 + 2, 2);
    call write~int(134, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 275 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 275 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 275 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 275 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 275 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 275 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 275 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 275 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 275 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 275 + 16, 1);
    call write~int(12, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 275 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 300 + 0, 2);
    call write~int(3277, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 300 + 2, 2);
    call write~int(165, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 300 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 300 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 300 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 300 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 300 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 300 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 300 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 300 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 300 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 300 + 16, 1);
    call write~int(12, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 300 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 325 + 0, 2);
    call write~int(3277, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 325 + 2, 2);
    call write~int(121, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 325 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 325 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 325 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 325 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 325 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 325 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 325 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 325 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 325 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 325 + 16, 1);
    call write~int(16, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 325 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 350 + 0, 2);
    call write~int(5075, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 350 + 2, 2);
    call write~int(12864, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 350 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 350 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 350 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 350 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 350 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 350 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 350 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 350 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 350 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 350 + 16, 1);
    call write~int(13, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 350 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 375 + 0, 2);
    call write~int(5075, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 375 + 2, 2);
    call write~int(12865, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 375 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 375 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 375 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 375 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 375 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 375 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 375 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 375 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 375 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 375 + 16, 1);
    call write~int(13, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 375 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 400 + 0, 2);
    call write~int(5075, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 400 + 2, 2);
    call write~int(12867, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 400 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 400 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 400 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 400 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 400 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 400 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 400 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 400 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 400 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 400 + 16, 1);
    call write~int(13, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 400 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 425 + 0, 2);
    call write~int(5075, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 425 + 2, 2);
    call write~int(12900, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 425 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 425 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 425 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 425 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 425 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 425 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 425 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 425 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 425 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 425 + 16, 1);
    call write~int(13, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 425 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 450 + 0, 2);
    call write~int(24576, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 450 + 2, 2);
    call write~int(57026, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 450 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 450 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 450 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 450 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 450 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 450 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 450 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 450 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 450 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 450 + 16, 1);
    call write~int(14, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 450 + 17, 8);
    call write~int(3, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 475 + 0, 2);
    call write~int(24576, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 475 + 2, 2);
    call write~int(57027, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 475 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 475 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 475 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 475 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 475 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 475 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 475 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 475 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 475 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 475 + 16, 1);
    call write~int(15, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 475 + 17, 8);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 500 + 0, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 500 + 2, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 500 + 4, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 500 + 6, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 500 + 8, 2);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 500 + 10, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 500 + 11, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 500 + 12, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 500 + 13, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 500 + 14, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 500 + 15, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 500 + 16, 1);
    call write~int(0, ~#tm6000_id_table.base, ~#tm6000_id_table.offset + 500 + 17, 8);
    call ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset := #Ultimate.alloc(297);
    call #t~nondet544.base, #t~nondet544.offset := #Ultimate.alloc(7);
    #memory_int := #memory_int[#t~nondet544.base,#t~nondet544.offset + 0 := 116];
    #memory_int := #memory_int[#t~nondet544.base,#t~nondet544.offset + 1 := 109];
    #memory_int := #memory_int[#t~nondet544.base,#t~nondet544.offset + 2 := 54];
    #memory_int := #memory_int[#t~nondet544.base,#t~nondet544.offset + 3 := 48];
    #memory_int := #memory_int[#t~nondet544.base,#t~nondet544.offset + 4 := 48];
    #memory_int := #memory_int[#t~nondet544.base,#t~nondet544.offset + 5 := 48];
    #memory_int := #memory_int[#t~nondet544.base,#t~nondet544.offset + 6 := 0];
    call write~$Pointer$(#t~nondet544.base, #t~nondet544.offset, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 0, 8);
    call write~$Pointer$(#funAddr~tm6000_usb_probe.base, #funAddr~tm6000_usb_probe.offset, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 8, 8);
    call write~$Pointer$(#funAddr~tm6000_usb_disconnect.base, #funAddr~tm6000_usb_disconnect.offset, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 16, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 56, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 64, 8);
    call write~$Pointer$(~#tm6000_id_table.base, ~#tm6000_id_table.offset, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 72, 8);
    call write~int(0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union3668.head, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union3668.tail, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 4, 4);
    call write~int(0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union3669.__padding[0], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0, 1);
    call write~int(#t~union3669.__padding[1], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union3669.__padding[2], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[3], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[4], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[5], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[6], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[7], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[8], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[9], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[10], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[11], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[12], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[13], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[14], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[15], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[16], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[17], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[18], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[19], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[20], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[21], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[22], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3669.__padding[23], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union3669.dep_map.key.base, #t~union3669.dep_map.key.offset, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union3669.dep_map.class_cache.base[0], #t~union3669.dep_map.class_cache.offset[0], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union3669.dep_map.class_cache.base[1], #t~union3669.dep_map.class_cache.offset[1], ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union3669.dep_map.name.base, #t~union3669.dep_map.name.offset, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union3669.dep_map.cpu, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union3669.dep_map.ip, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 0 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 68 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 80 + 68 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 0 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 0 + 16, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 0 + 24, 8);
    call write~int(0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 0 + 32, 1);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 0 + 33, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 0 + 41, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 0 + 49, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 0 + 57, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 0 + 65, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 0 + 73, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 0 + 81, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 0 + 89, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 0 + 97, 8);
    call write~$Pointer$(0, 0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 0 + 105, 8);
    call write~int(0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 164 + 113, 4);
    call write~int(0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 281, 4);
    call write~int(0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 285, 4);
    call write~int(0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 289, 4);
    call write~int(0, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset + 293, 4);
    havoc #t~nondet544.base, #t~nondet544.offset;
    havoc #t~union3668.head, #t~union3668.tail;
    havoc #t~union3669.__padding, #t~union3669.dep_map.key.base, #t~union3669.dep_map.key.offset, #t~union3669.dep_map.class_cache.base, #t~union3669.dep_map.class_cache.offset, #t~union3669.dep_map.name.base, #t~union3669.dep_map.name.offset, #t~union3669.dep_map.cpu, #t~union3669.dep_map.ip;
    ~ldv_0_callback_functionality.base, ~ldv_0_callback_functionality.offset := 0, 0;
    ~ldv_0_callback_master_xfer.base, ~ldv_0_callback_master_xfer.offset := 0, 0;
    ~ldv_0_container_struct_i2c_adapter_ptr.base, ~ldv_0_container_struct_i2c_adapter_ptr.offset := 0, 0;
    ~ldv_0_container_struct_i2c_msg_ptr.base, ~ldv_0_container_struct_i2c_msg_ptr.offset := 0, 0;
    ~ldv_1_callback_s_ctrl.base, ~ldv_1_callback_s_ctrl.offset := 0, 0;
    ~ldv_1_container_struct_v4l2_ctrl_ptr.base, ~ldv_1_container_struct_v4l2_ctrl_ptr.offset := 0, 0;
    ~ldv_2_callback_s_ctrl.base, ~ldv_2_callback_s_ctrl.offset := 0, 0;
    ~ldv_2_container_struct_v4l2_ctrl_ptr.base, ~ldv_2_container_struct_v4l2_ctrl_ptr.offset := 0, 0;
    ~ldv_3_callback_buf_prepare.base, ~ldv_3_callback_buf_prepare.offset := 0, 0;
    ~ldv_3_callback_buf_queue.base, ~ldv_3_callback_buf_queue.offset := 0, 0;
    ~ldv_3_callback_buf_release.base, ~ldv_3_callback_buf_release.offset := 0, 0;
    ~ldv_3_callback_buf_setup.base, ~ldv_3_callback_buf_setup.offset := 0, 0;
    ~ldv_3_container_enum_v4l2_field := 0;
    ~ldv_3_container_struct_videobuf_buffer_ptr.base, ~ldv_3_container_struct_videobuf_buffer_ptr.offset := 0, 0;
    ~ldv_3_container_struct_videobuf_queue_ptr.base, ~ldv_3_container_struct_videobuf_queue_ptr.offset := 0, 0;
    ~ldv_4_container_timer_list.base, ~ldv_4_container_timer_list.offset := 0, 0;
    ~ldv_5_container_timer_list.base, ~ldv_5_container_timer_list.offset := 0, 0;
    ~ldv_6_container_usb_driver.base, ~ldv_6_container_usb_driver.offset := 0, 0;
    ~ldv_6_ldv_param_13_1_default.base, ~ldv_6_ldv_param_13_1_default.offset := 0, 0;
    ~ldv_6_resource_usb_interface.base, ~ldv_6_resource_usb_interface.offset := 0, 0;
    ~ldv_6_usb_device_usb_device.base, ~ldv_6_usb_device_usb_device.offset := 0, 0;
    ~ldv_7_container_usb_driver.base, ~ldv_7_container_usb_driver.offset := 0, 0;
    ~ldv_8_callback_mmap.base, ~ldv_8_callback_mmap.offset := 0, 0;
    ~ldv_8_callback_read.base, ~ldv_8_callback_read.offset := 0, 0;
    ~ldv_8_resource_enum_v4l2_buf_type := 0;
    ~ldv_8_resource_file.base, ~ldv_8_resource_file.offset := 0, 0;
    ~ldv_8_resource_struct_poll_table_struct_ptr.base, ~ldv_8_resource_struct_poll_table_struct_ptr.offset := 0, 0;
    ~ldv_8_resource_struct_v4l2_buffer_ptr.base, ~ldv_8_resource_struct_v4l2_buffer_ptr.offset := 0, 0;
    ~ldv_8_resource_struct_v4l2_capability_ptr.base, ~ldv_8_resource_struct_v4l2_capability_ptr.offset := 0, 0;
    ~ldv_8_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_8_resource_struct_v4l2_event_subscription_ptr.offset := 0, 0;
    ~ldv_8_resource_struct_v4l2_fh_ptr.base, ~ldv_8_resource_struct_v4l2_fh_ptr.offset := 0, 0;
    ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.offset := 0, 0;
    ~ldv_8_resource_struct_v4l2_format_ptr.base, ~ldv_8_resource_struct_v4l2_format_ptr.offset := 0, 0;
    ~ldv_8_resource_struct_v4l2_frequency_ptr.base, ~ldv_8_resource_struct_v4l2_frequency_ptr.offset := 0, 0;
    ~ldv_8_resource_struct_v4l2_input_ptr.base, ~ldv_8_resource_struct_v4l2_input_ptr.offset := 0, 0;
    ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.offset := 0, 0;
    ~ldv_8_resource_struct_v4l2_tuner_ptr.base, ~ldv_8_resource_struct_v4l2_tuner_ptr.offset := 0, 0;
    ~ldv_8_resource_struct_vm_area_struct_ptr.base, ~ldv_8_resource_struct_vm_area_struct_ptr.offset := 0, 0;
    ~ldv_9_resource_enum_v4l2_buf_type := 0;
    ~ldv_9_resource_file.base, ~ldv_9_resource_file.offset := 0, 0;
    ~ldv_9_resource_struct_poll_table_struct_ptr.base, ~ldv_9_resource_struct_poll_table_struct_ptr.offset := 0, 0;
    ~ldv_9_resource_struct_v4l2_buffer_ptr.base, ~ldv_9_resource_struct_v4l2_buffer_ptr.offset := 0, 0;
    ~ldv_9_resource_struct_v4l2_capability_ptr.base, ~ldv_9_resource_struct_v4l2_capability_ptr.offset := 0, 0;
    ~ldv_9_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_9_resource_struct_v4l2_event_subscription_ptr.offset := 0, 0;
    ~ldv_9_resource_struct_v4l2_fh_ptr.base, ~ldv_9_resource_struct_v4l2_fh_ptr.offset := 0, 0;
    ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.offset := 0, 0;
    ~ldv_9_resource_struct_v4l2_format_ptr.base, ~ldv_9_resource_struct_v4l2_format_ptr.offset := 0, 0;
    ~ldv_9_resource_struct_v4l2_frequency_ptr.base, ~ldv_9_resource_struct_v4l2_frequency_ptr.offset := 0, 0;
    ~ldv_9_resource_struct_v4l2_input_ptr.base, ~ldv_9_resource_struct_v4l2_input_ptr.offset := 0, 0;
    ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.offset := 0, 0;
    ~ldv_9_resource_struct_v4l2_tuner_ptr.base, ~ldv_9_resource_struct_v4l2_tuner_ptr.offset := 0, 0;
    ~ldv_9_resource_struct_vm_area_struct_ptr.base, ~ldv_9_resource_struct_vm_area_struct_ptr.offset := 0, 0;
    ~ldv_12_exit_tm6000_usb_driver_exit_default.base, ~ldv_12_exit_tm6000_usb_driver_exit_default.offset := #funAddr~tm6000_usb_driver_exit.base, #funAddr~tm6000_usb_driver_exit.offset;
    ~ldv_12_init_tm6000_usb_driver_init_default.base, ~ldv_12_init_tm6000_usb_driver_init_default.offset := #funAddr~tm6000_usb_driver_init.base, #funAddr~tm6000_usb_driver_init.offset;
    call ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset := #Ultimate.alloc(189);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 0 + 0, 1);
    call write~int(223, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 0 + 1, 1);
    call write~int(31, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 0 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 3 + 0, 1);
    call write~int(255, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 3 + 1, 1);
    call write~int(8, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 3 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 6 + 0, 1);
    call write~int(255, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 6 + 1, 1);
    call write~int(0, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 6 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 9 + 0, 1);
    call write~int(213, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 9 + 1, 1);
    call write~int(79, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 9 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 12 + 0, 1);
    call write~int(218, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 12 + 1, 1);
    call write~int(35, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 12 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 15 + 0, 1);
    call write~int(219, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 15 + 1, 1);
    call write~int(8, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 15 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 18 + 0, 1);
    call write~int(226, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 18 + 1, 1);
    call write~int(0, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 18 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 21 + 0, 1);
    call write~int(227, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 21 + 1, 1);
    call write~int(16, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 21 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 24 + 0, 1);
    call write~int(229, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 24 + 1, 1);
    call write~int(0, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 24 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 27 + 0, 1);
    call write~int(232, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 27 + 1, 1);
    call write~int(0, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 27 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 30 + 0, 1);
    call write~int(235, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 30 + 1, 1);
    call write~int(100, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 30 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 33 + 0, 1);
    call write~int(238, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 33 + 1, 1);
    call write~int(194, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 33 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 36 + 0, 1);
    call write~int(63, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 36 + 1, 1);
    call write~int(1, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 36 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 39 + 0, 1);
    call write~int(0, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 39 + 1, 1);
    call write~int(0, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 39 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 42 + 0, 1);
    call write~int(1, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 42 + 1, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 42 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 45 + 0, 1);
    call write~int(2, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 45 + 1, 1);
    call write~int(95, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 45 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 48 + 0, 1);
    call write~int(3, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 48 + 1, 1);
    call write~int(0, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 48 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 51 + 0, 1);
    call write~int(5, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 51 + 1, 1);
    call write~int(100, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 51 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 54 + 0, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 54 + 1, 1);
    call write~int(1, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 54 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 57 + 0, 1);
    call write~int(8, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 57 + 1, 1);
    call write~int(130, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 57 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 60 + 0, 1);
    call write~int(9, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 60 + 1, 1);
    call write~int(54, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 60 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 63 + 0, 1);
    call write~int(10, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 63 + 1, 1);
    call write~int(80, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 63 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 66 + 0, 1);
    call write~int(12, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 66 + 1, 1);
    call write~int(106, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 66 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 69 + 0, 1);
    call write~int(17, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 69 + 1, 1);
    call write~int(201, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 69 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 72 + 0, 1);
    call write~int(18, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 72 + 1, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 72 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 75 + 0, 1);
    call write~int(19, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 75 + 1, 1);
    call write~int(59, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 75 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 78 + 0, 1);
    call write~int(20, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 78 + 1, 1);
    call write~int(71, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 78 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 81 + 0, 1);
    call write~int(21, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 81 + 1, 1);
    call write~int(111, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 81 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 84 + 0, 1);
    call write~int(23, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 84 + 1, 1);
    call write~int(205, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 84 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 87 + 0, 1);
    call write~int(24, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 87 + 1, 1);
    call write~int(30, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 87 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 90 + 0, 1);
    call write~int(25, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 90 + 1, 1);
    call write~int(139, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 90 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 93 + 0, 1);
    call write~int(26, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 93 + 1, 1);
    call write~int(162, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 93 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 96 + 0, 1);
    call write~int(27, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 96 + 1, 1);
    call write~int(233, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 96 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 99 + 0, 1);
    call write~int(28, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 99 + 1, 1);
    call write~int(28, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 99 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 102 + 0, 1);
    call write~int(29, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 102 + 1, 1);
    call write~int(204, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 102 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 105 + 0, 1);
    call write~int(30, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 105 + 1, 1);
    call write~int(204, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 105 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 108 + 0, 1);
    call write~int(31, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 108 + 1, 1);
    call write~int(205, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 108 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 111 + 0, 1);
    call write~int(32, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 111 + 1, 1);
    call write~int(60, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 111 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 114 + 0, 1);
    call write~int(33, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 114 + 1, 1);
    call write~int(60, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 114 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 117 + 0, 1);
    call write~int(45, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 117 + 1, 1);
    call write~int(72, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 117 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 120 + 0, 1);
    call write~int(46, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 120 + 1, 1);
    call write~int(136, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 120 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 123 + 0, 1);
    call write~int(48, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 123 + 1, 1);
    call write~int(34, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 123 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 126 + 0, 1);
    call write~int(49, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 126 + 1, 1);
    call write~int(97, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 126 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 129 + 0, 1);
    call write~int(50, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 129 + 1, 1);
    call write~int(116, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 129 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 132 + 0, 1);
    call write~int(51, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 132 + 1, 1);
    call write~int(28, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 132 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 135 + 0, 1);
    call write~int(52, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 135 + 1, 1);
    call write~int(116, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 135 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 138 + 0, 1);
    call write~int(53, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 138 + 1, 1);
    call write~int(28, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 138 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 141 + 0, 1);
    call write~int(54, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 141 + 1, 1);
    call write~int(122, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 141 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 144 + 0, 1);
    call write~int(55, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 144 + 1, 1);
    call write~int(38, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 144 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 147 + 0, 1);
    call write~int(56, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 147 + 1, 1);
    call write~int(64, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 147 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 150 + 0, 1);
    call write~int(57, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 150 + 1, 1);
    call write~int(10, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 150 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 153 + 0, 1);
    call write~int(66, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 153 + 1, 1);
    call write~int(85, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 153 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 156 + 0, 1);
    call write~int(81, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 156 + 1, 1);
    call write~int(17, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 156 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 159 + 0, 1);
    call write~int(85, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 159 + 1, 1);
    call write~int(1, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 159 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 162 + 0, 1);
    call write~int(87, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 162 + 1, 1);
    call write~int(2, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 162 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 165 + 0, 1);
    call write~int(88, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 165 + 1, 1);
    call write~int(53, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 165 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 168 + 0, 1);
    call write~int(89, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 168 + 1, 1);
    call write~int(160, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 168 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 171 + 0, 1);
    call write~int(128, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 171 + 1, 1);
    call write~int(21, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 171 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 174 + 0, 1);
    call write~int(130, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 174 + 1, 1);
    call write~int(66, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 174 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 177 + 0, 1);
    call write~int(193, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 177 + 1, 1);
    call write~int(208, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 177 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 180 + 0, 1);
    call write~int(195, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 180 + 1, 1);
    call write~int(136, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 180 + 2, 1);
    call write~int(7, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 183 + 0, 1);
    call write~int(63, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 183 + 1, 1);
    call write~int(0, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 183 + 2, 1);
    call write~int(5, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 186 + 0, 1);
    call write~int(24, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 186 + 1, 1);
    call write~int(0, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset + 186 + 2, 1);
    call ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset := #Ultimate.alloc(225);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 0 + 0, 1);
    call write~int(192, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 0 + 1, 1);
    call write~int(0, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 0 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 3 + 0, 1);
    call write~int(196, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 3 + 1, 1);
    call write~int(160, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 3 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 6 + 0, 1);
    call write~int(198, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 6 + 1, 1);
    call write~int(64, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 6 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 9 + 0, 1);
    call write~int(202, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 9 + 1, 1);
    call write~int(49, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 9 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 12 + 0, 1);
    call write~int(204, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 12 + 1, 1);
    call write~int(225, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 12 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 15 + 0, 1);
    call write~int(224, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 15 + 1, 1);
    call write~int(3, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 15 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 18 + 0, 1);
    call write~int(254, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 18 + 1, 1);
    call write~int(127, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 18 + 2, 1);
    call write~int(8, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 21 + 0, 1);
    call write~int(226, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 21 + 1, 1);
    call write~int(240, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 21 + 2, 1);
    call write~int(8, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 24 + 0, 1);
    call write~int(227, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 24 + 1, 1);
    call write~int(244, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 24 + 2, 1);
    call write~int(8, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 27 + 0, 1);
    call write~int(228, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 27 + 1, 1);
    call write~int(248, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 27 + 2, 1);
    call write~int(8, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 30 + 0, 1);
    call write~int(230, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 30 + 1, 1);
    call write~int(0, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 30 + 2, 1);
    call write~int(8, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 33 + 0, 1);
    call write~int(234, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 33 + 1, 1);
    call write~int(242, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 33 + 2, 1);
    call write~int(8, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 36 + 0, 1);
    call write~int(235, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 36 + 1, 1);
    call write~int(240, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 36 + 2, 1);
    call write~int(8, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 39 + 0, 1);
    call write~int(236, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 39 + 1, 1);
    call write~int(194, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 39 + 2, 1);
    call write~int(8, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 42 + 0, 1);
    call write~int(240, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 42 + 1, 1);
    call write~int(96, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 42 + 2, 1);
    call write~int(8, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 45 + 0, 1);
    call write~int(241, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 45 + 1, 1);
    call write~int(252, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 45 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 48 + 0, 1);
    call write~int(63, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 48 + 1, 1);
    call write~int(1, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 48 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 51 + 0, 1);
    call write~int(0, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 51 + 1, 1);
    call write~int(0, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 51 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 54 + 0, 1);
    call write~int(1, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 54 + 1, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 54 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 57 + 0, 1);
    call write~int(2, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 57 + 1, 1);
    call write~int(95, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 57 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 60 + 0, 1);
    call write~int(3, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 60 + 1, 1);
    call write~int(0, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 60 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 63 + 0, 1);
    call write~int(5, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 63 + 1, 1);
    call write~int(100, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 63 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 66 + 0, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 66 + 1, 1);
    call write~int(1, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 66 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 69 + 0, 1);
    call write~int(8, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 69 + 1, 1);
    call write~int(130, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 69 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 72 + 0, 1);
    call write~int(9, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 72 + 1, 1);
    call write~int(54, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 72 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 75 + 0, 1);
    call write~int(10, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 75 + 1, 1);
    call write~int(80, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 75 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 78 + 0, 1);
    call write~int(12, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 78 + 1, 1);
    call write~int(106, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 78 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 81 + 0, 1);
    call write~int(17, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 81 + 1, 1);
    call write~int(201, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 81 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 84 + 0, 1);
    call write~int(18, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 84 + 1, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 84 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 87 + 0, 1);
    call write~int(19, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 87 + 1, 1);
    call write~int(59, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 87 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 90 + 0, 1);
    call write~int(20, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 90 + 1, 1);
    call write~int(71, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 90 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 93 + 0, 1);
    call write~int(21, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 93 + 1, 1);
    call write~int(111, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 93 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 96 + 0, 1);
    call write~int(23, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 96 + 1, 1);
    call write~int(205, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 96 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 99 + 0, 1);
    call write~int(24, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 99 + 1, 1);
    call write~int(30, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 99 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 102 + 0, 1);
    call write~int(25, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 102 + 1, 1);
    call write~int(139, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 102 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 105 + 0, 1);
    call write~int(26, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 105 + 1, 1);
    call write~int(162, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 105 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 108 + 0, 1);
    call write~int(27, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 108 + 1, 1);
    call write~int(233, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 108 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 111 + 0, 1);
    call write~int(28, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 111 + 1, 1);
    call write~int(28, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 111 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 114 + 0, 1);
    call write~int(29, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 114 + 1, 1);
    call write~int(204, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 114 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 117 + 0, 1);
    call write~int(30, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 117 + 1, 1);
    call write~int(204, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 117 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 120 + 0, 1);
    call write~int(31, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 120 + 1, 1);
    call write~int(205, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 120 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 123 + 0, 1);
    call write~int(32, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 123 + 1, 1);
    call write~int(60, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 123 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 126 + 0, 1);
    call write~int(33, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 126 + 1, 1);
    call write~int(60, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 126 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 129 + 0, 1);
    call write~int(45, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 129 + 1, 1);
    call write~int(72, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 129 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 132 + 0, 1);
    call write~int(46, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 132 + 1, 1);
    call write~int(136, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 132 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 135 + 0, 1);
    call write~int(48, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 135 + 1, 1);
    call write~int(34, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 135 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 138 + 0, 1);
    call write~int(49, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 138 + 1, 1);
    call write~int(97, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 138 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 141 + 0, 1);
    call write~int(50, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 141 + 1, 1);
    call write~int(116, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 141 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 144 + 0, 1);
    call write~int(51, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 144 + 1, 1);
    call write~int(28, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 144 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 147 + 0, 1);
    call write~int(52, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 147 + 1, 1);
    call write~int(116, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 147 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 150 + 0, 1);
    call write~int(53, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 150 + 1, 1);
    call write~int(28, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 150 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 153 + 0, 1);
    call write~int(54, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 153 + 1, 1);
    call write~int(122, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 153 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 156 + 0, 1);
    call write~int(55, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 156 + 1, 1);
    call write~int(38, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 156 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 159 + 0, 1);
    call write~int(56, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 159 + 1, 1);
    call write~int(64, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 159 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 162 + 0, 1);
    call write~int(57, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 162 + 1, 1);
    call write~int(10, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 162 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 165 + 0, 1);
    call write~int(66, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 165 + 1, 1);
    call write~int(85, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 165 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 168 + 0, 1);
    call write~int(81, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 168 + 1, 1);
    call write~int(17, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 168 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 171 + 0, 1);
    call write~int(85, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 171 + 1, 1);
    call write~int(1, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 171 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 174 + 0, 1);
    call write~int(87, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 174 + 1, 1);
    call write~int(2, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 174 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 177 + 0, 1);
    call write~int(88, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 177 + 1, 1);
    call write~int(53, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 177 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 180 + 0, 1);
    call write~int(89, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 180 + 1, 1);
    call write~int(160, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 180 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 183 + 0, 1);
    call write~int(128, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 183 + 1, 1);
    call write~int(21, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 183 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 186 + 0, 1);
    call write~int(130, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 186 + 1, 1);
    call write~int(66, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 186 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 189 + 0, 1);
    call write~int(193, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 189 + 1, 1);
    call write~int(208, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 189 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 192 + 0, 1);
    call write~int(195, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 192 + 1, 1);
    call write~int(136, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 192 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 195 + 0, 1);
    call write~int(63, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 195 + 1, 1);
    call write~int(0, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 195 + 2, 1);
    call write~int(5, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 198 + 0, 1);
    call write~int(24, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 198 + 1, 1);
    call write~int(0, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 198 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 201 + 0, 1);
    call write~int(220, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 201 + 1, 1);
    call write~int(170, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 201 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 204 + 0, 1);
    call write~int(221, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 204 + 1, 1);
    call write~int(48, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 204 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 207 + 0, 1);
    call write~int(222, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 207 + 1, 1);
    call write~int(32, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 207 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 210 + 0, 1);
    call write~int(223, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 210 + 1, 1);
    call write~int(208, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 210 + 2, 1);
    call write~int(4, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 213 + 0, 1);
    call write~int(2, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 213 + 1, 1);
    call write~int(0, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 213 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 216 + 0, 1);
    call write~int(216, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 216 + 1, 1);
    call write~int(15, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 216 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 219 + 0, 1);
    call write~int(229, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 219 + 1, 1);
    call write~int(254, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 219 + 2, 1);
    call write~int(7, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 222 + 0, 1);
    call write~int(218, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 222 + 1, 1);
    call write~int(255, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset + 222 + 2, 1);
    call ~#tm6000_devlist.base, ~#tm6000_devlist.offset := #Ultimate.alloc(16);
    call write~$Pointer$(~#tm6000_devlist.base, ~#tm6000_devlist.offset, ~#tm6000_devlist.base, ~#tm6000_devlist.offset + 0, 8);
    call write~$Pointer$(~#tm6000_devlist.base, ~#tm6000_devlist.offset, ~#tm6000_devlist.base, ~#tm6000_devlist.offset + 8, 8);
    call ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset := #Ultimate.alloc(156);
    call write~int(1, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 0 + 0, 4);
    call write~int(0, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union3670.head, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union3670.tail, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(3735899821, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 4, 4);
    call write~int(4294967295, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, -1, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 20 + 8 + 8, 8);
    call #t~nondet896.base, #t~nondet896.offset := #Ultimate.alloc(31);
    call write~$Pointer$(#t~nondet896.base, #t~nondet896.offset, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union3671.__padding[0], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0, 1);
    call write~int(#t~union3671.__padding[1], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union3671.__padding[2], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[3], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[4], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[5], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[6], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[7], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[8], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[9], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[10], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[11], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[12], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[13], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[14], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[15], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[16], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[17], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[18], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[19], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[20], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[21], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[22], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3671.__padding[23], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union3671.dep_map.key.base, #t~union3671.dep_map.key.offset, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union3671.dep_map.class_cache.base[0], #t~union3671.dep_map.class_cache.offset[0], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union3671.dep_map.class_cache.base[1], #t~union3671.dep_map.class_cache.offset[1], ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union3671.dep_map.name.base, #t~union3671.dep_map.name.offset, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union3671.dep_map.cpu, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union3671.dep_map.ip, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 4 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 72, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 72 + 0, 8);
    call write~$Pointer$(~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 72, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 72 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 96, 8);
    call write~$Pointer$(~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 104, 8);
    call write~$Pointer$(0, 0, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 112 + 0, 8);
    call write~int(0, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 112 + 8 + 0, 8);
    call write~int(0, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 112 + 8 + 8, 8);
    call #t~nondet897.base, #t~nondet897.offset := #Ultimate.alloc(21);
    call write~$Pointer$(#t~nondet897.base, #t~nondet897.offset, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 112 + 24, 8);
    call write~int(0, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 112 + 32, 4);
    call write~int(0, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset + 112 + 36, 8);
    havoc #t~union3670.head, #t~union3670.tail;
    havoc #t~nondet896.base, #t~nondet896.offset;
    havoc #t~union3671.__padding, #t~union3671.dep_map.key.base, #t~union3671.dep_map.key.offset, #t~union3671.dep_map.class_cache.base, #t~union3671.dep_map.class_cache.offset, #t~union3671.dep_map.name.base, #t~union3671.dep_map.name.offset, #t~union3671.dep_map.cpu, #t~union3671.dep_map.ip;
    havoc #t~nondet897.base, #t~nondet897.offset;
    call ~#tm6000_extension_devlist.base, ~#tm6000_extension_devlist.offset := #Ultimate.alloc(16);
    call write~$Pointer$(~#tm6000_extension_devlist.base, ~#tm6000_extension_devlist.offset, ~#tm6000_extension_devlist.base, ~#tm6000_extension_devlist.offset + 0, 8);
    call write~$Pointer$(~#tm6000_extension_devlist.base, ~#tm6000_extension_devlist.offset, ~#tm6000_extension_devlist.base, ~#tm6000_extension_devlist.offset + 8, 8);
    call ~#tm6000_algo.base, ~#tm6000_algo.offset := #Ultimate.alloc(24);
    call write~$Pointer$(#funAddr~tm6000_i2c_xfer.base, #funAddr~tm6000_i2c_xfer.offset, ~#tm6000_algo.base, ~#tm6000_algo.offset + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_algo.base, ~#tm6000_algo.offset + 8, 8);
    call write~$Pointer$(#funAddr~functionality.base, #funAddr~functionality.offset, ~#tm6000_algo.base, ~#tm6000_algo.offset + 16, 8);
    ~keep_urb := 0;
    call ~#format.base, ~#format.offset := #Ultimate.alloc(48);
    call #t~nondet1213.base, #t~nondet1213.offset := #Ultimate.alloc(20);
    call write~$Pointer$(#t~nondet1213.base, #t~nondet1213.offset, ~#format.base, ~#format.offset + 0 + 0, 8);
    call write~int(1448695129, ~#format.base, ~#format.offset + 0 + 8, 4);
    call write~int(16, ~#format.base, ~#format.offset + 0 + 12, 4);
    call #t~nondet1214.base, #t~nondet1214.offset := #Ultimate.alloc(20);
    call write~$Pointer$(#t~nondet1214.base, #t~nondet1214.offset, ~#format.base, ~#format.offset + 16 + 0, 8);
    call write~int(1498831189, ~#format.base, ~#format.offset + 16 + 8, 4);
    call write~int(16, ~#format.base, ~#format.offset + 16 + 12, 4);
    call #t~nondet1215.base, #t~nondet1215.offset := #Ultimate.alloc(21);
    call write~$Pointer$(#t~nondet1215.base, #t~nondet1215.offset, ~#format.base, ~#format.offset + 32 + 0, 8);
    call write~int(808865108, ~#format.base, ~#format.offset + 32 + 8, 4);
    call write~int(16, ~#format.base, ~#format.offset + 32 + 12, 4);
    havoc #t~nondet1213.base, #t~nondet1213.offset;
    havoc #t~nondet1214.base, #t~nondet1214.offset;
    havoc #t~nondet1215.base, #t~nondet1215.offset;
    call ~#tm6000_video_qops.base, ~#tm6000_video_qops.offset := #Ultimate.alloc(32);
    call write~$Pointer$(#funAddr~buffer_setup.base, #funAddr~buffer_setup.offset, ~#tm6000_video_qops.base, ~#tm6000_video_qops.offset + 0, 8);
    call write~$Pointer$(#funAddr~buffer_prepare.base, #funAddr~buffer_prepare.offset, ~#tm6000_video_qops.base, ~#tm6000_video_qops.offset + 8, 8);
    call write~$Pointer$(#funAddr~buffer_queue.base, #funAddr~buffer_queue.offset, ~#tm6000_video_qops.base, ~#tm6000_video_qops.offset + 16, 8);
    call write~$Pointer$(#funAddr~buffer_release.base, #funAddr~buffer_release.offset, ~#tm6000_video_qops.base, ~#tm6000_video_qops.offset + 24, 8);
    call ~#tm6000_ctrl_ops.base, ~#tm6000_ctrl_ops.offset := #Ultimate.alloc(24);
    call write~$Pointer$(0, 0, ~#tm6000_ctrl_ops.base, ~#tm6000_ctrl_ops.offset + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_ctrl_ops.base, ~#tm6000_ctrl_ops.offset + 8, 8);
    call write~$Pointer$(#funAddr~tm6000_s_ctrl.base, #funAddr~tm6000_s_ctrl.offset, ~#tm6000_ctrl_ops.base, ~#tm6000_ctrl_ops.offset + 16, 8);
    call ~#tm6000_radio_ctrl_ops.base, ~#tm6000_radio_ctrl_ops.offset := #Ultimate.alloc(24);
    call write~$Pointer$(0, 0, ~#tm6000_radio_ctrl_ops.base, ~#tm6000_radio_ctrl_ops.offset + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_ctrl_ops.base, ~#tm6000_radio_ctrl_ops.offset + 8, 8);
    call write~$Pointer$(#funAddr~tm6000_radio_s_ctrl.base, #funAddr~tm6000_radio_s_ctrl.offset, ~#tm6000_radio_ctrl_ops.base, ~#tm6000_radio_ctrl_ops.offset + 16, 8);
    call ~#tm6000_fops.base, ~#tm6000_fops.offset := #Ultimate.alloc(88);
    call write~$Pointer$(~#__this_module.base, ~#__this_module.offset, ~#tm6000_fops.base, ~#tm6000_fops.offset + 0, 8);
    call write~$Pointer$(#funAddr~tm6000_read.base, #funAddr~tm6000_read.offset, ~#tm6000_fops.base, ~#tm6000_fops.offset + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_fops.base, ~#tm6000_fops.offset + 16, 8);
    call write~$Pointer$(#funAddr~tm6000_poll.base, #funAddr~tm6000_poll.offset, ~#tm6000_fops.base, ~#tm6000_fops.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#tm6000_fops.base, ~#tm6000_fops.offset + 32, 8);
    call write~$Pointer$(#funAddr~video_ioctl2.base, #funAddr~video_ioctl2.offset, ~#tm6000_fops.base, ~#tm6000_fops.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#tm6000_fops.base, ~#tm6000_fops.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#tm6000_fops.base, ~#tm6000_fops.offset + 56, 8);
    call write~$Pointer$(#funAddr~tm6000_mmap.base, #funAddr~tm6000_mmap.offset, ~#tm6000_fops.base, ~#tm6000_fops.offset + 64, 8);
    call write~$Pointer$(#funAddr~tm6000_open.base, #funAddr~tm6000_open.offset, ~#tm6000_fops.base, ~#tm6000_fops.offset + 72, 8);
    call write~$Pointer$(#funAddr~tm6000_release.base, #funAddr~tm6000_release.offset, ~#tm6000_fops.base, ~#tm6000_fops.offset + 80, 8);
    call ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset := #Ultimate.alloc(872);
    call write~$Pointer$(#funAddr~vidioc_querycap.base, #funAddr~vidioc_querycap.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 0, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 8, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 16, 8);
    call write~$Pointer$(#funAddr~vidioc_enum_fmt_vid_cap.base, #funAddr~vidioc_enum_fmt_vid_cap.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 56, 8);
    call write~$Pointer$(#funAddr~vidioc_g_fmt_vid_cap.base, #funAddr~vidioc_g_fmt_vid_cap.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 64, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 72, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 96, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 104, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 112, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 120, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 128, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 136, 8);
    call write~$Pointer$(#funAddr~vidioc_s_fmt_vid_cap.base, #funAddr~vidioc_s_fmt_vid_cap.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 144, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 152, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 160, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 168, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 176, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 184, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 192, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 200, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 208, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 216, 8);
    call write~$Pointer$(#funAddr~vidioc_try_fmt_vid_cap.base, #funAddr~vidioc_try_fmt_vid_cap.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 224, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 232, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 240, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 248, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 256, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 264, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 272, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 280, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 288, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 296, 8);
    call write~$Pointer$(#funAddr~vidioc_reqbufs.base, #funAddr~vidioc_reqbufs.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 304, 8);
    call write~$Pointer$(#funAddr~vidioc_querybuf.base, #funAddr~vidioc_querybuf.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 312, 8);
    call write~$Pointer$(#funAddr~vidioc_qbuf.base, #funAddr~vidioc_qbuf.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 320, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 328, 8);
    call write~$Pointer$(#funAddr~vidioc_dqbuf.base, #funAddr~vidioc_dqbuf.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 336, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 344, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 352, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 360, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 368, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 376, 8);
    call write~$Pointer$(#funAddr~vidioc_streamon.base, #funAddr~vidioc_streamon.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 384, 8);
    call write~$Pointer$(#funAddr~vidioc_streamoff.base, #funAddr~vidioc_streamoff.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 392, 8);
    call write~$Pointer$(#funAddr~vidioc_g_std.base, #funAddr~vidioc_g_std.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 400, 8);
    call write~$Pointer$(#funAddr~vidioc_s_std.base, #funAddr~vidioc_s_std.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 408, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 416, 8);
    call write~$Pointer$(#funAddr~vidioc_enum_input.base, #funAddr~vidioc_enum_input.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 424, 8);
    call write~$Pointer$(#funAddr~vidioc_g_input.base, #funAddr~vidioc_g_input.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 432, 8);
    call write~$Pointer$(#funAddr~vidioc_s_input.base, #funAddr~vidioc_s_input.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 440, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 448, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 456, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 464, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 472, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 480, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 488, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 496, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 504, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 512, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 520, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 528, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 536, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 544, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 552, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 560, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 568, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 576, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 584, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 592, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 600, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 608, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 616, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 624, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 632, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 640, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 648, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 656, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 664, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 672, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 680, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 688, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 696, 8);
    call write~$Pointer$(#funAddr~vidioc_g_tuner.base, #funAddr~vidioc_g_tuner.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 704, 8);
    call write~$Pointer$(#funAddr~vidioc_s_tuner.base, #funAddr~vidioc_s_tuner.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 712, 8);
    call write~$Pointer$(#funAddr~vidioc_g_frequency.base, #funAddr~vidioc_g_frequency.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 720, 8);
    call write~$Pointer$(#funAddr~vidioc_s_frequency.base, #funAddr~vidioc_s_frequency.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 728, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 736, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 744, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 752, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 760, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 768, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 776, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 784, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 792, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 800, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 808, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 816, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 824, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 832, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 840, 8);
    call write~$Pointer$(#funAddr~v4l2_ctrl_subscribe_event.base, #funAddr~v4l2_ctrl_subscribe_event.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 848, 8);
    call write~$Pointer$(#funAddr~v4l2_event_unsubscribe.base, #funAddr~v4l2_event_unsubscribe.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 856, 8);
    call write~$Pointer$(0, 0, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset + 864, 8);
    call ~#tm6000_template.base, ~#tm6000_template.offset := #Ultimate.alloc(1762);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 0 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 16, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 24, 4);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 28, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 36, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 40, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 44, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 52, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 56, 2);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 58, 2);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 60, 2);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 62, 2);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 64, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 72, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 80, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 88, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 92, 4);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 96, 8);
    call write~int(#t~union3672.major, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 104 + 0 + 0, 4);
    call write~int(#t~union3672.minor, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 104 + 0 + 4, 4);
    call write~int(#t~union3673.major, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 104 + 0 + 0, 4);
    call write~int(#t~union3673.minor, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 104 + 0 + 4, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 104 + 0 + 0, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 104 + 0 + 4, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 104 + 0 + 8, 4);
    call write~int(#t~union3674, ~#tm6000_template.base, ~#tm6000_template.offset + 0 + 104 + 0, 4);
    call write~$Pointer$(~#tm6000_fops.base, ~#tm6000_fops.offset, ~#tm6000_template.base, ~#tm6000_template.offset + 116, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 8 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 24, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 32, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 40, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 48, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 56 + 0 + 0, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 0 + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 0 + 8 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 0 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 0 + 24, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 0 + 32 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 0 + 32 + 8 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 0 + 32 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 0 + 32 + 24, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 0 + 32 + 32, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 0 + 32 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 0 + 8, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 16, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 24, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 32, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 40, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 48, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 52, 4);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 56, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 0, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 1, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 2, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 3, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 4, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 5, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 6, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 7, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 8, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 9, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 10, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 11, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 12, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 13, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 14, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 64 + 15, 1);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 80 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 80 + 8 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 80 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 80 + 24, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 80 + 32, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 76 + 80 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 200, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 60 + 208, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 272, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 276, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 280, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 284, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 16 + 288, 4);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 308, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 316, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 0 + 0, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union3675.head, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union3675.tail, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 4, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union3676.__padding[0], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0, 1);
    call write~int(#t~union3676.__padding[1], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union3676.__padding[2], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[3], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[4], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[5], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[6], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[7], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[8], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[9], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[10], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[11], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[12], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[13], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[14], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[15], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[16], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[17], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[18], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[19], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[20], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[21], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[22], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3676.__padding[23], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union3676.dep_map.key.base, #t~union3676.dep_map.key.offset, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union3676.dep_map.class_cache.base[0], #t~union3676.dep_map.class_cache.offset[0], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union3676.dep_map.class_cache.base[1], #t~union3676.dep_map.class_cache.offset[1], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union3676.dep_map.name.base, #t~union3676.dep_map.name.offset, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union3676.dep_map.cpu, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union3676.dep_map.ip, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 4 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 72 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 72 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 88, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 96, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 104, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 112 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 112 + 8 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 112 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 112 + 24, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 112 + 32, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 324 + 112 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 480, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 488, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 496, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 0 + 0, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 4, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 8, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 12, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 13, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 14, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 15, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union3677.head, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union3677.tail, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 4, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union3678.__padding[0], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0, 1);
    call write~int(#t~union3678.__padding[1], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union3678.__padding[2], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[3], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[4], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[5], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[6], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[7], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[8], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[9], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[10], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[11], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[12], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[13], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[14], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[15], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[16], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[17], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[18], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[19], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[20], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[21], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[22], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3678.__padding[23], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union3678.dep_map.key.base, #t~union3678.dep_map.key.offset, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union3678.dep_map.class_cache.base[0], #t~union3678.dep_map.class_cache.offset[0], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union3678.dep_map.class_cache.base[1], #t~union3678.dep_map.class_cache.offset[1], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union3678.dep_map.name.base, #t~union3678.dep_map.name.offset, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union3678.dep_map.cpu, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union3678.dep_map.ip, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 16 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 84 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 84 + 8, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 0, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union3679.head, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union3679.tail, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 4, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union3680.__padding[0], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0, 1);
    call write~int(#t~union3680.__padding[1], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union3680.__padding[2], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[3], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[4], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[5], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[6], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[7], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[8], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[9], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[10], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[11], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[12], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[13], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[14], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[15], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[16], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[17], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[18], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[19], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[20], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[21], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[22], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3680.__padding[23], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union3680.dep_map.key.base, #t~union3680.dep_map.key.offset, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union3680.dep_map.class_cache.base[0], #t~union3680.dep_map.class_cache.offset[0], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union3680.dep_map.class_cache.base[1], #t~union3680.dep_map.class_cache.offset[1], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union3680.dep_map.name.base, #t~union3680.dep_map.name.offset, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union3680.dep_map.cpu, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union3680.dep_map.ip, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 68 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 100 + 4 + 68 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 188, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 196, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 197, 1);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 0 + 8, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 16, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 24, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 32, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 40, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 48, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 52, 4);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 56, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 0, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 1, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 2, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 3, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 4, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 5, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 6, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 7, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 8, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 9, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 10, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 11, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 12, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 13, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 14, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 64 + 15, 1);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 80 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 80 + 8 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 80 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 80 + 24, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 80 + 32, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 198 + 80 + 36, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 322, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 330 + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 330 + 8 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 330 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 330 + 24, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 330 + 32 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 330 + 32 + 8 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 330 + 32 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 330 + 32 + 24, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 330 + 32 + 32, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 330 + 32 + 36, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union3681.head, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union3681.tail, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 4, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union3682.__padding[0], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0, 1);
    call write~int(#t~union3682.__padding[1], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union3682.__padding[2], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[3], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[4], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[5], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[6], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[7], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[8], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[9], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[10], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[11], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[12], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[13], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[14], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[15], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[16], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[17], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[18], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[19], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[20], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[21], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[22], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3682.__padding[23], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union3682.dep_map.key.base, #t~union3682.dep_map.key.offset, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union3682.dep_map.class_cache.base[0], #t~union3682.dep_map.class_cache.offset[0], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union3682.dep_map.class_cache.base[1], #t~union3682.dep_map.class_cache.offset[1], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union3682.dep_map.name.base, #t~union3682.dep_map.name.offset, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union3682.dep_map.cpu, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union3682.dep_map.ip, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 68 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 406 + 68 + 8, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 490 + 0, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 494 + 0, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 498, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 502, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 506, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 510, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 514, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 518, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 522, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 526, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 530, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 534, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 538, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 542, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 546, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 550, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 554, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 558, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 566, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 574, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 582, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 590, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 504 + 598, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1110, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1118, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1126, 4);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1130, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1138, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1146, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1154 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1154 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1170, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1178 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1178 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1194, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1202 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1210, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1214, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union3683.head, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union3683.tail, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 4, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union3684.__padding[0], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0, 1);
    call write~int(#t~union3684.__padding[1], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union3684.__padding[2], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[3], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[4], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[5], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[6], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[7], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[8], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[9], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[10], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[11], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[12], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[13], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[14], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[15], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[16], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[17], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[18], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[19], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[20], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[21], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[22], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3684.__padding[23], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union3684.dep_map.key.base, #t~union3684.dep_map.key.offset, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union3684.dep_map.class_cache.base[0], #t~union3684.dep_map.class_cache.offset[0], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union3684.dep_map.class_cache.base[1], #t~union3684.dep_map.class_cache.offset[1], ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union3684.dep_map.name.base, #t~union3684.dep_map.name.offset, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union3684.dep_map.cpu, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union3684.dep_map.ip, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1218 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1286 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1286 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1302 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1302 + 8 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1302 + 8 + 8, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1302 + 24 + 0 + 0, 4);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1330, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1338, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1346, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1354, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1362, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 124 + 1363, 1);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 1488, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 1496, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 1504, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 1512, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 1520, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 1528, 8);
    call write~int(116, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 0, 1);
    call write~int(109, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 1, 1);
    call write~int(54, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 2, 1);
    call write~int(48, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 3, 1);
    call write~int(48, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 4, 1);
    call write~int(48, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 5, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 6, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 7, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 8, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 9, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 10, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 11, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 12, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 13, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 14, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 15, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 16, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 17, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 18, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 19, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 20, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 21, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 22, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 23, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 24, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 25, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 26, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 27, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 28, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 29, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 30, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1536 + 31, 1);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1568, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1572, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1576, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1580, 2);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1582, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1590, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union3685.head, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union3685.tail, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 4, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union3686.__padding[0], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0, 1);
    call write~int(#t~union3686.__padding[1], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union3686.__padding[2], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[3], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[4], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[5], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[6], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[7], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[8], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[9], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[10], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[11], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[12], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[13], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[14], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[15], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[16], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[17], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[18], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[19], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[20], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[21], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[22], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3686.__padding[23], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union3686.dep_map.key.base, #t~union3686.dep_map.key.offset, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union3686.dep_map.class_cache.base[0], #t~union3686.dep_map.class_cache.offset[0], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union3686.dep_map.class_cache.base[1], #t~union3686.dep_map.class_cache.offset[1], ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union3686.dep_map.name.base, #t~union3686.dep_map.name.offset, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union3686.dep_map.cpu, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union3686.dep_map.ip, ~#tm6000_template.base, ~#tm6000_template.offset + 1594 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 1662 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 1662 + 8, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1678, 4);
    call write~int(16728063, ~#tm6000_template.base, ~#tm6000_template.offset + 1682, 8);
    call write~$Pointer$(#funAddr~video_device_release.base, #funAddr~video_device_release.offset, ~#tm6000_template.base, ~#tm6000_template.offset + 1690, 8);
    call write~$Pointer$(~#video_ioctl_ops.base, ~#video_ioctl_ops.offset, ~#tm6000_template.base, ~#tm6000_template.offset + 1698, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1706 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1706 + 8, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1706 + 16, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1730 + 0, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1730 + 8, 8);
    call write~int(0, ~#tm6000_template.base, ~#tm6000_template.offset + 1730 + 16, 8);
    call write~$Pointer$(0, 0, ~#tm6000_template.base, ~#tm6000_template.offset + 1754, 8);
    havoc #t~union3672.major, #t~union3672.minor;
    havoc #t~union3673.major, #t~union3673.minor;
    havoc #t~union3674;
    havoc #t~union3675.head, #t~union3675.tail;
    havoc #t~union3676.__padding, #t~union3676.dep_map.key.base, #t~union3676.dep_map.key.offset, #t~union3676.dep_map.class_cache.base, #t~union3676.dep_map.class_cache.offset, #t~union3676.dep_map.name.base, #t~union3676.dep_map.name.offset, #t~union3676.dep_map.cpu, #t~union3676.dep_map.ip;
    havoc #t~union3677.head, #t~union3677.tail;
    havoc #t~union3678.__padding, #t~union3678.dep_map.key.base, #t~union3678.dep_map.key.offset, #t~union3678.dep_map.class_cache.base, #t~union3678.dep_map.class_cache.offset, #t~union3678.dep_map.name.base, #t~union3678.dep_map.name.offset, #t~union3678.dep_map.cpu, #t~union3678.dep_map.ip;
    havoc #t~union3679.head, #t~union3679.tail;
    havoc #t~union3680.__padding, #t~union3680.dep_map.key.base, #t~union3680.dep_map.key.offset, #t~union3680.dep_map.class_cache.base, #t~union3680.dep_map.class_cache.offset, #t~union3680.dep_map.name.base, #t~union3680.dep_map.name.offset, #t~union3680.dep_map.cpu, #t~union3680.dep_map.ip;
    havoc #t~union3681.head, #t~union3681.tail;
    havoc #t~union3682.__padding, #t~union3682.dep_map.key.base, #t~union3682.dep_map.key.offset, #t~union3682.dep_map.class_cache.base, #t~union3682.dep_map.class_cache.offset, #t~union3682.dep_map.name.base, #t~union3682.dep_map.name.offset, #t~union3682.dep_map.cpu, #t~union3682.dep_map.ip;
    havoc #t~union3683.head, #t~union3683.tail;
    havoc #t~union3684.__padding, #t~union3684.dep_map.key.base, #t~union3684.dep_map.key.offset, #t~union3684.dep_map.class_cache.base, #t~union3684.dep_map.class_cache.offset, #t~union3684.dep_map.name.base, #t~union3684.dep_map.name.offset, #t~union3684.dep_map.cpu, #t~union3684.dep_map.ip;
    havoc #t~union3685.head, #t~union3685.tail;
    havoc #t~union3686.__padding, #t~union3686.dep_map.key.base, #t~union3686.dep_map.key.offset, #t~union3686.dep_map.class_cache.base, #t~union3686.dep_map.class_cache.offset, #t~union3686.dep_map.name.base, #t~union3686.dep_map.name.offset, #t~union3686.dep_map.cpu, #t~union3686.dep_map.ip;
    call ~#radio_fops.base, ~#radio_fops.offset := #Ultimate.alloc(88);
    call write~$Pointer$(~#__this_module.base, ~#__this_module.offset, ~#radio_fops.base, ~#radio_fops.offset + 0, 8);
    call write~$Pointer$(0, 0, ~#radio_fops.base, ~#radio_fops.offset + 8, 8);
    call write~$Pointer$(0, 0, ~#radio_fops.base, ~#radio_fops.offset + 16, 8);
    call write~$Pointer$(#funAddr~v4l2_ctrl_poll.base, #funAddr~v4l2_ctrl_poll.offset, ~#radio_fops.base, ~#radio_fops.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#radio_fops.base, ~#radio_fops.offset + 32, 8);
    call write~$Pointer$(#funAddr~video_ioctl2.base, #funAddr~video_ioctl2.offset, ~#radio_fops.base, ~#radio_fops.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#radio_fops.base, ~#radio_fops.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#radio_fops.base, ~#radio_fops.offset + 56, 8);
    call write~$Pointer$(0, 0, ~#radio_fops.base, ~#radio_fops.offset + 64, 8);
    call write~$Pointer$(#funAddr~tm6000_open.base, #funAddr~tm6000_open.offset, ~#radio_fops.base, ~#radio_fops.offset + 72, 8);
    call write~$Pointer$(#funAddr~tm6000_release.base, #funAddr~tm6000_release.offset, ~#radio_fops.base, ~#radio_fops.offset + 80, 8);
    call ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset := #Ultimate.alloc(872);
    call write~$Pointer$(#funAddr~vidioc_querycap.base, #funAddr~vidioc_querycap.offset, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 0, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 8, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 16, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 56, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 64, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 72, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 96, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 104, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 112, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 120, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 128, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 136, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 144, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 152, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 160, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 168, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 176, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 184, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 192, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 200, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 208, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 216, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 224, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 232, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 240, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 248, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 256, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 264, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 272, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 280, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 288, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 296, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 304, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 312, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 320, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 328, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 336, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 344, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 352, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 360, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 368, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 376, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 384, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 392, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 400, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 408, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 416, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 424, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 432, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 440, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 448, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 456, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 464, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 472, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 480, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 488, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 496, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 504, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 512, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 520, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 528, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 536, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 544, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 552, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 560, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 568, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 576, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 584, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 592, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 600, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 608, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 616, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 624, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 632, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 640, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 648, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 656, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 664, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 672, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 680, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 688, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 696, 8);
    call write~$Pointer$(#funAddr~radio_g_tuner.base, #funAddr~radio_g_tuner.offset, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 704, 8);
    call write~$Pointer$(#funAddr~radio_s_tuner.base, #funAddr~radio_s_tuner.offset, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 712, 8);
    call write~$Pointer$(#funAddr~vidioc_g_frequency.base, #funAddr~vidioc_g_frequency.offset, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 720, 8);
    call write~$Pointer$(#funAddr~vidioc_s_frequency.base, #funAddr~vidioc_s_frequency.offset, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 728, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 736, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 744, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 752, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 760, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 768, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 776, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 784, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 792, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 800, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 808, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 816, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 824, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 832, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 840, 8);
    call write~$Pointer$(#funAddr~v4l2_ctrl_subscribe_event.base, #funAddr~v4l2_ctrl_subscribe_event.offset, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 848, 8);
    call write~$Pointer$(#funAddr~v4l2_event_unsubscribe.base, #funAddr~v4l2_event_unsubscribe.offset, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 856, 8);
    call write~$Pointer$(0, 0, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset + 864, 8);
    call ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset := #Ultimate.alloc(1762);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 0 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 16, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 24, 4);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 28, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 36, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 40, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 44, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 52, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 56, 2);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 58, 2);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 60, 2);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 62, 2);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 64, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 72, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 80, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 88, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 92, 4);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 96, 8);
    call write~int(#t~union3687.major, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 104 + 0 + 0, 4);
    call write~int(#t~union3687.minor, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 104 + 0 + 4, 4);
    call write~int(#t~union3688.major, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 104 + 0 + 0, 4);
    call write~int(#t~union3688.minor, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 104 + 0 + 4, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 104 + 0 + 0, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 104 + 0 + 4, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 104 + 0 + 8, 4);
    call write~int(#t~union3689, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 0 + 104 + 0, 4);
    call write~$Pointer$(~#radio_fops.base, ~#radio_fops.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 116, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 8 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 24, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 32, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 40, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 48, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 56 + 0 + 0, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 0 + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 0 + 8 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 0 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 0 + 24, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 0 + 32 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 0 + 32 + 8 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 0 + 32 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 0 + 32 + 24, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 0 + 32 + 32, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 0 + 32 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 0 + 8, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 16, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 24, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 32, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 40, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 48, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 52, 4);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 56, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 0, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 1, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 2, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 3, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 4, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 5, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 6, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 7, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 8, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 9, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 10, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 11, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 12, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 13, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 14, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 64 + 15, 1);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 80 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 80 + 8 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 80 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 80 + 24, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 80 + 32, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 76 + 80 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 200, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 60 + 208, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 272, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 276, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 280, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 284, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 16 + 288, 4);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 308, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 316, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 0 + 0, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union3690.head, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union3690.tail, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 4, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union3691.__padding[0], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0, 1);
    call write~int(#t~union3691.__padding[1], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union3691.__padding[2], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[3], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[4], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[5], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[6], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[7], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[8], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[9], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[10], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[11], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[12], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[13], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[14], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[15], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[16], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[17], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[18], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[19], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[20], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[21], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[22], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3691.__padding[23], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union3691.dep_map.key.base, #t~union3691.dep_map.key.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union3691.dep_map.class_cache.base[0], #t~union3691.dep_map.class_cache.offset[0], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union3691.dep_map.class_cache.base[1], #t~union3691.dep_map.class_cache.offset[1], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union3691.dep_map.name.base, #t~union3691.dep_map.name.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union3691.dep_map.cpu, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union3691.dep_map.ip, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 4 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 72 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 72 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 88, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 96, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 104, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 112 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 112 + 8 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 112 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 112 + 24, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 112 + 32, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 324 + 112 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 480, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 488, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 496, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 0 + 0, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 4, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 8, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 12, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 13, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 14, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 15, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union3692.head, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union3692.tail, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 4, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union3693.__padding[0], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0, 1);
    call write~int(#t~union3693.__padding[1], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union3693.__padding[2], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[3], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[4], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[5], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[6], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[7], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[8], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[9], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[10], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[11], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[12], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[13], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[14], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[15], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[16], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[17], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[18], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[19], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[20], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[21], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[22], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3693.__padding[23], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union3693.dep_map.key.base, #t~union3693.dep_map.key.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union3693.dep_map.class_cache.base[0], #t~union3693.dep_map.class_cache.offset[0], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union3693.dep_map.class_cache.base[1], #t~union3693.dep_map.class_cache.offset[1], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union3693.dep_map.name.base, #t~union3693.dep_map.name.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union3693.dep_map.cpu, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union3693.dep_map.ip, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 16 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 84 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 84 + 8, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 0, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union3694.head, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union3694.tail, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 4, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union3695.__padding[0], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0, 1);
    call write~int(#t~union3695.__padding[1], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union3695.__padding[2], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[3], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[4], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[5], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[6], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[7], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[8], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[9], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[10], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[11], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[12], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[13], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[14], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[15], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[16], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[17], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[18], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[19], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[20], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[21], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[22], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3695.__padding[23], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union3695.dep_map.key.base, #t~union3695.dep_map.key.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union3695.dep_map.class_cache.base[0], #t~union3695.dep_map.class_cache.offset[0], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union3695.dep_map.class_cache.base[1], #t~union3695.dep_map.class_cache.offset[1], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union3695.dep_map.name.base, #t~union3695.dep_map.name.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union3695.dep_map.cpu, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union3695.dep_map.ip, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 0 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 68 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 100 + 4 + 68 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 188, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 196, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 197, 1);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 0 + 8, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 16, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 24, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 32, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 40, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 48, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 52, 4);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 56, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 0, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 1, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 2, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 3, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 4, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 5, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 6, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 7, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 8, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 9, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 10, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 11, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 12, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 13, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 14, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 64 + 15, 1);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 80 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 80 + 8 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 80 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 80 + 24, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 80 + 32, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 198 + 80 + 36, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 322, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 330 + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 330 + 8 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 330 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 330 + 24, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 330 + 32 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 330 + 32 + 8 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 330 + 32 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 330 + 32 + 24, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 330 + 32 + 32, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 330 + 32 + 36, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union3696.head, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union3696.tail, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 4, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union3697.__padding[0], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0, 1);
    call write~int(#t~union3697.__padding[1], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union3697.__padding[2], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[3], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[4], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[5], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[6], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[7], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[8], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[9], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[10], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[11], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[12], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[13], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[14], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[15], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[16], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[17], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[18], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[19], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[20], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[21], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[22], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3697.__padding[23], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union3697.dep_map.key.base, #t~union3697.dep_map.key.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union3697.dep_map.class_cache.base[0], #t~union3697.dep_map.class_cache.offset[0], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union3697.dep_map.class_cache.base[1], #t~union3697.dep_map.class_cache.offset[1], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union3697.dep_map.name.base, #t~union3697.dep_map.name.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union3697.dep_map.cpu, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union3697.dep_map.ip, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 0 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 68 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 406 + 68 + 8, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 490 + 0, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 494 + 0, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 498, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 502, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 506, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 510, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 514, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 518, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 522, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 526, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 530, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 534, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 538, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 542, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 546, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 550, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 554, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 558, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 566, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 574, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 582, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 590, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 504 + 598, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1110, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1118, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1126, 4);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1130, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1138, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1146, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1154 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1154 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1170, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1178 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1178 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1194, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1202 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1210, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1214, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union3698.head, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union3698.tail, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 4, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union3699.__padding[0], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0, 1);
    call write~int(#t~union3699.__padding[1], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union3699.__padding[2], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[3], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[4], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[5], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[6], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[7], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[8], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[9], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[10], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[11], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[12], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[13], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[14], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[15], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[16], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[17], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[18], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[19], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[20], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[21], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[22], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3699.__padding[23], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union3699.dep_map.key.base, #t~union3699.dep_map.key.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union3699.dep_map.class_cache.base[0], #t~union3699.dep_map.class_cache.offset[0], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union3699.dep_map.class_cache.base[1], #t~union3699.dep_map.class_cache.offset[1], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union3699.dep_map.name.base, #t~union3699.dep_map.name.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union3699.dep_map.cpu, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union3699.dep_map.ip, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1218 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1286 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1286 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1302 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1302 + 8 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1302 + 8 + 8, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1302 + 24 + 0 + 0, 4);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1330, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1338, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1346, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1354, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1362, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 124 + 1363, 1);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1488, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1496, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1504, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1512, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1520, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1528, 8);
    call write~int(116, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 0, 1);
    call write~int(109, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 1, 1);
    call write~int(54, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 2, 1);
    call write~int(48, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 3, 1);
    call write~int(48, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 4, 1);
    call write~int(48, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 5, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 6, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 7, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 8, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 9, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 10, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 11, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 12, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 13, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 14, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 15, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 16, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 17, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 18, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 19, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 20, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 21, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 22, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 23, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 24, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 25, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 26, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 27, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 28, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 29, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 30, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1536 + 31, 1);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1568, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1572, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1576, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1580, 2);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1582, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1590, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union3700.head, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union3700.tail, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 4, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union3701.__padding[0], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0, 1);
    call write~int(#t~union3701.__padding[1], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union3701.__padding[2], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[3], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[4], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[5], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[6], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[7], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[8], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[9], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[10], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[11], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[12], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[13], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[14], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[15], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[16], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[17], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[18], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[19], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[20], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[21], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[22], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union3701.__padding[23], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union3701.dep_map.key.base, #t~union3701.dep_map.key.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union3701.dep_map.class_cache.base[0], #t~union3701.dep_map.class_cache.offset[0], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union3701.dep_map.class_cache.base[1], #t~union3701.dep_map.class_cache.offset[1], ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union3701.dep_map.name.base, #t~union3701.dep_map.name.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union3701.dep_map.cpu, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union3701.dep_map.ip, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1594 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1662 + 0, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1662 + 8, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1678, 4);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1682, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1690, 8);
    call write~$Pointer$(~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1698, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1706 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1706 + 8, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1706 + 16, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1730 + 0, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1730 + 8, 8);
    call write~int(0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1730 + 16, 8);
    call write~$Pointer$(0, 0, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset + 1754, 8);
    havoc #t~union3687.major, #t~union3687.minor;
    havoc #t~union3688.major, #t~union3688.minor;
    havoc #t~union3689;
    havoc #t~union3690.head, #t~union3690.tail;
    havoc #t~union3691.__padding, #t~union3691.dep_map.key.base, #t~union3691.dep_map.key.offset, #t~union3691.dep_map.class_cache.base, #t~union3691.dep_map.class_cache.offset, #t~union3691.dep_map.name.base, #t~union3691.dep_map.name.offset, #t~union3691.dep_map.cpu, #t~union3691.dep_map.ip;
    havoc #t~union3692.head, #t~union3692.tail;
    havoc #t~union3693.__padding, #t~union3693.dep_map.key.base, #t~union3693.dep_map.key.offset, #t~union3693.dep_map.class_cache.base, #t~union3693.dep_map.class_cache.offset, #t~union3693.dep_map.name.base, #t~union3693.dep_map.name.offset, #t~union3693.dep_map.cpu, #t~union3693.dep_map.ip;
    havoc #t~union3694.head, #t~union3694.tail;
    havoc #t~union3695.__padding, #t~union3695.dep_map.key.base, #t~union3695.dep_map.key.offset, #t~union3695.dep_map.class_cache.base, #t~union3695.dep_map.class_cache.offset, #t~union3695.dep_map.name.base, #t~union3695.dep_map.name.offset, #t~union3695.dep_map.cpu, #t~union3695.dep_map.ip;
    havoc #t~union3696.head, #t~union3696.tail;
    havoc #t~union3697.__padding, #t~union3697.dep_map.key.base, #t~union3697.dep_map.key.offset, #t~union3697.dep_map.class_cache.base, #t~union3697.dep_map.class_cache.offset, #t~union3697.dep_map.name.base, #t~union3697.dep_map.name.offset, #t~union3697.dep_map.cpu, #t~union3697.dep_map.ip;
    havoc #t~union3698.head, #t~union3698.tail;
    havoc #t~union3699.__padding, #t~union3699.dep_map.key.base, #t~union3699.dep_map.key.offset, #t~union3699.dep_map.class_cache.base, #t~union3699.dep_map.class_cache.offset, #t~union3699.dep_map.name.base, #t~union3699.dep_map.name.offset, #t~union3699.dep_map.cpu, #t~union3699.dep_map.ip;
    havoc #t~union3700.head, #t~union3700.tail;
    havoc #t~union3701.__padding, #t~union3701.dep_map.key.base, #t~union3701.dep_map.key.offset, #t~union3701.dep_map.class_cache.base, #t~union3701.dep_map.class_cache.offset, #t~union3701.dep_map.name.base, #t~union3701.dep_map.name.offset, #t~union3701.dep_map.cpu, #t~union3701.dep_map.ip;
    ~ldv_8_container_v4l2_file_operations.base, ~ldv_8_container_v4l2_file_operations.offset := 0, 0;
    ~ldv_8_resource_struct_video_device.base, ~ldv_8_resource_struct_video_device.offset := 0, 0;
    ~ldv_9_container_v4l2_file_operations.base, ~ldv_9_container_v4l2_file_operations.offset := 0, 0;
    ~ldv_9_resource_struct_video_device.base, ~ldv_9_resource_struct_video_device.offset := 0, 0;
    ~ldv_8_callback_func_1_ptr.base, ~ldv_8_callback_func_1_ptr.offset := #funAddr~video_device_release.base, #funAddr~video_device_release.offset;
    ~ldv_8_callback_poll.base, ~ldv_8_callback_poll.offset := #funAddr~v4l2_ctrl_poll.base, #funAddr~v4l2_ctrl_poll.offset;
    ~ldv_8_callback_unlocked_ioctl.base, ~ldv_8_callback_unlocked_ioctl.offset := #funAddr~video_ioctl2.base, #funAddr~video_ioctl2.offset;
    ~ldv_8_callback_vidioc_dqbuf.base, ~ldv_8_callback_vidioc_dqbuf.offset := #funAddr~vidioc_dqbuf.base, #funAddr~vidioc_dqbuf.offset;
    ~ldv_8_callback_vidioc_enum_fmt_vid_cap.base, ~ldv_8_callback_vidioc_enum_fmt_vid_cap.offset := #funAddr~vidioc_enum_fmt_vid_cap.base, #funAddr~vidioc_enum_fmt_vid_cap.offset;
    ~ldv_8_callback_vidioc_enum_input.base, ~ldv_8_callback_vidioc_enum_input.offset := #funAddr~vidioc_enum_input.base, #funAddr~vidioc_enum_input.offset;
    ~ldv_8_callback_vidioc_g_fmt_vid_cap.base, ~ldv_8_callback_vidioc_g_fmt_vid_cap.offset := #funAddr~vidioc_g_fmt_vid_cap.base, #funAddr~vidioc_g_fmt_vid_cap.offset;
    ~ldv_8_callback_vidioc_g_frequency.base, ~ldv_8_callback_vidioc_g_frequency.offset := #funAddr~vidioc_g_frequency.base, #funAddr~vidioc_g_frequency.offset;
    ~ldv_8_callback_vidioc_g_input.base, ~ldv_8_callback_vidioc_g_input.offset := #funAddr~vidioc_g_input.base, #funAddr~vidioc_g_input.offset;
    ~ldv_8_callback_vidioc_g_std.base, ~ldv_8_callback_vidioc_g_std.offset := #funAddr~vidioc_g_std.base, #funAddr~vidioc_g_std.offset;
    ~ldv_8_callback_vidioc_g_tuner.base, ~ldv_8_callback_vidioc_g_tuner.offset := #funAddr~vidioc_g_tuner.base, #funAddr~vidioc_g_tuner.offset;
    ~ldv_8_callback_vidioc_qbuf.base, ~ldv_8_callback_vidioc_qbuf.offset := #funAddr~vidioc_qbuf.base, #funAddr~vidioc_qbuf.offset;
    ~ldv_8_callback_vidioc_querybuf.base, ~ldv_8_callback_vidioc_querybuf.offset := #funAddr~vidioc_querybuf.base, #funAddr~vidioc_querybuf.offset;
    ~ldv_8_callback_vidioc_querycap.base, ~ldv_8_callback_vidioc_querycap.offset := #funAddr~vidioc_querycap.base, #funAddr~vidioc_querycap.offset;
    ~ldv_8_callback_vidioc_reqbufs.base, ~ldv_8_callback_vidioc_reqbufs.offset := #funAddr~vidioc_reqbufs.base, #funAddr~vidioc_reqbufs.offset;
    ~ldv_8_callback_vidioc_s_fmt_vid_cap.base, ~ldv_8_callback_vidioc_s_fmt_vid_cap.offset := #funAddr~vidioc_s_fmt_vid_cap.base, #funAddr~vidioc_s_fmt_vid_cap.offset;
    ~ldv_8_callback_vidioc_s_frequency.base, ~ldv_8_callback_vidioc_s_frequency.offset := #funAddr~vidioc_s_frequency.base, #funAddr~vidioc_s_frequency.offset;
    ~ldv_8_callback_vidioc_s_input.base, ~ldv_8_callback_vidioc_s_input.offset := #funAddr~vidioc_s_input.base, #funAddr~vidioc_s_input.offset;
    ~ldv_8_callback_vidioc_s_std.base, ~ldv_8_callback_vidioc_s_std.offset := #funAddr~vidioc_s_std.base, #funAddr~vidioc_s_std.offset;
    ~ldv_8_callback_vidioc_s_tuner.base, ~ldv_8_callback_vidioc_s_tuner.offset := #funAddr~vidioc_s_tuner.base, #funAddr~vidioc_s_tuner.offset;
    ~ldv_8_callback_vidioc_streamoff.base, ~ldv_8_callback_vidioc_streamoff.offset := #funAddr~vidioc_streamoff.base, #funAddr~vidioc_streamoff.offset;
    ~ldv_8_callback_vidioc_streamon.base, ~ldv_8_callback_vidioc_streamon.offset := #funAddr~vidioc_streamon.base, #funAddr~vidioc_streamon.offset;
    ~ldv_8_callback_vidioc_subscribe_event.base, ~ldv_8_callback_vidioc_subscribe_event.offset := #funAddr~v4l2_ctrl_subscribe_event.base, #funAddr~v4l2_ctrl_subscribe_event.offset;
    ~ldv_8_callback_vidioc_try_fmt_vid_cap.base, ~ldv_8_callback_vidioc_try_fmt_vid_cap.offset := #funAddr~vidioc_try_fmt_vid_cap.base, #funAddr~vidioc_try_fmt_vid_cap.offset;
    ~ldv_8_callback_vidioc_unsubscribe_event.base, ~ldv_8_callback_vidioc_unsubscribe_event.offset := #funAddr~v4l2_event_unsubscribe.base, #funAddr~v4l2_event_unsubscribe.offset;
    ~ldv_9_callback_func_1_ptr.base, ~ldv_9_callback_func_1_ptr.offset := #funAddr~video_device_release.base, #funAddr~video_device_release.offset;
    ~ldv_9_callback_mmap.base, ~ldv_9_callback_mmap.offset := #funAddr~tm6000_mmap.base, #funAddr~tm6000_mmap.offset;
    ~ldv_9_callback_poll.base, ~ldv_9_callback_poll.offset := #funAddr~tm6000_poll.base, #funAddr~tm6000_poll.offset;
    ~ldv_9_callback_read.base, ~ldv_9_callback_read.offset := #funAddr~tm6000_read.base, #funAddr~tm6000_read.offset;
    ~ldv_9_callback_unlocked_ioctl.base, ~ldv_9_callback_unlocked_ioctl.offset := #funAddr~video_ioctl2.base, #funAddr~video_ioctl2.offset;
    ~ldv_9_callback_vidioc_dqbuf.base, ~ldv_9_callback_vidioc_dqbuf.offset := #funAddr~vidioc_dqbuf.base, #funAddr~vidioc_dqbuf.offset;
    ~ldv_9_callback_vidioc_enum_fmt_vid_cap.base, ~ldv_9_callback_vidioc_enum_fmt_vid_cap.offset := #funAddr~vidioc_enum_fmt_vid_cap.base, #funAddr~vidioc_enum_fmt_vid_cap.offset;
    ~ldv_9_callback_vidioc_enum_input.base, ~ldv_9_callback_vidioc_enum_input.offset := #funAddr~vidioc_enum_input.base, #funAddr~vidioc_enum_input.offset;
    ~ldv_9_callback_vidioc_g_fmt_vid_cap.base, ~ldv_9_callback_vidioc_g_fmt_vid_cap.offset := #funAddr~vidioc_g_fmt_vid_cap.base, #funAddr~vidioc_g_fmt_vid_cap.offset;
    ~ldv_9_callback_vidioc_g_frequency.base, ~ldv_9_callback_vidioc_g_frequency.offset := #funAddr~vidioc_g_frequency.base, #funAddr~vidioc_g_frequency.offset;
    ~ldv_9_callback_vidioc_g_input.base, ~ldv_9_callback_vidioc_g_input.offset := #funAddr~vidioc_g_input.base, #funAddr~vidioc_g_input.offset;
    ~ldv_9_callback_vidioc_g_std.base, ~ldv_9_callback_vidioc_g_std.offset := #funAddr~vidioc_g_std.base, #funAddr~vidioc_g_std.offset;
    ~ldv_9_callback_vidioc_g_tuner.base, ~ldv_9_callback_vidioc_g_tuner.offset := #funAddr~vidioc_g_tuner.base, #funAddr~vidioc_g_tuner.offset;
    ~ldv_9_callback_vidioc_qbuf.base, ~ldv_9_callback_vidioc_qbuf.offset := #funAddr~vidioc_qbuf.base, #funAddr~vidioc_qbuf.offset;
    ~ldv_9_callback_vidioc_querybuf.base, ~ldv_9_callback_vidioc_querybuf.offset := #funAddr~vidioc_querybuf.base, #funAddr~vidioc_querybuf.offset;
    ~ldv_9_callback_vidioc_querycap.base, ~ldv_9_callback_vidioc_querycap.offset := #funAddr~vidioc_querycap.base, #funAddr~vidioc_querycap.offset;
    ~ldv_9_callback_vidioc_reqbufs.base, ~ldv_9_callback_vidioc_reqbufs.offset := #funAddr~vidioc_reqbufs.base, #funAddr~vidioc_reqbufs.offset;
    ~ldv_9_callback_vidioc_s_fmt_vid_cap.base, ~ldv_9_callback_vidioc_s_fmt_vid_cap.offset := #funAddr~vidioc_s_fmt_vid_cap.base, #funAddr~vidioc_s_fmt_vid_cap.offset;
    ~ldv_9_callback_vidioc_s_frequency.base, ~ldv_9_callback_vidioc_s_frequency.offset := #funAddr~vidioc_s_frequency.base, #funAddr~vidioc_s_frequency.offset;
    ~ldv_9_callback_vidioc_s_input.base, ~ldv_9_callback_vidioc_s_input.offset := #funAddr~vidioc_s_input.base, #funAddr~vidioc_s_input.offset;
    ~ldv_9_callback_vidioc_s_std.base, ~ldv_9_callback_vidioc_s_std.offset := #funAddr~vidioc_s_std.base, #funAddr~vidioc_s_std.offset;
    ~ldv_9_callback_vidioc_s_tuner.base, ~ldv_9_callback_vidioc_s_tuner.offset := #funAddr~vidioc_s_tuner.base, #funAddr~vidioc_s_tuner.offset;
    ~ldv_9_callback_vidioc_streamoff.base, ~ldv_9_callback_vidioc_streamoff.offset := #funAddr~vidioc_streamoff.base, #funAddr~vidioc_streamoff.offset;
    ~ldv_9_callback_vidioc_streamon.base, ~ldv_9_callback_vidioc_streamon.offset := #funAddr~vidioc_streamon.base, #funAddr~vidioc_streamon.offset;
    ~ldv_9_callback_vidioc_subscribe_event.base, ~ldv_9_callback_vidioc_subscribe_event.offset := #funAddr~v4l2_ctrl_subscribe_event.base, #funAddr~v4l2_ctrl_subscribe_event.offset;
    ~ldv_9_callback_vidioc_try_fmt_vid_cap.base, ~ldv_9_callback_vidioc_try_fmt_vid_cap.offset := #funAddr~vidioc_try_fmt_vid_cap.base, #funAddr~vidioc_try_fmt_vid_cap.offset;
    ~ldv_9_callback_vidioc_unsubscribe_event.base, ~ldv_9_callback_vidioc_unsubscribe_event.offset := #funAddr~v4l2_event_unsubscribe.base, #funAddr~v4l2_event_unsubscribe.offset;
    call ~#composite_pal_m.base, ~#composite_pal_m.offset := #Ultimate.alloc(75);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 0 + 0, 1);
    call write~int(63, ~#composite_pal_m.base, ~#composite_pal_m.offset + 0 + 1, 1);
    call write~int(1, ~#composite_pal_m.base, ~#composite_pal_m.offset + 0 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 3 + 0, 1);
    call write~int(0, ~#composite_pal_m.base, ~#composite_pal_m.offset + 3 + 1, 1);
    call write~int(4, ~#composite_pal_m.base, ~#composite_pal_m.offset + 3 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 6 + 0, 1);
    call write~int(1, ~#composite_pal_m.base, ~#composite_pal_m.offset + 6 + 1, 1);
    call write~int(14, ~#composite_pal_m.base, ~#composite_pal_m.offset + 6 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 9 + 0, 1);
    call write~int(2, ~#composite_pal_m.base, ~#composite_pal_m.offset + 9 + 1, 1);
    call write~int(95, ~#composite_pal_m.base, ~#composite_pal_m.offset + 9 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 12 + 0, 1);
    call write~int(3, ~#composite_pal_m.base, ~#composite_pal_m.offset + 12 + 1, 1);
    call write~int(0, ~#composite_pal_m.base, ~#composite_pal_m.offset + 12 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 15 + 0, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 15 + 1, 1);
    call write~int(49, ~#composite_pal_m.base, ~#composite_pal_m.offset + 15 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 18 + 0, 1);
    call write~int(24, ~#composite_pal_m.base, ~#composite_pal_m.offset + 18 + 1, 1);
    call write~int(30, ~#composite_pal_m.base, ~#composite_pal_m.offset + 18 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 21 + 0, 1);
    call write~int(25, ~#composite_pal_m.base, ~#composite_pal_m.offset + 21 + 1, 1);
    call write~int(131, ~#composite_pal_m.base, ~#composite_pal_m.offset + 21 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 24 + 0, 1);
    call write~int(26, ~#composite_pal_m.base, ~#composite_pal_m.offset + 24 + 1, 1);
    call write~int(10, ~#composite_pal_m.base, ~#composite_pal_m.offset + 24 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 27 + 0, 1);
    call write~int(27, ~#composite_pal_m.base, ~#composite_pal_m.offset + 27 + 1, 1);
    call write~int(224, ~#composite_pal_m.base, ~#composite_pal_m.offset + 27 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 30 + 0, 1);
    call write~int(28, ~#composite_pal_m.base, ~#composite_pal_m.offset + 30 + 1, 1);
    call write~int(28, ~#composite_pal_m.base, ~#composite_pal_m.offset + 30 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 33 + 0, 1);
    call write~int(29, ~#composite_pal_m.base, ~#composite_pal_m.offset + 33 + 1, 1);
    call write~int(204, ~#composite_pal_m.base, ~#composite_pal_m.offset + 33 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 36 + 0, 1);
    call write~int(30, ~#composite_pal_m.base, ~#composite_pal_m.offset + 36 + 1, 1);
    call write~int(204, ~#composite_pal_m.base, ~#composite_pal_m.offset + 36 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 39 + 0, 1);
    call write~int(31, ~#composite_pal_m.base, ~#composite_pal_m.offset + 39 + 1, 1);
    call write~int(205, ~#composite_pal_m.base, ~#composite_pal_m.offset + 39 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 42 + 0, 1);
    call write~int(46, ~#composite_pal_m.base, ~#composite_pal_m.offset + 42 + 1, 1);
    call write~int(136, ~#composite_pal_m.base, ~#composite_pal_m.offset + 42 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 45 + 0, 1);
    call write~int(48, ~#composite_pal_m.base, ~#composite_pal_m.offset + 45 + 1, 1);
    call write~int(32, ~#composite_pal_m.base, ~#composite_pal_m.offset + 45 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 48 + 0, 1);
    call write~int(49, ~#composite_pal_m.base, ~#composite_pal_m.offset + 48 + 1, 1);
    call write~int(97, ~#composite_pal_m.base, ~#composite_pal_m.offset + 48 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 51 + 0, 1);
    call write~int(51, ~#composite_pal_m.base, ~#composite_pal_m.offset + 51 + 1, 1);
    call write~int(12, ~#composite_pal_m.base, ~#composite_pal_m.offset + 51 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 54 + 0, 1);
    call write~int(53, ~#composite_pal_m.base, ~#composite_pal_m.offset + 54 + 1, 1);
    call write~int(28, ~#composite_pal_m.base, ~#composite_pal_m.offset + 54 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 57 + 0, 1);
    call write~int(130, ~#composite_pal_m.base, ~#composite_pal_m.offset + 57 + 1, 1);
    call write~int(82, ~#composite_pal_m.base, ~#composite_pal_m.offset + 57 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 60 + 0, 1);
    call write~int(131, ~#composite_pal_m.base, ~#composite_pal_m.offset + 60 + 1, 1);
    call write~int(111, ~#composite_pal_m.base, ~#composite_pal_m.offset + 60 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 63 + 0, 1);
    call write~int(4, ~#composite_pal_m.base, ~#composite_pal_m.offset + 63 + 1, 1);
    call write~int(220, ~#composite_pal_m.base, ~#composite_pal_m.offset + 63 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 66 + 0, 1);
    call write~int(13, ~#composite_pal_m.base, ~#composite_pal_m.offset + 66 + 1, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 66 + 2, 1);
    call write~int(7, ~#composite_pal_m.base, ~#composite_pal_m.offset + 69 + 0, 1);
    call write~int(63, ~#composite_pal_m.base, ~#composite_pal_m.offset + 69 + 1, 1);
    call write~int(0, ~#composite_pal_m.base, ~#composite_pal_m.offset + 69 + 2, 1);
    call write~int(0, ~#composite_pal_m.base, ~#composite_pal_m.offset + 72 + 0, 1);
    call write~int(0, ~#composite_pal_m.base, ~#composite_pal_m.offset + 72 + 1, 1);
    call write~int(0, ~#composite_pal_m.base, ~#composite_pal_m.offset + 72 + 2, 1);
    call ~#composite_pal_nc.base, ~#composite_pal_nc.offset := #Ultimate.alloc(75);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 0 + 0, 1);
    call write~int(63, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 0 + 1, 1);
    call write~int(1, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 0 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 3 + 0, 1);
    call write~int(0, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 3 + 1, 1);
    call write~int(54, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 3 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 6 + 0, 1);
    call write~int(1, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 6 + 1, 1);
    call write~int(14, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 6 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 9 + 0, 1);
    call write~int(2, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 9 + 1, 1);
    call write~int(95, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 9 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 12 + 0, 1);
    call write~int(3, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 12 + 1, 1);
    call write~int(2, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 12 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 15 + 0, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 15 + 1, 1);
    call write~int(49, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 15 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 18 + 0, 1);
    call write~int(24, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 18 + 1, 1);
    call write~int(30, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 18 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 21 + 0, 1);
    call write~int(25, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 21 + 1, 1);
    call write~int(145, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 21 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 24 + 0, 1);
    call write~int(26, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 24 + 1, 1);
    call write~int(31, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 24 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 27 + 0, 1);
    call write~int(27, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 27 + 1, 1);
    call write~int(12, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 27 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 30 + 0, 1);
    call write~int(28, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 30 + 1, 1);
    call write~int(28, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 30 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 33 + 0, 1);
    call write~int(29, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 33 + 1, 1);
    call write~int(204, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 33 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 36 + 0, 1);
    call write~int(30, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 36 + 1, 1);
    call write~int(204, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 36 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 39 + 0, 1);
    call write~int(31, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 39 + 1, 1);
    call write~int(205, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 39 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 42 + 0, 1);
    call write~int(46, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 42 + 1, 1);
    call write~int(140, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 42 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 45 + 0, 1);
    call write~int(48, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 45 + 1, 1);
    call write~int(44, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 45 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 48 + 0, 1);
    call write~int(49, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 48 + 1, 1);
    call write~int(193, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 48 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 51 + 0, 1);
    call write~int(51, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 51 + 1, 1);
    call write~int(12, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 51 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 54 + 0, 1);
    call write~int(53, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 54 + 1, 1);
    call write~int(28, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 54 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 57 + 0, 1);
    call write~int(130, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 57 + 1, 1);
    call write~int(82, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 57 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 60 + 0, 1);
    call write~int(131, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 60 + 1, 1);
    call write~int(111, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 60 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 63 + 0, 1);
    call write~int(4, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 63 + 1, 1);
    call write~int(220, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 63 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 66 + 0, 1);
    call write~int(13, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 66 + 1, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 66 + 2, 1);
    call write~int(7, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 69 + 0, 1);
    call write~int(63, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 69 + 1, 1);
    call write~int(0, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 69 + 2, 1);
    call write~int(0, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 72 + 0, 1);
    call write~int(0, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 72 + 1, 1);
    call write~int(0, ~#composite_pal_nc.base, ~#composite_pal_nc.offset + 72 + 2, 1);
    call ~#composite_pal.base, ~#composite_pal.offset := #Ultimate.alloc(75);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 0 + 0, 1);
    call write~int(63, ~#composite_pal.base, ~#composite_pal.offset + 0 + 1, 1);
    call write~int(1, ~#composite_pal.base, ~#composite_pal.offset + 0 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 3 + 0, 1);
    call write~int(0, ~#composite_pal.base, ~#composite_pal.offset + 3 + 1, 1);
    call write~int(50, ~#composite_pal.base, ~#composite_pal.offset + 3 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 6 + 0, 1);
    call write~int(1, ~#composite_pal.base, ~#composite_pal.offset + 6 + 1, 1);
    call write~int(14, ~#composite_pal.base, ~#composite_pal.offset + 6 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 9 + 0, 1);
    call write~int(2, ~#composite_pal.base, ~#composite_pal.offset + 9 + 1, 1);
    call write~int(95, ~#composite_pal.base, ~#composite_pal.offset + 9 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 12 + 0, 1);
    call write~int(3, ~#composite_pal.base, ~#composite_pal.offset + 12 + 1, 1);
    call write~int(2, ~#composite_pal.base, ~#composite_pal.offset + 12 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 15 + 0, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 15 + 1, 1);
    call write~int(49, ~#composite_pal.base, ~#composite_pal.offset + 15 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 18 + 0, 1);
    call write~int(24, ~#composite_pal.base, ~#composite_pal.offset + 18 + 1, 1);
    call write~int(37, ~#composite_pal.base, ~#composite_pal.offset + 18 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 21 + 0, 1);
    call write~int(25, ~#composite_pal.base, ~#composite_pal.offset + 21 + 1, 1);
    call write~int(213, ~#composite_pal.base, ~#composite_pal.offset + 21 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 24 + 0, 1);
    call write~int(26, ~#composite_pal.base, ~#composite_pal.offset + 24 + 1, 1);
    call write~int(99, ~#composite_pal.base, ~#composite_pal.offset + 24 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 27 + 0, 1);
    call write~int(27, ~#composite_pal.base, ~#composite_pal.offset + 27 + 1, 1);
    call write~int(80, ~#composite_pal.base, ~#composite_pal.offset + 27 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 30 + 0, 1);
    call write~int(28, ~#composite_pal.base, ~#composite_pal.offset + 30 + 1, 1);
    call write~int(28, ~#composite_pal.base, ~#composite_pal.offset + 30 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 33 + 0, 1);
    call write~int(29, ~#composite_pal.base, ~#composite_pal.offset + 33 + 1, 1);
    call write~int(204, ~#composite_pal.base, ~#composite_pal.offset + 33 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 36 + 0, 1);
    call write~int(30, ~#composite_pal.base, ~#composite_pal.offset + 36 + 1, 1);
    call write~int(204, ~#composite_pal.base, ~#composite_pal.offset + 36 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 39 + 0, 1);
    call write~int(31, ~#composite_pal.base, ~#composite_pal.offset + 39 + 1, 1);
    call write~int(205, ~#composite_pal.base, ~#composite_pal.offset + 39 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 42 + 0, 1);
    call write~int(46, ~#composite_pal.base, ~#composite_pal.offset + 42 + 1, 1);
    call write~int(140, ~#composite_pal.base, ~#composite_pal.offset + 42 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 45 + 0, 1);
    call write~int(48, ~#composite_pal.base, ~#composite_pal.offset + 45 + 1, 1);
    call write~int(44, ~#composite_pal.base, ~#composite_pal.offset + 45 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 48 + 0, 1);
    call write~int(49, ~#composite_pal.base, ~#composite_pal.offset + 48 + 1, 1);
    call write~int(193, ~#composite_pal.base, ~#composite_pal.offset + 48 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 51 + 0, 1);
    call write~int(51, ~#composite_pal.base, ~#composite_pal.offset + 51 + 1, 1);
    call write~int(12, ~#composite_pal.base, ~#composite_pal.offset + 51 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 54 + 0, 1);
    call write~int(53, ~#composite_pal.base, ~#composite_pal.offset + 54 + 1, 1);
    call write~int(28, ~#composite_pal.base, ~#composite_pal.offset + 54 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 57 + 0, 1);
    call write~int(130, ~#composite_pal.base, ~#composite_pal.offset + 57 + 1, 1);
    call write~int(82, ~#composite_pal.base, ~#composite_pal.offset + 57 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 60 + 0, 1);
    call write~int(131, ~#composite_pal.base, ~#composite_pal.offset + 60 + 1, 1);
    call write~int(111, ~#composite_pal.base, ~#composite_pal.offset + 60 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 63 + 0, 1);
    call write~int(4, ~#composite_pal.base, ~#composite_pal.offset + 63 + 1, 1);
    call write~int(220, ~#composite_pal.base, ~#composite_pal.offset + 63 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 66 + 0, 1);
    call write~int(13, ~#composite_pal.base, ~#composite_pal.offset + 66 + 1, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 66 + 2, 1);
    call write~int(7, ~#composite_pal.base, ~#composite_pal.offset + 69 + 0, 1);
    call write~int(63, ~#composite_pal.base, ~#composite_pal.offset + 69 + 1, 1);
    call write~int(0, ~#composite_pal.base, ~#composite_pal.offset + 69 + 2, 1);
    call write~int(0, ~#composite_pal.base, ~#composite_pal.offset + 72 + 0, 1);
    call write~int(0, ~#composite_pal.base, ~#composite_pal.offset + 72 + 1, 1);
    call write~int(0, ~#composite_pal.base, ~#composite_pal.offset + 72 + 2, 1);
    call ~#composite_secam.base, ~#composite_secam.offset := #Ultimate.alloc(72);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 0 + 0, 1);
    call write~int(63, ~#composite_secam.base, ~#composite_secam.offset + 0 + 1, 1);
    call write~int(1, ~#composite_secam.base, ~#composite_secam.offset + 0 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 3 + 0, 1);
    call write~int(0, ~#composite_secam.base, ~#composite_secam.offset + 3 + 1, 1);
    call write~int(56, ~#composite_secam.base, ~#composite_secam.offset + 3 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 6 + 0, 1);
    call write~int(1, ~#composite_secam.base, ~#composite_secam.offset + 6 + 1, 1);
    call write~int(14, ~#composite_secam.base, ~#composite_secam.offset + 6 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 9 + 0, 1);
    call write~int(2, ~#composite_secam.base, ~#composite_secam.offset + 9 + 1, 1);
    call write~int(95, ~#composite_secam.base, ~#composite_secam.offset + 9 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 12 + 0, 1);
    call write~int(3, ~#composite_secam.base, ~#composite_secam.offset + 12 + 1, 1);
    call write~int(2, ~#composite_secam.base, ~#composite_secam.offset + 12 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 15 + 0, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 15 + 1, 1);
    call write~int(49, ~#composite_secam.base, ~#composite_secam.offset + 15 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 18 + 0, 1);
    call write~int(24, ~#composite_secam.base, ~#composite_secam.offset + 18 + 1, 1);
    call write~int(36, ~#composite_secam.base, ~#composite_secam.offset + 18 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 21 + 0, 1);
    call write~int(25, ~#composite_secam.base, ~#composite_secam.offset + 21 + 1, 1);
    call write~int(146, ~#composite_secam.base, ~#composite_secam.offset + 21 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 24 + 0, 1);
    call write~int(26, ~#composite_secam.base, ~#composite_secam.offset + 24 + 1, 1);
    call write~int(232, ~#composite_secam.base, ~#composite_secam.offset + 24 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 27 + 0, 1);
    call write~int(27, ~#composite_secam.base, ~#composite_secam.offset + 27 + 1, 1);
    call write~int(237, ~#composite_secam.base, ~#composite_secam.offset + 27 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 30 + 0, 1);
    call write~int(28, ~#composite_secam.base, ~#composite_secam.offset + 30 + 1, 1);
    call write~int(28, ~#composite_secam.base, ~#composite_secam.offset + 30 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 33 + 0, 1);
    call write~int(29, ~#composite_secam.base, ~#composite_secam.offset + 33 + 1, 1);
    call write~int(204, ~#composite_secam.base, ~#composite_secam.offset + 33 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 36 + 0, 1);
    call write~int(30, ~#composite_secam.base, ~#composite_secam.offset + 36 + 1, 1);
    call write~int(204, ~#composite_secam.base, ~#composite_secam.offset + 36 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 39 + 0, 1);
    call write~int(31, ~#composite_secam.base, ~#composite_secam.offset + 39 + 1, 1);
    call write~int(205, ~#composite_secam.base, ~#composite_secam.offset + 39 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 42 + 0, 1);
    call write~int(46, ~#composite_secam.base, ~#composite_secam.offset + 42 + 1, 1);
    call write~int(140, ~#composite_secam.base, ~#composite_secam.offset + 42 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 45 + 0, 1);
    call write~int(48, ~#composite_secam.base, ~#composite_secam.offset + 45 + 1, 1);
    call write~int(44, ~#composite_secam.base, ~#composite_secam.offset + 45 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 48 + 0, 1);
    call write~int(49, ~#composite_secam.base, ~#composite_secam.offset + 48 + 1, 1);
    call write~int(193, ~#composite_secam.base, ~#composite_secam.offset + 48 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 51 + 0, 1);
    call write~int(51, ~#composite_secam.base, ~#composite_secam.offset + 51 + 1, 1);
    call write~int(44, ~#composite_secam.base, ~#composite_secam.offset + 51 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 54 + 0, 1);
    call write~int(53, ~#composite_secam.base, ~#composite_secam.offset + 54 + 1, 1);
    call write~int(24, ~#composite_secam.base, ~#composite_secam.offset + 54 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 57 + 0, 1);
    call write~int(130, ~#composite_secam.base, ~#composite_secam.offset + 57 + 1, 1);
    call write~int(66, ~#composite_secam.base, ~#composite_secam.offset + 57 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 60 + 0, 1);
    call write~int(131, ~#composite_secam.base, ~#composite_secam.offset + 60 + 1, 1);
    call write~int(255, ~#composite_secam.base, ~#composite_secam.offset + 60 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 63 + 0, 1);
    call write~int(13, ~#composite_secam.base, ~#composite_secam.offset + 63 + 1, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 63 + 2, 1);
    call write~int(7, ~#composite_secam.base, ~#composite_secam.offset + 66 + 0, 1);
    call write~int(63, ~#composite_secam.base, ~#composite_secam.offset + 66 + 1, 1);
    call write~int(0, ~#composite_secam.base, ~#composite_secam.offset + 66 + 2, 1);
    call write~int(0, ~#composite_secam.base, ~#composite_secam.offset + 69 + 0, 1);
    call write~int(0, ~#composite_secam.base, ~#composite_secam.offset + 69 + 1, 1);
    call write~int(0, ~#composite_secam.base, ~#composite_secam.offset + 69 + 2, 1);
    call ~#composite_ntsc.base, ~#composite_ntsc.offset := #Ultimate.alloc(75);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 0 + 0, 1);
    call write~int(63, ~#composite_ntsc.base, ~#composite_ntsc.offset + 0 + 1, 1);
    call write~int(1, ~#composite_ntsc.base, ~#composite_ntsc.offset + 0 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 3 + 0, 1);
    call write~int(0, ~#composite_ntsc.base, ~#composite_ntsc.offset + 3 + 1, 1);
    call write~int(0, ~#composite_ntsc.base, ~#composite_ntsc.offset + 3 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 6 + 0, 1);
    call write~int(1, ~#composite_ntsc.base, ~#composite_ntsc.offset + 6 + 1, 1);
    call write~int(15, ~#composite_ntsc.base, ~#composite_ntsc.offset + 6 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 9 + 0, 1);
    call write~int(2, ~#composite_ntsc.base, ~#composite_ntsc.offset + 9 + 1, 1);
    call write~int(95, ~#composite_ntsc.base, ~#composite_ntsc.offset + 9 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 12 + 0, 1);
    call write~int(3, ~#composite_ntsc.base, ~#composite_ntsc.offset + 12 + 1, 1);
    call write~int(0, ~#composite_ntsc.base, ~#composite_ntsc.offset + 12 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 15 + 0, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 15 + 1, 1);
    call write~int(49, ~#composite_ntsc.base, ~#composite_ntsc.offset + 15 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 18 + 0, 1);
    call write~int(24, ~#composite_ntsc.base, ~#composite_ntsc.offset + 18 + 1, 1);
    call write~int(30, ~#composite_ntsc.base, ~#composite_ntsc.offset + 18 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 21 + 0, 1);
    call write~int(25, ~#composite_ntsc.base, ~#composite_ntsc.offset + 21 + 1, 1);
    call write~int(139, ~#composite_ntsc.base, ~#composite_ntsc.offset + 21 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 24 + 0, 1);
    call write~int(26, ~#composite_ntsc.base, ~#composite_ntsc.offset + 24 + 1, 1);
    call write~int(162, ~#composite_ntsc.base, ~#composite_ntsc.offset + 24 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 27 + 0, 1);
    call write~int(27, ~#composite_ntsc.base, ~#composite_ntsc.offset + 27 + 1, 1);
    call write~int(233, ~#composite_ntsc.base, ~#composite_ntsc.offset + 27 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 30 + 0, 1);
    call write~int(28, ~#composite_ntsc.base, ~#composite_ntsc.offset + 30 + 1, 1);
    call write~int(28, ~#composite_ntsc.base, ~#composite_ntsc.offset + 30 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 33 + 0, 1);
    call write~int(29, ~#composite_ntsc.base, ~#composite_ntsc.offset + 33 + 1, 1);
    call write~int(204, ~#composite_ntsc.base, ~#composite_ntsc.offset + 33 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 36 + 0, 1);
    call write~int(30, ~#composite_ntsc.base, ~#composite_ntsc.offset + 36 + 1, 1);
    call write~int(204, ~#composite_ntsc.base, ~#composite_ntsc.offset + 36 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 39 + 0, 1);
    call write~int(31, ~#composite_ntsc.base, ~#composite_ntsc.offset + 39 + 1, 1);
    call write~int(205, ~#composite_ntsc.base, ~#composite_ntsc.offset + 39 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 42 + 0, 1);
    call write~int(46, ~#composite_ntsc.base, ~#composite_ntsc.offset + 42 + 1, 1);
    call write~int(136, ~#composite_ntsc.base, ~#composite_ntsc.offset + 42 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 45 + 0, 1);
    call write~int(48, ~#composite_ntsc.base, ~#composite_ntsc.offset + 45 + 1, 1);
    call write~int(34, ~#composite_ntsc.base, ~#composite_ntsc.offset + 45 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 48 + 0, 1);
    call write~int(49, ~#composite_ntsc.base, ~#composite_ntsc.offset + 48 + 1, 1);
    call write~int(97, ~#composite_ntsc.base, ~#composite_ntsc.offset + 48 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 51 + 0, 1);
    call write~int(51, ~#composite_ntsc.base, ~#composite_ntsc.offset + 51 + 1, 1);
    call write~int(28, ~#composite_ntsc.base, ~#composite_ntsc.offset + 51 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 54 + 0, 1);
    call write~int(53, ~#composite_ntsc.base, ~#composite_ntsc.offset + 54 + 1, 1);
    call write~int(28, ~#composite_ntsc.base, ~#composite_ntsc.offset + 54 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 57 + 0, 1);
    call write~int(130, ~#composite_ntsc.base, ~#composite_ntsc.offset + 57 + 1, 1);
    call write~int(66, ~#composite_ntsc.base, ~#composite_ntsc.offset + 57 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 60 + 0, 1);
    call write~int(131, ~#composite_ntsc.base, ~#composite_ntsc.offset + 60 + 1, 1);
    call write~int(111, ~#composite_ntsc.base, ~#composite_ntsc.offset + 60 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 63 + 0, 1);
    call write~int(4, ~#composite_ntsc.base, ~#composite_ntsc.offset + 63 + 1, 1);
    call write~int(221, ~#composite_ntsc.base, ~#composite_ntsc.offset + 63 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 66 + 0, 1);
    call write~int(13, ~#composite_ntsc.base, ~#composite_ntsc.offset + 66 + 1, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 66 + 2, 1);
    call write~int(7, ~#composite_ntsc.base, ~#composite_ntsc.offset + 69 + 0, 1);
    call write~int(63, ~#composite_ntsc.base, ~#composite_ntsc.offset + 69 + 1, 1);
    call write~int(0, ~#composite_ntsc.base, ~#composite_ntsc.offset + 69 + 2, 1);
    call write~int(0, ~#composite_ntsc.base, ~#composite_ntsc.offset + 72 + 0, 1);
    call write~int(0, ~#composite_ntsc.base, ~#composite_ntsc.offset + 72 + 1, 1);
    call write~int(0, ~#composite_ntsc.base, ~#composite_ntsc.offset + 72 + 2, 1);
    ~composite_stds.id, ~composite_stds.common.base, ~composite_stds.common.offset := ~composite_stds.id[0 := 0], ~composite_stds.common.base[0 := 0], ~composite_stds.common.offset[0 := 0];
    ~composite_stds.id, ~composite_stds.common.base, ~composite_stds.common.offset := ~composite_stds.id[1 := 0], ~composite_stds.common.base[1 := 0], ~composite_stds.common.offset[1 := 0];
    ~composite_stds.id, ~composite_stds.common.base, ~composite_stds.common.offset := ~composite_stds.id[2 := 0], ~composite_stds.common.base[2 := 0], ~composite_stds.common.offset[2 := 0];
    ~composite_stds.id, ~composite_stds.common.base, ~composite_stds.common.offset := ~composite_stds.id[3 := 0], ~composite_stds.common.base[3 := 0], ~composite_stds.common.offset[3 := 0];
    ~composite_stds.id, ~composite_stds.common.base, ~composite_stds.common.offset := ~composite_stds.id[4 := 0], ~composite_stds.common.base[4 := 0], ~composite_stds.common.offset[4 := 0];
    call ~#svideo_pal_m.base, ~#svideo_pal_m.offset := #Ultimate.alloc(75);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 0 + 0, 1);
    call write~int(63, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 0 + 1, 1);
    call write~int(1, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 0 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 3 + 0, 1);
    call write~int(0, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 3 + 1, 1);
    call write~int(5, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 3 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 6 + 0, 1);
    call write~int(1, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 6 + 1, 1);
    call write~int(14, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 6 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 9 + 0, 1);
    call write~int(2, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 9 + 1, 1);
    call write~int(95, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 9 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 12 + 0, 1);
    call write~int(3, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 12 + 1, 1);
    call write~int(4, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 12 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 15 + 0, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 15 + 1, 1);
    call write~int(49, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 15 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 18 + 0, 1);
    call write~int(24, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 18 + 1, 1);
    call write~int(30, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 18 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 21 + 0, 1);
    call write~int(25, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 21 + 1, 1);
    call write~int(131, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 21 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 24 + 0, 1);
    call write~int(26, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 24 + 1, 1);
    call write~int(10, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 24 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 27 + 0, 1);
    call write~int(27, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 27 + 1, 1);
    call write~int(224, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 27 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 30 + 0, 1);
    call write~int(28, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 30 + 1, 1);
    call write~int(28, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 30 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 33 + 0, 1);
    call write~int(29, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 33 + 1, 1);
    call write~int(204, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 33 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 36 + 0, 1);
    call write~int(30, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 36 + 1, 1);
    call write~int(204, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 36 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 39 + 0, 1);
    call write~int(31, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 39 + 1, 1);
    call write~int(205, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 39 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 42 + 0, 1);
    call write~int(46, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 42 + 1, 1);
    call write~int(136, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 42 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 45 + 0, 1);
    call write~int(48, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 45 + 1, 1);
    call write~int(34, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 45 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 48 + 0, 1);
    call write~int(49, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 48 + 1, 1);
    call write~int(97, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 48 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 51 + 0, 1);
    call write~int(51, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 51 + 1, 1);
    call write~int(12, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 51 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 54 + 0, 1);
    call write~int(53, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 54 + 1, 1);
    call write~int(28, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 54 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 57 + 0, 1);
    call write~int(130, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 57 + 1, 1);
    call write~int(82, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 57 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 60 + 0, 1);
    call write~int(131, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 60 + 1, 1);
    call write~int(111, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 60 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 63 + 0, 1);
    call write~int(4, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 63 + 1, 1);
    call write~int(220, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 63 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 66 + 0, 1);
    call write~int(13, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 66 + 1, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 66 + 2, 1);
    call write~int(7, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 69 + 0, 1);
    call write~int(63, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 69 + 1, 1);
    call write~int(0, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 69 + 2, 1);
    call write~int(0, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 72 + 0, 1);
    call write~int(0, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 72 + 1, 1);
    call write~int(0, ~#svideo_pal_m.base, ~#svideo_pal_m.offset + 72 + 2, 1);
    call ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset := #Ultimate.alloc(75);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 0 + 0, 1);
    call write~int(63, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 0 + 1, 1);
    call write~int(1, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 0 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 3 + 0, 1);
    call write~int(0, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 3 + 1, 1);
    call write~int(55, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 3 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 6 + 0, 1);
    call write~int(1, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 6 + 1, 1);
    call write~int(14, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 6 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 9 + 0, 1);
    call write~int(2, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 9 + 1, 1);
    call write~int(95, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 9 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 12 + 0, 1);
    call write~int(3, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 12 + 1, 1);
    call write~int(4, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 12 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 15 + 0, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 15 + 1, 1);
    call write~int(49, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 15 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 18 + 0, 1);
    call write~int(24, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 18 + 1, 1);
    call write~int(30, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 18 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 21 + 0, 1);
    call write~int(25, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 21 + 1, 1);
    call write~int(145, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 21 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 24 + 0, 1);
    call write~int(26, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 24 + 1, 1);
    call write~int(31, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 24 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 27 + 0, 1);
    call write~int(27, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 27 + 1, 1);
    call write~int(12, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 27 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 30 + 0, 1);
    call write~int(28, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 30 + 1, 1);
    call write~int(28, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 30 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 33 + 0, 1);
    call write~int(29, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 33 + 1, 1);
    call write~int(204, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 33 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 36 + 0, 1);
    call write~int(30, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 36 + 1, 1);
    call write~int(204, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 36 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 39 + 0, 1);
    call write~int(31, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 39 + 1, 1);
    call write~int(205, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 39 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 42 + 0, 1);
    call write~int(46, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 42 + 1, 1);
    call write~int(136, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 42 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 45 + 0, 1);
    call write~int(48, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 45 + 1, 1);
    call write~int(34, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 45 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 48 + 0, 1);
    call write~int(49, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 48 + 1, 1);
    call write~int(193, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 48 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 51 + 0, 1);
    call write~int(51, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 51 + 1, 1);
    call write~int(12, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 51 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 54 + 0, 1);
    call write~int(53, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 54 + 1, 1);
    call write~int(28, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 54 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 57 + 0, 1);
    call write~int(130, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 57 + 1, 1);
    call write~int(82, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 57 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 60 + 0, 1);
    call write~int(131, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 60 + 1, 1);
    call write~int(111, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 60 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 63 + 0, 1);
    call write~int(4, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 63 + 1, 1);
    call write~int(220, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 63 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 66 + 0, 1);
    call write~int(13, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 66 + 1, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 66 + 2, 1);
    call write~int(7, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 69 + 0, 1);
    call write~int(63, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 69 + 1, 1);
    call write~int(0, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 69 + 2, 1);
    call write~int(0, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 72 + 0, 1);
    call write~int(0, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 72 + 1, 1);
    call write~int(0, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset + 72 + 2, 1);
    call ~#svideo_pal.base, ~#svideo_pal.offset := #Ultimate.alloc(75);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 0 + 0, 1);
    call write~int(63, ~#svideo_pal.base, ~#svideo_pal.offset + 0 + 1, 1);
    call write~int(1, ~#svideo_pal.base, ~#svideo_pal.offset + 0 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 3 + 0, 1);
    call write~int(0, ~#svideo_pal.base, ~#svideo_pal.offset + 3 + 1, 1);
    call write~int(51, ~#svideo_pal.base, ~#svideo_pal.offset + 3 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 6 + 0, 1);
    call write~int(1, ~#svideo_pal.base, ~#svideo_pal.offset + 6 + 1, 1);
    call write~int(14, ~#svideo_pal.base, ~#svideo_pal.offset + 6 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 9 + 0, 1);
    call write~int(2, ~#svideo_pal.base, ~#svideo_pal.offset + 9 + 1, 1);
    call write~int(95, ~#svideo_pal.base, ~#svideo_pal.offset + 9 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 12 + 0, 1);
    call write~int(3, ~#svideo_pal.base, ~#svideo_pal.offset + 12 + 1, 1);
    call write~int(4, ~#svideo_pal.base, ~#svideo_pal.offset + 12 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 15 + 0, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 15 + 1, 1);
    call write~int(48, ~#svideo_pal.base, ~#svideo_pal.offset + 15 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 18 + 0, 1);
    call write~int(24, ~#svideo_pal.base, ~#svideo_pal.offset + 18 + 1, 1);
    call write~int(37, ~#svideo_pal.base, ~#svideo_pal.offset + 18 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 21 + 0, 1);
    call write~int(25, ~#svideo_pal.base, ~#svideo_pal.offset + 21 + 1, 1);
    call write~int(213, ~#svideo_pal.base, ~#svideo_pal.offset + 21 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 24 + 0, 1);
    call write~int(26, ~#svideo_pal.base, ~#svideo_pal.offset + 24 + 1, 1);
    call write~int(99, ~#svideo_pal.base, ~#svideo_pal.offset + 24 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 27 + 0, 1);
    call write~int(27, ~#svideo_pal.base, ~#svideo_pal.offset + 27 + 1, 1);
    call write~int(80, ~#svideo_pal.base, ~#svideo_pal.offset + 27 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 30 + 0, 1);
    call write~int(28, ~#svideo_pal.base, ~#svideo_pal.offset + 30 + 1, 1);
    call write~int(28, ~#svideo_pal.base, ~#svideo_pal.offset + 30 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 33 + 0, 1);
    call write~int(29, ~#svideo_pal.base, ~#svideo_pal.offset + 33 + 1, 1);
    call write~int(204, ~#svideo_pal.base, ~#svideo_pal.offset + 33 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 36 + 0, 1);
    call write~int(30, ~#svideo_pal.base, ~#svideo_pal.offset + 36 + 1, 1);
    call write~int(204, ~#svideo_pal.base, ~#svideo_pal.offset + 36 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 39 + 0, 1);
    call write~int(31, ~#svideo_pal.base, ~#svideo_pal.offset + 39 + 1, 1);
    call write~int(205, ~#svideo_pal.base, ~#svideo_pal.offset + 39 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 42 + 0, 1);
    call write~int(46, ~#svideo_pal.base, ~#svideo_pal.offset + 42 + 1, 1);
    call write~int(140, ~#svideo_pal.base, ~#svideo_pal.offset + 42 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 45 + 0, 1);
    call write~int(48, ~#svideo_pal.base, ~#svideo_pal.offset + 45 + 1, 1);
    call write~int(42, ~#svideo_pal.base, ~#svideo_pal.offset + 45 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 48 + 0, 1);
    call write~int(49, ~#svideo_pal.base, ~#svideo_pal.offset + 48 + 1, 1);
    call write~int(193, ~#svideo_pal.base, ~#svideo_pal.offset + 48 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 51 + 0, 1);
    call write~int(51, ~#svideo_pal.base, ~#svideo_pal.offset + 51 + 1, 1);
    call write~int(12, ~#svideo_pal.base, ~#svideo_pal.offset + 51 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 54 + 0, 1);
    call write~int(53, ~#svideo_pal.base, ~#svideo_pal.offset + 54 + 1, 1);
    call write~int(28, ~#svideo_pal.base, ~#svideo_pal.offset + 54 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 57 + 0, 1);
    call write~int(130, ~#svideo_pal.base, ~#svideo_pal.offset + 57 + 1, 1);
    call write~int(82, ~#svideo_pal.base, ~#svideo_pal.offset + 57 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 60 + 0, 1);
    call write~int(131, ~#svideo_pal.base, ~#svideo_pal.offset + 60 + 1, 1);
    call write~int(111, ~#svideo_pal.base, ~#svideo_pal.offset + 60 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 63 + 0, 1);
    call write~int(4, ~#svideo_pal.base, ~#svideo_pal.offset + 63 + 1, 1);
    call write~int(220, ~#svideo_pal.base, ~#svideo_pal.offset + 63 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 66 + 0, 1);
    call write~int(13, ~#svideo_pal.base, ~#svideo_pal.offset + 66 + 1, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 66 + 2, 1);
    call write~int(7, ~#svideo_pal.base, ~#svideo_pal.offset + 69 + 0, 1);
    call write~int(63, ~#svideo_pal.base, ~#svideo_pal.offset + 69 + 1, 1);
    call write~int(0, ~#svideo_pal.base, ~#svideo_pal.offset + 69 + 2, 1);
    call write~int(0, ~#svideo_pal.base, ~#svideo_pal.offset + 72 + 0, 1);
    call write~int(0, ~#svideo_pal.base, ~#svideo_pal.offset + 72 + 1, 1);
    call write~int(0, ~#svideo_pal.base, ~#svideo_pal.offset + 72 + 2, 1);
    call ~#svideo_secam.base, ~#svideo_secam.offset := #Ultimate.alloc(72);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 0 + 0, 1);
    call write~int(63, ~#svideo_secam.base, ~#svideo_secam.offset + 0 + 1, 1);
    call write~int(1, ~#svideo_secam.base, ~#svideo_secam.offset + 0 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 3 + 0, 1);
    call write~int(0, ~#svideo_secam.base, ~#svideo_secam.offset + 3 + 1, 1);
    call write~int(57, ~#svideo_secam.base, ~#svideo_secam.offset + 3 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 6 + 0, 1);
    call write~int(1, ~#svideo_secam.base, ~#svideo_secam.offset + 6 + 1, 1);
    call write~int(14, ~#svideo_secam.base, ~#svideo_secam.offset + 6 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 9 + 0, 1);
    call write~int(2, ~#svideo_secam.base, ~#svideo_secam.offset + 9 + 1, 1);
    call write~int(95, ~#svideo_secam.base, ~#svideo_secam.offset + 9 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 12 + 0, 1);
    call write~int(3, ~#svideo_secam.base, ~#svideo_secam.offset + 12 + 1, 1);
    call write~int(3, ~#svideo_secam.base, ~#svideo_secam.offset + 12 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 15 + 0, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 15 + 1, 1);
    call write~int(49, ~#svideo_secam.base, ~#svideo_secam.offset + 15 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 18 + 0, 1);
    call write~int(24, ~#svideo_secam.base, ~#svideo_secam.offset + 18 + 1, 1);
    call write~int(36, ~#svideo_secam.base, ~#svideo_secam.offset + 18 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 21 + 0, 1);
    call write~int(25, ~#svideo_secam.base, ~#svideo_secam.offset + 21 + 1, 1);
    call write~int(146, ~#svideo_secam.base, ~#svideo_secam.offset + 21 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 24 + 0, 1);
    call write~int(26, ~#svideo_secam.base, ~#svideo_secam.offset + 24 + 1, 1);
    call write~int(232, ~#svideo_secam.base, ~#svideo_secam.offset + 24 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 27 + 0, 1);
    call write~int(27, ~#svideo_secam.base, ~#svideo_secam.offset + 27 + 1, 1);
    call write~int(237, ~#svideo_secam.base, ~#svideo_secam.offset + 27 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 30 + 0, 1);
    call write~int(28, ~#svideo_secam.base, ~#svideo_secam.offset + 30 + 1, 1);
    call write~int(28, ~#svideo_secam.base, ~#svideo_secam.offset + 30 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 33 + 0, 1);
    call write~int(29, ~#svideo_secam.base, ~#svideo_secam.offset + 33 + 1, 1);
    call write~int(204, ~#svideo_secam.base, ~#svideo_secam.offset + 33 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 36 + 0, 1);
    call write~int(30, ~#svideo_secam.base, ~#svideo_secam.offset + 36 + 1, 1);
    call write~int(204, ~#svideo_secam.base, ~#svideo_secam.offset + 36 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 39 + 0, 1);
    call write~int(31, ~#svideo_secam.base, ~#svideo_secam.offset + 39 + 1, 1);
    call write~int(205, ~#svideo_secam.base, ~#svideo_secam.offset + 39 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 42 + 0, 1);
    call write~int(46, ~#svideo_secam.base, ~#svideo_secam.offset + 42 + 1, 1);
    call write~int(140, ~#svideo_secam.base, ~#svideo_secam.offset + 42 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 45 + 0, 1);
    call write~int(48, ~#svideo_secam.base, ~#svideo_secam.offset + 45 + 1, 1);
    call write~int(42, ~#svideo_secam.base, ~#svideo_secam.offset + 45 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 48 + 0, 1);
    call write~int(49, ~#svideo_secam.base, ~#svideo_secam.offset + 48 + 1, 1);
    call write~int(193, ~#svideo_secam.base, ~#svideo_secam.offset + 48 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 51 + 0, 1);
    call write~int(51, ~#svideo_secam.base, ~#svideo_secam.offset + 51 + 1, 1);
    call write~int(44, ~#svideo_secam.base, ~#svideo_secam.offset + 51 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 54 + 0, 1);
    call write~int(53, ~#svideo_secam.base, ~#svideo_secam.offset + 54 + 1, 1);
    call write~int(24, ~#svideo_secam.base, ~#svideo_secam.offset + 54 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 57 + 0, 1);
    call write~int(130, ~#svideo_secam.base, ~#svideo_secam.offset + 57 + 1, 1);
    call write~int(66, ~#svideo_secam.base, ~#svideo_secam.offset + 57 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 60 + 0, 1);
    call write~int(131, ~#svideo_secam.base, ~#svideo_secam.offset + 60 + 1, 1);
    call write~int(255, ~#svideo_secam.base, ~#svideo_secam.offset + 60 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 63 + 0, 1);
    call write~int(13, ~#svideo_secam.base, ~#svideo_secam.offset + 63 + 1, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 63 + 2, 1);
    call write~int(7, ~#svideo_secam.base, ~#svideo_secam.offset + 66 + 0, 1);
    call write~int(63, ~#svideo_secam.base, ~#svideo_secam.offset + 66 + 1, 1);
    call write~int(0, ~#svideo_secam.base, ~#svideo_secam.offset + 66 + 2, 1);
    call write~int(0, ~#svideo_secam.base, ~#svideo_secam.offset + 69 + 0, 1);
    call write~int(0, ~#svideo_secam.base, ~#svideo_secam.offset + 69 + 1, 1);
    call write~int(0, ~#svideo_secam.base, ~#svideo_secam.offset + 69 + 2, 1);
    call ~#svideo_ntsc.base, ~#svideo_ntsc.offset := #Ultimate.alloc(78);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 0 + 0, 1);
    call write~int(63, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 0 + 1, 1);
    call write~int(1, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 0 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 3 + 0, 1);
    call write~int(0, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 3 + 1, 1);
    call write~int(1, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 3 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 6 + 0, 1);
    call write~int(1, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 6 + 1, 1);
    call write~int(15, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 6 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 9 + 0, 1);
    call write~int(2, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 9 + 1, 1);
    call write~int(95, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 9 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 12 + 0, 1);
    call write~int(3, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 12 + 1, 1);
    call write~int(3, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 12 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 15 + 0, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 15 + 1, 1);
    call write~int(48, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 15 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 18 + 0, 1);
    call write~int(23, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 18 + 1, 1);
    call write~int(139, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 18 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 21 + 0, 1);
    call write~int(24, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 21 + 1, 1);
    call write~int(30, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 21 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 24 + 0, 1);
    call write~int(25, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 24 + 1, 1);
    call write~int(139, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 24 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 27 + 0, 1);
    call write~int(26, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 27 + 1, 1);
    call write~int(162, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 27 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 30 + 0, 1);
    call write~int(27, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 30 + 1, 1);
    call write~int(233, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 30 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 33 + 0, 1);
    call write~int(28, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 33 + 1, 1);
    call write~int(28, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 33 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 36 + 0, 1);
    call write~int(29, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 36 + 1, 1);
    call write~int(204, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 36 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 39 + 0, 1);
    call write~int(30, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 39 + 1, 1);
    call write~int(204, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 39 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 42 + 0, 1);
    call write~int(31, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 42 + 1, 1);
    call write~int(205, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 42 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 45 + 0, 1);
    call write~int(46, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 45 + 1, 1);
    call write~int(136, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 45 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 48 + 0, 1);
    call write~int(48, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 48 + 1, 1);
    call write~int(34, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 48 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 51 + 0, 1);
    call write~int(49, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 51 + 1, 1);
    call write~int(97, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 51 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 54 + 0, 1);
    call write~int(51, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 54 + 1, 1);
    call write~int(28, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 54 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 57 + 0, 1);
    call write~int(53, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 57 + 1, 1);
    call write~int(28, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 57 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 60 + 0, 1);
    call write~int(130, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 60 + 1, 1);
    call write~int(66, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 60 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 63 + 0, 1);
    call write~int(131, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 63 + 1, 1);
    call write~int(111, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 63 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 66 + 0, 1);
    call write~int(4, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 66 + 1, 1);
    call write~int(221, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 66 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 69 + 0, 1);
    call write~int(13, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 69 + 1, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 69 + 2, 1);
    call write~int(7, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 72 + 0, 1);
    call write~int(63, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 72 + 1, 1);
    call write~int(0, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 72 + 2, 1);
    call write~int(0, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 75 + 0, 1);
    call write~int(0, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 75 + 1, 1);
    call write~int(0, ~#svideo_ntsc.base, ~#svideo_ntsc.offset + 75 + 2, 1);
    ~svideo_stds.id, ~svideo_stds.common.base, ~svideo_stds.common.offset := ~svideo_stds.id[0 := 0], ~svideo_stds.common.base[0 := 0], ~svideo_stds.common.offset[0 := 0];
    ~svideo_stds.id, ~svideo_stds.common.base, ~svideo_stds.common.offset := ~svideo_stds.id[1 := 0], ~svideo_stds.common.base[1 := 0], ~svideo_stds.common.offset[1 := 0];
    ~svideo_stds.id, ~svideo_stds.common.base, ~svideo_stds.common.offset := ~svideo_stds.id[2 := 0], ~svideo_stds.common.base[2 := 0], ~svideo_stds.common.offset[2 := 0];
    ~svideo_stds.id, ~svideo_stds.common.base, ~svideo_stds.common.offset := ~svideo_stds.id[3 := 0], ~svideo_stds.common.base[3 := 0], ~svideo_stds.common.offset[3 := 0];
    ~svideo_stds.id, ~svideo_stds.common.base, ~svideo_stds.common.offset := ~svideo_stds.id[4 := 0], ~svideo_stds.common.base[4 := 0], ~svideo_stds.common.offset[4 := 0];
    assume true;
    return;
}

procedure ULTIMATE.init() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~card, ~#tm6000_devused.base, ~#tm6000_devused.offset, ~ldv_0_ldv_param_7_2_default, ~ldv_12_ret_default, ~ldv_3_ldv_param_9_1_default.base, ~ldv_3_ldv_param_9_1_default.offset, ~ldv_3_ldv_param_9_2_default.base, ~ldv_3_ldv_param_9_2_default.offset, ~ldv_6_probe_retval_default, ~ldv_6_reset_flag_default, ~ldv_8_ldv_param_19_1_default.base, ~ldv_8_ldv_param_19_1_default.offset, ~ldv_8_ldv_param_19_2_default, ~ldv_8_ldv_param_19_3_default.base, ~ldv_8_ldv_param_19_3_default.offset, ~ldv_8_ldv_param_22_1_default, ~ldv_8_ldv_param_22_2_default, ~ldv_8_ldv_param_30_2_default.base, ~ldv_8_ldv_param_30_2_default.offset, ~ldv_8_ldv_param_33_2_default.base, ~ldv_8_ldv_param_33_2_default.offset, ~ldv_8_ldv_param_43_2_default, ~ldv_8_ldv_param_46_2_default, ~ldv_8_ret_default, ~ldv_9_ldv_param_19_1_default.base, ~ldv_9_ldv_param_19_1_default.offset, ~ldv_9_ldv_param_19_2_default, ~ldv_9_ldv_param_19_3_default.base, ~ldv_9_ldv_param_19_3_default.offset, ~ldv_9_ldv_param_22_1_default, ~ldv_9_ldv_param_22_2_default, ~ldv_9_ldv_param_30_2_default.base, ~ldv_9_ldv_param_30_2_default.offset, ~ldv_9_ldv_param_33_2_default.base, ~ldv_9_ldv_param_33_2_default.offset, ~ldv_9_ldv_param_43_2_default, ~ldv_9_ldv_param_46_2_default, ~ldv_9_ret_default, ~ldv_statevar_0, ~ldv_statevar_1, ~ldv_statevar_12, ~ldv_statevar_2, ~ldv_statevar_3, ~ldv_statevar_4, ~ldv_statevar_5, ~ldv_statevar_6, ~ldv_statevar_7, ~ldv_statevar_8, ~ldv_statevar_9, ~tm6000_debug, ~i2c_debug, ~vid_limit, ~video_nr, ~radio_nr, ~iname.base, ~iname.offset, ~tm6010_a_mode, ~ir_debug, ~enable_ir, ~ir_clock_mhz, ~ldv_spin_alloc_lock_of_task_struct, ~ldv_spin_i_lock_of_inode, ~ldv_spin_lock, ~ldv_spin_lock_of_NOT_ARG_SIGN, ~ldv_spin_node_size_lock_of_pglist_data, ~ldv_spin_ptl, ~ldv_spin_siglock_of_sighand_struct, ~ldv_spin_slock_of_tm6000_core, ~#tm6000_boards.base, ~#tm6000_boards.offset, ~#tm6000_id_table.base, ~#tm6000_id_table.offset, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset, ~ldv_0_callback_functionality.base, ~ldv_0_callback_functionality.offset, ~ldv_0_callback_master_xfer.base, ~ldv_0_callback_master_xfer.offset, ~ldv_0_container_struct_i2c_adapter_ptr.base, ~ldv_0_container_struct_i2c_adapter_ptr.offset, ~ldv_0_container_struct_i2c_msg_ptr.base, ~ldv_0_container_struct_i2c_msg_ptr.offset, ~ldv_1_callback_s_ctrl.base, ~ldv_1_callback_s_ctrl.offset, ~ldv_1_container_struct_v4l2_ctrl_ptr.base, ~ldv_1_container_struct_v4l2_ctrl_ptr.offset, ~ldv_2_callback_s_ctrl.base, ~ldv_2_callback_s_ctrl.offset, ~ldv_2_container_struct_v4l2_ctrl_ptr.base, ~ldv_2_container_struct_v4l2_ctrl_ptr.offset, ~ldv_3_callback_buf_prepare.base, ~ldv_3_callback_buf_prepare.offset, ~ldv_3_callback_buf_queue.base, ~ldv_3_callback_buf_queue.offset, ~ldv_3_callback_buf_release.base, ~ldv_3_callback_buf_release.offset, ~ldv_3_callback_buf_setup.base, ~ldv_3_callback_buf_setup.offset, ~ldv_3_container_enum_v4l2_field, ~ldv_3_container_struct_videobuf_buffer_ptr.base, ~ldv_3_container_struct_videobuf_buffer_ptr.offset, ~ldv_3_container_struct_videobuf_queue_ptr.base, ~ldv_3_container_struct_videobuf_queue_ptr.offset, ~ldv_4_container_timer_list.base, ~ldv_4_container_timer_list.offset, ~ldv_5_container_timer_list.base, ~ldv_5_container_timer_list.offset, ~ldv_6_container_usb_driver.base, ~ldv_6_container_usb_driver.offset, ~ldv_6_ldv_param_13_1_default.base, ~ldv_6_ldv_param_13_1_default.offset, ~ldv_6_resource_usb_interface.base, ~ldv_6_resource_usb_interface.offset, ~ldv_6_usb_device_usb_device.base, ~ldv_6_usb_device_usb_device.offset, ~ldv_7_container_usb_driver.base, ~ldv_7_container_usb_driver.offset, ~ldv_8_callback_mmap.base, ~ldv_8_callback_mmap.offset, ~ldv_8_callback_read.base, ~ldv_8_callback_read.offset, ~ldv_8_resource_enum_v4l2_buf_type, ~ldv_8_resource_file.base, ~ldv_8_resource_file.offset, ~ldv_8_resource_struct_poll_table_struct_ptr.base, ~ldv_8_resource_struct_poll_table_struct_ptr.offset, ~ldv_8_resource_struct_v4l2_buffer_ptr.base, ~ldv_8_resource_struct_v4l2_buffer_ptr.offset, ~ldv_8_resource_struct_v4l2_capability_ptr.base, ~ldv_8_resource_struct_v4l2_capability_ptr.offset, ~ldv_8_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_8_resource_struct_v4l2_event_subscription_ptr.offset, ~ldv_8_resource_struct_v4l2_fh_ptr.base, ~ldv_8_resource_struct_v4l2_fh_ptr.offset, ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.offset, ~ldv_8_resource_struct_v4l2_format_ptr.base, ~ldv_8_resource_struct_v4l2_format_ptr.offset, ~ldv_8_resource_struct_v4l2_frequency_ptr.base, ~ldv_8_resource_struct_v4l2_frequency_ptr.offset, ~ldv_8_resource_struct_v4l2_input_ptr.base, ~ldv_8_resource_struct_v4l2_input_ptr.offset, ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.offset, ~ldv_8_resource_struct_v4l2_tuner_ptr.base, ~ldv_8_resource_struct_v4l2_tuner_ptr.offset, ~ldv_8_resource_struct_vm_area_struct_ptr.base, ~ldv_8_resource_struct_vm_area_struct_ptr.offset, ~ldv_9_resource_enum_v4l2_buf_type, ~ldv_9_resource_file.base, ~ldv_9_resource_file.offset, ~ldv_9_resource_struct_poll_table_struct_ptr.base, ~ldv_9_resource_struct_poll_table_struct_ptr.offset, ~ldv_9_resource_struct_v4l2_buffer_ptr.base, ~ldv_9_resource_struct_v4l2_buffer_ptr.offset, ~ldv_9_resource_struct_v4l2_capability_ptr.base, ~ldv_9_resource_struct_v4l2_capability_ptr.offset, ~ldv_9_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_9_resource_struct_v4l2_event_subscription_ptr.offset, ~ldv_9_resource_struct_v4l2_fh_ptr.base, ~ldv_9_resource_struct_v4l2_fh_ptr.offset, ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.offset, ~ldv_9_resource_struct_v4l2_format_ptr.base, ~ldv_9_resource_struct_v4l2_format_ptr.offset, ~ldv_9_resource_struct_v4l2_frequency_ptr.base, ~ldv_9_resource_struct_v4l2_frequency_ptr.offset, ~ldv_9_resource_struct_v4l2_input_ptr.base, ~ldv_9_resource_struct_v4l2_input_ptr.offset, ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.offset, ~ldv_9_resource_struct_v4l2_tuner_ptr.base, ~ldv_9_resource_struct_v4l2_tuner_ptr.offset, ~ldv_9_resource_struct_vm_area_struct_ptr.base, ~ldv_9_resource_struct_vm_area_struct_ptr.offset, ~ldv_12_exit_tm6000_usb_driver_exit_default.base, ~ldv_12_exit_tm6000_usb_driver_exit_default.offset, ~ldv_12_init_tm6000_usb_driver_init_default.base, ~ldv_12_init_tm6000_usb_driver_init_default.offset, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset, ~#tm6000_devlist.base, ~#tm6000_devlist.offset, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset, ~#tm6000_extension_devlist.base, ~#tm6000_extension_devlist.offset, ~#tm6000_algo.base, ~#tm6000_algo.offset, ~keep_urb, ~#format.base, ~#format.offset, ~#tm6000_video_qops.base, ~#tm6000_video_qops.offset, ~#tm6000_ctrl_ops.base, ~#tm6000_ctrl_ops.offset, ~#tm6000_radio_ctrl_ops.base, ~#tm6000_radio_ctrl_ops.offset, ~#tm6000_fops.base, ~#tm6000_fops.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset, ~#tm6000_template.base, ~#tm6000_template.offset, ~#radio_fops.base, ~#radio_fops.offset, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset, ~ldv_8_container_v4l2_file_operations.base, ~ldv_8_container_v4l2_file_operations.offset, ~ldv_8_resource_struct_video_device.base, ~ldv_8_resource_struct_video_device.offset, ~ldv_9_container_v4l2_file_operations.base, ~ldv_9_container_v4l2_file_operations.offset, ~ldv_9_resource_struct_video_device.base, ~ldv_9_resource_struct_video_device.offset, ~ldv_8_callback_func_1_ptr.base, ~ldv_8_callback_func_1_ptr.offset, ~ldv_8_callback_poll.base, ~ldv_8_callback_poll.offset, ~ldv_8_callback_unlocked_ioctl.base, ~ldv_8_callback_unlocked_ioctl.offset, ~ldv_8_callback_vidioc_dqbuf.base, ~ldv_8_callback_vidioc_dqbuf.offset, ~ldv_8_callback_vidioc_enum_fmt_vid_cap.base, ~ldv_8_callback_vidioc_enum_fmt_vid_cap.offset, ~ldv_8_callback_vidioc_enum_input.base, ~ldv_8_callback_vidioc_enum_input.offset, ~ldv_8_callback_vidioc_g_fmt_vid_cap.base, ~ldv_8_callback_vidioc_g_fmt_vid_cap.offset, ~ldv_8_callback_vidioc_g_frequency.base, ~ldv_8_callback_vidioc_g_frequency.offset, ~ldv_8_callback_vidioc_g_input.base, ~ldv_8_callback_vidioc_g_input.offset, ~ldv_8_callback_vidioc_g_std.base, ~ldv_8_callback_vidioc_g_std.offset, ~ldv_8_callback_vidioc_g_tuner.base, ~ldv_8_callback_vidioc_g_tuner.offset, ~ldv_8_callback_vidioc_qbuf.base, ~ldv_8_callback_vidioc_qbuf.offset, ~ldv_8_callback_vidioc_querybuf.base, ~ldv_8_callback_vidioc_querybuf.offset, ~ldv_8_callback_vidioc_querycap.base, ~ldv_8_callback_vidioc_querycap.offset, ~ldv_8_callback_vidioc_reqbufs.base, ~ldv_8_callback_vidioc_reqbufs.offset, ~ldv_8_callback_vidioc_s_fmt_vid_cap.base, ~ldv_8_callback_vidioc_s_fmt_vid_cap.offset, ~ldv_8_callback_vidioc_s_frequency.base, ~ldv_8_callback_vidioc_s_frequency.offset, ~ldv_8_callback_vidioc_s_input.base, ~ldv_8_callback_vidioc_s_input.offset, ~ldv_8_callback_vidioc_s_std.base, ~ldv_8_callback_vidioc_s_std.offset, ~ldv_8_callback_vidioc_s_tuner.base, ~ldv_8_callback_vidioc_s_tuner.offset, ~ldv_8_callback_vidioc_streamoff.base, ~ldv_8_callback_vidioc_streamoff.offset, ~ldv_8_callback_vidioc_streamon.base, ~ldv_8_callback_vidioc_streamon.offset, ~ldv_8_callback_vidioc_subscribe_event.base, ~ldv_8_callback_vidioc_subscribe_event.offset, ~ldv_8_callback_vidioc_try_fmt_vid_cap.base, ~ldv_8_callback_vidioc_try_fmt_vid_cap.offset, ~ldv_8_callback_vidioc_unsubscribe_event.base, ~ldv_8_callback_vidioc_unsubscribe_event.offset, ~ldv_9_callback_func_1_ptr.base, ~ldv_9_callback_func_1_ptr.offset, ~ldv_9_callback_mmap.base, ~ldv_9_callback_mmap.offset, ~ldv_9_callback_poll.base, ~ldv_9_callback_poll.offset, ~ldv_9_callback_read.base, ~ldv_9_callback_read.offset, ~ldv_9_callback_unlocked_ioctl.base, ~ldv_9_callback_unlocked_ioctl.offset, ~ldv_9_callback_vidioc_dqbuf.base, ~ldv_9_callback_vidioc_dqbuf.offset, ~ldv_9_callback_vidioc_enum_fmt_vid_cap.base, ~ldv_9_callback_vidioc_enum_fmt_vid_cap.offset, ~ldv_9_callback_vidioc_enum_input.base, ~ldv_9_callback_vidioc_enum_input.offset, ~ldv_9_callback_vidioc_g_fmt_vid_cap.base, ~ldv_9_callback_vidioc_g_fmt_vid_cap.offset, ~ldv_9_callback_vidioc_g_frequency.base, ~ldv_9_callback_vidioc_g_frequency.offset, ~ldv_9_callback_vidioc_g_input.base, ~ldv_9_callback_vidioc_g_input.offset, ~ldv_9_callback_vidioc_g_std.base, ~ldv_9_callback_vidioc_g_std.offset, ~ldv_9_callback_vidioc_g_tuner.base, ~ldv_9_callback_vidioc_g_tuner.offset, ~ldv_9_callback_vidioc_qbuf.base, ~ldv_9_callback_vidioc_qbuf.offset, ~ldv_9_callback_vidioc_querybuf.base, ~ldv_9_callback_vidioc_querybuf.offset, ~ldv_9_callback_vidioc_querycap.base, ~ldv_9_callback_vidioc_querycap.offset, ~ldv_9_callback_vidioc_reqbufs.base, ~ldv_9_callback_vidioc_reqbufs.offset, ~ldv_9_callback_vidioc_s_fmt_vid_cap.base, ~ldv_9_callback_vidioc_s_fmt_vid_cap.offset, ~ldv_9_callback_vidioc_s_frequency.base, ~ldv_9_callback_vidioc_s_frequency.offset, ~ldv_9_callback_vidioc_s_input.base, ~ldv_9_callback_vidioc_s_input.offset, ~ldv_9_callback_vidioc_s_std.base, ~ldv_9_callback_vidioc_s_std.offset, ~ldv_9_callback_vidioc_s_tuner.base, ~ldv_9_callback_vidioc_s_tuner.offset, ~ldv_9_callback_vidioc_streamoff.base, ~ldv_9_callback_vidioc_streamoff.offset, ~ldv_9_callback_vidioc_streamon.base, ~ldv_9_callback_vidioc_streamon.offset, ~ldv_9_callback_vidioc_subscribe_event.base, ~ldv_9_callback_vidioc_subscribe_event.offset, ~ldv_9_callback_vidioc_try_fmt_vid_cap.base, ~ldv_9_callback_vidioc_try_fmt_vid_cap.offset, ~ldv_9_callback_vidioc_unsubscribe_event.base, ~ldv_9_callback_vidioc_unsubscribe_event.offset, ~#composite_pal_m.base, ~#composite_pal_m.offset, ~#composite_pal_nc.base, ~#composite_pal_nc.offset, ~#composite_pal.base, ~#composite_pal.offset, ~#composite_secam.base, ~#composite_secam.offset, ~#composite_ntsc.base, ~#composite_ntsc.offset, ~composite_stds.id, ~composite_stds.common.base, ~composite_stds.common.offset, ~#svideo_pal_m.base, ~#svideo_pal_m.offset, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset, ~#svideo_pal.base, ~#svideo_pal.offset, ~#svideo_secam.base, ~#svideo_secam.offset, ~#svideo_ntsc.base, ~#svideo_ntsc.offset, ~svideo_stds.id, ~svideo_stds.common.base, ~svideo_stds.common.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length;

implementation ldv_struct_videobuf_queue_ops_dummy_resourceless_instance_3(#in~arg0.base : int, #in~arg0.offset : int) returns (){
    var #t~ret614 : int;
    var #t~ret615 : int;
    var #t~ret616.base : int, #t~ret616.offset : int;
    var #t~ret617.base : int, #t~ret617.offset : int;
    var ~arg0.base : int, ~arg0.offset : int;
    var ~tmp~712.base : int, ~tmp~712.offset : int;
    var ~tmp___0~712.base : int, ~tmp___0~712.offset : int;

  loc10:
    ~arg0.base, ~arg0.offset := #in~arg0.base, #in~arg0.offset;
    havoc ~tmp~712.base, ~tmp~712.offset;
    havoc ~tmp___0~712.base, ~tmp___0~712.offset;
    assume !(~ldv_statevar_3 == 1);
    assume !(~ldv_statevar_3 == 2);
    assume !(~ldv_statevar_3 == 3);
    goto loc11;
  loc11:
    goto loc11_0, loc11_1;
  loc11_0:
    assume ~ldv_statevar_3 == 4;
    call #t~ret615 := ldv_switch_1();
    assume -2147483648 <= #t~ret615 && #t~ret615 <= 2147483647;
    ~ldv_statevar_3 := #t~ret615;
    havoc #t~ret615;
    assume true;
    return;
  loc11_1:
    assume !(~ldv_statevar_3 == 4);
    assume !(~ldv_statevar_3 == 5);
    assume !(~ldv_statevar_3 == 7);
    assume ~ldv_statevar_3 == 8;
    call ldv_dummy_resourceless_instance_callback_3_8(~ldv_3_callback_buf_release.base, ~ldv_3_callback_buf_release.offset, ~ldv_3_container_struct_videobuf_queue_ptr.base, ~ldv_3_container_struct_videobuf_queue_ptr.offset, ~ldv_3_container_struct_videobuf_buffer_ptr.base, ~ldv_3_container_struct_videobuf_buffer_ptr.offset);
    return;
}

procedure ldv_struct_videobuf_queue_ops_dummy_resourceless_instance_3(#in~arg0.base : int, #in~arg0.offset : int) returns ();
modifies ~ldv_statevar_3, ~ldv_3_ldv_param_9_1_default.base, ~ldv_3_ldv_param_9_1_default.offset, ~ldv_3_ldv_param_9_2_default.base, ~ldv_3_ldv_param_9_2_default.offset, #valid, #length, #memory_int, ~ldv_spin_slock_of_tm6000_core, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation ldv_switch_1() returns (#res : int){
    var #t~ret619 : int;
    var ~tmp~748 : int;

  loc12:
    havoc ~tmp~748;
    call #t~ret619 := ldv_undef_int();
    assume -2147483648 <= #t~ret619 && #t~ret619 <= 2147483647;
    ~tmp~748 := #t~ret619;
    havoc #t~ret619;
    assume ~tmp~748 == 0;
    #res := 1;
    assume true;
    return;
}

procedure ldv_switch_1() returns (#res : int);
modifies ;

implementation ULTIMATE.start() returns (){
    var #t~ret3702 : int;

  loc13:
    call ULTIMATE.init();
    call #t~ret3702 := main();
    return;
}

procedure ULTIMATE.start() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~card, ~#tm6000_devused.base, ~#tm6000_devused.offset, ~ldv_0_ldv_param_7_2_default, ~ldv_12_ret_default, ~ldv_3_ldv_param_9_1_default.base, ~ldv_3_ldv_param_9_1_default.offset, ~ldv_3_ldv_param_9_2_default.base, ~ldv_3_ldv_param_9_2_default.offset, ~ldv_6_probe_retval_default, ~ldv_6_reset_flag_default, ~ldv_8_ldv_param_19_1_default.base, ~ldv_8_ldv_param_19_1_default.offset, ~ldv_8_ldv_param_19_2_default, ~ldv_8_ldv_param_19_3_default.base, ~ldv_8_ldv_param_19_3_default.offset, ~ldv_8_ldv_param_22_1_default, ~ldv_8_ldv_param_22_2_default, ~ldv_8_ldv_param_30_2_default.base, ~ldv_8_ldv_param_30_2_default.offset, ~ldv_8_ldv_param_33_2_default.base, ~ldv_8_ldv_param_33_2_default.offset, ~ldv_8_ldv_param_43_2_default, ~ldv_8_ldv_param_46_2_default, ~ldv_8_ret_default, ~ldv_9_ldv_param_19_1_default.base, ~ldv_9_ldv_param_19_1_default.offset, ~ldv_9_ldv_param_19_2_default, ~ldv_9_ldv_param_19_3_default.base, ~ldv_9_ldv_param_19_3_default.offset, ~ldv_9_ldv_param_22_1_default, ~ldv_9_ldv_param_22_2_default, ~ldv_9_ldv_param_30_2_default.base, ~ldv_9_ldv_param_30_2_default.offset, ~ldv_9_ldv_param_33_2_default.base, ~ldv_9_ldv_param_33_2_default.offset, ~ldv_9_ldv_param_43_2_default, ~ldv_9_ldv_param_46_2_default, ~ldv_9_ret_default, ~ldv_statevar_0, ~ldv_statevar_1, ~ldv_statevar_12, ~ldv_statevar_2, ~ldv_statevar_3, ~ldv_statevar_4, ~ldv_statevar_5, ~ldv_statevar_6, ~ldv_statevar_7, ~ldv_statevar_8, ~ldv_statevar_9, ~tm6000_debug, ~i2c_debug, ~vid_limit, ~video_nr, ~radio_nr, ~iname.base, ~iname.offset, ~tm6010_a_mode, ~ir_debug, ~enable_ir, ~ir_clock_mhz, ~ldv_spin_alloc_lock_of_task_struct, ~ldv_spin_i_lock_of_inode, ~ldv_spin_lock, ~ldv_spin_lock_of_NOT_ARG_SIGN, ~ldv_spin_node_size_lock_of_pglist_data, ~ldv_spin_ptl, ~ldv_spin_siglock_of_sighand_struct, ~ldv_spin_slock_of_tm6000_core, ~#tm6000_boards.base, ~#tm6000_boards.offset, ~#tm6000_id_table.base, ~#tm6000_id_table.offset, ~#tm6000_usb_driver.base, ~#tm6000_usb_driver.offset, ~ldv_0_callback_functionality.base, ~ldv_0_callback_functionality.offset, ~ldv_0_callback_master_xfer.base, ~ldv_0_callback_master_xfer.offset, ~ldv_0_container_struct_i2c_adapter_ptr.base, ~ldv_0_container_struct_i2c_adapter_ptr.offset, ~ldv_0_container_struct_i2c_msg_ptr.base, ~ldv_0_container_struct_i2c_msg_ptr.offset, ~ldv_1_callback_s_ctrl.base, ~ldv_1_callback_s_ctrl.offset, ~ldv_1_container_struct_v4l2_ctrl_ptr.base, ~ldv_1_container_struct_v4l2_ctrl_ptr.offset, ~ldv_2_callback_s_ctrl.base, ~ldv_2_callback_s_ctrl.offset, ~ldv_2_container_struct_v4l2_ctrl_ptr.base, ~ldv_2_container_struct_v4l2_ctrl_ptr.offset, ~ldv_3_callback_buf_prepare.base, ~ldv_3_callback_buf_prepare.offset, ~ldv_3_callback_buf_queue.base, ~ldv_3_callback_buf_queue.offset, ~ldv_3_callback_buf_release.base, ~ldv_3_callback_buf_release.offset, ~ldv_3_callback_buf_setup.base, ~ldv_3_callback_buf_setup.offset, ~ldv_3_container_enum_v4l2_field, ~ldv_3_container_struct_videobuf_buffer_ptr.base, ~ldv_3_container_struct_videobuf_buffer_ptr.offset, ~ldv_3_container_struct_videobuf_queue_ptr.base, ~ldv_3_container_struct_videobuf_queue_ptr.offset, ~ldv_4_container_timer_list.base, ~ldv_4_container_timer_list.offset, ~ldv_5_container_timer_list.base, ~ldv_5_container_timer_list.offset, ~ldv_6_container_usb_driver.base, ~ldv_6_container_usb_driver.offset, ~ldv_6_ldv_param_13_1_default.base, ~ldv_6_ldv_param_13_1_default.offset, ~ldv_6_resource_usb_interface.base, ~ldv_6_resource_usb_interface.offset, ~ldv_6_usb_device_usb_device.base, ~ldv_6_usb_device_usb_device.offset, ~ldv_7_container_usb_driver.base, ~ldv_7_container_usb_driver.offset, ~ldv_8_callback_mmap.base, ~ldv_8_callback_mmap.offset, ~ldv_8_callback_read.base, ~ldv_8_callback_read.offset, ~ldv_8_resource_enum_v4l2_buf_type, ~ldv_8_resource_file.base, ~ldv_8_resource_file.offset, ~ldv_8_resource_struct_poll_table_struct_ptr.base, ~ldv_8_resource_struct_poll_table_struct_ptr.offset, ~ldv_8_resource_struct_v4l2_buffer_ptr.base, ~ldv_8_resource_struct_v4l2_buffer_ptr.offset, ~ldv_8_resource_struct_v4l2_capability_ptr.base, ~ldv_8_resource_struct_v4l2_capability_ptr.offset, ~ldv_8_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_8_resource_struct_v4l2_event_subscription_ptr.offset, ~ldv_8_resource_struct_v4l2_fh_ptr.base, ~ldv_8_resource_struct_v4l2_fh_ptr.offset, ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.offset, ~ldv_8_resource_struct_v4l2_format_ptr.base, ~ldv_8_resource_struct_v4l2_format_ptr.offset, ~ldv_8_resource_struct_v4l2_frequency_ptr.base, ~ldv_8_resource_struct_v4l2_frequency_ptr.offset, ~ldv_8_resource_struct_v4l2_input_ptr.base, ~ldv_8_resource_struct_v4l2_input_ptr.offset, ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.offset, ~ldv_8_resource_struct_v4l2_tuner_ptr.base, ~ldv_8_resource_struct_v4l2_tuner_ptr.offset, ~ldv_8_resource_struct_vm_area_struct_ptr.base, ~ldv_8_resource_struct_vm_area_struct_ptr.offset, ~ldv_9_resource_enum_v4l2_buf_type, ~ldv_9_resource_file.base, ~ldv_9_resource_file.offset, ~ldv_9_resource_struct_poll_table_struct_ptr.base, ~ldv_9_resource_struct_poll_table_struct_ptr.offset, ~ldv_9_resource_struct_v4l2_buffer_ptr.base, ~ldv_9_resource_struct_v4l2_buffer_ptr.offset, ~ldv_9_resource_struct_v4l2_capability_ptr.base, ~ldv_9_resource_struct_v4l2_capability_ptr.offset, ~ldv_9_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_9_resource_struct_v4l2_event_subscription_ptr.offset, ~ldv_9_resource_struct_v4l2_fh_ptr.base, ~ldv_9_resource_struct_v4l2_fh_ptr.offset, ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.offset, ~ldv_9_resource_struct_v4l2_format_ptr.base, ~ldv_9_resource_struct_v4l2_format_ptr.offset, ~ldv_9_resource_struct_v4l2_frequency_ptr.base, ~ldv_9_resource_struct_v4l2_frequency_ptr.offset, ~ldv_9_resource_struct_v4l2_input_ptr.base, ~ldv_9_resource_struct_v4l2_input_ptr.offset, ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.offset, ~ldv_9_resource_struct_v4l2_tuner_ptr.base, ~ldv_9_resource_struct_v4l2_tuner_ptr.offset, ~ldv_9_resource_struct_vm_area_struct_ptr.base, ~ldv_9_resource_struct_vm_area_struct_ptr.offset, ~ldv_12_exit_tm6000_usb_driver_exit_default.base, ~ldv_12_exit_tm6000_usb_driver_exit_default.offset, ~ldv_12_init_tm6000_usb_driver_init_default.base, ~ldv_12_init_tm6000_usb_driver_init_default.offset, ~#tm6000_init_tab.base, ~#tm6000_init_tab.offset, ~#tm6010_init_tab.base, ~#tm6010_init_tab.offset, ~#tm6000_devlist.base, ~#tm6000_devlist.offset, ~#tm6000_devlist_mutex.base, ~#tm6000_devlist_mutex.offset, ~#tm6000_extension_devlist.base, ~#tm6000_extension_devlist.offset, ~#tm6000_algo.base, ~#tm6000_algo.offset, ~keep_urb, ~#format.base, ~#format.offset, ~#tm6000_video_qops.base, ~#tm6000_video_qops.offset, ~#tm6000_ctrl_ops.base, ~#tm6000_ctrl_ops.offset, ~#tm6000_radio_ctrl_ops.base, ~#tm6000_radio_ctrl_ops.offset, ~#tm6000_fops.base, ~#tm6000_fops.offset, ~#video_ioctl_ops.base, ~#video_ioctl_ops.offset, ~#tm6000_template.base, ~#tm6000_template.offset, ~#radio_fops.base, ~#radio_fops.offset, ~#radio_ioctl_ops.base, ~#radio_ioctl_ops.offset, ~#tm6000_radio_template.base, ~#tm6000_radio_template.offset, ~ldv_8_container_v4l2_file_operations.base, ~ldv_8_container_v4l2_file_operations.offset, ~ldv_8_resource_struct_video_device.base, ~ldv_8_resource_struct_video_device.offset, ~ldv_9_container_v4l2_file_operations.base, ~ldv_9_container_v4l2_file_operations.offset, ~ldv_9_resource_struct_video_device.base, ~ldv_9_resource_struct_video_device.offset, ~ldv_8_callback_func_1_ptr.base, ~ldv_8_callback_func_1_ptr.offset, ~ldv_8_callback_poll.base, ~ldv_8_callback_poll.offset, ~ldv_8_callback_unlocked_ioctl.base, ~ldv_8_callback_unlocked_ioctl.offset, ~ldv_8_callback_vidioc_dqbuf.base, ~ldv_8_callback_vidioc_dqbuf.offset, ~ldv_8_callback_vidioc_enum_fmt_vid_cap.base, ~ldv_8_callback_vidioc_enum_fmt_vid_cap.offset, ~ldv_8_callback_vidioc_enum_input.base, ~ldv_8_callback_vidioc_enum_input.offset, ~ldv_8_callback_vidioc_g_fmt_vid_cap.base, ~ldv_8_callback_vidioc_g_fmt_vid_cap.offset, ~ldv_8_callback_vidioc_g_frequency.base, ~ldv_8_callback_vidioc_g_frequency.offset, ~ldv_8_callback_vidioc_g_input.base, ~ldv_8_callback_vidioc_g_input.offset, ~ldv_8_callback_vidioc_g_std.base, ~ldv_8_callback_vidioc_g_std.offset, ~ldv_8_callback_vidioc_g_tuner.base, ~ldv_8_callback_vidioc_g_tuner.offset, ~ldv_8_callback_vidioc_qbuf.base, ~ldv_8_callback_vidioc_qbuf.offset, ~ldv_8_callback_vidioc_querybuf.base, ~ldv_8_callback_vidioc_querybuf.offset, ~ldv_8_callback_vidioc_querycap.base, ~ldv_8_callback_vidioc_querycap.offset, ~ldv_8_callback_vidioc_reqbufs.base, ~ldv_8_callback_vidioc_reqbufs.offset, ~ldv_8_callback_vidioc_s_fmt_vid_cap.base, ~ldv_8_callback_vidioc_s_fmt_vid_cap.offset, ~ldv_8_callback_vidioc_s_frequency.base, ~ldv_8_callback_vidioc_s_frequency.offset, ~ldv_8_callback_vidioc_s_input.base, ~ldv_8_callback_vidioc_s_input.offset, ~ldv_8_callback_vidioc_s_std.base, ~ldv_8_callback_vidioc_s_std.offset, ~ldv_8_callback_vidioc_s_tuner.base, ~ldv_8_callback_vidioc_s_tuner.offset, ~ldv_8_callback_vidioc_streamoff.base, ~ldv_8_callback_vidioc_streamoff.offset, ~ldv_8_callback_vidioc_streamon.base, ~ldv_8_callback_vidioc_streamon.offset, ~ldv_8_callback_vidioc_subscribe_event.base, ~ldv_8_callback_vidioc_subscribe_event.offset, ~ldv_8_callback_vidioc_try_fmt_vid_cap.base, ~ldv_8_callback_vidioc_try_fmt_vid_cap.offset, ~ldv_8_callback_vidioc_unsubscribe_event.base, ~ldv_8_callback_vidioc_unsubscribe_event.offset, ~ldv_9_callback_func_1_ptr.base, ~ldv_9_callback_func_1_ptr.offset, ~ldv_9_callback_mmap.base, ~ldv_9_callback_mmap.offset, ~ldv_9_callback_poll.base, ~ldv_9_callback_poll.offset, ~ldv_9_callback_read.base, ~ldv_9_callback_read.offset, ~ldv_9_callback_unlocked_ioctl.base, ~ldv_9_callback_unlocked_ioctl.offset, ~ldv_9_callback_vidioc_dqbuf.base, ~ldv_9_callback_vidioc_dqbuf.offset, ~ldv_9_callback_vidioc_enum_fmt_vid_cap.base, ~ldv_9_callback_vidioc_enum_fmt_vid_cap.offset, ~ldv_9_callback_vidioc_enum_input.base, ~ldv_9_callback_vidioc_enum_input.offset, ~ldv_9_callback_vidioc_g_fmt_vid_cap.base, ~ldv_9_callback_vidioc_g_fmt_vid_cap.offset, ~ldv_9_callback_vidioc_g_frequency.base, ~ldv_9_callback_vidioc_g_frequency.offset, ~ldv_9_callback_vidioc_g_input.base, ~ldv_9_callback_vidioc_g_input.offset, ~ldv_9_callback_vidioc_g_std.base, ~ldv_9_callback_vidioc_g_std.offset, ~ldv_9_callback_vidioc_g_tuner.base, ~ldv_9_callback_vidioc_g_tuner.offset, ~ldv_9_callback_vidioc_qbuf.base, ~ldv_9_callback_vidioc_qbuf.offset, ~ldv_9_callback_vidioc_querybuf.base, ~ldv_9_callback_vidioc_querybuf.offset, ~ldv_9_callback_vidioc_querycap.base, ~ldv_9_callback_vidioc_querycap.offset, ~ldv_9_callback_vidioc_reqbufs.base, ~ldv_9_callback_vidioc_reqbufs.offset, ~ldv_9_callback_vidioc_s_fmt_vid_cap.base, ~ldv_9_callback_vidioc_s_fmt_vid_cap.offset, ~ldv_9_callback_vidioc_s_frequency.base, ~ldv_9_callback_vidioc_s_frequency.offset, ~ldv_9_callback_vidioc_s_input.base, ~ldv_9_callback_vidioc_s_input.offset, ~ldv_9_callback_vidioc_s_std.base, ~ldv_9_callback_vidioc_s_std.offset, ~ldv_9_callback_vidioc_s_tuner.base, ~ldv_9_callback_vidioc_s_tuner.offset, ~ldv_9_callback_vidioc_streamoff.base, ~ldv_9_callback_vidioc_streamoff.offset, ~ldv_9_callback_vidioc_streamon.base, ~ldv_9_callback_vidioc_streamon.offset, ~ldv_9_callback_vidioc_subscribe_event.base, ~ldv_9_callback_vidioc_subscribe_event.offset, ~ldv_9_callback_vidioc_try_fmt_vid_cap.base, ~ldv_9_callback_vidioc_try_fmt_vid_cap.offset, ~ldv_9_callback_vidioc_unsubscribe_event.base, ~ldv_9_callback_vidioc_unsubscribe_event.offset, ~#composite_pal_m.base, ~#composite_pal_m.offset, ~#composite_pal_nc.base, ~#composite_pal_nc.offset, ~#composite_pal.base, ~#composite_pal.offset, ~#composite_secam.base, ~#composite_secam.offset, ~#composite_ntsc.base, ~#composite_ntsc.offset, ~composite_stds.id, ~composite_stds.common.base, ~composite_stds.common.offset, ~#svideo_pal_m.base, ~#svideo_pal_m.offset, ~#svideo_pal_nc.base, ~#svideo_pal_nc.offset, ~#svideo_pal.base, ~#svideo_pal.offset, ~#svideo_secam.base, ~#svideo_secam.offset, ~#svideo_ntsc.base, ~#svideo_ntsc.offset, ~svideo_stds.id, ~svideo_stds.common.base, ~svideo_stds.common.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_statevar_12, ~ldv_statevar_0, ~ldv_statevar_1, ~ldv_statevar_2, ~ldv_statevar_3, ~ldv_statevar_4, ~ldv_statevar_5, ~ldv_6_reset_flag_default, ~ldv_statevar_6, ~ldv_statevar_7, ~ldv_8_ret_default, ~ldv_statevar_8, ~ldv_9_ret_default, ~ldv_statevar_9;
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_0_container_struct_i2c_adapter_ptr.base, ~ldv_0_container_struct_i2c_adapter_ptr.offset, ~ldv_0_container_struct_i2c_msg_ptr.base, ~ldv_0_container_struct_i2c_msg_ptr.offset, ~ldv_1_container_struct_v4l2_ctrl_ptr.base, ~ldv_1_container_struct_v4l2_ctrl_ptr.offset, ~ldv_2_container_struct_v4l2_ctrl_ptr.base, ~ldv_2_container_struct_v4l2_ctrl_ptr.offset, ~ldv_3_container_struct_videobuf_buffer_ptr.base, ~ldv_3_container_struct_videobuf_buffer_ptr.offset, ~ldv_3_container_struct_videobuf_queue_ptr.base, ~ldv_3_container_struct_videobuf_queue_ptr.offset, ~ldv_3_ldv_param_9_1_default.base, ~ldv_3_ldv_param_9_1_default.offset, ~ldv_3_ldv_param_9_2_default.base, ~ldv_3_ldv_param_9_2_default.offset, ~ldv_4_container_timer_list.base, ~ldv_4_container_timer_list.offset, ~ldv_5_container_timer_list.base, ~ldv_5_container_timer_list.offset, ~ldv_6_ldv_param_13_1_default.base, ~ldv_6_ldv_param_13_1_default.offset, ~ldv_6_resource_usb_interface.base, ~ldv_6_resource_usb_interface.offset, ~ldv_6_usb_device_usb_device.base, ~ldv_6_usb_device_usb_device.offset, ~ldv_8_callback_mmap.base, ~ldv_8_callback_mmap.offset, ~ldv_8_callback_read.base, ~ldv_8_callback_read.offset, ~ldv_8_ldv_param_19_1_default.base, ~ldv_8_ldv_param_19_1_default.offset, ~ldv_8_ldv_param_19_3_default.base, ~ldv_8_ldv_param_19_3_default.offset, ~ldv_8_ldv_param_30_2_default.base, ~ldv_8_ldv_param_30_2_default.offset, ~ldv_8_ldv_param_33_2_default.base, ~ldv_8_ldv_param_33_2_default.offset, ~ldv_8_resource_file.base, ~ldv_8_resource_file.offset, ~ldv_8_resource_struct_poll_table_struct_ptr.base, ~ldv_8_resource_struct_poll_table_struct_ptr.offset, ~ldv_8_resource_struct_v4l2_buffer_ptr.base, ~ldv_8_resource_struct_v4l2_buffer_ptr.offset, ~ldv_8_resource_struct_v4l2_capability_ptr.base, ~ldv_8_resource_struct_v4l2_capability_ptr.offset, ~ldv_8_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_8_resource_struct_v4l2_event_subscription_ptr.offset, ~ldv_8_resource_struct_v4l2_fh_ptr.base, ~ldv_8_resource_struct_v4l2_fh_ptr.offset, ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.offset, ~ldv_8_resource_struct_v4l2_format_ptr.base, ~ldv_8_resource_struct_v4l2_format_ptr.offset, ~ldv_8_resource_struct_v4l2_frequency_ptr.base, ~ldv_8_resource_struct_v4l2_frequency_ptr.offset, ~ldv_8_resource_struct_v4l2_input_ptr.base, ~ldv_8_resource_struct_v4l2_input_ptr.offset, ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.offset, ~ldv_8_resource_struct_v4l2_tuner_ptr.base, ~ldv_8_resource_struct_v4l2_tuner_ptr.offset, ~ldv_8_resource_struct_vm_area_struct_ptr.base, ~ldv_8_resource_struct_vm_area_struct_ptr.offset, ~ldv_9_ldv_param_19_1_default.base, ~ldv_9_ldv_param_19_1_default.offset, ~ldv_9_ldv_param_19_3_default.base, ~ldv_9_ldv_param_19_3_default.offset, ~ldv_9_ldv_param_30_2_default.base, ~ldv_9_ldv_param_30_2_default.offset, ~ldv_9_ldv_param_33_2_default.base, ~ldv_9_ldv_param_33_2_default.offset, ~ldv_9_resource_file.base, ~ldv_9_resource_file.offset, ~ldv_9_resource_struct_poll_table_struct_ptr.base, ~ldv_9_resource_struct_poll_table_struct_ptr.offset, ~ldv_9_resource_struct_v4l2_buffer_ptr.base, ~ldv_9_resource_struct_v4l2_buffer_ptr.offset, ~ldv_9_resource_struct_v4l2_capability_ptr.base, ~ldv_9_resource_struct_v4l2_capability_ptr.offset, ~ldv_9_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_9_resource_struct_v4l2_event_subscription_ptr.offset, ~ldv_9_resource_struct_v4l2_fh_ptr.base, ~ldv_9_resource_struct_v4l2_fh_ptr.offset, ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.offset, ~ldv_9_resource_struct_v4l2_format_ptr.base, ~ldv_9_resource_struct_v4l2_format_ptr.offset, ~ldv_9_resource_struct_v4l2_frequency_ptr.base, ~ldv_9_resource_struct_v4l2_frequency_ptr.offset, ~ldv_9_resource_struct_v4l2_input_ptr.base, ~ldv_9_resource_struct_v4l2_input_ptr.offset, ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.offset, ~ldv_9_resource_struct_v4l2_tuner_ptr.base, ~ldv_9_resource_struct_v4l2_tuner_ptr.offset, ~ldv_9_resource_struct_vm_area_struct_ptr.base, ~ldv_9_resource_struct_vm_area_struct_ptr.offset, ~ldv_statevar_4, ~ldv_statevar_5, ~ldv_6_reset_flag_default, ~ldv_statevar_6, ~ldv_6_container_usb_driver.base, ~ldv_6_container_usb_driver.offset, ~ldv_statevar_7, ~ldv_statevar_0, ~ldv_statevar_1, ~ldv_statevar_2, ~ldv_statevar_3, ~ldv_8_ret_default, ~ldv_statevar_8, ~ldv_9_ret_default, ~ldv_statevar_9, ~ldv_7_container_usb_driver.base, ~ldv_7_container_usb_driver.offset, ~ldv_statevar_12, ~ldv_12_ret_default, ~ldv_spin_slock_of_tm6000_core, ~ldv_6_probe_retval_default, ~ldv_8_resource_struct_video_device.base, ~ldv_8_resource_struct_video_device.offset, ~ldv_9_resource_struct_video_device.base, ~ldv_9_resource_struct_video_device.offset;

implementation buffer_release(#in~vq.base : int, #in~vq.offset : int, #in~vb.base : int, #in~vb.offset : int) returns (){
    var ~vq.base : int, ~vq.offset : int;
    var ~vb.base : int, ~vb.offset : int;
    var ~buf~1928.base : int, ~buf~1928.offset : int;
    var ~__mptr~1928.base : int, ~__mptr~1928.offset : int;

  loc14:
    ~vq.base, ~vq.offset := #in~vq.base, #in~vq.offset;
    ~vb.base, ~vb.offset := #in~vb.base, #in~vb.offset;
    havoc ~buf~1928.base, ~buf~1928.offset;
    havoc ~__mptr~1928.base, ~__mptr~1928.offset;
    ~__mptr~1928.base, ~__mptr~1928.offset := ~vb.base, ~vb.offset;
    ~buf~1928.base, ~buf~1928.offset := ~__mptr~1928.base, ~__mptr~1928.offset;
    call free_buffer(~vq.base, ~vq.offset, ~buf~1928.base, ~buf~1928.offset);
    return;
}

procedure buffer_release(#in~vq.base : int, #in~vq.offset : int, #in~vb.base : int, #in~vb.offset : int) returns ();
modifies ~ldv_spin_slock_of_tm6000_core, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;

implementation ldv___ldv_spin_lock_54(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int) returns (){
    var ~ldv_func_arg1.base : int, ~ldv_func_arg1.offset : int;

  loc15:
    ~ldv_func_arg1.base, ~ldv_func_arg1.offset := #in~ldv_func_arg1.base, #in~ldv_func_arg1.offset;
    call ldv_spin_lock_slock_of_tm6000_core();
    return;
}

procedure ldv___ldv_spin_lock_54(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int) returns ();
modifies ~ldv_spin_slock_of_tm6000_core;

implementation ldv_allocate_external_0() returns (){
    var #t~ret548.base : int, #t~ret548.offset : int;
    var #t~ret549.base : int, #t~ret549.offset : int;
    var #t~ret550.base : int, #t~ret550.offset : int;
    var #t~ret551.base : int, #t~ret551.offset : int;
    var #t~ret552.base : int, #t~ret552.offset : int;
    var #t~ret553.base : int, #t~ret553.offset : int;
    var #t~ret554.base : int, #t~ret554.offset : int;
    var #t~ret555.base : int, #t~ret555.offset : int;
    var #t~ret556.base : int, #t~ret556.offset : int;
    var #t~ret557.base : int, #t~ret557.offset : int;
    var #t~ret558.base : int, #t~ret558.offset : int;
    var #t~ret559.base : int, #t~ret559.offset : int;
    var #t~ret560.base : int, #t~ret560.offset : int;
    var #t~ret561.base : int, #t~ret561.offset : int;
    var #t~ret562.base : int, #t~ret562.offset : int;
    var #t~ret563.base : int, #t~ret563.offset : int;
    var #t~ret564.base : int, #t~ret564.offset : int;
    var #t~ret565.base : int, #t~ret565.offset : int;
    var #t~ret566.base : int, #t~ret566.offset : int;
    var #t~ret567.base : int, #t~ret567.offset : int;
    var #t~ret568.base : int, #t~ret568.offset : int;
    var #t~ret569.base : int, #t~ret569.offset : int;
    var #t~ret570.base : int, #t~ret570.offset : int;
    var #t~ret571.base : int, #t~ret571.offset : int;
    var #t~ret572.base : int, #t~ret572.offset : int;
    var #t~ret573.base : int, #t~ret573.offset : int;
    var #t~ret574.base : int, #t~ret574.offset : int;
    var #t~ret575.base : int, #t~ret575.offset : int;
    var #t~ret576.base : int, #t~ret576.offset : int;
    var #t~ret577.base : int, #t~ret577.offset : int;
    var #t~ret578.base : int, #t~ret578.offset : int;
    var #t~ret579.base : int, #t~ret579.offset : int;
    var #t~ret580.base : int, #t~ret580.offset : int;
    var #t~ret581.base : int, #t~ret581.offset : int;
    var #t~ret582.base : int, #t~ret582.offset : int;
    var #t~ret583.base : int, #t~ret583.offset : int;
    var #t~ret584.base : int, #t~ret584.offset : int;
    var #t~ret585.base : int, #t~ret585.offset : int;
    var #t~ret586.base : int, #t~ret586.offset : int;
    var #t~ret587.base : int, #t~ret587.offset : int;
    var #t~ret588.base : int, #t~ret588.offset : int;
    var #t~ret589.base : int, #t~ret589.offset : int;
    var #t~ret590.base : int, #t~ret590.offset : int;
    var #t~ret591.base : int, #t~ret591.offset : int;
    var #t~ret592.base : int, #t~ret592.offset : int;
    var #t~ret593.base : int, #t~ret593.offset : int;
    var #t~ret594.base : int, #t~ret594.offset : int;
    var #t~ret595.base : int, #t~ret595.offset : int;
    var #t~ret596.base : int, #t~ret596.offset : int;
    var ~tmp~501.base : int, ~tmp~501.offset : int;
    var ~tmp___0~501.base : int, ~tmp___0~501.offset : int;
    var ~tmp___1~501.base : int, ~tmp___1~501.offset : int;
    var ~tmp___2~501.base : int, ~tmp___2~501.offset : int;
    var ~tmp___3~501.base : int, ~tmp___3~501.offset : int;
    var ~tmp___4~501.base : int, ~tmp___4~501.offset : int;
    var ~tmp___5~501.base : int, ~tmp___5~501.offset : int;
    var ~tmp___6~501.base : int, ~tmp___6~501.offset : int;
    var ~tmp___7~501.base : int, ~tmp___7~501.offset : int;
    var ~tmp___8~501.base : int, ~tmp___8~501.offset : int;
    var ~tmp___9~501.base : int, ~tmp___9~501.offset : int;
    var ~tmp___10~501.base : int, ~tmp___10~501.offset : int;
    var ~tmp___11~501.base : int, ~tmp___11~501.offset : int;
    var ~tmp___12~501.base : int, ~tmp___12~501.offset : int;
    var ~tmp___13~501.base : int, ~tmp___13~501.offset : int;
    var ~tmp___14~501.base : int, ~tmp___14~501.offset : int;
    var ~tmp___15~501.base : int, ~tmp___15~501.offset : int;
    var ~tmp___16~501.base : int, ~tmp___16~501.offset : int;
    var ~tmp___17~501.base : int, ~tmp___17~501.offset : int;
    var ~tmp___18~501.base : int, ~tmp___18~501.offset : int;
    var ~tmp___19~501.base : int, ~tmp___19~501.offset : int;
    var ~tmp___20~501.base : int, ~tmp___20~501.offset : int;
    var ~tmp___21~501.base : int, ~tmp___21~501.offset : int;
    var ~tmp___22~501.base : int, ~tmp___22~501.offset : int;
    var ~tmp___23~501.base : int, ~tmp___23~501.offset : int;
    var ~tmp___24~501.base : int, ~tmp___24~501.offset : int;
    var ~tmp___25~501.base : int, ~tmp___25~501.offset : int;
    var ~tmp___26~501.base : int, ~tmp___26~501.offset : int;
    var ~tmp___27~501.base : int, ~tmp___27~501.offset : int;
    var ~tmp___28~501.base : int, ~tmp___28~501.offset : int;
    var ~tmp___29~501.base : int, ~tmp___29~501.offset : int;
    var ~tmp___30~501.base : int, ~tmp___30~501.offset : int;
    var ~tmp___31~501.base : int, ~tmp___31~501.offset : int;
    var ~tmp___32~501.base : int, ~tmp___32~501.offset : int;
    var ~tmp___33~501.base : int, ~tmp___33~501.offset : int;
    var ~tmp___34~501.base : int, ~tmp___34~501.offset : int;
    var ~tmp___35~501.base : int, ~tmp___35~501.offset : int;
    var ~tmp___36~501.base : int, ~tmp___36~501.offset : int;
    var ~tmp___37~501.base : int, ~tmp___37~501.offset : int;
    var ~tmp___38~501.base : int, ~tmp___38~501.offset : int;
    var ~tmp___39~501.base : int, ~tmp___39~501.offset : int;
    var ~tmp___40~501.base : int, ~tmp___40~501.offset : int;
    var ~tmp___41~501.base : int, ~tmp___41~501.offset : int;
    var ~tmp___42~501.base : int, ~tmp___42~501.offset : int;
    var ~tmp___43~501.base : int, ~tmp___43~501.offset : int;
    var ~tmp___44~501.base : int, ~tmp___44~501.offset : int;
    var ~tmp___45~501.base : int, ~tmp___45~501.offset : int;
    var ~tmp___46~501.base : int, ~tmp___46~501.offset : int;
    var ~tmp___47~501.base : int, ~tmp___47~501.offset : int;

  loc16:
    havoc ~tmp~501.base, ~tmp~501.offset;
    havoc ~tmp___0~501.base, ~tmp___0~501.offset;
    havoc ~tmp___1~501.base, ~tmp___1~501.offset;
    havoc ~tmp___2~501.base, ~tmp___2~501.offset;
    havoc ~tmp___3~501.base, ~tmp___3~501.offset;
    havoc ~tmp___4~501.base, ~tmp___4~501.offset;
    havoc ~tmp___5~501.base, ~tmp___5~501.offset;
    havoc ~tmp___6~501.base, ~tmp___6~501.offset;
    havoc ~tmp___7~501.base, ~tmp___7~501.offset;
    havoc ~tmp___8~501.base, ~tmp___8~501.offset;
    havoc ~tmp___9~501.base, ~tmp___9~501.offset;
    havoc ~tmp___10~501.base, ~tmp___10~501.offset;
    havoc ~tmp___11~501.base, ~tmp___11~501.offset;
    havoc ~tmp___12~501.base, ~tmp___12~501.offset;
    havoc ~tmp___13~501.base, ~tmp___13~501.offset;
    havoc ~tmp___14~501.base, ~tmp___14~501.offset;
    havoc ~tmp___15~501.base, ~tmp___15~501.offset;
    havoc ~tmp___16~501.base, ~tmp___16~501.offset;
    havoc ~tmp___17~501.base, ~tmp___17~501.offset;
    havoc ~tmp___18~501.base, ~tmp___18~501.offset;
    havoc ~tmp___19~501.base, ~tmp___19~501.offset;
    havoc ~tmp___20~501.base, ~tmp___20~501.offset;
    havoc ~tmp___21~501.base, ~tmp___21~501.offset;
    havoc ~tmp___22~501.base, ~tmp___22~501.offset;
    havoc ~tmp___23~501.base, ~tmp___23~501.offset;
    havoc ~tmp___24~501.base, ~tmp___24~501.offset;
    havoc ~tmp___25~501.base, ~tmp___25~501.offset;
    havoc ~tmp___26~501.base, ~tmp___26~501.offset;
    havoc ~tmp___27~501.base, ~tmp___27~501.offset;
    havoc ~tmp___28~501.base, ~tmp___28~501.offset;
    havoc ~tmp___29~501.base, ~tmp___29~501.offset;
    havoc ~tmp___30~501.base, ~tmp___30~501.offset;
    havoc ~tmp___31~501.base, ~tmp___31~501.offset;
    havoc ~tmp___32~501.base, ~tmp___32~501.offset;
    havoc ~tmp___33~501.base, ~tmp___33~501.offset;
    havoc ~tmp___34~501.base, ~tmp___34~501.offset;
    havoc ~tmp___35~501.base, ~tmp___35~501.offset;
    havoc ~tmp___36~501.base, ~tmp___36~501.offset;
    havoc ~tmp___37~501.base, ~tmp___37~501.offset;
    havoc ~tmp___38~501.base, ~tmp___38~501.offset;
    havoc ~tmp___39~501.base, ~tmp___39~501.offset;
    havoc ~tmp___40~501.base, ~tmp___40~501.offset;
    havoc ~tmp___41~501.base, ~tmp___41~501.offset;
    havoc ~tmp___42~501.base, ~tmp___42~501.offset;
    havoc ~tmp___43~501.base, ~tmp___43~501.offset;
    havoc ~tmp___44~501.base, ~tmp___44~501.offset;
    havoc ~tmp___45~501.base, ~tmp___45~501.offset;
    havoc ~tmp___46~501.base, ~tmp___46~501.offset;
    havoc ~tmp___47~501.base, ~tmp___47~501.offset;
    call #t~ret548.base, #t~ret548.offset := external_allocated_data();
    ~tmp~501.base, ~tmp~501.offset := #t~ret548.base, #t~ret548.offset;
    havoc #t~ret548.base, #t~ret548.offset;
    ~ldv_0_container_struct_i2c_adapter_ptr.base, ~ldv_0_container_struct_i2c_adapter_ptr.offset := ~tmp~501.base, ~tmp~501.offset;
    call #t~ret549.base, #t~ret549.offset := external_allocated_data();
    ~tmp___0~501.base, ~tmp___0~501.offset := #t~ret549.base, #t~ret549.offset;
    havoc #t~ret549.base, #t~ret549.offset;
    ~ldv_0_container_struct_i2c_msg_ptr.base, ~ldv_0_container_struct_i2c_msg_ptr.offset := ~tmp___0~501.base, ~tmp___0~501.offset;
    call #t~ret550.base, #t~ret550.offset := external_allocated_data();
    ~tmp___1~501.base, ~tmp___1~501.offset := #t~ret550.base, #t~ret550.offset;
    havoc #t~ret550.base, #t~ret550.offset;
    ~ldv_1_container_struct_v4l2_ctrl_ptr.base, ~ldv_1_container_struct_v4l2_ctrl_ptr.offset := ~tmp___1~501.base, ~tmp___1~501.offset;
    call #t~ret551.base, #t~ret551.offset := external_allocated_data();
    ~tmp___2~501.base, ~tmp___2~501.offset := #t~ret551.base, #t~ret551.offset;
    havoc #t~ret551.base, #t~ret551.offset;
    ~ldv_2_container_struct_v4l2_ctrl_ptr.base, ~ldv_2_container_struct_v4l2_ctrl_ptr.offset := ~tmp___2~501.base, ~tmp___2~501.offset;
    call #t~ret552.base, #t~ret552.offset := external_allocated_data();
    ~tmp___3~501.base, ~tmp___3~501.offset := #t~ret552.base, #t~ret552.offset;
    havoc #t~ret552.base, #t~ret552.offset;
    ~ldv_3_container_struct_videobuf_buffer_ptr.base, ~ldv_3_container_struct_videobuf_buffer_ptr.offset := ~tmp___3~501.base, ~tmp___3~501.offset;
    call #t~ret553.base, #t~ret553.offset := external_allocated_data();
    ~tmp___4~501.base, ~tmp___4~501.offset := #t~ret553.base, #t~ret553.offset;
    havoc #t~ret553.base, #t~ret553.offset;
    ~ldv_3_container_struct_videobuf_queue_ptr.base, ~ldv_3_container_struct_videobuf_queue_ptr.offset := ~tmp___4~501.base, ~tmp___4~501.offset;
    call #t~ret554.base, #t~ret554.offset := external_allocated_data();
    ~tmp___5~501.base, ~tmp___5~501.offset := #t~ret554.base, #t~ret554.offset;
    havoc #t~ret554.base, #t~ret554.offset;
    ~ldv_3_ldv_param_9_1_default.base, ~ldv_3_ldv_param_9_1_default.offset := ~tmp___5~501.base, ~tmp___5~501.offset;
    call #t~ret555.base, #t~ret555.offset := external_allocated_data();
    ~tmp___6~501.base, ~tmp___6~501.offset := #t~ret555.base, #t~ret555.offset;
    havoc #t~ret555.base, #t~ret555.offset;
    ~ldv_3_ldv_param_9_2_default.base, ~ldv_3_ldv_param_9_2_default.offset := ~tmp___6~501.base, ~tmp___6~501.offset;
    call #t~ret556.base, #t~ret556.offset := external_allocated_data();
    ~tmp___7~501.base, ~tmp___7~501.offset := #t~ret556.base, #t~ret556.offset;
    havoc #t~ret556.base, #t~ret556.offset;
    ~ldv_4_container_timer_list.base, ~ldv_4_container_timer_list.offset := ~tmp___7~501.base, ~tmp___7~501.offset;
    call #t~ret557.base, #t~ret557.offset := external_allocated_data();
    ~tmp___8~501.base, ~tmp___8~501.offset := #t~ret557.base, #t~ret557.offset;
    havoc #t~ret557.base, #t~ret557.offset;
    ~ldv_5_container_timer_list.base, ~ldv_5_container_timer_list.offset := ~tmp___8~501.base, ~tmp___8~501.offset;
    call #t~ret558.base, #t~ret558.offset := external_allocated_data();
    ~tmp___9~501.base, ~tmp___9~501.offset := #t~ret558.base, #t~ret558.offset;
    havoc #t~ret558.base, #t~ret558.offset;
    ~ldv_6_ldv_param_13_1_default.base, ~ldv_6_ldv_param_13_1_default.offset := ~tmp___9~501.base, ~tmp___9~501.offset;
    call #t~ret559.base, #t~ret559.offset := external_allocated_data();
    ~tmp___10~501.base, ~tmp___10~501.offset := #t~ret559.base, #t~ret559.offset;
    havoc #t~ret559.base, #t~ret559.offset;
    ~ldv_6_resource_usb_interface.base, ~ldv_6_resource_usb_interface.offset := ~tmp___10~501.base, ~tmp___10~501.offset;
    call #t~ret560.base, #t~ret560.offset := external_allocated_data();
    ~tmp___11~501.base, ~tmp___11~501.offset := #t~ret560.base, #t~ret560.offset;
    havoc #t~ret560.base, #t~ret560.offset;
    ~ldv_6_usb_device_usb_device.base, ~ldv_6_usb_device_usb_device.offset := ~tmp___11~501.base, ~tmp___11~501.offset;
    call #t~ret561.base, #t~ret561.offset := external_allocated_data();
    ~tmp___12~501.base, ~tmp___12~501.offset := #t~ret561.base, #t~ret561.offset;
    havoc #t~ret561.base, #t~ret561.offset;
    ~ldv_8_callback_mmap.base, ~ldv_8_callback_mmap.offset := ~tmp___12~501.base, ~tmp___12~501.offset;
    call #t~ret562.base, #t~ret562.offset := external_allocated_data();
    ~tmp___13~501.base, ~tmp___13~501.offset := #t~ret562.base, #t~ret562.offset;
    havoc #t~ret562.base, #t~ret562.offset;
    ~ldv_8_callback_read.base, ~ldv_8_callback_read.offset := ~tmp___13~501.base, ~tmp___13~501.offset;
    call #t~ret563.base, #t~ret563.offset := external_allocated_data();
    ~tmp___14~501.base, ~tmp___14~501.offset := #t~ret563.base, #t~ret563.offset;
    havoc #t~ret563.base, #t~ret563.offset;
    ~ldv_8_ldv_param_19_1_default.base, ~ldv_8_ldv_param_19_1_default.offset := ~tmp___14~501.base, ~tmp___14~501.offset;
    call #t~ret564.base, #t~ret564.offset := external_allocated_data();
    ~tmp___15~501.base, ~tmp___15~501.offset := #t~ret564.base, #t~ret564.offset;
    havoc #t~ret564.base, #t~ret564.offset;
    ~ldv_8_ldv_param_19_3_default.base, ~ldv_8_ldv_param_19_3_default.offset := ~tmp___15~501.base, ~tmp___15~501.offset;
    call #t~ret565.base, #t~ret565.offset := external_allocated_data();
    ~tmp___16~501.base, ~tmp___16~501.offset := #t~ret565.base, #t~ret565.offset;
    havoc #t~ret565.base, #t~ret565.offset;
    ~ldv_8_ldv_param_30_2_default.base, ~ldv_8_ldv_param_30_2_default.offset := ~tmp___16~501.base, ~tmp___16~501.offset;
    call #t~ret566.base, #t~ret566.offset := external_allocated_data();
    ~tmp___17~501.base, ~tmp___17~501.offset := #t~ret566.base, #t~ret566.offset;
    havoc #t~ret566.base, #t~ret566.offset;
    ~ldv_8_ldv_param_33_2_default.base, ~ldv_8_ldv_param_33_2_default.offset := ~tmp___17~501.base, ~tmp___17~501.offset;
    call #t~ret567.base, #t~ret567.offset := external_allocated_data();
    ~tmp___18~501.base, ~tmp___18~501.offset := #t~ret567.base, #t~ret567.offset;
    havoc #t~ret567.base, #t~ret567.offset;
    ~ldv_8_resource_file.base, ~ldv_8_resource_file.offset := ~tmp___18~501.base, ~tmp___18~501.offset;
    call #t~ret568.base, #t~ret568.offset := external_allocated_data();
    ~tmp___19~501.base, ~tmp___19~501.offset := #t~ret568.base, #t~ret568.offset;
    havoc #t~ret568.base, #t~ret568.offset;
    ~ldv_8_resource_struct_poll_table_struct_ptr.base, ~ldv_8_resource_struct_poll_table_struct_ptr.offset := ~tmp___19~501.base, ~tmp___19~501.offset;
    call #t~ret569.base, #t~ret569.offset := external_allocated_data();
    ~tmp___20~501.base, ~tmp___20~501.offset := #t~ret569.base, #t~ret569.offset;
    havoc #t~ret569.base, #t~ret569.offset;
    ~ldv_8_resource_struct_v4l2_buffer_ptr.base, ~ldv_8_resource_struct_v4l2_buffer_ptr.offset := ~tmp___20~501.base, ~tmp___20~501.offset;
    call #t~ret570.base, #t~ret570.offset := external_allocated_data();
    ~tmp___21~501.base, ~tmp___21~501.offset := #t~ret570.base, #t~ret570.offset;
    havoc #t~ret570.base, #t~ret570.offset;
    ~ldv_8_resource_struct_v4l2_capability_ptr.base, ~ldv_8_resource_struct_v4l2_capability_ptr.offset := ~tmp___21~501.base, ~tmp___21~501.offset;
    call #t~ret571.base, #t~ret571.offset := external_allocated_data();
    ~tmp___22~501.base, ~tmp___22~501.offset := #t~ret571.base, #t~ret571.offset;
    havoc #t~ret571.base, #t~ret571.offset;
    ~ldv_8_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_8_resource_struct_v4l2_event_subscription_ptr.offset := ~tmp___22~501.base, ~tmp___22~501.offset;
    call #t~ret572.base, #t~ret572.offset := external_allocated_data();
    ~tmp___23~501.base, ~tmp___23~501.offset := #t~ret572.base, #t~ret572.offset;
    havoc #t~ret572.base, #t~ret572.offset;
    ~ldv_8_resource_struct_v4l2_fh_ptr.base, ~ldv_8_resource_struct_v4l2_fh_ptr.offset := ~tmp___23~501.base, ~tmp___23~501.offset;
    call #t~ret573.base, #t~ret573.offset := external_allocated_data();
    ~tmp___24~501.base, ~tmp___24~501.offset := #t~ret573.base, #t~ret573.offset;
    havoc #t~ret573.base, #t~ret573.offset;
    ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.offset := ~tmp___24~501.base, ~tmp___24~501.offset;
    call #t~ret574.base, #t~ret574.offset := external_allocated_data();
    ~tmp___25~501.base, ~tmp___25~501.offset := #t~ret574.base, #t~ret574.offset;
    havoc #t~ret574.base, #t~ret574.offset;
    ~ldv_8_resource_struct_v4l2_format_ptr.base, ~ldv_8_resource_struct_v4l2_format_ptr.offset := ~tmp___25~501.base, ~tmp___25~501.offset;
    call #t~ret575.base, #t~ret575.offset := external_allocated_data();
    ~tmp___26~501.base, ~tmp___26~501.offset := #t~ret575.base, #t~ret575.offset;
    havoc #t~ret575.base, #t~ret575.offset;
    ~ldv_8_resource_struct_v4l2_frequency_ptr.base, ~ldv_8_resource_struct_v4l2_frequency_ptr.offset := ~tmp___26~501.base, ~tmp___26~501.offset;
    call #t~ret576.base, #t~ret576.offset := external_allocated_data();
    ~tmp___27~501.base, ~tmp___27~501.offset := #t~ret576.base, #t~ret576.offset;
    havoc #t~ret576.base, #t~ret576.offset;
    ~ldv_8_resource_struct_v4l2_input_ptr.base, ~ldv_8_resource_struct_v4l2_input_ptr.offset := ~tmp___27~501.base, ~tmp___27~501.offset;
    call #t~ret577.base, #t~ret577.offset := external_allocated_data();
    ~tmp___28~501.base, ~tmp___28~501.offset := #t~ret577.base, #t~ret577.offset;
    havoc #t~ret577.base, #t~ret577.offset;
    ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.offset := ~tmp___28~501.base, ~tmp___28~501.offset;
    call #t~ret578.base, #t~ret578.offset := external_allocated_data();
    ~tmp___29~501.base, ~tmp___29~501.offset := #t~ret578.base, #t~ret578.offset;
    havoc #t~ret578.base, #t~ret578.offset;
    ~ldv_8_resource_struct_v4l2_tuner_ptr.base, ~ldv_8_resource_struct_v4l2_tuner_ptr.offset := ~tmp___29~501.base, ~tmp___29~501.offset;
    call #t~ret579.base, #t~ret579.offset := external_allocated_data();
    ~tmp___30~501.base, ~tmp___30~501.offset := #t~ret579.base, #t~ret579.offset;
    havoc #t~ret579.base, #t~ret579.offset;
    ~ldv_8_resource_struct_vm_area_struct_ptr.base, ~ldv_8_resource_struct_vm_area_struct_ptr.offset := ~tmp___30~501.base, ~tmp___30~501.offset;
    call #t~ret580.base, #t~ret580.offset := external_allocated_data();
    ~tmp___31~501.base, ~tmp___31~501.offset := #t~ret580.base, #t~ret580.offset;
    havoc #t~ret580.base, #t~ret580.offset;
    ~ldv_9_ldv_param_19_1_default.base, ~ldv_9_ldv_param_19_1_default.offset := ~tmp___31~501.base, ~tmp___31~501.offset;
    call #t~ret581.base, #t~ret581.offset := external_allocated_data();
    ~tmp___32~501.base, ~tmp___32~501.offset := #t~ret581.base, #t~ret581.offset;
    havoc #t~ret581.base, #t~ret581.offset;
    ~ldv_9_ldv_param_19_3_default.base, ~ldv_9_ldv_param_19_3_default.offset := ~tmp___32~501.base, ~tmp___32~501.offset;
    call #t~ret582.base, #t~ret582.offset := external_allocated_data();
    ~tmp___33~501.base, ~tmp___33~501.offset := #t~ret582.base, #t~ret582.offset;
    havoc #t~ret582.base, #t~ret582.offset;
    ~ldv_9_ldv_param_30_2_default.base, ~ldv_9_ldv_param_30_2_default.offset := ~tmp___33~501.base, ~tmp___33~501.offset;
    call #t~ret583.base, #t~ret583.offset := external_allocated_data();
    ~tmp___34~501.base, ~tmp___34~501.offset := #t~ret583.base, #t~ret583.offset;
    havoc #t~ret583.base, #t~ret583.offset;
    ~ldv_9_ldv_param_33_2_default.base, ~ldv_9_ldv_param_33_2_default.offset := ~tmp___34~501.base, ~tmp___34~501.offset;
    call #t~ret584.base, #t~ret584.offset := external_allocated_data();
    ~tmp___35~501.base, ~tmp___35~501.offset := #t~ret584.base, #t~ret584.offset;
    havoc #t~ret584.base, #t~ret584.offset;
    ~ldv_9_resource_file.base, ~ldv_9_resource_file.offset := ~tmp___35~501.base, ~tmp___35~501.offset;
    call #t~ret585.base, #t~ret585.offset := external_allocated_data();
    ~tmp___36~501.base, ~tmp___36~501.offset := #t~ret585.base, #t~ret585.offset;
    havoc #t~ret585.base, #t~ret585.offset;
    ~ldv_9_resource_struct_poll_table_struct_ptr.base, ~ldv_9_resource_struct_poll_table_struct_ptr.offset := ~tmp___36~501.base, ~tmp___36~501.offset;
    call #t~ret586.base, #t~ret586.offset := external_allocated_data();
    ~tmp___37~501.base, ~tmp___37~501.offset := #t~ret586.base, #t~ret586.offset;
    havoc #t~ret586.base, #t~ret586.offset;
    ~ldv_9_resource_struct_v4l2_buffer_ptr.base, ~ldv_9_resource_struct_v4l2_buffer_ptr.offset := ~tmp___37~501.base, ~tmp___37~501.offset;
    call #t~ret587.base, #t~ret587.offset := external_allocated_data();
    ~tmp___38~501.base, ~tmp___38~501.offset := #t~ret587.base, #t~ret587.offset;
    havoc #t~ret587.base, #t~ret587.offset;
    ~ldv_9_resource_struct_v4l2_capability_ptr.base, ~ldv_9_resource_struct_v4l2_capability_ptr.offset := ~tmp___38~501.base, ~tmp___38~501.offset;
    call #t~ret588.base, #t~ret588.offset := external_allocated_data();
    ~tmp___39~501.base, ~tmp___39~501.offset := #t~ret588.base, #t~ret588.offset;
    havoc #t~ret588.base, #t~ret588.offset;
    ~ldv_9_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_9_resource_struct_v4l2_event_subscription_ptr.offset := ~tmp___39~501.base, ~tmp___39~501.offset;
    call #t~ret589.base, #t~ret589.offset := external_allocated_data();
    ~tmp___40~501.base, ~tmp___40~501.offset := #t~ret589.base, #t~ret589.offset;
    havoc #t~ret589.base, #t~ret589.offset;
    ~ldv_9_resource_struct_v4l2_fh_ptr.base, ~ldv_9_resource_struct_v4l2_fh_ptr.offset := ~tmp___40~501.base, ~tmp___40~501.offset;
    call #t~ret590.base, #t~ret590.offset := external_allocated_data();
    ~tmp___41~501.base, ~tmp___41~501.offset := #t~ret590.base, #t~ret590.offset;
    havoc #t~ret590.base, #t~ret590.offset;
    ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.offset := ~tmp___41~501.base, ~tmp___41~501.offset;
    call #t~ret591.base, #t~ret591.offset := external_allocated_data();
    ~tmp___42~501.base, ~tmp___42~501.offset := #t~ret591.base, #t~ret591.offset;
    havoc #t~ret591.base, #t~ret591.offset;
    ~ldv_9_resource_struct_v4l2_format_ptr.base, ~ldv_9_resource_struct_v4l2_format_ptr.offset := ~tmp___42~501.base, ~tmp___42~501.offset;
    call #t~ret592.base, #t~ret592.offset := external_allocated_data();
    ~tmp___43~501.base, ~tmp___43~501.offset := #t~ret592.base, #t~ret592.offset;
    havoc #t~ret592.base, #t~ret592.offset;
    ~ldv_9_resource_struct_v4l2_frequency_ptr.base, ~ldv_9_resource_struct_v4l2_frequency_ptr.offset := ~tmp___43~501.base, ~tmp___43~501.offset;
    call #t~ret593.base, #t~ret593.offset := external_allocated_data();
    ~tmp___44~501.base, ~tmp___44~501.offset := #t~ret593.base, #t~ret593.offset;
    havoc #t~ret593.base, #t~ret593.offset;
    ~ldv_9_resource_struct_v4l2_input_ptr.base, ~ldv_9_resource_struct_v4l2_input_ptr.offset := ~tmp___44~501.base, ~tmp___44~501.offset;
    call #t~ret594.base, #t~ret594.offset := external_allocated_data();
    ~tmp___45~501.base, ~tmp___45~501.offset := #t~ret594.base, #t~ret594.offset;
    havoc #t~ret594.base, #t~ret594.offset;
    ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.offset := ~tmp___45~501.base, ~tmp___45~501.offset;
    call #t~ret595.base, #t~ret595.offset := external_allocated_data();
    ~tmp___46~501.base, ~tmp___46~501.offset := #t~ret595.base, #t~ret595.offset;
    havoc #t~ret595.base, #t~ret595.offset;
    ~ldv_9_resource_struct_v4l2_tuner_ptr.base, ~ldv_9_resource_struct_v4l2_tuner_ptr.offset := ~tmp___46~501.base, ~tmp___46~501.offset;
    call #t~ret596.base, #t~ret596.offset := external_allocated_data();
    ~tmp___47~501.base, ~tmp___47~501.offset := #t~ret596.base, #t~ret596.offset;
    havoc #t~ret596.base, #t~ret596.offset;
    ~ldv_9_resource_struct_vm_area_struct_ptr.base, ~ldv_9_resource_struct_vm_area_struct_ptr.offset := ~tmp___47~501.base, ~tmp___47~501.offset;
    assume true;
    return;
}

procedure ldv_allocate_external_0() returns ();
modifies ~ldv_0_container_struct_i2c_adapter_ptr.base, ~ldv_0_container_struct_i2c_adapter_ptr.offset, ~ldv_0_container_struct_i2c_msg_ptr.base, ~ldv_0_container_struct_i2c_msg_ptr.offset, ~ldv_1_container_struct_v4l2_ctrl_ptr.base, ~ldv_1_container_struct_v4l2_ctrl_ptr.offset, ~ldv_2_container_struct_v4l2_ctrl_ptr.base, ~ldv_2_container_struct_v4l2_ctrl_ptr.offset, ~ldv_3_container_struct_videobuf_buffer_ptr.base, ~ldv_3_container_struct_videobuf_buffer_ptr.offset, ~ldv_3_container_struct_videobuf_queue_ptr.base, ~ldv_3_container_struct_videobuf_queue_ptr.offset, ~ldv_3_ldv_param_9_1_default.base, ~ldv_3_ldv_param_9_1_default.offset, ~ldv_3_ldv_param_9_2_default.base, ~ldv_3_ldv_param_9_2_default.offset, ~ldv_4_container_timer_list.base, ~ldv_4_container_timer_list.offset, ~ldv_5_container_timer_list.base, ~ldv_5_container_timer_list.offset, ~ldv_6_ldv_param_13_1_default.base, ~ldv_6_ldv_param_13_1_default.offset, ~ldv_6_resource_usb_interface.base, ~ldv_6_resource_usb_interface.offset, ~ldv_6_usb_device_usb_device.base, ~ldv_6_usb_device_usb_device.offset, ~ldv_8_callback_mmap.base, ~ldv_8_callback_mmap.offset, ~ldv_8_callback_read.base, ~ldv_8_callback_read.offset, ~ldv_8_ldv_param_19_1_default.base, ~ldv_8_ldv_param_19_1_default.offset, ~ldv_8_ldv_param_19_3_default.base, ~ldv_8_ldv_param_19_3_default.offset, ~ldv_8_ldv_param_30_2_default.base, ~ldv_8_ldv_param_30_2_default.offset, ~ldv_8_ldv_param_33_2_default.base, ~ldv_8_ldv_param_33_2_default.offset, ~ldv_8_resource_file.base, ~ldv_8_resource_file.offset, ~ldv_8_resource_struct_poll_table_struct_ptr.base, ~ldv_8_resource_struct_poll_table_struct_ptr.offset, ~ldv_8_resource_struct_v4l2_buffer_ptr.base, ~ldv_8_resource_struct_v4l2_buffer_ptr.offset, ~ldv_8_resource_struct_v4l2_capability_ptr.base, ~ldv_8_resource_struct_v4l2_capability_ptr.offset, ~ldv_8_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_8_resource_struct_v4l2_event_subscription_ptr.offset, ~ldv_8_resource_struct_v4l2_fh_ptr.base, ~ldv_8_resource_struct_v4l2_fh_ptr.offset, ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_8_resource_struct_v4l2_fmtdesc_ptr.offset, ~ldv_8_resource_struct_v4l2_format_ptr.base, ~ldv_8_resource_struct_v4l2_format_ptr.offset, ~ldv_8_resource_struct_v4l2_frequency_ptr.base, ~ldv_8_resource_struct_v4l2_frequency_ptr.offset, ~ldv_8_resource_struct_v4l2_input_ptr.base, ~ldv_8_resource_struct_v4l2_input_ptr.offset, ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_8_resource_struct_v4l2_requestbuffers_ptr.offset, ~ldv_8_resource_struct_v4l2_tuner_ptr.base, ~ldv_8_resource_struct_v4l2_tuner_ptr.offset, ~ldv_8_resource_struct_vm_area_struct_ptr.base, ~ldv_8_resource_struct_vm_area_struct_ptr.offset, ~ldv_9_ldv_param_19_1_default.base, ~ldv_9_ldv_param_19_1_default.offset, ~ldv_9_ldv_param_19_3_default.base, ~ldv_9_ldv_param_19_3_default.offset, ~ldv_9_ldv_param_30_2_default.base, ~ldv_9_ldv_param_30_2_default.offset, ~ldv_9_ldv_param_33_2_default.base, ~ldv_9_ldv_param_33_2_default.offset, ~ldv_9_resource_file.base, ~ldv_9_resource_file.offset, ~ldv_9_resource_struct_poll_table_struct_ptr.base, ~ldv_9_resource_struct_poll_table_struct_ptr.offset, ~ldv_9_resource_struct_v4l2_buffer_ptr.base, ~ldv_9_resource_struct_v4l2_buffer_ptr.offset, ~ldv_9_resource_struct_v4l2_capability_ptr.base, ~ldv_9_resource_struct_v4l2_capability_ptr.offset, ~ldv_9_resource_struct_v4l2_event_subscription_ptr.base, ~ldv_9_resource_struct_v4l2_event_subscription_ptr.offset, ~ldv_9_resource_struct_v4l2_fh_ptr.base, ~ldv_9_resource_struct_v4l2_fh_ptr.offset, ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.base, ~ldv_9_resource_struct_v4l2_fmtdesc_ptr.offset, ~ldv_9_resource_struct_v4l2_format_ptr.base, ~ldv_9_resource_struct_v4l2_format_ptr.offset, ~ldv_9_resource_struct_v4l2_frequency_ptr.base, ~ldv_9_resource_struct_v4l2_frequency_ptr.offset, ~ldv_9_resource_struct_v4l2_input_ptr.base, ~ldv_9_resource_struct_v4l2_input_ptr.offset, ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.base, ~ldv_9_resource_struct_v4l2_requestbuffers_ptr.offset, ~ldv_9_resource_struct_v4l2_tuner_ptr.base, ~ldv_9_resource_struct_v4l2_tuner_ptr.offset, ~ldv_9_resource_struct_vm_area_struct_ptr.base, ~ldv_9_resource_struct_vm_area_struct_ptr.offset;

implementation preempt_count() returns (#res : int){
    var ~pfo_ret__~1482 : int;

  loc17:
    havoc ~pfo_ret__~1482;
    assume !false;
    assume !false;
    assume true;
    #res := ~bitwiseAnd(~pfo_ret__~1482, 2147483647);
    assume true;
    return;
}

procedure preempt_count() returns (#res : int);
modifies ;

procedure videobuf_streamoff(#in~1165.base : int, #in~1165.offset : int) returns (#res : int);
modifies ;

procedure usb_submit_urb(#in~1094.base : int, #in~1094.offset : int, #in~1095 : int) returns (#res : int);
modifies ;

procedure videobuf_reqbufs(#in~1155.base : int, #in~1155.offset : int, #in~1156.base : int, #in~1156.offset : int) returns (#res : int);
modifies ;

procedure usb_put_dev(#in~44.base : int, #in~44.offset : int) returns ();
modifies ;

procedure usb_get_dev(#in~43.base : int, #in~43.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure usleep_range(#in~664 : int, #in~665 : int) returns ();
modifies ;

procedure rc_allocate_device() returns (#res.base : int, #res.offset : int);
modifies ;

procedure rc_keydown(#in~3413.base : int, #in~3413.offset : int, #in~3414 : int, #in~3415 : int) returns ();
modifies ;

procedure v4l2_device_unregister(#in~62.base : int, #in~62.offset : int) returns ();
modifies ;

procedure v4l2_fh_exit(#in~1193.base : int, #in~1193.offset : int) returns ();
modifies ;

procedure ldv_pre_usb_register_driver() returns (#res : int);
modifies ;

procedure memcpy(#in~661.base : int, #in~661.offset : int, #in~662.base : int, #in~662.offset : int, #in~663 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure i2c_add_adapter(#in~942.base : int, #in~942.offset : int) returns (#res : int);
modifies ;

procedure rc_unregister_device(#in~3412.base : int, #in~3412.offset : int) returns ();
modifies ;

procedure __request_module(#in~52 : int, #in~53.base : int, #in~53.offset : int) returns (#res : int);
modifies ;

procedure memcmp(#in~15.base : int, #in~15.offset : int, #in~16.base : int, #in~16.offset : int, #in~17 : int) returns (#res : int);
modifies ;

procedure usb_free_coherent(#in~1102.base : int, #in~1102.offset : int, #in~1103 : int, #in~1104.base : int, #in~1104.offset : int, #in~1105 : int) returns ();
modifies ;

procedure v4l2_ctrl_handler_free(#in~1198.base : int, #in~1198.offset : int) returns ();
modifies ;

procedure videobuf_to_vmalloc(#in~1187.base : int, #in~1187.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure strlcpy(#in~938.base : int, #in~938.offset : int, #in~939.base : int, #in~939.offset : int, #in~940 : int) returns (#res : int);
modifies ;

procedure v4l2_fh_init(#in~1189.base : int, #in~1189.offset : int, #in~1190.base : int, #in~1190.offset : int) returns ();
modifies ;

procedure v4l2_ctrl_new_std(#in~1199.base : int, #in~1199.offset : int, #in~1200.base : int, #in~1200.offset : int, #in~1201 : int, #in~1202 : int, #in~1203 : int, #in~1204 : int, #in~1205 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure v4l2_ctrl_poll(#in~1211.base : int, #in~1211.offset : int, #in~1212.base : int, #in~1212.offset : int) returns (#res : int);
modifies ;

procedure video_devdata(#in~1146.base : int, #in~1146.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure ULTIMATE.dealloc(~addr.base : int, ~addr.offset : int) returns ();
free ensures #valid == old(#valid)[~addr.base := 0];
modifies #valid;

procedure videobuf_dqbuf(#in~1161.base : int, #in~1161.offset : int, #in~1162.base : int, #in~1162.offset : int, #in~1163 : int) returns (#res : int);
modifies ;

procedure list_del(#in~659.base : int, #in~659.offset : int) returns ();
modifies ;

procedure rc_register_device(#in~3411.base : int, #in~3411.offset : int) returns (#res : int);
modifies ;

procedure v4l2_ctrl_add_handler(#in~1206.base : int, #in~1206.offset : int, #in~1207.base : int, #in~1207.offset : int, #in~1208.base : int, #in~1208.offset : int) returns (#res : int);
modifies ;

procedure __raw_spin_lock_init(#in~22.base : int, #in~22.offset : int, #in~23.base : int, #in~23.offset : int, #in~24.base : int, #in~24.offset : int) returns ();
modifies ;

procedure video_ioctl2(#in~1128.base : int, #in~1128.offset : int, #in~1129 : int, #in~1130 : int) returns (#res : int);
modifies ;

procedure flush_work(#in~31.base : int, #in~31.offset : int) returns (#res : ~bool);
modifies ;

procedure videobuf_qbuf(#in~1159.base : int, #in~1159.offset : int, #in~1160.base : int, #in~1160.offset : int) returns (#res : int);
modifies ;

procedure #Ultimate.alloc(~size : int) returns (#res.base : int, #res.offset : int);
ensures old(#valid)[#res.base] == 0;
ensures #valid == old(#valid)[#res.base := 1];
ensures #res.offset == 0;
ensures #res.base != 0;
ensures #length == old(#length)[#res.base := ~size];
modifies #valid, #length;

procedure read~int(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value : int);
ensures #value == #memory_int[#ptr.base,#ptr.offset];

procedure ldv_initialize() returns ();
modifies ;

procedure ldv_after_alloc(#in~3653.base : int, #in~3653.offset : int) returns ();
modifies ;

procedure ldv_switch_to_interrupt_context() returns ();
modifies ;

procedure usb_kill_urb(#in~1097.base : int, #in~1097.offset : int) returns ();
modifies ;

procedure ldv_check_alloc_flags(#in~3652 : int) returns ();
modifies ;

procedure print_hex_dump(#in~3372.base : int, #in~3372.offset : int, #in~3373.base : int, #in~3373.offset : int, #in~3374 : int, #in~3375 : int, #in~3376 : int, #in~3377.base : int, #in~3377.offset : int, #in~3378 : int, #in~3379 : int) returns ();
modifies ;

procedure v4l2_ctrl_subscribe_event(#in~1209.base : int, #in~1209.offset : int, #in~1210.base : int, #in~1210.offset : int) returns (#res : int);
modifies ;

procedure malloc(#in~3655 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure video_unregister_device(#in~1142.base : int, #in~1142.offset : int) returns ();
modifies ;

procedure __list_add(#in~655.base : int, #in~655.offset : int, #in~656.base : int, #in~656.offset : int, #in~657.base : int, #in~657.offset : int) returns ();
modifies ;

procedure write~$Pointer$(#value.base : int, #value.offset : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #memory_int[#ptr.base,#ptr.offset]];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #value.base] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #value.offset];

procedure __bad_percpu_size() returns ();
modifies ;

procedure _raw_spin_unlock_irqrestore(#in~1066.base : int, #in~1066.offset : int, #in~1067 : int) returns ();
modifies ;

procedure usb_control_msg(#in~666.base : int, #in~666.offset : int, #in~667 : int, #in~668 : int, #in~669 : int, #in~670 : int, #in~671 : int, #in~672.base : int, #in~672.offset : int, #in~673 : int, #in~674 : int) returns (#res : int);
modifies ;

procedure usb_register_driver(#in~45.base : int, #in~45.offset : int, #in~46.base : int, #in~46.offset : int, #in~47.base : int, #in~47.offset : int) returns (#res : int);
modifies ;

procedure usb_free_urb(#in~1093.base : int, #in~1093.offset : int) returns ();
modifies ;

procedure memset(#in~12.base : int, #in~12.offset : int, #in~13 : int, #in~14 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure videobuf_streamon(#in~1164.base : int, #in~1164.offset : int) returns (#res : int);
modifies ;

procedure __ldv_spin_lock(#in~1063.base : int, #in~1063.offset : int) returns ();
modifies ;

procedure __init_work(#in~26.base : int, #in~26.offset : int, #in~27 : int) returns ();
modifies ;

procedure videobuf_iolock(#in~1152.base : int, #in~1152.offset : int, #in~1153.base : int, #in~1153.offset : int, #in~1154.base : int, #in~1154.offset : int) returns (#res : int);
modifies ;

procedure warn_slowpath_null(#in~1061.base : int, #in~1061.offset : int, #in~1062 : int) returns ();
modifies ;

procedure v4l2_get_timestamp(#in~1151.base : int, #in~1151.offset : int) returns ();
modifies ;

procedure i2c_del_adapter(#in~943.base : int, #in~943.offset : int) returns ();
modifies ;

procedure __init_waitqueue_head(#in~1069.base : int, #in~1069.offset : int, #in~1070.base : int, #in~1070.offset : int, #in~1071.base : int, #in~1071.offset : int) returns ();
modifies ;

procedure v4l2_event_unsubscribe(#in~1132.base : int, #in~1132.offset : int, #in~1133.base : int, #in~1133.offset : int) returns (#res : int);
modifies ;

procedure v4l2_ctrl_handler_init_class(#in~1194.base : int, #in~1194.offset : int, #in~1195 : int, #in~1196.base : int, #in~1196.offset : int, #in~1197.base : int, #in~1197.offset : int) returns (#res : int);
modifies ;

procedure _raw_spin_lock(#in~1064.base : int, #in~1064.offset : int) returns ();
modifies ;

procedure video_device_alloc() returns (#res.base : int, #res.offset : int);
modifies ;

procedure msleep(#in~25 : int) returns ();
modifies ;

procedure v4l2_i2c_new_subdev(#in~55.base : int, #in~55.offset : int, #in~56.base : int, #in~56.offset : int, #in~57.base : int, #in~57.offset : int, #in~58 : int, #in~59.base : int, #in~59.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure cancel_delayed_work_sync(#in~3393.base : int, #in~3393.offset : int) returns (#res : ~bool);
modifies ;

procedure usb_set_interface(#in~49.base : int, #in~49.offset : int, #in~50 : int, #in~51 : int) returns (#res : int);
modifies ;

procedure video_device_release(#in~1143.base : int, #in~1143.offset : int) returns ();
modifies ;

procedure videobuf_mmap_mapper(#in~1176.base : int, #in~1176.offset : int, #in~1177.base : int, #in~1177.offset : int) returns (#res : int);
modifies ;

procedure mutex_lock_interruptible_nested(#in~1076.base : int, #in~1076.offset : int, #in~1077 : int) returns (#res : int);
modifies ;

procedure ldv_switch_to_process_context() returns ();
modifies ;

procedure strlcat(#in~3380.base : int, #in~3380.offset : int, #in~3381.base : int, #in~3381.offset : int, #in~3382 : int) returns (#res : int);
modifies ;

procedure mutex_unlock(#in~39.base : int, #in~39.offset : int) returns ();
modifies ;

procedure queue_delayed_work_on(#in~3389 : int, #in~3390.base : int, #in~3390.offset : int, #in~3391.base : int, #in~3391.offset : int, #in~3392 : int) returns (#res : ~bool);
modifies ;

procedure videobuf_mmap_free(#in~1175.base : int, #in~1175.offset : int) returns (#res : int);
modifies ;

procedure usb_reset_configuration(#in~1106.base : int, #in~1106.offset : int) returns (#res : int);
modifies ;

procedure C.free(#in~3658.base : int, #in~3658.offset : int) returns ();
modifies ;

procedure __kmalloc(#in~1116 : int, #in~1117 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure usb_unlink_urb(#in~1096.base : int, #in~1096.offset : int) returns (#res : int);
modifies ;

procedure videobuf_read_stream(#in~1166.base : int, #in~1166.offset : int, #in~1167.base : int, #in~1167.offset : int, #in~1168 : int, #in~1169.base : int, #in~1169.offset : int, #in~1170 : int, #in~1171 : int) returns (#res : int);
modifies ;

procedure rc_free_device(#in~3410.base : int, #in~3410.offset : int) returns ();
modifies ;

procedure read~$Pointer$(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value.base : int, #value.offset : int);
ensures #value.base == #memory_$Pointer$.base[#ptr.base,#ptr.offset] && #value.offset == #memory_$Pointer$.offset[#ptr.base,#ptr.offset];

procedure _raw_spin_unlock(#in~1065.base : int, #in~1065.offset : int) returns ();
modifies ;

procedure printk(#in~8.base : int, #in~8.offset : int) returns (#res : int);
modifies ;

procedure calloc(#in~3656 : int, #in~3657 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure ldv_pre_probe() returns ();
modifies ;

procedure __mutex_init(#in~34.base : int, #in~34.offset : int, #in~35.base : int, #in~35.offset : int, #in~36.base : int, #in~36.offset : int) returns ();
modifies ;

procedure queue_work_on(#in~28 : int, #in~29.base : int, #in~29.offset : int, #in~30.base : int, #in~30.offset : int) returns (#res : ~bool);
modifies ;

procedure mutex_lock_nested(#in~37.base : int, #in~37.offset : int, #in~38 : int) returns ();
modifies ;

procedure lockdep_init_map(#in~18.base : int, #in~18.offset : int, #in~19.base : int, #in~19.offset : int, #in~20.base : int, #in~20.offset : int, #in~21 : int) returns ();
modifies ;

procedure usb_alloc_urb(#in~1091 : int, #in~1092 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __VERIFIER_nondet_int() returns (#res : int);
modifies ;

procedure strcpy(#in~1059.base : int, #in~1059.offset : int, #in~1060.base : int, #in~1060.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure videobuf_vmalloc_free(#in~1188.base : int, #in~1188.offset : int) returns ();
modifies ;

procedure ULTIMATE.free(~addr.base : int, ~addr.offset : int) returns ();
free requires ~addr.offset == 0;
free requires ~addr.base == 0 || #valid[~addr.base] == 1;
free ensures (if ~addr.base == 0 then #valid == old(#valid) else #valid == old(#valid)[~addr.base := 0]);
modifies #valid;

procedure videobuf_poll_stream(#in~1172.base : int, #in~1172.offset : int, #in~1173.base : int, #in~1173.offset : int, #in~1174.base : int, #in~1174.offset : int) returns (#res : int);
modifies ;

procedure usb_deregister(#in~48.base : int, #in~48.offset : int) returns ();
modifies ;

procedure videobuf_querybuf(#in~1157.base : int, #in~1157.offset : int, #in~1158.base : int, #in~1158.offset : int) returns (#res : int);
modifies ;

procedure v4l2_device_register(#in~60.base : int, #in~60.offset : int, #in~61.base : int, #in~61.offset : int) returns (#res : int);
modifies ;

procedure kfree(#in~54.base : int, #in~54.offset : int) returns ();
modifies ;

procedure write~int(#value : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #value];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset]] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #memory_$Pointer$.offset[#ptr.base,#ptr.offset]];

procedure __VERIFIER_error() returns ();
modifies ;

procedure find_first_zero_bit(#in~6.base : int, #in~6.offset : int, #in~7 : int) returns (#res : int);
modifies ;

procedure v4l2_fh_add(#in~1191.base : int, #in~1191.offset : int) returns ();
modifies ;

procedure __video_register_device(#in~1134.base : int, #in~1134.offset : int, #in~1135 : int, #in~1136 : int, #in~1137 : int, #in~1138.base : int, #in~1138.offset : int) returns (#res : int);
modifies ;

procedure v4l2_event_pending(#in~1131.base : int, #in~1131.offset : int) returns (#res : int);
modifies ;

procedure usb_alloc_coherent(#in~1098.base : int, #in~1098.offset : int, #in~1099 : int, #in~1100 : int, #in~1101.base : int, #in~1101.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __wake_up(#in~1072.base : int, #in~1072.offset : int, #in~1073 : int, #in~1074 : int, #in~1075.base : int, #in~1075.offset : int) returns ();
modifies ;

procedure videobuf_queue_vmalloc_init(#in~1178.base : int, #in~1178.offset : int, #in~1179.base : int, #in~1179.offset : int, #in~1180.base : int, #in~1180.offset : int, #in~1181.base : int, #in~1181.offset : int, #in~1182 : int, #in~1183 : int, #in~1184 : int, #in~1185.base : int, #in~1185.offset : int, #in~1186.base : int, #in~1186.offset : int) returns ();
modifies ;

procedure init_timer_key(#in~3384.base : int, #in~3384.offset : int, #in~3385 : int, #in~3386.base : int, #in~3386.offset : int, #in~3387.base : int, #in~3387.offset : int) returns ();
modifies ;

procedure msecs_to_jiffies(#in~3383 : int) returns (#res : int);
modifies ;

procedure snprintf(#in~9.base : int, #in~9.offset : int, #in~10 : int, #in~11.base : int, #in~11.offset : int) returns (#res : int);
modifies ;

procedure external_allocated_data() returns (#res.base : int, #res.offset : int);
modifies ;

procedure delayed_work_timer_fn(#in~3388 : int) returns ();
modifies ;

procedure v4l2_fh_del(#in~1192.base : int, #in~1192.offset : int) returns ();
modifies ;

