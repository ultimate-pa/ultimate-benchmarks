type STRUCT~compat_timespec;
type STRUCT~pollfd;
type STRUCT~map_segment;
type STRUCT~task_struct;
type STRUCT~tvec_base;
type STRUCT~sysfs_dirent;
type STRUCT~sock;
type STRUCT~module_param_attrs;
type STRUCT~module_sect_attrs;
type STRUCT~module_notes_attrs;
type STRUCT~ftrace_event_call;
type STRUCT~anon_vma;
type STRUCT~mempolicy;
type STRUCT~linux_binfmt;
type STRUCT~mmu_notifier_mm;
type STRUCT~nsproxy;
type STRUCT~bus_type_private;
type STRUCT~driver_private;
type STRUCT~class_private;
type STRUCT~device_private;
type STRUCT~dma_coherent_mem;
type STRUCT~sec_path;
type STRUCT~prot_inuse;
type STRUCT~ipv4_devconf;
type STRUCT~fib_rules_ops;
type STRUCT~xt_table;
type STRUCT~dst_entry;
type STRUCT~ipv6_devconf;
type STRUCT~rt6_info;
type STRUCT~rt6_statistics;
type STRUCT~fib6_table;
type STRUCT~nameidata;
type STRUCT~vfsmount;
type STRUCT~radix_tree_node;
type STRUCT~pid_namespace;
type STRUCT~writeback_control;
type STRUCT~kiocb;
type STRUCT~backing_dev_info;
type STRUCT~hd_struct;
type STRUCT~gendisk;
type STRUCT~pipe_inode_info;
type STRUCT~cdev;
type STRUCT~posix_acl;
type STRUCT~cred;
type STRUCT~files_struct;
type STRUCT~nlm_lockowner;
type STRUCT~nfs4_lock_state;
type STRUCT~export_operations;
type STRUCT~xattr_handler;
type STRUCT~mtd_info;
type STRUCT~poll_table_struct;
type STRUCT~kstatfs;
type STRUCT~seq_file;
type STRUCT~ebt_table;
type STRUCT~ip_conntrack_stat;
type STRUCT~net_generic;
type STRUCT~neighbour;
type STRUCT~Qdisc;
type STRUCT~neigh_parms;
type STRUCT~vlan_group;
type STRUCT~pm_qos_request_list;
type STRUCT~iw_handler_def;
type STRUCT~iw_public_data;
type STRUCT~wireless_dev;
type STRUCT~netpoll_info;
type STRUCT~net_bridge_port;
type STRUCT~macvlan_port;
type STRUCT~garp_port;
type STRUCT~rtnl_link_ops;
type STRUCT~hotplug_slot;
type STRUCT~pci_sriov;
type STRUCT~pcie_link_state;
type STRUCT~pci_vpd;
type STRUCT~pci_ats;
type STRUCT~pcmcia_device;
type STRUCT~sdio_func;
type ~__s8 = int;
type ~__u8 = int;
type ~__s16 = int;
type ~__u16 = int;
type ~__s32 = int;
type ~__u32 = int;
type ~__u64 = int;
type ~s8 = int;
type ~u8 = int;
type ~u16 = int;
type ~s32 = int;
type ~u32 = int;
type ~s64 = int;
type ~u64 = int;
type ~umode_t = int;
type ~__kernel_mode_t = int;
type ~__kernel_nlink_t = int;
type ~__kernel_off_t = int;
type ~__kernel_uid_t = int;
type ~__kernel_gid_t = int;
type ~__kernel_size_t = int;
type ~__kernel_ssize_t = int;
type ~__kernel_time_t = int;
type ~__kernel_clockid_t = int;
type ~__kernel_loff_t = int;
type ~bool = int;
type ~sector_t = int;
type ~blkcnt_t = int;
type ~gfp_t = int;
type ~fmode_t = int;
type ~pgdval_t = int;
type ~pgprotval_t = int;
type ~rwsem_count_t = int;
type ~sa_family_t = int;
type ~sk_buff_data_t = int;
type ~qsize_t = int;
type ~kernel_ulong_t = int;
type ~pci_power_t = int;
type ~pci_channel_state_t = int;
type ~pci_dev_flags_t = int;
type ~pci_bus_flags_t = int;
type ~pci_ers_result_t = int;
type ~ldv_func_ret_type___1 = int;
type ~ldv_func_ret_type___2 = int;
type ~ldv_func_ret_type___3 = int;
type ~ldv_func_ret_type___4 = int;
type ~ldv_func_ret_type___5 = int;
type ~ldv_func_ret_type___6 = int;
type ~dma_addr_t = ~u64;
type ~__kernel_uid32_t = ~__kernel_uid_t;
type ~__kernel_gid32_t = ~__kernel_gid_t;
type ~__kernel_dev_t = ~__u32;
type ~dev_t = ~__kernel_dev_t;
type ~mode_t = ~__kernel_mode_t;
type ~nlink_t = ~__kernel_nlink_t;
type ~off_t = ~__kernel_off_t;
type ~clockid_t = ~__kernel_clockid_t;
type ~uid_t = ~__kernel_uid32_t;
type ~gid_t = ~__kernel_gid32_t;
type ~loff_t = ~__kernel_loff_t;
type ~size_t = ~__kernel_size_t;
type ~ssize_t = ~__kernel_ssize_t;
type ~time_t = ~__kernel_time_t;
type ~__le16 = ~__u16;
type ~__be16 = ~__u16;
type ~__le32 = ~__u32;
type ~__be32 = ~__u32;
type ~__wsum = ~__u32;
type ~phys_addr_t = ~u64;
type ~resource_size_t = ~phys_addr_t;
type ~irqreturn_t = int;
type ~Elf64_Addr = ~__u64;
type ~Elf64_Half = ~__u16;
type ~Elf64_Word = ~__u32;
type ~Elf64_Xword = ~__u64;
type ~dma_cookie_t = ~s32;
type ~qid_t = ~__kernel_uid32_t;
type ~netdev_tx_t = int;
const #funAddr~b44_interrupt.base : int;
const #funAddr~b44_interrupt.offset : int;
const #funAddr~b44_timer.base : int;
const #funAddr~b44_timer.offset : int;
const #funAddr~b44_open.base : int;
const #funAddr~b44_open.offset : int;
const #funAddr~b44_close.base : int;
const #funAddr~b44_close.offset : int;
const #funAddr~b44_start_xmit.base : int;
const #funAddr~b44_start_xmit.offset : int;
const #funAddr~b44_set_rx_mode.base : int;
const #funAddr~b44_set_rx_mode.offset : int;
const #funAddr~b44_set_mac_addr.base : int;
const #funAddr~b44_set_mac_addr.offset : int;
const #funAddr~eth_validate_addr.base : int;
const #funAddr~eth_validate_addr.offset : int;
const #funAddr~b44_ioctl.base : int;
const #funAddr~b44_ioctl.offset : int;
const #funAddr~b44_change_mtu.base : int;
const #funAddr~b44_change_mtu.offset : int;
const #funAddr~b44_tx_timeout.base : int;
const #funAddr~b44_tx_timeout.offset : int;
const #funAddr~b44_get_stats.base : int;
const #funAddr~b44_get_stats.offset : int;
const #funAddr~b44_poll_controller.base : int;
const #funAddr~b44_poll_controller.offset : int;
const #funAddr~b44_poll.base : int;
const #funAddr~b44_poll.offset : int;
const #funAddr~b44_mii_read.base : int;
const #funAddr~b44_mii_read.offset : int;
const #funAddr~b44_mii_write.base : int;
const #funAddr~b44_mii_write.offset : int;
const #funAddr~b44_init_one.base : int;
const #funAddr~b44_init_one.offset : int;
const #funAddr~b44_remove_one.base : int;
const #funAddr~b44_remove_one.offset : int;
const #funAddr~b44_suspend.base : int;
const #funAddr~b44_suspend.offset : int;
const #funAddr~b44_resume.base : int;
const #funAddr~b44_resume.offset : int;
const ~dpm_state~DPM_INVALID : int;
const ~dpm_state~DPM_ON : int;
const ~dpm_state~DPM_PREPARING : int;
const ~dpm_state~DPM_RESUMING : int;
const ~dpm_state~DPM_SUSPENDING : int;
const ~dpm_state~DPM_OFF : int;
const ~dpm_state~DPM_OFF_IRQ : int;
const ~rpm_status~RPM_ACTIVE : int;
const ~rpm_status~RPM_RESUMING : int;
const ~rpm_status~RPM_SUSPENDED : int;
const ~rpm_status~RPM_SUSPENDING : int;
const ~rpm_request~RPM_REQ_NONE : int;
const ~rpm_request~RPM_REQ_IDLE : int;
const ~rpm_request~RPM_REQ_SUSPEND : int;
const ~rpm_request~RPM_REQ_RESUME : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NONE : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NET : int;
const ~kobj_ns_type~KOBJ_NS_TYPES : int;
const ~irqreturn~IRQ_NONE : int;
const ~irqreturn~IRQ_HANDLED : int;
const ~irqreturn~IRQ_WAKE_THREAD : int;
const ~module_state~MODULE_STATE_LIVE : int;
const ~module_state~MODULE_STATE_COMING : int;
const ~module_state~MODULE_STATE_GOING : int;
const ~dma_data_direction~DMA_BIDIRECTIONAL : int;
const ~dma_data_direction~DMA_TO_DEVICE : int;
const ~dma_data_direction~DMA_FROM_DEVICE : int;
const ~dma_data_direction~DMA_NONE : int;
const ~pid_type~PIDTYPE_PID : int;
const ~pid_type~PIDTYPE_PGID : int;
const ~pid_type~PIDTYPE_SID : int;
const ~pid_type~PIDTYPE_MAX : int;
const ~netdev_tx~__NETDEV_TX_MIN : int;
const ~netdev_tx~NETDEV_TX_OK : int;
const ~netdev_tx~NETDEV_TX_BUSY : int;
const ~netdev_tx~NETDEV_TX_LOCKED : int;
const ~pci_channel_state~pci_channel_io_normal : int;
const ~pci_channel_state~pci_channel_io_frozen : int;
const ~pci_channel_state~pci_channel_io_perm_failure : int;
const ~ssb_bustype~SSB_BUSTYPE_SSB : int;
const ~ssb_bustype~SSB_BUSTYPE_PCI : int;
const ~ssb_bustype~SSB_BUSTYPE_PCMCIA : int;
const ~ssb_bustype~SSB_BUSTYPE_SDIO : int;
axiom #funAddr~b44_interrupt.base == -1 && #funAddr~b44_interrupt.offset == 0;
axiom #funAddr~b44_timer.base == -1 && #funAddr~b44_timer.offset == 1;
axiom #funAddr~b44_open.base == -1 && #funAddr~b44_open.offset == 2;
axiom #funAddr~b44_close.base == -1 && #funAddr~b44_close.offset == 3;
axiom #funAddr~b44_start_xmit.base == -1 && #funAddr~b44_start_xmit.offset == 4;
axiom #funAddr~b44_set_rx_mode.base == -1 && #funAddr~b44_set_rx_mode.offset == 5;
axiom #funAddr~b44_set_mac_addr.base == -1 && #funAddr~b44_set_mac_addr.offset == 6;
axiom #funAddr~eth_validate_addr.base == -1 && #funAddr~eth_validate_addr.offset == 7;
axiom #funAddr~b44_ioctl.base == -1 && #funAddr~b44_ioctl.offset == 8;
axiom #funAddr~b44_change_mtu.base == -1 && #funAddr~b44_change_mtu.offset == 9;
axiom #funAddr~b44_tx_timeout.base == -1 && #funAddr~b44_tx_timeout.offset == 10;
axiom #funAddr~b44_get_stats.base == -1 && #funAddr~b44_get_stats.offset == 11;
axiom #funAddr~b44_poll_controller.base == -1 && #funAddr~b44_poll_controller.offset == 12;
axiom #funAddr~b44_poll.base == -1 && #funAddr~b44_poll.offset == 13;
axiom #funAddr~b44_mii_read.base == -1 && #funAddr~b44_mii_read.offset == 14;
axiom #funAddr~b44_mii_write.base == -1 && #funAddr~b44_mii_write.offset == 15;
axiom #funAddr~b44_init_one.base == -1 && #funAddr~b44_init_one.offset == 16;
axiom #funAddr~b44_remove_one.base == -1 && #funAddr~b44_remove_one.offset == 17;
axiom #funAddr~b44_suspend.base == -1 && #funAddr~b44_suspend.offset == 18;
axiom #funAddr~b44_resume.base == -1 && #funAddr~b44_resume.offset == 19;
axiom ~dpm_state~DPM_INVALID == 0;
axiom ~dpm_state~DPM_ON == 1;
axiom ~dpm_state~DPM_PREPARING == 2;
axiom ~dpm_state~DPM_RESUMING == 3;
axiom ~dpm_state~DPM_SUSPENDING == 4;
axiom ~dpm_state~DPM_OFF == 5;
axiom ~dpm_state~DPM_OFF_IRQ == 6;
axiom ~rpm_status~RPM_ACTIVE == 0;
axiom ~rpm_status~RPM_RESUMING == 1;
axiom ~rpm_status~RPM_SUSPENDED == 2;
axiom ~rpm_status~RPM_SUSPENDING == 3;
axiom ~rpm_request~RPM_REQ_NONE == 0;
axiom ~rpm_request~RPM_REQ_IDLE == 1;
axiom ~rpm_request~RPM_REQ_SUSPEND == 2;
axiom ~rpm_request~RPM_REQ_RESUME == 3;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NONE == 0;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NET == 1;
axiom ~kobj_ns_type~KOBJ_NS_TYPES == 2;
axiom ~irqreturn~IRQ_NONE == 0;
axiom ~irqreturn~IRQ_HANDLED == 1;
axiom ~irqreturn~IRQ_WAKE_THREAD == 2;
axiom ~module_state~MODULE_STATE_LIVE == 0;
axiom ~module_state~MODULE_STATE_COMING == 1;
axiom ~module_state~MODULE_STATE_GOING == 2;
axiom ~dma_data_direction~DMA_BIDIRECTIONAL == 0;
axiom ~dma_data_direction~DMA_TO_DEVICE == 1;
axiom ~dma_data_direction~DMA_FROM_DEVICE == 2;
axiom ~dma_data_direction~DMA_NONE == 3;
axiom ~pid_type~PIDTYPE_PID == 0;
axiom ~pid_type~PIDTYPE_PGID == 1;
axiom ~pid_type~PIDTYPE_SID == 2;
axiom ~pid_type~PIDTYPE_MAX == 3;
axiom ~netdev_tx~__NETDEV_TX_MIN == -2147483648;
axiom ~netdev_tx~NETDEV_TX_OK == 0;
axiom ~netdev_tx~NETDEV_TX_BUSY == 16;
axiom ~netdev_tx~NETDEV_TX_LOCKED == 32;
axiom ~pci_channel_state~pci_channel_io_normal == 1;
axiom ~pci_channel_state~pci_channel_io_frozen == 2;
axiom ~pci_channel_state~pci_channel_io_perm_failure == 3;
axiom ~ssb_bustype~SSB_BUSTYPE_SSB == 0;
axiom ~ssb_bustype~SSB_BUSTYPE_PCI == 1;
axiom ~ssb_bustype~SSB_BUSTYPE_PCMCIA == 2;
axiom ~ssb_bustype~SSB_BUSTYPE_SDIO == 3;
function { :overapproximation "bitwiseAnd" } ~bitwiseAnd(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "shiftRight" } ~shiftRight(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseOr" } ~bitwiseOr(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "shiftLeft" } ~shiftLeft(in0 : int, in1 : int) returns (out : int);
var ~jiffies : int;

var ~ldv_irq_data_2_1.base : int, ~ldv_irq_data_2_1.offset : int;

var ~ldv_irq_1_3 : int;

var ~ldv_irq_line_2_2 : int;

var ~ldv_irq_data_1_1.base : int, ~ldv_irq_data_1_1.offset : int;

var ~ldv_irq_1_0 : int;

var ~ldv_state_variable_6 : int;

var ~ldv_irq_data_1_0.base : int, ~ldv_irq_data_1_0.offset : int;

var ~ldv_state_variable_0 : int;

var ~ldv_state_variable_5 : int;

var ~ldv_timer_state_3 : int;

var ~ldv_irq_line_2_1 : int;

var ~ldv_state_variable_2 : int;

var ~ldv_irq_2_0 : int;

var ~ldv_irq_data_1_3.base : int, ~ldv_irq_data_1_3.offset : int;

var ~ldv_irq_data_1_2.base : int, ~ldv_irq_data_1_2.offset : int;

var ~ldv_irq_data_2_0.base : int, ~ldv_irq_data_2_0.offset : int;

var ~ldv_irq_1_2 : int;

var ~LDV_IN_INTERRUPT : int;

var ~ldv_irq_1_1 : int;

var ~ldv_irq_2_3 : int;

var ~ldv_irq_data_2_3.base : int, ~ldv_irq_data_2_3.offset : int;

var ~ldv_irq_line_1_3 : int;

var ~ldv_irq_2_2 : int;

var ~ldv_irq_line_2_0 : int;

var ~ldv_state_variable_3 : int;

var ~ldv_irq_line_1_0 : int;

var ~ref_cnt : int;

var ~ldv_irq_line_1_1 : int;

var ~ldv_irq_data_2_2.base : int, ~ldv_irq_data_2_2.offset : int;

var ~ldv_state_variable_1 : int;

var ~ldv_state_variable_7 : int;

var ~ldv_irq_line_1_2 : int;

var ~ldv_state_variable_4 : int;

var ~ldv_irq_line_2_3 : int;

var ~ldv_irq_2_1 : int;

var ~#version.base : int, ~#version.offset : int;

var ~b44_debug : int;

var ~dma_desc_align_mask : int;

var ~dma_desc_sync_size : int;

var ~instance : int;

var ~#b44_gstrings.base : int, ~#b44_gstrings.offset : int;

var ~ldv_retval_2 : int;

var ~ldv_retval_5 : int;

var ~ldv_retval_0 : int;

var ~ldv_retval_4 : int;

var ~ldv_retval_1 : int;

var ~ldv_retval_3 : int;

var ~ldv_carrier : int;

var ~ldv_register : int;

var ~boot_cpu_data.x86 : int, ~boot_cpu_data.x86_vendor : int, ~boot_cpu_data.x86_model : int, ~boot_cpu_data.x86_mask : int, ~boot_cpu_data.x86_tlbsize : int, ~boot_cpu_data.x86_virt_bits : int, ~boot_cpu_data.x86_phys_bits : int, ~boot_cpu_data.x86_coreid_bits : int, ~boot_cpu_data.extended_cpuid_level : int, ~boot_cpu_data.cpuid_level : int, ~boot_cpu_data.x86_capability : [int]int, ~boot_cpu_data.x86_vendor_id : [int]int, ~boot_cpu_data.x86_model_id : [int]int, ~boot_cpu_data.x86_cache_size : int, ~boot_cpu_data.x86_cache_alignment : int, ~boot_cpu_data.x86_power : int, ~boot_cpu_data.loops_per_jiffy : int, ~boot_cpu_data.llc_shared_map.base : int, ~boot_cpu_data.llc_shared_map.offset : int, ~boot_cpu_data.x86_max_cores : int, ~boot_cpu_data.apicid : int, ~boot_cpu_data.initial_apicid : int, ~boot_cpu_data.x86_clflush_size : int, ~boot_cpu_data.booted_cores : int, ~boot_cpu_data.phys_proc_id : int, ~boot_cpu_data.cpu_core_id : int, ~boot_cpu_data.cpu_index : int;

var ~#__tracepoint_kmalloc.base : int, ~#__tracepoint_kmalloc.offset : int;

var ~#kmalloc_caches.base : int, ~#kmalloc_caches.offset : int;

var ~ldv_timer_list_3.base : int, ~ldv_timer_list_3.offset : int;

var ~b44_ethtool_ops_group4.base : int, ~b44_ethtool_ops_group4.offset : int;

var ~b44_ethtool_ops_group0.base : int, ~b44_ethtool_ops_group0.offset : int;

var ~__param_b44_debug_group0.base : int, ~__param_b44_debug_group0.offset : int;

var ~b44_ethtool_ops_group2.base : int, ~b44_ethtool_ops_group2.offset : int;

var ~b44_ethtool_ops_group3.base : int, ~b44_ethtool_ops_group3.offset : int;

var ~b44_ethtool_ops_group1.base : int, ~b44_ethtool_ops_group1.offset : int;

var ~b44_ssb_driver_group0.base : int, ~b44_ssb_driver_group0.offset : int;

var ~b44_netdev_ops_group1.base : int, ~b44_netdev_ops_group1.offset : int;

var ~#__this_module.base : int, ~#__this_module.offset : int;

var ~dma_ops.base : int, ~dma_ops.offset : int;

var ~#b44_pci_tbl.base : int, ~#b44_pci_tbl.offset : int;

var ~#b44_pci_driver.base : int, ~#b44_pci_driver.offset : int;

var ~#b44_ssb_tbl.base : int, ~#b44_ssb_tbl.offset : int;

var ~#b44_netdev_ops.base : int, ~#b44_netdev_ops.offset : int;

var ~#b44_ssb_driver.base : int, ~#b44_ssb_driver.offset : int;

var #NULL.base : int, #NULL.offset : int;

var #valid : [int]int;

var #length : [int]int;

var #memory_int : [int,int]int;

var #memory_$Pointer$.base : [int,int]int, #memory_$Pointer$.offset : [int,int]int;

implementation netdev_priv(#in~dev.base : int, #in~dev.offset : int) returns (#res.base : int, #res.offset : int){
    var ~dev.base : int, ~dev.offset : int;

  loc0:
    ~dev.base, ~dev.offset := #in~dev.base, #in~dev.offset;
    #res.base, #res.offset := ~dev.base, ~dev.offset + 2432;
    assume true;
    return;
}

procedure netdev_priv(#in~dev.base : int, #in~dev.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation ldv_initialize_ssb_driver_4() returns (){
    var #t~ret1382.base : int, #t~ret1382.offset : int;
    var ~tmp~1029.base : int, ~tmp~1029.offset : int;

  loc1:
    havoc ~tmp~1029.base, ~tmp~1029.offset;
    call #t~ret1382.base, #t~ret1382.offset := ldv_zalloc(56);
    ~tmp~1029.base, ~tmp~1029.offset := #t~ret1382.base, #t~ret1382.offset;
    havoc #t~ret1382.base, #t~ret1382.offset;
    ~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset := ~tmp~1029.base, ~tmp~1029.offset;
    assume true;
    return;
}

procedure ldv_initialize_ssb_driver_4() returns ();
modifies ~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset, #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation is_multicast_ether_addr(#in~addr.base : int, #in~addr.offset : int) returns (#res : int){
    var #t~mem227 : int;
    var ~addr.base : int, ~addr.offset : int;

  loc2:
    ~addr.base, ~addr.offset := #in~addr.base, #in~addr.offset;
    call #t~mem227 := read~int(~addr.base, ~addr.offset, 1);
    #res := ~bitwiseAnd(#t~mem227 % 256, 1);
    havoc #t~mem227;
    assume true;
    return;
}

procedure is_multicast_ether_addr(#in~addr.base : int, #in~addr.offset : int) returns (#res : int);
modifies ;

implementation is_valid_ether_addr(#in~addr.base : int, #in~addr.offset : int) returns (#res : int){
    var #t~ret228 : int;
    var #t~ret229 : int;
    var ~addr.base : int, ~addr.offset : int;
    var ~tmp~340 : int;
    var ~tmp___0~340 : int;
    var ~tmp___1~340 : int;

  loc3:
    ~addr.base, ~addr.offset := #in~addr.base, #in~addr.offset;
    havoc ~tmp~340;
    havoc ~tmp___0~340;
    havoc ~tmp___1~340;
    call #t~ret228 := is_multicast_ether_addr(~addr.base, ~addr.offset);
    assume -2147483648 <= #t~ret228 && #t~ret228 <= 2147483647;
    ~tmp~340 := #t~ret228;
    havoc #t~ret228;
    assume !(~tmp~340 == 0);
    ~tmp___1~340 := 0;
    #res := ~tmp___1~340;
    assume true;
    return;
}

procedure is_valid_ether_addr(#in~addr.base : int, #in~addr.offset : int) returns (#res : int);
modifies ;

implementation #Ultimate.C_memset(#ptr.base : int, #ptr.offset : int, #value : int, #amount : int) returns (#res.base : int, #res.offset : int){
    var #t~loopctr1467 : int;

  loc4:
    #t~loopctr1467 := 0;
    goto loc5;
  loc5:
    goto loc5_0, loc5_1;
  loc5_0:
    assume #t~loopctr1467 < #amount;
    #memory_int := #memory_int[#ptr.base,#ptr.offset + #t~loopctr1467 * 1 := #value];
    #memory_$Pointer$.base, #memory_$Pointer$.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset + #t~loopctr1467 * 1 := 0], #memory_$Pointer$.offset[#ptr.base,#ptr.offset + #t~loopctr1467 * 1 := #value % 256];
    #t~loopctr1467 := #t~loopctr1467 + 1;
    goto loc5;
  loc5_1:
    assume !(#t~loopctr1467 < #amount);
    assume #res.base == #ptr.base && #res.offset == #ptr.offset;
    return;
}

procedure #Ultimate.C_memset(#ptr.base : int, #ptr.offset : int, #value : int, #amount : int) returns (#res.base : int, #res.offset : int);
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
free ensures #res.base == #ptr.base && #res.offset == #ptr.offset;

implementation b44_get_invariants(#in~bp.base : int, #in~bp.offset : int) returns (#res : int){
    var #t~mem1211.base : int, #t~mem1211.offset : int;
    var #t~ret1212 : ~u32;
    var #t~mem1214.base : int, #t~mem1214.offset : int;
    var #t~mem1215 : int;
    var #t~mem1216.base : int, #t~mem1216.offset : int;
    var #t~mem1217.base : int, #t~mem1217.offset : int;
    var #t~mem1219 : int;
    var #t~mem1220.base : int, #t~mem1220.offset : int;
    var #t~mem1221.base : int, #t~mem1221.offset : int;
    var #t~mem1223 : int;
    var #t~mem1224 : int;
    var #t~mem1226.base : int, #t~mem1226.offset : int;
    var #t~mem1227.base : int, #t~mem1227.offset : int;
    var #t~ret1228.base : int, #t~ret1228.offset : int;
    var #t~mem1229.base : int, #t~mem1229.offset : int;
    var #t~mem1230.base : int, #t~mem1230.offset : int;
    var #t~memcpy1231.base : int, #t~memcpy1231.offset : int;
    var #t~mem1232.base : int, #t~mem1232.offset : int;
    var #t~mem1233.base : int, #t~mem1233.offset : int;
    var #t~ret1234 : int;
    var #t~nondet1235.base : int, #t~nondet1235.offset : int;
    var #t~ret1236 : int;
    var #t~mem1237.base : int, #t~mem1237.offset : int;
    var #t~mem1238 : int;
    var #t~mem1239.base : int, #t~mem1239.offset : int;
    var #t~mem1240.base : int, #t~mem1240.offset : int;
    var #t~mem1241.base : int, #t~mem1241.offset : int;
    var #t~memcpy1242.base : int, #t~memcpy1242.offset : int;
    var #t~mem1244.base : int, #t~mem1244.offset : int;
    var #t~mem1245 : int;
    var #t~mem1246 : int;
    var ~bp.base : int, ~bp.offset : int;
    var ~sdev~924.base : int, ~sdev~924.offset : int;
    var ~err~924 : int;
    var ~addr~924.base : int, ~addr~924.offset : int;
    var ~__len~924 : int;
    var ~__ret~924.base : int, ~__ret~924.offset : int;
    var ~tmp~924 : int;
    var ~__len___0~924 : int;
    var ~__ret___0~924.base : int, ~__ret___0~924.offset : int;

  loc6:
    ~bp.base, ~bp.offset := #in~bp.base, #in~bp.offset;
    havoc ~sdev~924.base, ~sdev~924.offset;
    havoc ~err~924;
    havoc ~addr~924.base, ~addr~924.offset;
    havoc ~__len~924;
    havoc ~__ret~924.base, ~__ret~924.offset;
    havoc ~tmp~924;
    havoc ~__len___0~924;
    havoc ~__ret___0~924.base, ~__ret___0~924.offset;
    call #t~mem1211.base, #t~mem1211.offset := read~$Pointer$(~bp.base, ~bp.offset + 568, 8);
    ~sdev~924.base, ~sdev~924.offset := #t~mem1211.base, #t~mem1211.offset;
    havoc #t~mem1211.base, #t~mem1211.offset;
    ~err~924 := 0;
    call #t~ret1212 := ssb_dma_translation(~sdev~924.base, ~sdev~924.offset);
    call write~int(#t~ret1212, ~bp.base, ~bp.offset + 252, 4);
    havoc #t~ret1212;
    call #t~mem1214.base, #t~mem1214.offset := read~$Pointer$(~sdev~924.base, ~sdev~924.offset + 16, 8);
    call #t~mem1215 := read~int(#t~mem1214.base, #t~mem1214.offset + 84, 4);
    assume !(#t~mem1215 % 4294967296 == 0 && ~instance > 1);
    havoc #t~mem1214.base, #t~mem1214.offset;
    havoc #t~mem1215;
    call #t~mem1220.base, #t~mem1220.offset := read~$Pointer$(~sdev~924.base, ~sdev~924.offset + 16, 8);
    ~addr~924.base, ~addr~924.offset := #t~mem1220.base, #t~mem1220.offset + 1090 + 7;
    havoc #t~mem1220.base, #t~mem1220.offset;
    call #t~mem1221.base, #t~mem1221.offset := read~$Pointer$(~sdev~924.base, ~sdev~924.offset + 16, 8);
    call #t~mem1223 := read~int(#t~mem1221.base, #t~mem1221.offset + 1090 + 19, 1);
    call write~int(#t~mem1223, ~bp.base, ~bp.offset + 608, 1);
    havoc #t~mem1221.base, #t~mem1221.offset;
    havoc #t~mem1223;
    call #t~mem1224 := read~int(~bp.base, ~bp.offset + 608, 1);
    call write~int(~bitwiseAnd(#t~mem1224 % 256, 31), ~bp.base, ~bp.offset + 608, 1);
    havoc #t~mem1224;
    ~__len~924 := 6;
    assume ~__len~924 % 4294967296 % 18446744073709551616 > 63;
    call #t~mem1226.base, #t~mem1226.offset := read~$Pointer$(~bp.base, ~bp.offset + 576, 8);
    call #t~mem1227.base, #t~mem1227.offset := read~$Pointer$(#t~mem1226.base, #t~mem1226.offset + 621, 8);
    call #t~ret1228.base, #t~ret1228.offset := __memcpy(#t~mem1227.base, #t~mem1227.offset, ~addr~924.base, ~addr~924.offset, ~__len~924);
    ~__ret~924.base, ~__ret~924.offset := #t~ret1228.base, #t~ret1228.offset;
    havoc #t~mem1226.base, #t~mem1226.offset;
    havoc #t~mem1227.base, #t~mem1227.offset;
    havoc #t~ret1228.base, #t~ret1228.offset;
    call #t~mem1232.base, #t~mem1232.offset := read~$Pointer$(~bp.base, ~bp.offset + 576, 8);
    call #t~mem1233.base, #t~mem1233.offset := read~$Pointer$(#t~mem1232.base, #t~mem1232.offset + 621, 8);
    call #t~ret1234 := is_valid_ether_addr(#t~mem1233.base, #t~mem1233.offset);
    assume -2147483648 <= #t~ret1234 && #t~ret1234 <= 2147483647;
    ~tmp~924 := #t~ret1234;
    havoc #t~mem1232.base, #t~mem1232.offset;
    havoc #t~mem1233.base, #t~mem1233.offset;
    havoc #t~ret1234;
    assume ~tmp~924 == 0;
    call #t~nondet1235.base, #t~nondet1235.offset := #Ultimate.alloc(46);
    call #t~ret1236 := printk(#t~nondet1235.base, #t~nondet1235.offset);
    assume -2147483648 <= #t~ret1236 && #t~ret1236 <= 2147483647;
    havoc #t~nondet1235.base, #t~nondet1235.offset;
    havoc #t~ret1236;
    #res := -22;
    assume true;
    return;
}

procedure b44_get_invariants(#in~bp.base : int, #in~bp.offset : int) returns (#res : int);
modifies #memory_int, #valid, #length, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation dma_get_cache_alignment() returns (#res : int){
  loc7:
    #res := ~boot_cpu_data.x86_clflush_size % 65536;
    assume true;
    return;
}

procedure dma_get_cache_alignment() returns (#res : int);
modifies ;

implementation main() returns (#res : int){
    var #t~ret1392 : ~u32;
    var #t~ret1393.base : int, #t~ret1393.offset : int;
    var #t~nondet1394 : int;
    var #t~ret1395.base : int, #t~ret1395.offset : int;
    var #t~ret1396.base : int, #t~ret1396.offset : int;
    var #t~ret1397 : ~u32;
    var #t~ret1398.base : int, #t~ret1398.offset : int;
    var #t~ret1399.base : int, #t~ret1399.offset : int;
    var #t~ret1400.base : int, #t~ret1400.offset : int;
    var #t~ret1401.base : int, #t~ret1401.offset : int;
    var #t~ret1402.base : int, #t~ret1402.offset : int;
    var #t~nondet1403 : int;
    var #t~ret1404.base : int, #t~ret1404.offset : int;
    var #t~nondet1405 : int;
    var #t~ret1406.base : int, #t~ret1406.offset : int;
    var #t~memset1407.base : int, #t~memset1407.offset : int;
    var #t~nondet1408 : int;
    var #t~switch1409 : bool;
    var #t~nondet1410 : int;
    var #t~switch1411 : bool;
    var #t~ret1412 : int;
    var #t~ret1413 : int;
    var #t~ret1414 : int;
    var #t~ret1415 : int;
    var #t~ret1416 : int;
    var #t~ret1417 : int;
    var #t~ret1418 : ~u32;
    var #t~ret1419 : int;
    var #t~ret1420 : ~u32;
    var #t~nondet1421 : int;
    var #t~switch1422 : bool;
    var #t~ret1423 : int;
    var #t~ret1424 : int;
    var #t~nondet1425 : int;
    var #t~switch1426 : bool;
    var #t~ret1427 : int;
    var #t~mem1428 : int;
    var #t~ret1429 : int;
    var #t~ret1430 : int;
    var #t~nondet1431 : int;
    var #t~switch1432 : bool;
    var #t~ret1433 : int;
    var #t~nondet1434 : int;
    var #t~switch1435 : bool;
    var #t~ret1436 : int;
    var #t~ret1437 : int;
    var #t~ret1438 : int;
    var #t~ret1439.base : int, #t~ret1439.offset : int;
    var #t~ret1440.base : int, #t~ret1440.offset : int;
    var #t~ret1441.base : int, #t~ret1441.offset : int;
    var #t~ret1442 : int;
    var #t~ret1443 : ~netdev_tx_t;
    var #t~ret1444 : int;
    var #t~ret1445 : int;
    var #t~ret1446 : int;
    var #t~ret1447 : int;
    var #t~ret1448 : int;
    var #t~ret1449 : int;
    var #t~ret1450 : int;
    var #t~ret1451 : int;
    var #t~ret1452 : int;
    var #t~ret1453 : int;
    var #t~ret1454 : int;
    var ~ldvarg1~1045 : ~u32;
    var ~tmp~1045 : ~u32;
    var ~ldvarg4~1045.base : int, ~ldvarg4~1045.offset : int;
    var ~tmp___0~1045.base : int, ~tmp___0~1045.offset : int;
    var ~ldvarg3~1045 : int;
    var ~tmp___1~1045 : int;
    var ~ldvarg0~1045.base : int, ~ldvarg0~1045.offset : int;
    var ~tmp___2~1045.base : int, ~tmp___2~1045.offset : int;
    var ~ldvarg5~1045.base : int, ~ldvarg5~1045.offset : int;
    var ~tmp___3~1045.base : int, ~tmp___3~1045.offset : int;
    var ~ldvarg2~1045 : ~u32;
    var ~tmp___4~1045 : ~u32;
    var ~ldvarg6~1045.base : int, ~ldvarg6~1045.offset : int;
    var ~tmp___5~1045.base : int, ~tmp___5~1045.offset : int;
    var ~ldvarg8~1045.base : int, ~ldvarg8~1045.offset : int;
    var ~tmp___6~1045.base : int, ~tmp___6~1045.offset : int;
    var ~ldvarg7~1045.base : int, ~ldvarg7~1045.offset : int;
    var ~tmp___7~1045.base : int, ~tmp___7~1045.offset : int;
    var ~ldvarg10~1045.base : int, ~ldvarg10~1045.offset : int;
    var ~tmp___8~1045.base : int, ~tmp___8~1045.offset : int;
    var ~#ldvarg9~1045.base : int, ~#ldvarg9~1045.offset : int;
    var ~ldvarg11~1045.base : int, ~ldvarg11~1045.offset : int;
    var ~tmp___9~1045.base : int, ~tmp___9~1045.offset : int;
    var ~ldvarg14~1045 : int;
    var ~tmp___10~1045 : int;
    var ~ldvarg13~1045.base : int, ~ldvarg13~1045.offset : int;
    var ~tmp___11~1045.base : int, ~tmp___11~1045.offset : int;
    var ~ldvarg12~1045 : int;
    var ~tmp___12~1045 : int;
    var ~ldvarg15~1045.base : int, ~ldvarg15~1045.offset : int;
    var ~tmp___13~1045.base : int, ~tmp___13~1045.offset : int;
    var ~tmp___14~1045 : int;
    var ~tmp___15~1045 : int;
    var ~tmp___16~1045 : int;
    var ~tmp___17~1045 : int;
    var ~tmp___18~1045 : int;
    var ~tmp___19~1045 : int;

  loc8:
    havoc ~ldvarg1~1045;
    havoc ~tmp~1045;
    havoc ~ldvarg4~1045.base, ~ldvarg4~1045.offset;
    havoc ~tmp___0~1045.base, ~tmp___0~1045.offset;
    havoc ~ldvarg3~1045;
    havoc ~tmp___1~1045;
    havoc ~ldvarg0~1045.base, ~ldvarg0~1045.offset;
    havoc ~tmp___2~1045.base, ~tmp___2~1045.offset;
    havoc ~ldvarg5~1045.base, ~ldvarg5~1045.offset;
    havoc ~tmp___3~1045.base, ~tmp___3~1045.offset;
    havoc ~ldvarg2~1045;
    havoc ~tmp___4~1045;
    havoc ~ldvarg6~1045.base, ~ldvarg6~1045.offset;
    havoc ~tmp___5~1045.base, ~tmp___5~1045.offset;
    havoc ~ldvarg8~1045.base, ~ldvarg8~1045.offset;
    havoc ~tmp___6~1045.base, ~tmp___6~1045.offset;
    havoc ~ldvarg7~1045.base, ~ldvarg7~1045.offset;
    havoc ~tmp___7~1045.base, ~tmp___7~1045.offset;
    havoc ~ldvarg10~1045.base, ~ldvarg10~1045.offset;
    havoc ~tmp___8~1045.base, ~tmp___8~1045.offset;
    call ~#ldvarg9~1045.base, ~#ldvarg9~1045.offset := #Ultimate.alloc(4);
    havoc ~ldvarg11~1045.base, ~ldvarg11~1045.offset;
    havoc ~tmp___9~1045.base, ~tmp___9~1045.offset;
    havoc ~ldvarg14~1045;
    havoc ~tmp___10~1045;
    havoc ~ldvarg13~1045.base, ~ldvarg13~1045.offset;
    havoc ~tmp___11~1045.base, ~tmp___11~1045.offset;
    havoc ~ldvarg12~1045;
    havoc ~tmp___12~1045;
    havoc ~ldvarg15~1045.base, ~ldvarg15~1045.offset;
    havoc ~tmp___13~1045.base, ~tmp___13~1045.offset;
    havoc ~tmp___14~1045;
    havoc ~tmp___15~1045;
    havoc ~tmp___16~1045;
    havoc ~tmp___17~1045;
    havoc ~tmp___18~1045;
    havoc ~tmp___19~1045;
    call #t~ret1392 := __VERIFIER_nondet_u32();
    ~tmp~1045 := #t~ret1392;
    havoc #t~ret1392;
    ~ldvarg1~1045 := ~tmp~1045;
    call #t~ret1393.base, #t~ret1393.offset := ldv_zalloc(8);
    ~tmp___0~1045.base, ~tmp___0~1045.offset := #t~ret1393.base, #t~ret1393.offset;
    havoc #t~ret1393.base, #t~ret1393.offset;
    ~ldvarg4~1045.base, ~ldvarg4~1045.offset := ~tmp___0~1045.base, ~tmp___0~1045.offset;
    assume -2147483648 <= #t~nondet1394 && #t~nondet1394 <= 2147483647;
    ~tmp___1~1045 := #t~nondet1394;
    havoc #t~nondet1394;
    ~ldvarg3~1045 := ~tmp___1~1045;
    call #t~ret1395.base, #t~ret1395.offset := ldv_zalloc(1);
    ~tmp___2~1045.base, ~tmp___2~1045.offset := #t~ret1395.base, #t~ret1395.offset;
    havoc #t~ret1395.base, #t~ret1395.offset;
    ~ldvarg0~1045.base, ~ldvarg0~1045.offset := ~tmp___2~1045.base, ~tmp___2~1045.offset;
    call #t~ret1396.base, #t~ret1396.offset := ldv_zalloc(8);
    ~tmp___3~1045.base, ~tmp___3~1045.offset := #t~ret1396.base, #t~ret1396.offset;
    havoc #t~ret1396.base, #t~ret1396.offset;
    ~ldvarg5~1045.base, ~ldvarg5~1045.offset := ~tmp___3~1045.base, ~tmp___3~1045.offset;
    call #t~ret1397 := __VERIFIER_nondet_u32();
    ~tmp___4~1045 := #t~ret1397;
    havoc #t~ret1397;
    ~ldvarg2~1045 := ~tmp___4~1045;
    call #t~ret1398.base, #t~ret1398.offset := ldv_zalloc(196);
    ~tmp___5~1045.base, ~tmp___5~1045.offset := #t~ret1398.base, #t~ret1398.offset;
    havoc #t~ret1398.base, #t~ret1398.offset;
    ~ldvarg6~1045.base, ~ldvarg6~1045.offset := ~tmp___5~1045.base, ~tmp___5~1045.offset;
    call #t~ret1399.base, #t~ret1399.offset := ldv_zalloc(1);
    ~tmp___6~1045.base, ~tmp___6~1045.offset := #t~ret1399.base, #t~ret1399.offset;
    havoc #t~ret1399.base, #t~ret1399.offset;
    ~ldvarg8~1045.base, ~ldvarg8~1045.offset := ~tmp___6~1045.base, ~tmp___6~1045.offset;
    call #t~ret1400.base, #t~ret1400.offset := ldv_zalloc(1);
    ~tmp___7~1045.base, ~tmp___7~1045.offset := #t~ret1400.base, #t~ret1400.offset;
    havoc #t~ret1400.base, #t~ret1400.offset;
    ~ldvarg7~1045.base, ~ldvarg7~1045.offset := ~tmp___7~1045.base, ~tmp___7~1045.offset;
    call #t~ret1401.base, #t~ret1401.offset := ldv_zalloc(6);
    ~tmp___8~1045.base, ~tmp___8~1045.offset := #t~ret1401.base, #t~ret1401.offset;
    havoc #t~ret1401.base, #t~ret1401.offset;
    ~ldvarg10~1045.base, ~ldvarg10~1045.offset := ~tmp___8~1045.base, ~tmp___8~1045.offset;
    call #t~ret1402.base, #t~ret1402.offset := ldv_zalloc(1);
    ~tmp___9~1045.base, ~tmp___9~1045.offset := #t~ret1402.base, #t~ret1402.offset;
    havoc #t~ret1402.base, #t~ret1402.offset;
    ~ldvarg11~1045.base, ~ldvarg11~1045.offset := ~tmp___9~1045.base, ~tmp___9~1045.offset;
    assume -2147483648 <= #t~nondet1403 && #t~nondet1403 <= 2147483647;
    ~tmp___10~1045 := #t~nondet1403;
    havoc #t~nondet1403;
    ~ldvarg14~1045 := ~tmp___10~1045;
    call #t~ret1404.base, #t~ret1404.offset := ldv_zalloc(240);
    ~tmp___11~1045.base, ~tmp___11~1045.offset := #t~ret1404.base, #t~ret1404.offset;
    havoc #t~ret1404.base, #t~ret1404.offset;
    ~ldvarg13~1045.base, ~ldvarg13~1045.offset := ~tmp___11~1045.base, ~tmp___11~1045.offset;
    assume -2147483648 <= #t~nondet1405 && #t~nondet1405 <= 2147483647;
    ~tmp___12~1045 := #t~nondet1405;
    havoc #t~nondet1405;
    ~ldvarg12~1045 := ~tmp___12~1045;
    call #t~ret1406.base, #t~ret1406.offset := ldv_zalloc(40);
    ~tmp___13~1045.base, ~tmp___13~1045.offset := #t~ret1406.base, #t~ret1406.offset;
    havoc #t~ret1406.base, #t~ret1406.offset;
    ~ldvarg15~1045.base, ~ldvarg15~1045.offset := ~tmp___13~1045.base, ~tmp___13~1045.offset;
    call ldv_initialize();
    call #t~memset1407.base, #t~memset1407.offset := #Ultimate.C_memset(~#ldvarg9~1045.base, ~#ldvarg9~1045.offset, 0, 4);
    havoc #t~memset1407.base, #t~memset1407.offset;
    ~ldv_state_variable_6 := 0;
    ~ldv_state_variable_3 := 1;
    ~ldv_state_variable_7 := 0;
    ~ldv_state_variable_2 := 1;
    ~ldv_state_variable_1 := 1;
    ~ldv_state_variable_4 := 0;
    ~ref_cnt := 0;
    ~ldv_state_variable_0 := 1;
    ~ldv_state_variable_5 := 0;
    goto loc9;
  loc9:
    assume -2147483648 <= #t~nondet1408 && #t~nondet1408 <= 2147483647;
    ~tmp___14~1045 := #t~nondet1408;
    havoc #t~nondet1408;
    #t~switch1409 := ~tmp___14~1045 == 0;
    assume !#t~switch1409;
    #t~switch1409 := #t~switch1409 || ~tmp___14~1045 == 1;
    assume !#t~switch1409;
    #t~switch1409 := #t~switch1409 || ~tmp___14~1045 == 2;
    assume !#t~switch1409;
    #t~switch1409 := #t~switch1409 || ~tmp___14~1045 == 3;
    assume !#t~switch1409;
    #t~switch1409 := #t~switch1409 || ~tmp___14~1045 == 4;
    assume !#t~switch1409;
    #t~switch1409 := #t~switch1409 || ~tmp___14~1045 == 5;
    goto loc10;
  loc10:
    goto loc10_0, loc10_1;
  loc10_0:
    assume #t~switch1409;
    assume ~ldv_state_variable_4 != 0;
    assume -2147483648 <= #t~nondet1425 && #t~nondet1425 <= 2147483647;
    ~tmp___17~1045 := #t~nondet1425;
    havoc #t~nondet1425;
    #t~switch1426 := ~tmp___17~1045 == 0;
    assume #t~switch1426;
    assume ~ldv_state_variable_4 == 1;
    call #t~ret1427 := b44_init_one(~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset, ~ldvarg10~1045.base, ~ldvarg10~1045.offset);
    return;
  loc10_1:
    assume !#t~switch1409;
    #t~switch1409 := #t~switch1409 || ~tmp___14~1045 == 6;
    assume #t~switch1409;
    assume ~ldv_state_variable_0 != 0;
    assume -2147483648 <= #t~nondet1431 && #t~nondet1431 <= 2147483647;
    ~tmp___18~1045 := #t~nondet1431;
    havoc #t~nondet1431;
    #t~switch1432 := ~tmp___18~1045 == 0;
    assume !#t~switch1432;
    #t~switch1432 := #t~switch1432 || ~tmp___18~1045 == 1;
    assume #t~switch1432;
    assume ~ldv_state_variable_0 == 1;
    call #t~ret1433 := b44_init();
    assume -2147483648 <= #t~ret1433 && #t~ret1433 <= 2147483647;
    ~ldv_retval_3 := #t~ret1433;
    havoc #t~ret1433;
    assume ~ldv_retval_3 == 0;
    ~ldv_state_variable_0 := 3;
    ~ldv_state_variable_7 := 1;
    call ldv_initialize_kernel_param_7();
    ~ldv_state_variable_4 := 1;
    call ldv_initialize_ssb_driver_4();
    assume !(~ldv_retval_3 != 0);
    goto loc9;
}

procedure main() returns (#res : int);
modifies ~ldv_state_variable_6, ~ldv_state_variable_3, ~ldv_state_variable_7, ~ldv_state_variable_2, ~ldv_state_variable_1, ~ldv_state_variable_4, ~ref_cnt, ~ldv_state_variable_0, ~ldv_state_variable_5, ~ldv_retval_2, ~ldv_retval_1, ~ldv_retval_0, ~ldv_retval_3, ~ldv_retval_5, ~ldv_retval_4, #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~__param_b44_debug_group0.base, ~__param_b44_debug_group0.offset, ~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset, ~dma_desc_align_mask, ~dma_desc_sync_size, ~LDV_IN_INTERRUPT, ~ldv_irq_1_0, ~ldv_irq_2_0, ~ldv_carrier, ~ldv_register, ~instance, ~ldv_timer_list_3.base, ~ldv_timer_list_3.offset, ~ldv_timer_state_3, ~ldv_irq_line_2_0, ~ldv_irq_data_2_0.base, ~ldv_irq_data_2_0.offset, ~ldv_irq_line_2_1, ~ldv_irq_data_2_1.base, ~ldv_irq_data_2_1.offset, ~ldv_irq_2_1, ~ldv_irq_line_2_2, ~ldv_irq_data_2_2.base, ~ldv_irq_data_2_2.offset, ~ldv_irq_2_2, ~ldv_irq_line_2_3, ~ldv_irq_data_2_3.base, ~ldv_irq_data_2_3.offset, ~ldv_irq_2_3;

implementation ldv_undef_int() returns (#res : int){
    var #t~nondet68 : int;
    var ~tmp~156 : int;

  loc11:
    havoc ~tmp~156;
    assume -2147483648 <= #t~nondet68 && #t~nondet68 <= 2147483647;
    ~tmp~156 := #t~nondet68;
    havoc #t~nondet68;
    #res := ~tmp~156;
    assume true;
    return;
}

procedure ldv_undef_int() returns (#res : int);
modifies ;

implementation ldv_turn_off_carrier_detection() returns (){
  loc12:
    assume ~ldv_register == 0 && ~ldv_carrier == 2;
    ~ldv_carrier := 0;
    assume true;
    return;
}

procedure ldv_turn_off_carrier_detection() returns ();
modifies ~ldv_carrier;

implementation ldv_initialize_kernel_param_7() returns (){
    var #t~ret1381.base : int, #t~ret1381.offset : int;
    var ~tmp~1025.base : int, ~tmp~1025.offset : int;

  loc13:
    havoc ~tmp~1025.base, ~tmp~1025.offset;
    call #t~ret1381.base, #t~ret1381.offset := ldv_zalloc(40);
    ~tmp~1025.base, ~tmp~1025.offset := #t~ret1381.base, #t~ret1381.offset;
    havoc #t~ret1381.base, #t~ret1381.offset;
    ~__param_b44_debug_group0.base, ~__param_b44_debug_group0.offset := ~tmp~1025.base, ~tmp~1025.offset;
    assume true;
    return;
}

procedure ldv_initialize_kernel_param_7() returns ();
modifies ~__param_b44_debug_group0.base, ~__param_b44_debug_group0.offset, #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation ULTIMATE.init() returns (){
    var #t~nondet349.base : int, #t~nondet349.offset : int;
    var #t~union1465.__padding : [int]int, #t~union1465.dep_map.key.base : int, #t~union1465.dep_map.key.offset : int, #t~union1465.dep_map.class_cache.base : int, #t~union1465.dep_map.class_cache.offset : int, #t~union1465.dep_map.name.base : int, #t~union1465.dep_map.name.offset : int, #t~union1465.dep_map.cpu : int, #t~union1465.dep_map.ip : int;
    var #t~nondet1359.base : int, #t~nondet1359.offset : int;

  loc14:
    #NULL.base, #NULL.offset := 0, 0;
    #valid := #valid[0 := 0];
    ~ldv_irq_data_2_1.base, ~ldv_irq_data_2_1.offset := 0, 0;
    ~ldv_irq_1_3 := 0;
    ~ldv_irq_line_2_2 := 0;
    ~ldv_irq_data_1_1.base, ~ldv_irq_data_1_1.offset := 0, 0;
    ~ldv_irq_1_0 := 0;
    ~ldv_state_variable_6 := 0;
    ~ldv_irq_data_1_0.base, ~ldv_irq_data_1_0.offset := 0, 0;
    ~ldv_state_variable_0 := 0;
    ~ldv_state_variable_5 := 0;
    ~ldv_timer_state_3 := 0;
    ~ldv_irq_line_2_1 := 0;
    ~ldv_state_variable_2 := 0;
    ~ldv_irq_2_0 := 0;
    ~ldv_irq_data_1_3.base, ~ldv_irq_data_1_3.offset := 0, 0;
    ~ldv_irq_data_1_2.base, ~ldv_irq_data_1_2.offset := 0, 0;
    ~ldv_irq_data_2_0.base, ~ldv_irq_data_2_0.offset := 0, 0;
    ~ldv_irq_1_2 := 0;
    ~LDV_IN_INTERRUPT := 1;
    ~ldv_irq_1_1 := 0;
    ~ldv_irq_2_3 := 0;
    ~ldv_irq_data_2_3.base, ~ldv_irq_data_2_3.offset := 0, 0;
    ~ldv_irq_line_1_3 := 0;
    ~ldv_irq_2_2 := 0;
    ~ldv_irq_line_2_0 := 0;
    ~ldv_state_variable_3 := 0;
    ~ldv_irq_line_1_0 := 0;
    ~ref_cnt := 0;
    ~ldv_irq_line_1_1 := 0;
    ~ldv_irq_data_2_2.base, ~ldv_irq_data_2_2.offset := 0, 0;
    ~ldv_state_variable_1 := 0;
    ~ldv_state_variable_7 := 0;
    ~ldv_irq_line_1_2 := 0;
    ~ldv_state_variable_4 := 0;
    ~ldv_irq_line_2_3 := 0;
    ~ldv_irq_2_1 := 0;
    call ~#version.base, ~#version.offset := #Ultimate.alloc(12);
    call write~int(98, ~#version.base, ~#version.offset + 0, 1);
    call write~int(52, ~#version.base, ~#version.offset + 1, 1);
    call write~int(52, ~#version.base, ~#version.offset + 2, 1);
    call write~int(46, ~#version.base, ~#version.offset + 3, 1);
    call write~int(99, ~#version.base, ~#version.offset + 4, 1);
    call write~int(58, ~#version.base, ~#version.offset + 5, 1);
    call write~int(118, ~#version.base, ~#version.offset + 6, 1);
    call write~int(50, ~#version.base, ~#version.offset + 7, 1);
    call write~int(46, ~#version.base, ~#version.offset + 8, 1);
    call write~int(48, ~#version.base, ~#version.offset + 9, 1);
    call write~int(10, ~#version.base, ~#version.offset + 10, 1);
    call write~int(0, ~#version.base, ~#version.offset + 11, 1);
    ~b44_debug := -1;
    ~dma_desc_align_mask := 0;
    ~dma_desc_sync_size := 0;
    ~instance := 0;
    call ~#b44_gstrings.base, ~#b44_gstrings.offset := #Ultimate.alloc(1504);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 2, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 5, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 6, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 7, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 8, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 10, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 2, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 5, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 6, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 7, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 8, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 10, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 2, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 3, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 6, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 7, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 2, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 3, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 5, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 6, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 7, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 2, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 5, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 6, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 7, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 8, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 9, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 12, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 13, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 14, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 2, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 3, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 4, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 5, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 6, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 7, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 8, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 9, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 12, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 13, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 14, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 6, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 7, 1);
    call write~int(52, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 6, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 7, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 10, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 12, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 13, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 14, 1);
    call write~int(55, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 6, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 7, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 8, 1);
    call write~int(56, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 13, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 14, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 15, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 6, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 7, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 8, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 13, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 14, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 15, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 6, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 7, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 8, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 13, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 14, 1);
    call write~int(48, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 15, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 16, 1);
    call write~int(51, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 6, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 7, 1);
    call write~int(48, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 8, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 9, 1);
    call write~int(52, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 12, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 13, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 14, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 15, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 16, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 2, 1);
    call write~int(106, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 4, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 5, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 7, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 9, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 10, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 2, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 3, 1);
    call write~int(118, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 4, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 5, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 6, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 7, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 8, 1);
    call write~int(122, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 9, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 11, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 12, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 2, 1);
    call write~int(102, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 4, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 5, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 6, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 7, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 8, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 11, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 12, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 2, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 3, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 4, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 6, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 7, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 8, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 9, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 10, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 2, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 5, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 6, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 7, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 8, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 9, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 10, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 11, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 2, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 3, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 5, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 6, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 7, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 9, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 10, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 11, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 2, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 3, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 4, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 5, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 6, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 7, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 8, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 9, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 11, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 12, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 13, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 2, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 3, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 4, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 6, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 7, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 8, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 9, 1);
    call write~int(118, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 10, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 12, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 13, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 14, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 6, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 7, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 8, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 9, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 10, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 2, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 4, 1);
    call write~int(102, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 6, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 7, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 8, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 2, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 4, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 5, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 6, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 7, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 8, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 10, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 2, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 4, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 5, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 7, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 8, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 9, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 11, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 2, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 5, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 6, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 7, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 8, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 10, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 2, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 5, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 6, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 7, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 8, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 10, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 2, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 3, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 6, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 7, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 2, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 3, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 5, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 6, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 7, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 2, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 5, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 6, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 7, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 8, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 9, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 12, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 13, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 14, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 2, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 3, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 4, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 5, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 6, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 7, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 8, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 9, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 12, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 13, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 14, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 6, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 7, 1);
    call write~int(52, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 6, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 7, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 10, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 12, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 13, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 14, 1);
    call write~int(55, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 6, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 7, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 8, 1);
    call write~int(56, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 13, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 14, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 15, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 6, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 7, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 8, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 13, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 14, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 15, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 6, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 7, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 8, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 13, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 14, 1);
    call write~int(48, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 15, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 16, 1);
    call write~int(51, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 6, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 7, 1);
    call write~int(48, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 8, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 9, 1);
    call write~int(52, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 12, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 13, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 14, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 15, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 16, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 2, 1);
    call write~int(106, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 4, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 5, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 7, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 9, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 10, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 2, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 3, 1);
    call write~int(118, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 4, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 5, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 6, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 7, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 8, 1);
    call write~int(122, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 9, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 11, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 12, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 2, 1);
    call write~int(102, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 4, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 5, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 6, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 7, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 8, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 11, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 12, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 2, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 3, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 4, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 5, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 7, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 9, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 10, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 2, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 4, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 6, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 7, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 8, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 9, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 10, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 12, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 13, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 14, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 2, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 3, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 4, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 6, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 7, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 8, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 9, 1);
    call write~int(122, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 10, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 2, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 4, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 7, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 8, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 9, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 2, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 3, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 4, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 5, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 6, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 7, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 8, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 9, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 10, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 11, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 2, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 3, 1);
    call write~int(121, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 4, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 5, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 6, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 7, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 9, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 10, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 11, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 2, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 4, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 5, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 7, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 8, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 9, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 11, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 2, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 5, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 6, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 7, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 8, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 9, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 11, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 12, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 31, 1);
    ~ldv_retval_2 := 0;
    ~ldv_retval_5 := 0;
    ~ldv_retval_0 := 0;
    ~ldv_retval_4 := 0;
    ~ldv_retval_1 := 0;
    ~ldv_retval_3 := 0;
    ~ldv_carrier := 2;
    ~ldv_register := 0;
    ~ldv_timer_list_3.base, ~ldv_timer_list_3.offset := 0, 0;
    ~b44_ethtool_ops_group4.base, ~b44_ethtool_ops_group4.offset := 0, 0;
    ~b44_ethtool_ops_group0.base, ~b44_ethtool_ops_group0.offset := 0, 0;
    ~__param_b44_debug_group0.base, ~__param_b44_debug_group0.offset := 0, 0;
    ~b44_ethtool_ops_group2.base, ~b44_ethtool_ops_group2.offset := 0, 0;
    ~b44_ethtool_ops_group3.base, ~b44_ethtool_ops_group3.offset := 0, 0;
    ~b44_ethtool_ops_group1.base, ~b44_ethtool_ops_group1.offset := 0, 0;
    ~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset := 0, 0;
    ~b44_netdev_ops_group1.base, ~b44_netdev_ops_group1.offset := 0, 0;
    call ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset := #Ultimate.alloc(128);
    call write~int(5348, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 0, 4);
    call write~int(17409, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 4, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 8, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 12, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 16, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 20, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 24, 8);
    call write~int(5348, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 0, 4);
    call write~int(17410, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 4, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 8, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 12, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 16, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 20, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 24, 8);
    call write~int(5348, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 0, 4);
    call write~int(5900, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 4, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 8, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 12, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 16, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 20, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 24, 8);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 0, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 4, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 8, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 12, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 16, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 20, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 24, 8);
    call ~#b44_pci_driver.base, ~#b44_pci_driver.offset := #Ultimate.alloc(265);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 0 + 8, 8);
    call #t~nondet349.base, #t~nondet349.offset := #Ultimate.alloc(4);
    #memory_int := #memory_int[#t~nondet349.base,#t~nondet349.offset + 0 := 98];
    #memory_int := #memory_int[#t~nondet349.base,#t~nondet349.offset + 1 := 52];
    #memory_int := #memory_int[#t~nondet349.base,#t~nondet349.offset + 2 := 52];
    #memory_int := #memory_int[#t~nondet349.base,#t~nondet349.offset + 3 := 0];
    call write~$Pointer$(#t~nondet349.base, #t~nondet349.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 16, 8);
    call write~$Pointer$(~#b44_pci_tbl.base, ~#b44_pci_tbl.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 56, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 64, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 72, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 96 + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 96 + 8, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 96 + 16, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 96 + 24, 8);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 96 + 32, 1);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 96 + 33, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 96 + 41, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 96 + 49, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 96 + 57, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 96 + 65, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 96 + 73, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 96 + 81, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 96 + 89, 8);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 0 + 0 + 0 + 4, 4);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 0 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 0 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 0 + 0 + 0 + 20 + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 0 + 0 + 0 + 20 + 8, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 0 + 0 + 0 + 20 + 16, 8);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 0 + 0 + 0 + 20 + 24, 4);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 0 + 0 + 0 + 20 + 28, 8);
    call write~int(#t~union1465.__padding[0], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 0 + 0 + 0 + 0, 1);
    call write~$Pointer$(#t~union1465.dep_map.key.base, #t~union1465.dep_map.key.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 0 + 0 + 0 + 1 + 0, 8);
    call write~$Pointer$(#t~union1465.dep_map.class_cache.base, #t~union1465.dep_map.class_cache.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 0 + 0 + 0 + 1 + 8, 8);
    call write~$Pointer$(#t~union1465.dep_map.name.base, #t~union1465.dep_map.name.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 0 + 0 + 0 + 1 + 16, 8);
    call write~int(#t~union1465.dep_map.cpu, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 0 + 0 + 0 + 1 + 24, 4);
    call write~int(#t~union1465.dep_map.ip, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 0 + 0 + 0 + 1 + 28, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 56 + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 193 + 56 + 8, 8);
    havoc #t~nondet349.base, #t~nondet349.offset;
    havoc #t~union1465.__padding, #t~union1465.dep_map.key.base, #t~union1465.dep_map.key.offset, #t~union1465.dep_map.class_cache.base, #t~union1465.dep_map.class_cache.offset, #t~union1465.dep_map.name.base, #t~union1465.dep_map.name.offset, #t~union1465.dep_map.cpu, #t~union1465.dep_map.ip;
    call ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset := #Ultimate.alloc(10);
    call write~int(16963, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 0 + 0, 2);
    call write~int(2054, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 0 + 2, 2);
    call write~int(255, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 0 + 4, 1);
    call write~int(0, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 5 + 0, 2);
    call write~int(0, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 5 + 2, 2);
    call write~int(0, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 5 + 4, 1);
    call ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset := #Ultimate.alloc(264);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 8, 8);
    call write~$Pointer$(#funAddr~b44_open.base, #funAddr~b44_open.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 16, 8);
    call write~$Pointer$(#funAddr~b44_close.base, #funAddr~b44_close.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 24, 8);
    call write~$Pointer$(#funAddr~b44_start_xmit.base, #funAddr~b44_start_xmit.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 56, 8);
    call write~$Pointer$(#funAddr~b44_set_rx_mode.base, #funAddr~b44_set_rx_mode.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 64, 8);
    call write~$Pointer$(#funAddr~b44_set_mac_addr.base, #funAddr~b44_set_mac_addr.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 72, 8);
    call write~$Pointer$(#funAddr~eth_validate_addr.base, #funAddr~eth_validate_addr.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 80, 8);
    call write~$Pointer$(#funAddr~b44_ioctl.base, #funAddr~b44_ioctl.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 96, 8);
    call write~$Pointer$(#funAddr~b44_change_mtu.base, #funAddr~b44_change_mtu.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 104, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 112, 8);
    call write~$Pointer$(#funAddr~b44_tx_timeout.base, #funAddr~b44_tx_timeout.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 120, 8);
    call write~$Pointer$(#funAddr~b44_get_stats.base, #funAddr~b44_get_stats.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 128, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 136, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 144, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 152, 8);
    call write~$Pointer$(#funAddr~b44_poll_controller.base, #funAddr~b44_poll_controller.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 160, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 168, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 176, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 184, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 192, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 200, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 208, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 216, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 224, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 232, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 240, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 248, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 256, 8);
    call ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset := #Ultimate.alloc(153);
    call #t~nondet1359.base, #t~nondet1359.offset := #Ultimate.alloc(4);
    #memory_int := #memory_int[#t~nondet1359.base,#t~nondet1359.offset + 0 := 98];
    #memory_int := #memory_int[#t~nondet1359.base,#t~nondet1359.offset + 1 := 52];
    #memory_int := #memory_int[#t~nondet1359.base,#t~nondet1359.offset + 2 := 52];
    #memory_int := #memory_int[#t~nondet1359.base,#t~nondet1359.offset + 3 := 0];
    call write~$Pointer$(#t~nondet1359.base, #t~nondet1359.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 0, 8);
    call write~$Pointer$(~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 8, 8);
    call write~$Pointer$(#funAddr~b44_init_one.base, #funAddr~b44_init_one.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 16, 8);
    call write~$Pointer$(#funAddr~b44_remove_one.base, #funAddr~b44_remove_one.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 24, 8);
    call write~$Pointer$(#funAddr~b44_suspend.base, #funAddr~b44_suspend.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 32, 8);
    call write~$Pointer$(#funAddr~b44_resume.base, #funAddr~b44_resume.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 8, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 16, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 24, 8);
    call write~int(0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 32, 1);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 33, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 41, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 49, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 57, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 65, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 73, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 81, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 89, 8);
    havoc #t~nondet1359.base, #t~nondet1359.offset;
    assume true;
    return;
}

procedure ULTIMATE.init() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~ldv_irq_data_2_1.base, ~ldv_irq_data_2_1.offset, ~ldv_irq_1_3, ~ldv_irq_line_2_2, ~ldv_irq_data_1_1.base, ~ldv_irq_data_1_1.offset, ~ldv_irq_1_0, ~ldv_state_variable_6, ~ldv_irq_data_1_0.base, ~ldv_irq_data_1_0.offset, ~ldv_state_variable_0, ~ldv_state_variable_5, ~ldv_timer_state_3, ~ldv_irq_line_2_1, ~ldv_state_variable_2, ~ldv_irq_2_0, ~ldv_irq_data_1_3.base, ~ldv_irq_data_1_3.offset, ~ldv_irq_data_1_2.base, ~ldv_irq_data_1_2.offset, ~ldv_irq_data_2_0.base, ~ldv_irq_data_2_0.offset, ~ldv_irq_1_2, ~LDV_IN_INTERRUPT, ~ldv_irq_1_1, ~ldv_irq_2_3, ~ldv_irq_data_2_3.base, ~ldv_irq_data_2_3.offset, ~ldv_irq_line_1_3, ~ldv_irq_2_2, ~ldv_irq_line_2_0, ~ldv_state_variable_3, ~ldv_irq_line_1_0, ~ref_cnt, ~ldv_irq_line_1_1, ~ldv_irq_data_2_2.base, ~ldv_irq_data_2_2.offset, ~ldv_state_variable_1, ~ldv_state_variable_7, ~ldv_irq_line_1_2, ~ldv_state_variable_4, ~ldv_irq_line_2_3, ~ldv_irq_2_1, ~#version.base, ~#version.offset, ~b44_debug, ~dma_desc_align_mask, ~dma_desc_sync_size, ~instance, ~#b44_gstrings.base, ~#b44_gstrings.offset, ~ldv_retval_2, ~ldv_retval_5, ~ldv_retval_0, ~ldv_retval_4, ~ldv_retval_1, ~ldv_retval_3, ~ldv_carrier, ~ldv_register, ~ldv_timer_list_3.base, ~ldv_timer_list_3.offset, ~b44_ethtool_ops_group4.base, ~b44_ethtool_ops_group4.offset, ~b44_ethtool_ops_group0.base, ~b44_ethtool_ops_group0.offset, ~__param_b44_debug_group0.base, ~__param_b44_debug_group0.offset, ~b44_ethtool_ops_group2.base, ~b44_ethtool_ops_group2.offset, ~b44_ethtool_ops_group3.base, ~b44_ethtool_ops_group3.offset, ~b44_ethtool_ops_group1.base, ~b44_ethtool_ops_group1.offset, ~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset, ~b44_netdev_ops_group1.base, ~b44_netdev_ops_group1.offset, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length;

implementation b44_init() returns (#res : int){
    var #t~ret1361 : int;
    var #t~ite1362 : int;
    var #t~ret1363 : int;
    var #t~ret1364 : int;
    var ~dma_desc_align_size~970 : int;
    var ~tmp~970 : int;
    var ~err~970 : int;
    var ~__max1~970 : int;
    var ~__max2~970 : int;

  loc15:
    havoc ~dma_desc_align_size~970;
    havoc ~tmp~970;
    havoc ~err~970;
    havoc ~__max1~970;
    havoc ~__max2~970;
    call #t~ret1361 := dma_get_cache_alignment();
    assume -2147483648 <= #t~ret1361 && #t~ret1361 <= 2147483647;
    ~tmp~970 := #t~ret1361;
    havoc #t~ret1361;
    ~dma_desc_align_size~970 := ~tmp~970;
    ~dma_desc_align_mask := (if -~dma_desc_align_size~970 % 4294967296 % 4294967296 <= 2147483647 then -~dma_desc_align_size~970 % 4294967296 % 4294967296 else -~dma_desc_align_size~970 % 4294967296 % 4294967296 - 4294967296);
    ~__max1~970 := ~dma_desc_align_size~970;
    ~__max2~970 := 8;
    assume ~__max1~970 % 4294967296 > ~__max2~970 % 4294967296;
    #t~ite1362 := ~__max1~970;
    ~dma_desc_sync_size := (if #t~ite1362 % 4294967296 % 4294967296 <= 2147483647 then #t~ite1362 % 4294967296 % 4294967296 else #t~ite1362 % 4294967296 % 4294967296 - 4294967296);
    havoc #t~ite1362;
    call #t~ret1363 := b44_pci_init();
    assume -2147483648 <= #t~ret1363 && #t~ret1363 <= 2147483647;
    ~err~970 := #t~ret1363;
    havoc #t~ret1363;
    assume ~err~970 != 0;
    #res := ~err~970;
    assume true;
    return;
}

procedure b44_init() returns (#res : int);
modifies ~dma_desc_align_mask, ~dma_desc_sync_size;

implementation ldv_error() returns (){
  loc16:
    assume !false;
    goto loc17;
  loc17:
    assert false;
}

procedure ldv_error() returns ();
modifies ;

implementation ldv_zalloc(#in~size : int) returns (#res.base : int, #res.offset : int){
    var #t~nondet66 : int;
    var #t~malloc67.base : int, #t~malloc67.offset : int;
    var ~size : int;
    var ~p~152.base : int, ~p~152.offset : int;
    var ~tmp~152.base : int, ~tmp~152.offset : int;
    var ~tmp___0~152 : int;

  loc18:
    ~size := #in~size;
    havoc ~p~152.base, ~p~152.offset;
    havoc ~tmp~152.base, ~tmp~152.offset;
    havoc ~tmp___0~152;
    assume -2147483648 <= #t~nondet66 && #t~nondet66 <= 2147483647;
    ~tmp___0~152 := #t~nondet66;
    havoc #t~nondet66;
    assume ~tmp___0~152 != 0;
    #res.base, #res.offset := 0, 0;
    assume true;
    return;
}

procedure ldv_zalloc(#in~size : int) returns (#res.base : int, #res.offset : int);
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation ldv_register_netdev_10(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int) returns (#res : int){
    var #t~ret1459 : int;
    var ~ldv_func_arg1.base : int, ~ldv_func_arg1.offset : int;
    var ~tmp~1205 : int;

  loc19:
    ~ldv_func_arg1.base, ~ldv_func_arg1.offset := #in~ldv_func_arg1.base, #in~ldv_func_arg1.offset;
    havoc ~tmp~1205;
    call #t~ret1459 := ldv_register_netdev();
    return;
}

procedure ldv_register_netdev_10(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int) returns (#res : int);
modifies ~ldv_register;

implementation ULTIMATE.start() returns (){
    var #t~ret1466 : int;

  loc20:
    call ULTIMATE.init();
    call #t~ret1466 := main();
    return;
}

procedure ULTIMATE.start() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~ldv_irq_data_2_1.base, ~ldv_irq_data_2_1.offset, ~ldv_irq_1_3, ~ldv_irq_line_2_2, ~ldv_irq_data_1_1.base, ~ldv_irq_data_1_1.offset, ~ldv_irq_1_0, ~ldv_state_variable_6, ~ldv_irq_data_1_0.base, ~ldv_irq_data_1_0.offset, ~ldv_state_variable_0, ~ldv_state_variable_5, ~ldv_timer_state_3, ~ldv_irq_line_2_1, ~ldv_state_variable_2, ~ldv_irq_2_0, ~ldv_irq_data_1_3.base, ~ldv_irq_data_1_3.offset, ~ldv_irq_data_1_2.base, ~ldv_irq_data_1_2.offset, ~ldv_irq_data_2_0.base, ~ldv_irq_data_2_0.offset, ~ldv_irq_1_2, ~LDV_IN_INTERRUPT, ~ldv_irq_1_1, ~ldv_irq_2_3, ~ldv_irq_data_2_3.base, ~ldv_irq_data_2_3.offset, ~ldv_irq_line_1_3, ~ldv_irq_2_2, ~ldv_irq_line_2_0, ~ldv_state_variable_3, ~ldv_irq_line_1_0, ~ref_cnt, ~ldv_irq_line_1_1, ~ldv_irq_data_2_2.base, ~ldv_irq_data_2_2.offset, ~ldv_state_variable_1, ~ldv_state_variable_7, ~ldv_irq_line_1_2, ~ldv_state_variable_4, ~ldv_irq_line_2_3, ~ldv_irq_2_1, ~#version.base, ~#version.offset, ~b44_debug, ~dma_desc_align_mask, ~dma_desc_sync_size, ~instance, ~#b44_gstrings.base, ~#b44_gstrings.offset, ~ldv_retval_2, ~ldv_retval_5, ~ldv_retval_0, ~ldv_retval_4, ~ldv_retval_1, ~ldv_retval_3, ~ldv_carrier, ~ldv_register, ~ldv_timer_list_3.base, ~ldv_timer_list_3.offset, ~b44_ethtool_ops_group4.base, ~b44_ethtool_ops_group4.offset, ~b44_ethtool_ops_group0.base, ~b44_ethtool_ops_group0.offset, ~__param_b44_debug_group0.base, ~__param_b44_debug_group0.offset, ~b44_ethtool_ops_group2.base, ~b44_ethtool_ops_group2.offset, ~b44_ethtool_ops_group3.base, ~b44_ethtool_ops_group3.offset, ~b44_ethtool_ops_group1.base, ~b44_ethtool_ops_group1.offset, ~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset, ~b44_netdev_ops_group1.base, ~b44_netdev_ops_group1.offset, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_state_variable_6, ~ldv_state_variable_3, ~ldv_state_variable_7, ~ldv_state_variable_2, ~ldv_state_variable_1, ~ldv_state_variable_4, ~ref_cnt, ~ldv_state_variable_0, ~ldv_state_variable_5, ~ldv_retval_2, ~ldv_retval_1, ~ldv_retval_0, ~ldv_retval_3, ~ldv_retval_5, ~ldv_retval_4;
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~__param_b44_debug_group0.base, ~__param_b44_debug_group0.offset, ~b44_ssb_driver_group0.base, ~b44_ssb_driver_group0.offset, ~ldv_state_variable_5, ~dma_desc_align_mask, ~dma_desc_sync_size, ~LDV_IN_INTERRUPT, ~ldv_irq_1_0, ~ldv_irq_2_0, ~ldv_carrier, ~ldv_register, ~instance, ~ldv_state_variable_6, ~ldv_timer_list_3.base, ~ldv_timer_list_3.offset, ~ldv_timer_state_3, ~ldv_irq_line_2_0, ~ldv_irq_data_2_0.base, ~ldv_irq_data_2_0.offset, ~ldv_irq_line_2_1, ~ldv_irq_data_2_1.base, ~ldv_irq_data_2_1.offset, ~ldv_irq_2_1, ~ldv_irq_line_2_2, ~ldv_irq_data_2_2.base, ~ldv_irq_data_2_2.offset, ~ldv_irq_2_2, ~ldv_irq_line_2_3, ~ldv_irq_data_2_3.base, ~ldv_irq_data_2_3.offset, ~ldv_irq_2_3, ~ldv_state_variable_3, ~ldv_state_variable_7, ~ldv_state_variable_2, ~ldv_state_variable_1, ~ldv_state_variable_4, ~ref_cnt, ~ldv_state_variable_0, ~ldv_retval_2, ~ldv_retval_1, ~ldv_retval_0, ~ldv_retval_3, ~ldv_retval_5, ~ldv_retval_4;

implementation ldv_register_netdev() returns (#res : int){
    var #t~ret1464 : int;
    var ~tmp~1225 : int;

  loc21:
    havoc ~tmp~1225;
    call #t~ret1464 := ldv_undef_int();
    assume -2147483648 <= #t~ret1464 && #t~ret1464 <= 2147483647;
    ~tmp~1225 := #t~ret1464;
    havoc #t~ret1464;
    assume ~tmp~1225 != 0;
    ~ldv_register := 1;
    assume !(~ldv_carrier != 0);
    call ldv_error();
    return;
}

procedure ldv_register_netdev() returns (#res : int);
modifies ~ldv_register;

implementation spinlock_check(#in~lock.base : int, #in~lock.offset : int) returns (#res.base : int, #res.offset : int){
    var ~lock.base : int, ~lock.offset : int;

  loc22:
    ~lock.base, ~lock.offset := #in~lock.base, #in~lock.offset;
    #res.base, #res.offset := ~lock.base, ~lock.offset + 0 + 0;
    assume true;
    return;
}

procedure spinlock_check(#in~lock.base : int, #in~lock.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation netif_msg_init(#in~debug_value : int, #in~default_msg_enable_bits : int) returns (#res : ~u32){
    var ~debug_value : int;
    var ~default_msg_enable_bits : int;

  loc23:
    ~debug_value := #in~debug_value;
    ~default_msg_enable_bits := #in~default_msg_enable_bits;
    assume ~debug_value < 0 || ~debug_value % 4294967296 > 31;
    #res := ~default_msg_enable_bits;
    assume true;
    return;
}

procedure netif_msg_init(#in~debug_value : int, #in~default_msg_enable_bits : int) returns (#res : ~u32);
modifies ;

implementation b44_pci_init() returns (#res : int){
    var #t~ret1360 : int;
    var ~err~966 : int;

  loc24:
    havoc ~err~966;
    ~err~966 := 0;
    call #t~ret1360 := ssb_pcihost_register(~#b44_pci_driver.base, ~#b44_pci_driver.offset);
    assume -2147483648 <= #t~ret1360 && #t~ret1360 <= 2147483647;
    ~err~966 := #t~ret1360;
    havoc #t~ret1360;
    #res := ~err~966;
    assume true;
    return;
}

procedure b44_pci_init() returns (#res : int);
modifies ;

implementation ldv_netif_carrier_off_9(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int) returns (){
    var ~ldv_func_arg1.base : int, ~ldv_func_arg1.offset : int;

  loc25:
    ~ldv_func_arg1.base, ~ldv_func_arg1.offset := #in~ldv_func_arg1.base, #in~ldv_func_arg1.offset;
    call ldv_turn_off_carrier_detection();
    assume true;
    return;
}

procedure ldv_netif_carrier_off_9(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int) returns ();
modifies ~ldv_carrier;

implementation b44_init_one(#in~sdev.base : int, #in~sdev.offset : int, #in~ent.base : int, #in~ent.offset : int) returns (#res : int){
    var #t~nondet1248.base : int, #t~nondet1248.offset : int;
    var #t~ret1249 : int;
    var #t~ret1250.base : int, #t~ret1250.offset : int;
    var #t~mem1251.base : int, #t~mem1251.offset : int;
    var #t~ret1252.base : int, #t~ret1252.offset : int;
    var #t~mem1253.base : int, #t~mem1253.offset : int;
    var #t~ret1254.base : int, #t~ret1254.offset : int;
    var #t~nondet1255.base : int, #t~nondet1255.offset : int;
    var #t~ret1256 : int;
    var #t~mem1258.base : int, #t~mem1258.offset : int;
    var #t~mem1260 : int;
    var #t~ret1261.base : int, #t~ret1261.offset : int;
    var #t~ret1265 : ~u32;
    var #t~ret1267.base : int, #t~ret1267.offset : int;
    var #t~nondet1268.base : int, #t~nondet1268.offset : int;
    var #t~mem1274 : int;
    var #t~mem1275.base : int, #t~mem1275.offset : int;
    var #t~ret1276 : int;
    var #t~mem1277.base : int, #t~mem1277.offset : int;
    var #t~ret1278.base : int, #t~ret1278.offset : int;
    var #t~mem1279.base : int, #t~mem1279.offset : int;
    var #t~ret1280.base : int, #t~ret1280.offset : int;
    var #t~nondet1281.base : int, #t~nondet1281.offset : int;
    var #t~ret1282 : int;
    var #t~ret1283 : int;
    var #t~mem1284.base : int, #t~mem1284.offset : int;
    var #t~ret1285.base : int, #t~ret1285.offset : int;
    var #t~mem1286.base : int, #t~mem1286.offset : int;
    var #t~ret1287.base : int, #t~ret1287.offset : int;
    var #t~nondet1288.base : int, #t~nondet1288.offset : int;
    var #t~ret1289 : int;
    var #t~ret1290 : int;
    var #t~mem1291.base : int, #t~mem1291.offset : int;
    var #t~ret1292.base : int, #t~ret1292.offset : int;
    var #t~mem1293.base : int, #t~mem1293.offset : int;
    var #t~ret1294.base : int, #t~ret1294.offset : int;
    var #t~nondet1295.base : int, #t~nondet1295.offset : int;
    var #t~ret1296 : int;
    var #t~mem1300 : int;
    var #t~mem1304 : int;
    var #t~mem1306 : int;
    var #t~ret1308 : int;
    var #t~mem1309.base : int, #t~mem1309.offset : int;
    var #t~ret1310.base : int, #t~ret1310.offset : int;
    var #t~mem1311.base : int, #t~mem1311.offset : int;
    var #t~ret1312.base : int, #t~ret1312.offset : int;
    var #t~nondet1313.base : int, #t~nondet1313.offset : int;
    var #t~ret1314 : int;
    var #t~ret1315 : int;
    var #t~ret1317.base : int, #t~ret1317.offset : int;
    var #t~mem1318.base : int, #t~mem1318.offset : int;
    var #t~ret1319.base : int, #t~ret1319.offset : int;
    var #t~mem1320.base : int, #t~mem1320.offset : int;
    var #t~ret1321.base : int, #t~ret1321.offset : int;
    var #t~nondet1322.base : int, #t~nondet1322.offset : int;
    var #t~ret1323 : int;
    var #t~mem1324.base : int, #t~mem1324.offset : int;
    var #t~ret1325 : int;
    var ~sdev.base : int, ~sdev.offset : int;
    var ~ent.base : int, ~ent.offset : int;
    var ~b44_version_printed~934 : int;
    var ~dev~934.base : int, ~dev~934.offset : int;
    var ~bp~934.base : int, ~bp~934.offset : int;
    var ~err~934 : int;
    var ~tmp~934 : int;
    var ~tmp___0~934.base : int, ~tmp___0~934.offset : int;
    var ~tmp___1~934.base : int, ~tmp___1~934.offset : int;
    var ~tmp___2~934.base : int, ~tmp___2~934.offset : int;
    var ~#__key~934.base : int, ~#__key~934.offset : int;
    var ~tmp___3~934.base : int, ~tmp___3~934.offset : int;
    var ~tmp___4~934.base : int, ~tmp___4~934.offset : int;
    var ~tmp___5~934.base : int, ~tmp___5~934.offset : int;
    var ~tmp___6~934.base : int, ~tmp___6~934.offset : int;
    var ~tmp___7~934.base : int, ~tmp___7~934.offset : int;
    var ~tmp___8~934.base : int, ~tmp___8~934.offset : int;
    var ~tmp___9~934.base : int, ~tmp___9~934.offset : int;
    var ~tmp___10~934.base : int, ~tmp___10~934.offset : int;
    var ~tmp___11~934 : int;
    var ~tmp___12~934.base : int, ~tmp___12~934.offset : int;
    var ~tmp___13~934.base : int, ~tmp___13~934.offset : int;
    var ~tmp___14~934.base : int, ~tmp___14~934.offset : int;

  loc26:
    ~sdev.base, ~sdev.offset := #in~sdev.base, #in~sdev.offset;
    ~ent.base, ~ent.offset := #in~ent.base, #in~ent.offset;
    havoc ~b44_version_printed~934;
    havoc ~dev~934.base, ~dev~934.offset;
    havoc ~bp~934.base, ~bp~934.offset;
    havoc ~err~934;
    havoc ~tmp~934;
    havoc ~tmp___0~934.base, ~tmp___0~934.offset;
    havoc ~tmp___1~934.base, ~tmp___1~934.offset;
    havoc ~tmp___2~934.base, ~tmp___2~934.offset;
    call ~#__key~934.base, ~#__key~934.offset := #Ultimate.alloc(8);
    havoc ~tmp___3~934.base, ~tmp___3~934.offset;
    havoc ~tmp___4~934.base, ~tmp___4~934.offset;
    havoc ~tmp___5~934.base, ~tmp___5~934.offset;
    havoc ~tmp___6~934.base, ~tmp___6~934.offset;
    havoc ~tmp___7~934.base, ~tmp___7~934.offset;
    havoc ~tmp___8~934.base, ~tmp___8~934.offset;
    havoc ~tmp___9~934.base, ~tmp___9~934.offset;
    havoc ~tmp___10~934.base, ~tmp___10~934.offset;
    havoc ~tmp___11~934;
    havoc ~tmp___12~934.base, ~tmp___12~934.offset;
    havoc ~tmp___13~934.base, ~tmp___13~934.offset;
    havoc ~tmp___14~934.base, ~tmp___14~934.offset;
    ~b44_version_printed~934 := 0;
    ~instance := ~instance + 1;
    ~tmp~934 := ~b44_version_printed~934;
    ~b44_version_printed~934 := ~b44_version_printed~934 + 1;
    assume ~tmp~934 == 0;
    call #t~nondet1248.base, #t~nondet1248.offset := #Ultimate.alloc(11);
    call #t~ret1249 := printk(#t~nondet1248.base, #t~nondet1248.offset);
    assume -2147483648 <= #t~ret1249 && #t~ret1249 <= 2147483647;
    havoc #t~nondet1248.base, #t~nondet1248.offset;
    havoc #t~ret1249;
    call #t~ret1250.base, #t~ret1250.offset := alloc_etherdev_mq(704, 1);
    ~dev~934.base, ~dev~934.offset := #t~ret1250.base, #t~ret1250.offset;
    havoc #t~ret1250.base, #t~ret1250.offset;
    assume !((~dev~934.base + ~dev~934.offset) % 18446744073709551616 == 0);
    call #t~mem1258.base, #t~mem1258.offset := read~$Pointer$(~sdev.base, ~sdev.offset + 8, 8);
    call write~$Pointer$(#t~mem1258.base, #t~mem1258.offset, ~dev~934.base, ~dev~934.offset + 1153 + 0, 8);
    havoc #t~mem1258.base, #t~mem1258.offset;
    call #t~mem1260 := read~int(~dev~934.base, ~dev~934.offset + 134, 8);
    call write~int(#t~mem1260, ~dev~934.base, ~dev~934.offset + 134, 8);
    havoc #t~mem1260;
    call #t~ret1261.base, #t~ret1261.offset := netdev_priv(~dev~934.base, ~dev~934.offset);
    ~tmp___2~934.base, ~tmp___2~934.offset := #t~ret1261.base, #t~ret1261.offset;
    havoc #t~ret1261.base, #t~ret1261.offset;
    ~bp~934.base, ~bp~934.offset := ~tmp___2~934.base, ~tmp___2~934.offset;
    call write~$Pointer$(~sdev.base, ~sdev.offset, ~bp~934.base, ~bp~934.offset + 568, 8);
    call write~$Pointer$(~dev~934.base, ~dev~934.offset, ~bp~934.base, ~bp~934.offset + 576, 8);
    call write~int(0, ~bp~934.base, ~bp~934.offset + 609, 1);
    call #t~ret1265 := netif_msg_init(~b44_debug, 255);
    call write~int(#t~ret1265, ~bp~934.base, ~bp~934.offset + 260, 4);
    havoc #t~ret1265;
    call #t~ret1267.base, #t~ret1267.offset := spinlock_check(~bp~934.base, ~bp~934.offset + 0);
    havoc #t~ret1267.base, #t~ret1267.offset;
    call #t~nondet1268.base, #t~nondet1268.offset := #Ultimate.alloc(20);
    call __raw_spin_lock_init(~bp~934.base, ~bp~934.offset + 0 + 0 + 0, #t~nondet1268.base, #t~nondet1268.offset, ~#__key~934.base, ~#__key~934.offset);
    havoc #t~nondet1268.base, #t~nondet1268.offset;
    call write~int(200, ~bp~934.base, ~bp~934.offset + 600, 4);
    call write~int(511, ~bp~934.base, ~bp~934.offset + 604, 4);
    call write~$Pointer$(~#b44_netdev_ops.base, ~#b44_netdev_ops.offset, ~dev~934.base, ~dev~934.offset + 350, 8);
    call netif_napi_add(~dev~934.base, ~dev~934.offset, ~bp~934.base, ~bp~934.offset + 112, #funAddr~b44_poll.base, #funAddr~b44_poll.offset, 64);
    call write~int(1250, ~dev~934.base, ~dev~934.offset + 921, 4);
    call #t~mem1274 := read~int(~sdev.base, ~sdev.offset + 30, 4);
    call write~int(#t~mem1274, ~dev~934.base, ~dev~934.offset + 72, 4);
    havoc #t~mem1274;
    ~ldv_state_variable_6 := 1;
    call ldv_netif_carrier_off_9(~dev~934.base, ~dev~934.offset);
    call #t~mem1275.base, #t~mem1275.offset := read~$Pointer$(~sdev.base, ~sdev.offset + 16, 8);
    call #t~ret1276 := ssb_bus_powerup(#t~mem1275.base, #t~mem1275.offset, 0);
    assume -2147483648 <= #t~ret1276 && #t~ret1276 <= 2147483647;
    ~err~934 := #t~ret1276;
    havoc #t~mem1275.base, #t~mem1275.offset;
    havoc #t~ret1276;
    assume !(~err~934 != 0);
    call #t~ret1283 := ssb_dma_set_mask(~sdev.base, ~sdev.offset, 1073741823);
    assume -2147483648 <= #t~ret1283 && #t~ret1283 <= 2147483647;
    ~err~934 := #t~ret1283;
    havoc #t~ret1283;
    assume !(~err~934 != 0);
    call #t~ret1290 := b44_get_invariants(~bp~934.base, ~bp~934.offset);
    assume -2147483648 <= #t~ret1290 && #t~ret1290 <= 2147483647;
    ~err~934 := #t~ret1290;
    havoc #t~ret1290;
    assume !(~err~934 != 0);
    call write~$Pointer$(~dev~934.base, ~dev~934.offset, ~bp~934.base, ~bp~934.offset + 610 + 19, 8);
    call write~$Pointer$(#funAddr~b44_mii_read.base, #funAddr~b44_mii_read.offset, ~bp~934.base, ~bp~934.offset + 610 + 27, 8);
    call write~$Pointer$(#funAddr~b44_mii_write.base, #funAddr~b44_mii_write.offset, ~bp~934.base, ~bp~934.offset + 610 + 35, 8);
    call #t~mem1300 := read~int(~bp~934.base, ~bp~934.offset + 608, 1);
    call write~int(#t~mem1300 % 256, ~bp~934.base, ~bp~934.offset + 610 + 0, 4);
    havoc #t~mem1300;
    call write~int(31, ~bp~934.base, ~bp~934.offset + 610 + 8, 4);
    call write~int(31, ~bp~934.base, ~bp~934.offset + 610 + 12, 4);
    call #t~mem1304 := read~int(~bp~934.base, ~bp~934.offset + 256, 4);
    call write~int(~bitwiseOr(#t~mem1304, 251658240), ~bp~934.base, ~bp~934.offset + 256, 4);
    havoc #t~mem1304;
    call #t~mem1306 := read~int(~bp~934.base, ~bp~934.offset + 256, 4);
    call write~int(~bitwiseOr(#t~mem1306, 32768), ~bp~934.base, ~bp~934.offset + 256, 4);
    havoc #t~mem1306;
    call #t~ret1308 := ldv_register_netdev_10(~dev~934.base, ~dev~934.offset);
    return;
}

procedure b44_init_one(#in~sdev.base : int, #in~sdev.offset : int, #in~ent.base : int, #in~ent.offset : int) returns (#res : int);
modifies ~instance, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int, ~ldv_state_variable_6, #valid, #length, ~ldv_carrier, ~ldv_state_variable_5, ~ldv_register;

procedure debug_dma_sync_single_for_device(#in~93.base : int, #in~93.offset : int, #in~94 : int, #in~95 : int, #in~96 : int) returns ();
modifies ;

procedure ldv_ndo_uninit_5() returns (#res : int);
modifies ;

procedure msleep(#in~28 : int) returns ();
modifies ;

procedure pci_unregister_driver(#in~246.base : int, #in~246.offset : int) returns ();
modifies ;

procedure debug_dma_sync_single_for_cpu(#in~89.base : int, #in~89.offset : int, #in~90 : int, #in~91 : int, #in~92 : int) returns ();
modifies ;

procedure debug_lockdep_rcu_enabled() returns (#res : int);
modifies ;

procedure disable_irq(#in~188 : int) returns ();
modifies ;

procedure ethtool_op_get_link(#in~165.base : int, #in~165.offset : int) returns (#res : ~u32);
modifies ;

procedure free_irq(#in~186 : int, #in~187.base : int, #in~187.offset : int) returns ();
modifies ;

procedure ssb_device_enable(#in~264.base : int, #in~264.offset : int, #in~265 : int) returns ();
modifies ;

procedure __memcpy(#in~6.base : int, #in~6.offset : int, #in~7.base : int, #in~7.offset : int, #in~8 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure ssb_device_is_enabled(#in~263.base : int, #in~263.offset : int) returns (#res : int);
modifies ;

procedure netif_carrier_on(#in~206.base : int, #in~206.offset : int) returns ();
modifies ;

procedure ldv_ndo_init_5() returns (#res : int);
modifies ;

procedure ssb_device_disable(#in~266.base : int, #in~266.offset : int, #in~267 : int) returns ();
modifies ;

procedure ssb_bus_powerup(#in~347.base : int, #in~347.offset : int, #in~348 : int) returns (#res : int);
modifies ;

procedure ssb_driver_unregister(#in~259.base : int, #in~259.offset : int) returns ();
modifies ;

procedure debug_dma_unmap_page(#in~84.base : int, #in~84.offset : int, #in~85 : int, #in~86 : int, #in~87 : int, #in~88 : int) returns ();
modifies ;

procedure __netif_schedule(#in~191.base : int, #in~191.offset : int) returns ();
modifies ;

procedure round_jiffies(#in~33 : int) returns (#res : int);
modifies ;

procedure __kmalloc(#in~54 : int, #in~55 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure _raw_spin_unlock_irq(#in~24.base : int, #in~24.offset : int) returns ();
modifies ;

procedure ssb_dma_translation(#in~282.base : int, #in~282.offset : int) returns (#res : ~u32);
modifies ;

procedure read~$Pointer$(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value.base : int, #value.offset : int);
ensures #value.base == #memory_$Pointer$.base[#ptr.base,#ptr.offset] && #value.offset == #memory_$Pointer$.offset[#ptr.base,#ptr.offset];

procedure add_timer(#in~31.base : int, #in~31.offset : int) returns ();
modifies ;

procedure strlcpy(#in~12.base : int, #in~12.offset : int, #in~13.base : int, #in~13.offset : int, #in~14 : int) returns (#res : int);
modifies ;

procedure eth_validate_addr(#in~218.base : int, #in~218.offset : int) returns (#res : int);
modifies ;

procedure __VERIFIER_nondet_u32() returns (#res : ~u32);
modifies ;

procedure ssb_dma_free_consistent(#in~289.base : int, #in~289.offset : int, #in~290 : int, #in~291.base : int, #in~291.offset : int, #in~292 : int, #in~293 : int) returns ();
modifies ;

procedure _raw_spin_unlock(#in~23.base : int, #in~23.offset : int) returns ();
modifies ;

procedure ULTIMATE.dealloc(~addr.base : int, ~addr.offset : int) returns ();
free ensures #valid == old(#valid)[~addr.base := 0];
modifies #valid;

procedure netif_device_attach(#in~208.base : int, #in~208.offset : int) returns ();
modifies ;

procedure generic_mii_ioctl(#in~212.base : int, #in~212.offset : int, #in~213.base : int, #in~213.offset : int, #in~214 : int, #in~215.base : int, #in~215.offset : int) returns (#res : int);
modifies ;

procedure printk(#in~5.base : int, #in~5.offset : int) returns (#res : int);
modifies ;

procedure calloc(#in~nmemb : int, #in~size : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure ssb_dma_set_mask(#in~283.base : int, #in~283.offset : int, #in~284 : int) returns (#res : int);
modifies ;

procedure netif_device_detach(#in~207.base : int, #in~207.offset : int) returns ();
modifies ;

procedure _raw_spin_lock_irqsave(#in~22.base : int, #in~22.offset : int) returns (#res : int);
modifies ;

procedure netif_receive_skb(#in~204.base : int, #in~204.offset : int) returns (#res : int);
modifies ;

procedure alloc_etherdev_mq(#in~219 : int, #in~220 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __ssb_driver_register(#in~256.base : int, #in~256.offset : int, #in~257.base : int, #in~257.offset : int) returns (#res : int);
modifies ;

procedure netif_napi_add(#in~175.base : int, #in~175.offset : int, #in~176.base : int, #in~176.offset : int, #in~177.base : int, #in~177.offset : int, #in~178 : int) returns ();
modifies ;

procedure __VERIFIER_nondet_int() returns (#res : int);
modifies ;

procedure dev_kfree_skb_irq(#in~202.base : int, #in~202.offset : int) returns ();
modifies ;

procedure __napi_schedule(#in~166.base : int, #in~166.offset : int) returns ();
modifies ;

procedure __raw_spin_lock_init(#in~17.base : int, #in~17.offset : int, #in~18.base : int, #in~18.offset : int, #in~19.base : int, #in~19.offset : int) returns ();
modifies ;

procedure #Ultimate.alloc(~size : int) returns (#res.base : int, #res.offset : int);
ensures old(#valid)[#res.base] == 0;
ensures #valid == old(#valid)[#res.base := 1];
ensures #res.offset == 0;
ensures #res.base != 0;
ensures #length == old(#length)[#res.base := ~size];
modifies #valid, #length;

procedure ULTIMATE.free(~addr.base : int, ~addr.offset : int) returns ();
free requires ~addr.offset == 0;
free requires ~addr.base == 0 || #valid[~addr.base] == 1;
free ensures (if ~addr.base == 0 then #valid == old(#valid) else #valid == old(#valid)[~addr.base := 0]);
modifies #valid;

procedure read~int(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value : int);
ensures #value == #memory_int[#ptr.base,#ptr.offset];

procedure ldv_initialize() returns ();
modifies ;

procedure __phys_addr(#in~2 : int) returns (#res : int);
modifies ;

procedure free_netdev(#in~190.base : int, #in~190.offset : int) returns ();
modifies ;

procedure del_timer_sync(#in~32.base : int, #in~32.offset : int) returns (#res : int);
modifies ;

procedure pci_bus_write_config_word(#in~234.base : int, #in~234.offset : int, #in~235 : int, #in~236 : int, #in~237 : int) returns (#res : int);
modifies ;

procedure __get_free_pages(#in~34 : int, #in~35 : int) returns (#res : int);
modifies ;

procedure ssb_clockspeed(#in~262.base : int, #in~262.offset : int) returns (#res : ~u32);
modifies ;

procedure kfree(#in~36.base : int, #in~36.offset : int) returns ();
modifies ;

procedure __netdev_alloc_skb(#in~157.base : int, #in~157.offset : int, #in~158 : int, #in~159 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure write~int(#value : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #value];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset]] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #memory_$Pointer$.offset[#ptr.base,#ptr.offset]];

procedure skb_pull(#in~151.base : int, #in~151.offset : int, #in~152 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __VERIFIER_error() returns ();
modifies ;

procedure napi_complete(#in~170.base : int, #in~170.offset : int) returns ();
modifies ;

procedure net_ratelimit() returns (#res : int);
modifies ;

procedure param_get_int(#in~71.base : int, #in~71.offset : int, #in~72.base : int, #in~72.offset : int) returns (#res : int);
modifies ;

procedure eth_type_trans(#in~216.base : int, #in~216.offset : int, #in~217.base : int, #in~217.offset : int) returns (#res : ~__be16);
modifies ;

procedure ssb_bus_may_powerdown(#in~346.base : int, #in~346.offset : int) returns (#res : int);
modifies ;

procedure enable_irq(#in~189 : int) returns ();
modifies ;

procedure ssb_pcicore_dev_irqvecs_enable(#in~260.base : int, #in~260.offset : int, #in~261.base : int, #in~261.offset : int) returns (#res : int);
modifies ;

procedure kmem_cache_alloc_notrace(#in~56.base : int, #in~56.offset : int, #in~57 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure dev_kfree_skb_any(#in~203.base : int, #in~203.offset : int) returns ();
modifies ;

procedure __VERIFIER_assume(#in~expression : int) returns ();
modifies ;

procedure __builtin_prefetch(#in~0.base : int, #in~0.offset : int) returns ();
modifies ;

procedure dev_driver_string(#in~76.base : int, #in~76.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __const_udelay(#in~27 : int) returns ();
modifies ;

procedure write~$Pointer$(#value.base : int, #value.offset : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #memory_int[#ptr.base,#ptr.offset]];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #value.base] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #value.offset];

procedure _raw_spin_unlock_irqrestore(#in~25.base : int, #in~25.offset : int, #in~26 : int) returns ();
modifies ;

procedure ssb_dma_alloc_consistent(#in~285.base : int, #in~285.offset : int, #in~286 : int, #in~287.base : int, #in~287.offset : int, #in~288 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure ssb_pcihost_register(#in~340.base : int, #in~340.offset : int) returns (#res : int);
modifies ;

procedure mod_timer(#in~29.base : int, #in~29.offset : int, #in~30 : int) returns (#res : int);
modifies ;

procedure memset(#in~9.base : int, #in~9.offset : int, #in~10 : int, #in~11 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure param_set_int(#in~69.base : int, #in~69.offset : int, #in~70.base : int, #in~70.offset : int) returns (#res : int);
modifies ;

procedure debug_dma_map_page(#in~77.base : int, #in~77.offset : int, #in~78.base : int, #in~78.offset : int, #in~79 : int, #in~80 : int, #in~81 : int, #in~82 : int, #in~83 : int) returns ();
modifies ;

procedure pci_set_power_state(#in~244.base : int, #in~244.offset : int, #in~245 : int) returns (#res : int);
modifies ;

procedure warn_slowpath_null(#in~3.base : int, #in~3.offset : int, #in~4 : int) returns ();
modifies ;

procedure skb_put(#in~149.base : int, #in~149.offset : int, #in~150 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure _raw_spin_lock_irq(#in~21.base : int, #in~21.offset : int) returns ();
modifies ;

procedure lockdep_rcu_dereference(#in~15.base : int, #in~15.offset : int, #in~16 : int) returns ();
modifies ;

procedure _raw_spin_lock(#in~20.base : int, #in~20.offset : int) returns ();
modifies ;

procedure pci_bus_read_config_word(#in~230.base : int, #in~230.offset : int, #in~231 : int, #in~232 : int, #in~233.base : int, #in~233.offset : int) returns (#res : int);
modifies ;

procedure request_threaded_irq(#in~179 : int, #in~180.base : int, #in~180.offset : int, #in~181.base : int, #in~181.offset : int, #in~182 : int, #in~183.base : int, #in~183.offset : int, #in~184.base : int, #in~184.offset : int) returns (#res : int);
modifies ;

procedure ldv_check_final_state() returns ();
modifies ;

procedure unregister_netdev(#in~209.base : int, #in~209.offset : int) returns ();
modifies ;

procedure netpoll_trap() returns (#res : int);
modifies ;

