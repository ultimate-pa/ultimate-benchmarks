type STRUCT~perf_event;
type STRUCT~tvec_base;
type STRUCT~dev_pm_qos_request;
type STRUCT~pm_qos_raints;
type STRUCT~sock;
type STRUCT~sysfs_dirent;
type STRUCT~module_param_attrs;
type STRUCT~module_sect_attrs;
type STRUCT~module_notes_attrs;
type STRUCT~ftrace_event_call;
type STRUCT~anon_vma;
type STRUCT~mempolicy;
type STRUCT~linux_binfmt;
type STRUCT~mmu_notifier_mm;
type STRUCT~sem_undo_list;
type STRUCT~pid_namespace;
type STRUCT~keyring_list;
type STRUCT~key_type;
type STRUCT~key_user;
type STRUCT~user_namespace;
type STRUCT~eventfd_ctx;
type STRUCT~tty_struct;
type STRUCT~autogroup;
type STRUCT~taskstats;
type STRUCT~tty_audit_buf;
type STRUCT~rq;
type STRUCT~cfs_rq;
type STRUCT~rt_rq;
type STRUCT~mem_cgroup;
type STRUCT~fs_struct;
type STRUCT~files_struct;
type STRUCT~nsproxy;
type STRUCT~audit_context;
type STRUCT~rt_mutex_waiter;
type STRUCT~bio_list;
type STRUCT~blk_plug;
type STRUCT~reclaim_state;
type STRUCT~backing_dev_info;
type STRUCT~io_context;
type STRUCT~css_set;
type STRUCT~robust_list_head;
type STRUCT~compat_robust_list_head;
type STRUCT~futex_pi_state;
type STRUCT~perf_event_context;
type STRUCT~pipe_inode_info;
type STRUCT~nameidata;
type STRUCT~vfsmount;
type STRUCT~radix_tree_node;
type STRUCT~writeback_control;
type STRUCT~hd_struct;
type STRUCT~gendisk;
type STRUCT~request_queue;
type STRUCT~cdev;
type STRUCT~posix_acl;
type STRUCT~nlm_lockowner;
type STRUCT~nfs4_lock_state;
type STRUCT~export_operations;
type STRUCT~xattr_handler;
type STRUCT~mtd_info;
type STRUCT~poll_table_struct;
type STRUCT~kstatfs;
type STRUCT~seq_file;
type STRUCT~iommu_ops;
type STRUCT~subsys_private;
type STRUCT~driver_private;
type STRUCT~device_private;
type STRUCT~dma_coherent_mem;
type STRUCT~device_node;
type STRUCT~hotplug_slot;
type STRUCT~pci_sriov;
type STRUCT~proc_dir_entry;
type STRUCT~pcie_link_state;
type STRUCT~pci_vpd;
type STRUCT~pci_ats;
type STRUCT~dma_pool;
type ~__s8 = int;
type ~__u8 = int;
type ~__s16 = int;
type ~__u16 = int;
type ~__s32 = int;
type ~__u32 = int;
type ~__s64 = int;
type ~__u64 = int;
type ~u8 = int;
type ~s16 = int;
type ~u16 = int;
type ~s32 = int;
type ~u32 = int;
type ~s64 = int;
type ~u64 = int;
type ~__kernel_long_t = int;
type ~__kernel_ulong_t = int;
type ~__kernel_pid_t = int;
type ~__kernel_uid32_t = int;
type ~__kernel_gid32_t = int;
type ~__kernel_loff_t = int;
type ~__kernel_timer_t = int;
type ~__kernel_clockid_t = int;
type ~umode_t = int;
type ~bool = int;
type ~sector_t = int;
type ~blkcnt_t = int;
type ~gfp_t = int;
type ~fmode_t = int;
type ~pgdval_t = int;
type ~pgprotval_t = int;
type ~cputime_t = int;
type ~qsize_t = int;
type ~kernel_ulong_t = int;
type ~pci_power_t = int;
type ~pci_channel_state_t = int;
type ~pci_dev_flags_t = int;
type ~pci_bus_flags_t = int;
type ~pci_ers_result_t = int;
type ~__kernel_size_t = ~__kernel_ulong_t;
type ~__kernel_ssize_t = ~__kernel_long_t;
type ~__kernel_time_t = ~__kernel_long_t;
type ~__kernel_clock_t = ~__kernel_long_t;
type ~__kernel_dev_t = ~__u32;
type ~dev_t = ~__kernel_dev_t;
type ~pid_t = ~__kernel_pid_t;
type ~clockid_t = ~__kernel_clockid_t;
type ~uid_t = ~__kernel_uid32_t;
type ~gid_t = ~__kernel_gid32_t;
type ~loff_t = ~__kernel_loff_t;
type ~size_t = ~__kernel_size_t;
type ~ssize_t = ~__kernel_ssize_t;
type ~time_t = ~__kernel_time_t;
type ~int8_t = ~__s8;
type ~int32_t = ~__s32;
type ~uint8_t = ~__u8;
type ~uint16_t = ~__u16;
type ~uint32_t = ~__u32;
type ~uint64_t = ~__u64;
type ~dma_addr_t = ~u64;
type ~phys_addr_t = ~u64;
type ~resource_size_t = ~phys_addr_t;
type ~__ticket_t = ~u16;
type ~__ticketpair_t = ~u32;
type ~Elf64_Addr = ~__u64;
type ~Elf64_Half = ~__u16;
type ~Elf64_Word = ~__u32;
type ~Elf64_Xword = ~__u64;
type ~key_serial_t = ~int32_t;
type ~key_perm_t = ~uint32_t;
type ~qid_t = ~__kernel_uid32_t;
const #funAddr~noop_llseek.base : int;
const #funAddr~noop_llseek.offset : int;
const #funAddr~mraid_mm_unlocked_ioctl.base : int;
const #funAddr~mraid_mm_unlocked_ioctl.offset : int;
const #funAddr~mraid_mm_compat_ioctl.base : int;
const #funAddr~mraid_mm_compat_ioctl.offset : int;
const #funAddr~mraid_mm_open.base : int;
const #funAddr~mraid_mm_open.offset : int;
const #funAddr~ioctl_done.base : int;
const #funAddr~ioctl_done.offset : int;
const #funAddr~lld_timedout.base : int;
const #funAddr~lld_timedout.offset : int;
const #funAddr~autoremove_wake_function.base : int;
const #funAddr~autoremove_wake_function.offset : int;
const ~rpm_status~RPM_ACTIVE : int;
const ~rpm_status~RPM_RESUMING : int;
const ~rpm_status~RPM_SUSPENDED : int;
const ~rpm_status~RPM_SUSPENDING : int;
const ~rpm_request~RPM_REQ_NONE : int;
const ~rpm_request~RPM_REQ_IDLE : int;
const ~rpm_request~RPM_REQ_SUSPEND : int;
const ~rpm_request~RPM_REQ_AUTOSUSPEND : int;
const ~rpm_request~RPM_REQ_RESUME : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NONE : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NET : int;
const ~kobj_ns_type~KOBJ_NS_TYPES : int;
const ~module_state~MODULE_STATE_LIVE : int;
const ~module_state~MODULE_STATE_COMING : int;
const ~module_state~MODULE_STATE_GOING : int;
const ~pid_type~PIDTYPE_PID : int;
const ~pid_type~PIDTYPE_PGID : int;
const ~pid_type~PIDTYPE_SID : int;
const ~pid_type~PIDTYPE_MAX : int;
const ~hrtimer_restart~HRTIMER_NORESTART : int;
const ~hrtimer_restart~HRTIMER_RESTART : int;
const ~migrate_mode~MIGRATE_ASYNC : int;
const ~migrate_mode~MIGRATE_SYNC_LIGHT : int;
const ~migrate_mode~MIGRATE_SYNC : int;
const ~pci_channel_state~pci_channel_io_normal : int;
const ~pci_channel_state~pci_channel_io_frozen : int;
const ~pci_channel_state~pci_channel_io_perm_failure : int;
const ~dma_data_direction~DMA_BIDIRECTIONAL : int;
const ~dma_data_direction~DMA_TO_DEVICE : int;
const ~dma_data_direction~DMA_FROM_DEVICE : int;
const ~dma_data_direction~DMA_NONE : int;
axiom #funAddr~noop_llseek.base == -1 && #funAddr~noop_llseek.offset == 0;
axiom #funAddr~mraid_mm_unlocked_ioctl.base == -1 && #funAddr~mraid_mm_unlocked_ioctl.offset == 1;
axiom #funAddr~mraid_mm_compat_ioctl.base == -1 && #funAddr~mraid_mm_compat_ioctl.offset == 2;
axiom #funAddr~mraid_mm_open.base == -1 && #funAddr~mraid_mm_open.offset == 3;
axiom #funAddr~ioctl_done.base == -1 && #funAddr~ioctl_done.offset == 4;
axiom #funAddr~lld_timedout.base == -1 && #funAddr~lld_timedout.offset == 5;
axiom #funAddr~autoremove_wake_function.base == -1 && #funAddr~autoremove_wake_function.offset == 6;
axiom ~rpm_status~RPM_ACTIVE == 0;
axiom ~rpm_status~RPM_RESUMING == 1;
axiom ~rpm_status~RPM_SUSPENDED == 2;
axiom ~rpm_status~RPM_SUSPENDING == 3;
axiom ~rpm_request~RPM_REQ_NONE == 0;
axiom ~rpm_request~RPM_REQ_IDLE == 1;
axiom ~rpm_request~RPM_REQ_SUSPEND == 2;
axiom ~rpm_request~RPM_REQ_AUTOSUSPEND == 3;
axiom ~rpm_request~RPM_REQ_RESUME == 4;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NONE == 0;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NET == 1;
axiom ~kobj_ns_type~KOBJ_NS_TYPES == 2;
axiom ~module_state~MODULE_STATE_LIVE == 0;
axiom ~module_state~MODULE_STATE_COMING == 1;
axiom ~module_state~MODULE_STATE_GOING == 2;
axiom ~pid_type~PIDTYPE_PID == 0;
axiom ~pid_type~PIDTYPE_PGID == 1;
axiom ~pid_type~PIDTYPE_SID == 2;
axiom ~pid_type~PIDTYPE_MAX == 3;
axiom ~hrtimer_restart~HRTIMER_NORESTART == 0;
axiom ~hrtimer_restart~HRTIMER_RESTART == 1;
axiom ~migrate_mode~MIGRATE_ASYNC == 0;
axiom ~migrate_mode~MIGRATE_SYNC_LIGHT == 1;
axiom ~migrate_mode~MIGRATE_SYNC == 2;
axiom ~pci_channel_state~pci_channel_io_normal == 1;
axiom ~pci_channel_state~pci_channel_io_frozen == 2;
axiom ~pci_channel_state~pci_channel_io_perm_failure == 3;
axiom ~dma_data_direction~DMA_BIDIRECTIONAL == 0;
axiom ~dma_data_direction~DMA_TO_DEVICE == 1;
axiom ~dma_data_direction~DMA_FROM_DEVICE == 2;
axiom ~dma_data_direction~DMA_NONE == 3;
function { :overapproximation "shiftRight" } ~shiftRight(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseAnd" } ~bitwiseAnd(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseXor" } ~bitwiseXor(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseOr" } ~bitwiseOr(in0 : int, in1 : int) returns (out : int);
var ~jiffies : int;

var ~#dbglevel.base : int, ~#dbglevel.offset : int;

var ~#adapters_count_g.base : int, ~#adapters_count_g.offset : int;

var ~LDV_IN_INTERRUPT : int;

var ~ldv_spin : int;

var ~#__this_module.base : int, ~#__this_module.offset : int;

var ~#mraid_mm_mutex.base : int, ~#mraid_mm_mutex.offset : int;

var ~#drvr_ver.base : int, ~#drvr_ver.offset : int;

var ~#adapters_list_g.base : int, ~#adapters_list_g.offset : int;

var ~#wait_q.base : int, ~#wait_q.offset : int;

var ~#lsi_fops.base : int, ~#lsi_fops.offset : int;

var ~#megaraid_mm_dev.base : int, ~#megaraid_mm_dev.offset : int;

var #NULL.base : int, #NULL.offset : int;

var #valid : [int]int;

var #length : [int]int;

var #memory_int : [int,int]int;

var #memory_$Pointer$.base : [int,int]int, #memory_$Pointer$.offset : [int,int]int;

implementation copy_from_user(#in~to.base : int, #in~to.offset : int, #in~from.base : int, #in~from.offset : int, #in~n : int) returns (#res : int){
    var #t~ret59 : int;
    var #t~ret60 : int;
    var #t~nondet61.base : int, #t~nondet61.offset : int;
    var #t~nondet62.base : int, #t~nondet62.offset : int;
    var ~to.base : int, ~to.offset : int;
    var ~from.base : int, ~from.offset : int;
    var ~n : int;
    var ~sz~58 : int;
    var ~tmp~58 : int;
    var ~__ret_warn_on~58 : int;
    var ~tmp___0~58 : int;
    var ~tmp___1~58 : int;
    var ~tmp___2~58 : int;
    var ~__cil_tmp10~58.base : int, ~__cil_tmp10~58.offset : int;
    var ~__cil_tmp11~58.base : int, ~__cil_tmp11~58.offset : int;
    var ~__cil_tmp12~58 : int;
    var ~__cil_tmp13~58 : int;
    var ~__cil_tmp14~58 : int;
    var ~__cil_tmp15~58 : int;
    var ~__cil_tmp16~58 : int;
    var ~__cil_tmp17~58 : int;
    var ~__cil_tmp18~58 : int;
    var ~__cil_tmp19~58 : int;
    var ~__cil_tmp20~58 : int;
    var ~__cil_tmp21~58 : int;
    var ~__cil_tmp22~58 : int;
    var ~__cil_tmp23~58 : int;

  loc0:
    ~to.base, ~to.offset := #in~to.base, #in~to.offset;
    ~from.base, ~from.offset := #in~from.base, #in~from.offset;
    ~n := #in~n;
    havoc ~sz~58;
    havoc ~tmp~58;
    havoc ~__ret_warn_on~58;
    havoc ~tmp___0~58;
    havoc ~tmp___1~58;
    havoc ~tmp___2~58;
    havoc ~__cil_tmp10~58.base, ~__cil_tmp10~58.offset;
    havoc ~__cil_tmp11~58.base, ~__cil_tmp11~58.offset;
    havoc ~__cil_tmp12~58;
    havoc ~__cil_tmp13~58;
    havoc ~__cil_tmp14~58;
    havoc ~__cil_tmp15~58;
    havoc ~__cil_tmp16~58;
    havoc ~__cil_tmp17~58;
    havoc ~__cil_tmp18~58;
    havoc ~__cil_tmp19~58;
    havoc ~__cil_tmp20~58;
    havoc ~__cil_tmp21~58;
    havoc ~__cil_tmp22~58;
    havoc ~__cil_tmp23~58;
    ~__cil_tmp10~58.base, ~__cil_tmp10~58.offset := ~to.base, ~to.offset;
    ~__cil_tmp11~58.base, ~__cil_tmp11~58.offset := ~__cil_tmp10~58.base, ~__cil_tmp10~58.offset;
    ~tmp~58 := 0;
    ~sz~58 := (if ~tmp~58 % 18446744073709551616 % 4294967296 <= 2147483647 then ~tmp~58 % 18446744073709551616 % 4294967296 else ~tmp~58 % 18446744073709551616 % 4294967296 - 4294967296);
    call might_fault();
    ~__cil_tmp12~58 := (if ~sz~58 == -1 then 1 else 0);
    ~__cil_tmp13~58 := ~__cil_tmp12~58;
    ~tmp___1~58 := ~__cil_tmp13~58;
    assume ~tmp___1~58 != 0;
    ~__cil_tmp14~58 := ~n;
    call #t~ret59 := _copy_from_user(~to.base, ~to.offset, ~from.base, ~from.offset, ~__cil_tmp14~58);
    ~n := #t~ret59;
    havoc #t~ret59;
    #res := ~n;
    assume true;
    return;
}

procedure copy_from_user(#in~to.base : int, #in~to.offset : int, #in~from.base : int, #in~from.offset : int, #in~n : int) returns (#res : int);
modifies #valid, #length;

implementation mimd_to_kioc(#in~umimd.base : int, #in~umimd.offset : int, #in~adp.base : int, #in~adp.offset : int, #in~kioc.base : int, #in~kioc.offset : int) returns (#res : int){
    var #t~ret144 : int;
    var #t~mem145 : int;
    var #t~mem146 : int;
    var #t~mem147 : int;
    var #t~mem148 : int;
    var #t~mem149 : int;
    var #t~mem150 : int;
    var #t~mem157 : int;
    var #t~ret158 : int;
    var #t~mem159 : int;
    var #t~nondet160.base : int, #t~nondet160.offset : int;
    var #t~ret161 : int;
    var #t~mem164 : int;
    var #t~mem166 : int;
    var #t~mem167.base : int, #t~mem167.offset : int;
    var #t~mem169 : int;
    var #t~ret170 : int;
    var #t~mem171 : int;
    var #t~mem173 : int;
    var #t~mem174 : int;
    var #t~mem177 : int;
    var #t~mem178 : int;
    var #t~mem180 : int;
    var #t~mem182 : int;
    var #t~mem184 : int;
    var #t~mem185.base : int, #t~mem185.offset : int;
    var #t~mem187 : int;
    var #t~ret188 : int;
    var #t~mem189 : int;
    var #t~mem191 : int;
    var #t~mem192 : int;
    var #t~mem194 : int;
    var #t~ret195.base : int, #t~ret195.offset : int;
    var #t~memcpy196.base : int, #t~memcpy196.offset : int;
    var #t~mem197 : int;
    var #t~mem198 : int;
    var #t~mem200 : int;
    var #t~mem201.base : int, #t~mem201.offset : int;
    var #t~mem202.base : int, #t~mem202.offset : int;
    var #t~mem203 : int;
    var #t~ret204 : int;
    var #t~mem205.base : int, #t~mem205.offset : int;
    var #t~mem207 : int;
    var #t~mem209.base : int, #t~mem209.offset : int;
    var #t~ret210 : int;
    var #t~mem211 : int;
    var #t~mem213 : int;
    var #t~mem214.base : int, #t~mem214.offset : int;
    var #t~mem215.base : int, #t~mem215.offset : int;
    var #t~mem216 : int;
    var #t~ret217 : int;
    var ~umimd.base : int, ~umimd.offset : int;
    var ~adp.base : int, ~adp.offset : int;
    var ~kioc.base : int, ~kioc.offset : int;
    var ~mbox64~203.base : int, ~mbox64~203.offset : int;
    var ~mbox~203.base : int, ~mbox~203.offset : int;
    var ~pthru32~203.base : int, ~pthru32~203.offset : int;
    var ~adapno~203 : ~uint32_t;
    var ~opcode~203 : ~uint8_t;
    var ~subopcode~203 : ~uint8_t;
    var ~#mimd~203.base : int, ~#mimd~203.offset : int;
    var ~tmp~203 : int;
    var ~tmp___0~203 : int;
    var ~tmp___1~203 : int;
    var ~tmp___2~203 : int;
    var ~__len~203 : int;
    var ~__ret~203.base : int, ~__ret~203.offset : int;
    var ~tmp___3~203 : int;
    var ~tmp___4~203 : int;
    var ~tmp___5~203 : int;
    var ~__cil_tmp20~203.base : int, ~__cil_tmp20~203.offset : int;
    var ~__cil_tmp21~203.base : int, ~__cil_tmp21~203.offset : int;
    var ~__cil_tmp22~203 : int;
    var ~__cil_tmp23~203 : int;
    var ~__cil_tmp24~203 : int;
    var ~__cil_tmp25~203 : ~uint8_t;
    var ~__cil_tmp26~203 : int;
    var ~__cil_tmp27~203 : int;
    var ~__cil_tmp28~203 : int;
    var ~__cil_tmp29~203 : int;
    var ~__cil_tmp30~203 : ~uint8_t;
    var ~__cil_tmp31~203 : int;
    var ~__cil_tmp32~203 : int;
    var ~__cil_tmp33~203 : int;
    var ~__cil_tmp34~203 : int;
    var ~__cil_tmp35~203 : int;
    var ~__cil_tmp36~203 : int;
    var ~__cil_tmp37~203 : int;
    var ~__cil_tmp38~203 : int;
    var ~__cil_tmp39~203 : ~uint16_t;
    var ~__cil_tmp40~203 : int;
    var ~__cil_tmp41~203.base : int, ~__cil_tmp41~203.offset : int;
    var ~__cil_tmp42~203 : int;
    var ~__cil_tmp43~203 : ~uint32_t;
    var ~__cil_tmp44~203 : int;
    var ~__cil_tmp45~203 : int;
    var ~__cil_tmp46~203 : int;
    var ~__cil_tmp47~203 : int;
    var ~__cil_tmp48~203 : int;
    var ~__cil_tmp49~203 : int;
    var ~__cil_tmp50~203 : int;
    var ~__cil_tmp51~203 : int;
    var ~__cil_tmp52~203 : int;
    var ~__cil_tmp53~203 : int;
    var ~__cil_tmp54~203 : int;
    var ~__cil_tmp55~203 : int;
    var ~__cil_tmp56~203 : int;
    var ~__cil_tmp57~203 : int;
    var ~__cil_tmp58~203 : int;
    var ~__cil_tmp59~203 : ~uint32_t;
    var ~__cil_tmp60~203 : int;
    var ~__cil_tmp61~203.base : int, ~__cil_tmp61~203.offset : int;
    var ~__cil_tmp62~203 : int;
    var ~__cil_tmp63~203 : int;
    var ~__cil_tmp64~203 : int;
    var ~__cil_tmp65~203 : int;
    var ~__cil_tmp66~203 : int;
    var ~__cil_tmp67~203 : int;
    var ~__cil_tmp68~203 : int;
    var ~__cil_tmp69~203 : int;
    var ~__cil_tmp70~203 : int;
    var ~__cil_tmp71~203 : int;
    var ~__cil_tmp72~203 : int;
    var ~__cil_tmp73~203 : int;
    var ~__cil_tmp74~203 : int;
    var ~__cil_tmp75~203 : int;
    var ~__cil_tmp76~203 : int;
    var ~__cil_tmp77~203 : int;
    var ~__cil_tmp78~203 : int;
    var ~__cil_tmp79~203.base : int, ~__cil_tmp79~203.offset : int;
    var ~__cil_tmp80~203 : int;
    var ~__cil_tmp81~203 : int;
    var ~__cil_tmp82~203 : ~uint32_t;
    var ~__cil_tmp83~203 : int;
    var ~__cil_tmp84~203 : int;
    var ~__cil_tmp85~203 : ~uint32_t;
    var ~__cil_tmp86~203 : int;
    var ~__cil_tmp87~203 : int;
    var ~__cil_tmp88~203.base : int, ~__cil_tmp88~203.offset : int;
    var ~__cil_tmp89~203 : ~uint32_t;
    var ~__cil_tmp90~203 : int;
    var ~__cil_tmp91~203 : int;
    var ~__cil_tmp92~203 : int;
    var ~__cil_tmp93~203 : int;
    var ~__cil_tmp94~203 : ~uint32_t;
    var ~__cil_tmp95~203 : int;
    var ~__cil_tmp96~203 : int;
    var ~__cil_tmp97~203.base : int, ~__cil_tmp97~203.offset : int;
    var ~__cil_tmp98~203 : ~uint32_t;
    var ~__cil_tmp99~203 : int;
    var ~__cil_tmp100~203 : ~uint32_t;
    var ~__cil_tmp101~203 : int;
    var ~__cil_tmp102~203 : int;
    var ~__cil_tmp103~203 : int;
    var ~__cil_tmp104~203 : int;
    var ~__cil_tmp105~203 : int;
    var ~__cil_tmp106~203.base : int, ~__cil_tmp106~203.offset : int;
    var ~__cil_tmp107~203 : int;
    var ~__cil_tmp108~203 : int;
    var ~__cil_tmp109~203 : int;
    var ~__cil_tmp110~203 : int;
    var ~__cil_tmp111~203 : int;
    var ~__cil_tmp112~203 : int;
    var ~__cil_tmp113~203 : int;
    var ~__cil_tmp114~203.base : int, ~__cil_tmp114~203.offset : int;
    var ~__cil_tmp115~203 : int;
    var ~__cil_tmp116~203 : int;
    var ~__cil_tmp117~203 : ~uint32_t;
    var ~__cil_tmp118~203 : int;
    var ~__cil_tmp119~203 : int;
    var ~__cil_tmp120~203 : ~uint32_t;
    var ~__cil_tmp121~203 : int;
    var ~__cil_tmp122~203 : int;
    var ~__cil_tmp123~203.base : int, ~__cil_tmp123~203.offset : int;
    var ~__cil_tmp124~203 : ~uint32_t;
    var ~__cil_tmp125~203 : int;
    var ~__cil_tmp126~203 : int;
    var ~__cil_tmp127~203 : int;
    var ~__cil_tmp128~203 : int;
    var ~__cil_tmp129~203 : ~uint32_t;
    var ~__cil_tmp130~203 : int;
    var ~__cil_tmp131~203 : int;
    var ~__cil_tmp132~203 : int;
    var ~__cil_tmp133~203 : ~uint64_t;
    var ~__cil_tmp134~203 : int;
    var ~__cil_tmp135~203 : int;
    var ~__cil_tmp136~203.base : int, ~__cil_tmp136~203.offset : int;
    var ~__cil_tmp137~203 : int;
    var ~__cil_tmp138~203.base : int, ~__cil_tmp138~203.offset : int;
    var ~__cil_tmp139~203.base : int, ~__cil_tmp139~203.offset : int;
    var ~__cil_tmp140~203.base : int, ~__cil_tmp140~203.offset : int;
    var ~__cil_tmp141~203 : int;
    var ~__cil_tmp142~203.base : int, ~__cil_tmp142~203.offset : int;
    var ~__cil_tmp143~203.base : int, ~__cil_tmp143~203.offset : int;
    var ~__cil_tmp144~203 : ~uint8_t;
    var ~__cil_tmp145~203 : int;
    var ~__cil_tmp146~203 : int;
    var ~__cil_tmp147~203 : int;
    var ~__cil_tmp148~203 : int;
    var ~__cil_tmp149~203 : int;
    var ~__cil_tmp150~203 : ~dma_addr_t;
    var ~__cil_tmp151~203 : int;
    var ~__cil_tmp152~203 : int;
    var ~__cil_tmp153~203 : ~uint32_t;
    var ~__cil_tmp154~203 : int;
    var ~__cil_tmp155~203 : int;
    var ~__cil_tmp156~203 : int;
    var ~__cil_tmp157~203.base : int, ~__cil_tmp157~203.offset : int;
    var ~__cil_tmp158~203.base : int, ~__cil_tmp158~203.offset : int;
    var ~__cil_tmp159~203 : int;
    var ~__cil_tmp160~203 : int;
    var ~__cil_tmp161~203.base : int, ~__cil_tmp161~203.offset : int;
    var ~__cil_tmp162~203.base : int, ~__cil_tmp162~203.offset : int;
    var ~__cil_tmp163~203 : int;
    var ~__cil_tmp164~203 : int;
    var ~__cil_tmp165~203 : ~uint32_t;
    var ~__cil_tmp166~203 : int;
    var ~__cil_tmp167~203 : int;
    var ~__cil_tmp168~203 : int;
    var ~__cil_tmp169~203 : int;
    var ~__cil_tmp170~203 : int;
    var ~__cil_tmp171~203 : int;
    var ~__cil_tmp172~203 : int;
    var ~__cil_tmp173~203 : int;
    var ~__cil_tmp174~203 : int;
    var ~__cil_tmp175~203 : int;
    var ~__cil_tmp176~203 : int;
    var ~__cil_tmp177~203 : ~dma_addr_t;
    var ~__cil_tmp178~203.base : int, ~__cil_tmp178~203.offset : int;
    var ~__cil_tmp179~203 : int;
    var ~__cil_tmp180~203 : int;
    var ~__cil_tmp181~203.base : int, ~__cil_tmp181~203.offset : int;
    var ~__cil_tmp182~203.base : int, ~__cil_tmp182~203.offset : int;
    var ~__cil_tmp183~203 : int;
    var ~__cil_tmp184~203 : int;
    var ~__cil_tmp185~203 : int;
    var ~__cil_tmp186~203 : int;
    var ~__cil_tmp187~203 : ~dma_addr_t;
    var ~__cil_tmp188~203 : int;
    var ~__cil_tmp189~203 : int;
    var ~__cil_tmp190~203 : ~uint32_t;
    var ~__cil_tmp191~203 : int;
    var ~__cil_tmp192~203 : int;
    var ~__cil_tmp193~203 : int;
    var ~__cil_tmp194~203.base : int, ~__cil_tmp194~203.offset : int;
    var ~__cil_tmp195~203.base : int, ~__cil_tmp195~203.offset : int;
    var ~__cil_tmp196~203 : int;
    var ~__cil_tmp197~203 : int;
    var ~__cil_tmp198~203.base : int, ~__cil_tmp198~203.offset : int;
    var ~__cil_tmp199~203.base : int, ~__cil_tmp199~203.offset : int;
    var ~__cil_tmp200~203 : int;
    var ~__cil_tmp201~203 : int;
    var ~__cil_tmp202~203 : ~uint32_t;
    var ~__cil_tmp203~203 : int;

  loc1:
    ~umimd.base, ~umimd.offset := #in~umimd.base, #in~umimd.offset;
    ~adp.base, ~adp.offset := #in~adp.base, #in~adp.offset;
    ~kioc.base, ~kioc.offset := #in~kioc.base, #in~kioc.offset;
    havoc ~mbox64~203.base, ~mbox64~203.offset;
    havoc ~mbox~203.base, ~mbox~203.offset;
    havoc ~pthru32~203.base, ~pthru32~203.offset;
    havoc ~adapno~203;
    havoc ~opcode~203;
    havoc ~subopcode~203;
    call ~#mimd~203.base, ~#mimd~203.offset := #Ultimate.alloc(113);
    havoc ~tmp~203;
    havoc ~tmp___0~203;
    havoc ~tmp___1~203;
    havoc ~tmp___2~203;
    havoc ~__len~203;
    havoc ~__ret~203.base, ~__ret~203.offset;
    havoc ~tmp___3~203;
    havoc ~tmp___4~203;
    havoc ~tmp___5~203;
    havoc ~__cil_tmp20~203.base, ~__cil_tmp20~203.offset;
    havoc ~__cil_tmp21~203.base, ~__cil_tmp21~203.offset;
    havoc ~__cil_tmp22~203;
    havoc ~__cil_tmp23~203;
    havoc ~__cil_tmp24~203;
    havoc ~__cil_tmp25~203;
    havoc ~__cil_tmp26~203;
    havoc ~__cil_tmp27~203;
    havoc ~__cil_tmp28~203;
    havoc ~__cil_tmp29~203;
    havoc ~__cil_tmp30~203;
    havoc ~__cil_tmp31~203;
    havoc ~__cil_tmp32~203;
    havoc ~__cil_tmp33~203;
    havoc ~__cil_tmp34~203;
    havoc ~__cil_tmp35~203;
    havoc ~__cil_tmp36~203;
    havoc ~__cil_tmp37~203;
    havoc ~__cil_tmp38~203;
    havoc ~__cil_tmp39~203;
    havoc ~__cil_tmp40~203;
    havoc ~__cil_tmp41~203.base, ~__cil_tmp41~203.offset;
    havoc ~__cil_tmp42~203;
    havoc ~__cil_tmp43~203;
    havoc ~__cil_tmp44~203;
    havoc ~__cil_tmp45~203;
    havoc ~__cil_tmp46~203;
    havoc ~__cil_tmp47~203;
    havoc ~__cil_tmp48~203;
    havoc ~__cil_tmp49~203;
    havoc ~__cil_tmp50~203;
    havoc ~__cil_tmp51~203;
    havoc ~__cil_tmp52~203;
    havoc ~__cil_tmp53~203;
    havoc ~__cil_tmp54~203;
    havoc ~__cil_tmp55~203;
    havoc ~__cil_tmp56~203;
    havoc ~__cil_tmp57~203;
    havoc ~__cil_tmp58~203;
    havoc ~__cil_tmp59~203;
    havoc ~__cil_tmp60~203;
    havoc ~__cil_tmp61~203.base, ~__cil_tmp61~203.offset;
    havoc ~__cil_tmp62~203;
    havoc ~__cil_tmp63~203;
    havoc ~__cil_tmp64~203;
    havoc ~__cil_tmp65~203;
    havoc ~__cil_tmp66~203;
    havoc ~__cil_tmp67~203;
    havoc ~__cil_tmp68~203;
    havoc ~__cil_tmp69~203;
    havoc ~__cil_tmp70~203;
    havoc ~__cil_tmp71~203;
    havoc ~__cil_tmp72~203;
    havoc ~__cil_tmp73~203;
    havoc ~__cil_tmp74~203;
    havoc ~__cil_tmp75~203;
    havoc ~__cil_tmp76~203;
    havoc ~__cil_tmp77~203;
    havoc ~__cil_tmp78~203;
    havoc ~__cil_tmp79~203.base, ~__cil_tmp79~203.offset;
    havoc ~__cil_tmp80~203;
    havoc ~__cil_tmp81~203;
    havoc ~__cil_tmp82~203;
    havoc ~__cil_tmp83~203;
    havoc ~__cil_tmp84~203;
    havoc ~__cil_tmp85~203;
    havoc ~__cil_tmp86~203;
    havoc ~__cil_tmp87~203;
    havoc ~__cil_tmp88~203.base, ~__cil_tmp88~203.offset;
    havoc ~__cil_tmp89~203;
    havoc ~__cil_tmp90~203;
    havoc ~__cil_tmp91~203;
    havoc ~__cil_tmp92~203;
    havoc ~__cil_tmp93~203;
    havoc ~__cil_tmp94~203;
    havoc ~__cil_tmp95~203;
    havoc ~__cil_tmp96~203;
    havoc ~__cil_tmp97~203.base, ~__cil_tmp97~203.offset;
    havoc ~__cil_tmp98~203;
    havoc ~__cil_tmp99~203;
    havoc ~__cil_tmp100~203;
    havoc ~__cil_tmp101~203;
    havoc ~__cil_tmp102~203;
    havoc ~__cil_tmp103~203;
    havoc ~__cil_tmp104~203;
    havoc ~__cil_tmp105~203;
    havoc ~__cil_tmp106~203.base, ~__cil_tmp106~203.offset;
    havoc ~__cil_tmp107~203;
    havoc ~__cil_tmp108~203;
    havoc ~__cil_tmp109~203;
    havoc ~__cil_tmp110~203;
    havoc ~__cil_tmp111~203;
    havoc ~__cil_tmp112~203;
    havoc ~__cil_tmp113~203;
    havoc ~__cil_tmp114~203.base, ~__cil_tmp114~203.offset;
    havoc ~__cil_tmp115~203;
    havoc ~__cil_tmp116~203;
    havoc ~__cil_tmp117~203;
    havoc ~__cil_tmp118~203;
    havoc ~__cil_tmp119~203;
    havoc ~__cil_tmp120~203;
    havoc ~__cil_tmp121~203;
    havoc ~__cil_tmp122~203;
    havoc ~__cil_tmp123~203.base, ~__cil_tmp123~203.offset;
    havoc ~__cil_tmp124~203;
    havoc ~__cil_tmp125~203;
    havoc ~__cil_tmp126~203;
    havoc ~__cil_tmp127~203;
    havoc ~__cil_tmp128~203;
    havoc ~__cil_tmp129~203;
    havoc ~__cil_tmp130~203;
    havoc ~__cil_tmp131~203;
    havoc ~__cil_tmp132~203;
    havoc ~__cil_tmp133~203;
    havoc ~__cil_tmp134~203;
    havoc ~__cil_tmp135~203;
    havoc ~__cil_tmp136~203.base, ~__cil_tmp136~203.offset;
    havoc ~__cil_tmp137~203;
    havoc ~__cil_tmp138~203.base, ~__cil_tmp138~203.offset;
    havoc ~__cil_tmp139~203.base, ~__cil_tmp139~203.offset;
    havoc ~__cil_tmp140~203.base, ~__cil_tmp140~203.offset;
    havoc ~__cil_tmp141~203;
    havoc ~__cil_tmp142~203.base, ~__cil_tmp142~203.offset;
    havoc ~__cil_tmp143~203.base, ~__cil_tmp143~203.offset;
    havoc ~__cil_tmp144~203;
    havoc ~__cil_tmp145~203;
    havoc ~__cil_tmp146~203;
    havoc ~__cil_tmp147~203;
    havoc ~__cil_tmp148~203;
    havoc ~__cil_tmp149~203;
    havoc ~__cil_tmp150~203;
    havoc ~__cil_tmp151~203;
    havoc ~__cil_tmp152~203;
    havoc ~__cil_tmp153~203;
    havoc ~__cil_tmp154~203;
    havoc ~__cil_tmp155~203;
    havoc ~__cil_tmp156~203;
    havoc ~__cil_tmp157~203.base, ~__cil_tmp157~203.offset;
    havoc ~__cil_tmp158~203.base, ~__cil_tmp158~203.offset;
    havoc ~__cil_tmp159~203;
    havoc ~__cil_tmp160~203;
    havoc ~__cil_tmp161~203.base, ~__cil_tmp161~203.offset;
    havoc ~__cil_tmp162~203.base, ~__cil_tmp162~203.offset;
    havoc ~__cil_tmp163~203;
    havoc ~__cil_tmp164~203;
    havoc ~__cil_tmp165~203;
    havoc ~__cil_tmp166~203;
    havoc ~__cil_tmp167~203;
    havoc ~__cil_tmp168~203;
    havoc ~__cil_tmp169~203;
    havoc ~__cil_tmp170~203;
    havoc ~__cil_tmp171~203;
    havoc ~__cil_tmp172~203;
    havoc ~__cil_tmp173~203;
    havoc ~__cil_tmp174~203;
    havoc ~__cil_tmp175~203;
    havoc ~__cil_tmp176~203;
    havoc ~__cil_tmp177~203;
    havoc ~__cil_tmp178~203.base, ~__cil_tmp178~203.offset;
    havoc ~__cil_tmp179~203;
    havoc ~__cil_tmp180~203;
    havoc ~__cil_tmp181~203.base, ~__cil_tmp181~203.offset;
    havoc ~__cil_tmp182~203.base, ~__cil_tmp182~203.offset;
    havoc ~__cil_tmp183~203;
    havoc ~__cil_tmp184~203;
    havoc ~__cil_tmp185~203;
    havoc ~__cil_tmp186~203;
    havoc ~__cil_tmp187~203;
    havoc ~__cil_tmp188~203;
    havoc ~__cil_tmp189~203;
    havoc ~__cil_tmp190~203;
    havoc ~__cil_tmp191~203;
    havoc ~__cil_tmp192~203;
    havoc ~__cil_tmp193~203;
    havoc ~__cil_tmp194~203.base, ~__cil_tmp194~203.offset;
    havoc ~__cil_tmp195~203.base, ~__cil_tmp195~203.offset;
    havoc ~__cil_tmp196~203;
    havoc ~__cil_tmp197~203;
    havoc ~__cil_tmp198~203.base, ~__cil_tmp198~203.offset;
    havoc ~__cil_tmp199~203.base, ~__cil_tmp199~203.offset;
    havoc ~__cil_tmp200~203;
    havoc ~__cil_tmp201~203;
    havoc ~__cil_tmp202~203;
    havoc ~__cil_tmp203~203;
    ~__cil_tmp20~203.base, ~__cil_tmp20~203.offset := ~#mimd~203.base, ~#mimd~203.offset;
    ~__cil_tmp21~203.base, ~__cil_tmp21~203.offset := ~umimd.base, ~umimd.offset;
    call #t~ret144 := copy_from_user(~__cil_tmp20~203.base, ~__cil_tmp20~203.offset, ~__cil_tmp21~203.base, ~__cil_tmp21~203.offset, 110);
    ~tmp~203 := #t~ret144;
    havoc #t~ret144;
    assume !(~tmp~203 % 18446744073709551616 != 0);
    ~__cil_tmp22~203 := 0;
    ~__cil_tmp23~203 := 32 + ~__cil_tmp22~203;
    ~__cil_tmp24~203 := ~#mimd~203.base + ~#mimd~203.offset + ~__cil_tmp23~203;
    call #t~mem145 := read~int(0, (if ~__cil_tmp24~203 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp24~203 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp24~203 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp25~203 := #t~mem145;
    havoc #t~mem145;
    ~__cil_tmp26~203 := ~__cil_tmp25~203 % 256;
    assume !(~__cil_tmp26~203 % 4294967296 == 195);
    ~__cil_tmp27~203 := 0;
    ~__cil_tmp28~203 := 32 + ~__cil_tmp27~203;
    ~__cil_tmp29~203 := ~#mimd~203.base + ~#mimd~203.offset + ~__cil_tmp28~203;
    call #t~mem146 := read~int(0, (if ~__cil_tmp29~203 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp29~203 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp29~203 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp30~203 := #t~mem146;
    havoc #t~mem146;
    ~__cil_tmp31~203 := ~__cil_tmp30~203 % 256;
    assume !(~__cil_tmp31~203 % 4294967296 == 227);
    ~__cil_tmp32~203 := ~#mimd~203.base + ~#mimd~203.offset + 8;
    call #t~mem147 := read~int(0, (if ~__cil_tmp32~203 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp32~203 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp32~203 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~opcode~203 := #t~mem147;
    havoc #t~mem147;
    ~__cil_tmp33~203 := 1;
    ~__cil_tmp34~203 := 8 + ~__cil_tmp33~203;
    ~__cil_tmp35~203 := ~#mimd~203.base + ~#mimd~203.offset + ~__cil_tmp34~203;
    call #t~mem148 := read~int(0, (if ~__cil_tmp35~203 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp35~203 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp35~203 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~subopcode~203 := #t~mem148;
    havoc #t~mem148;
    ~__cil_tmp36~203 := 2;
    ~__cil_tmp37~203 := 8 + ~__cil_tmp36~203;
    ~__cil_tmp38~203 := ~#mimd~203.base + ~#mimd~203.offset + ~__cil_tmp37~203;
    call #t~mem149 := read~int(0, (if ~__cil_tmp38~203 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp38~203 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp38~203 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 2);
    ~__cil_tmp39~203 := #t~mem149;
    havoc #t~mem149;
    ~__cil_tmp40~203 := ~__cil_tmp39~203 % 65536;
    ~adapno~203 := ~bitwiseXor(~__cil_tmp40~203, 27904);
    ~__cil_tmp41~203.base, ~__cil_tmp41~203.offset := ~#adapters_count_g.base, ~#adapters_count_g.offset;
    call #t~mem150 := read~int(~__cil_tmp41~203.base, ~__cil_tmp41~203.offset, 4);
    ~__cil_tmp42~203 := #t~mem150;
    havoc #t~mem150;
    ~__cil_tmp43~203 := ~__cil_tmp42~203;
    assume !(~__cil_tmp43~203 % 4294967296 <= ~adapno~203 % 4294967296);
    ~__cil_tmp44~203 := ~kioc.base + ~kioc.offset;
    ~__cil_tmp45~203 := ~__cil_tmp44~203 + 24;
    call write~int(~adapno~203, 0, (if ~__cil_tmp45~203 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp45~203 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp45~203 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp46~203 := ~kioc.base + ~kioc.offset;
    ~__cil_tmp47~203 := ~__cil_tmp46~203 + 16;
    call write~int(0, 0, (if ~__cil_tmp47~203 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp47~203 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp47~203 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 2);
    ~__cil_tmp48~203 := ~kioc.base + ~kioc.offset;
    ~__cil_tmp49~203 := ~__cil_tmp48~203 + 18;
    call write~int(0, 0, (if ~__cil_tmp49~203 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp49~203 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp49~203 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 2);
    assume ~opcode~203 % 256 == 130;
    ~__cil_tmp50~203 := ~subopcode~203 % 256;
    assume ~__cil_tmp50~203 % 4294967296 == 103;
    ~__cil_tmp51~203 := ~kioc.base + ~kioc.offset;
    ~__cil_tmp52~203 := ~__cil_tmp51~203 + 20;
    call write~int(196608, 0, (if ~__cil_tmp52~203 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp52~203 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp52~203 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp53~203 := ~kioc.base + ~kioc.offset;
    ~__cil_tmp54~203 := ~__cil_tmp53~203 + 44;
    call write~int(1, 0, (if ~__cil_tmp54~203 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp54~203 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp54~203 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp55~203 := ~kioc.base + ~kioc.offset;
    ~__cil_tmp56~203 := ~__cil_tmp55~203 + 40;
    call write~int(256, 0, (if ~__cil_tmp56~203 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp56~203 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp56~203 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp57~203 := ~kioc.base + ~kioc.offset;
    ~__cil_tmp58~203 := ~__cil_tmp57~203 + 40;
    call #t~mem157 := read~int(0, (if ~__cil_tmp58~203 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp58~203 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp58~203 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp59~203 := #t~mem157;
    havoc #t~mem157;
    ~__cil_tmp60~203 := (if ~__cil_tmp59~203 % 4294967296 % 4294967296 <= 2147483647 then ~__cil_tmp59~203 % 4294967296 % 4294967296 else ~__cil_tmp59~203 % 4294967296 % 4294967296 - 4294967296);
    call #t~ret158 := mraid_mm_attach_buf(~adp.base, ~adp.offset, ~kioc.base, ~kioc.offset, ~__cil_tmp60~203);
    return;
}

procedure mimd_to_kioc(#in~umimd.base : int, #in~umimd.offset : int, #in~adp.base : int, #in~adp.offset : int, #in~kioc.base : int, #in~kioc.offset : int) returns (#res : int);
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length, ~ldv_spin;

implementation mraid_mm_unlocked_ioctl(#in~filep.base : int, #in~filep.offset : int, #in~cmd : int, #in~arg : int) returns (#res : int){
    var #t~ret125 : int;
    var ~filep.base : int, ~filep.offset : int;
    var ~cmd : int;
    var ~arg : int;
    var ~err~160 : int;

  loc2:
    ~filep.base, ~filep.offset := #in~filep.base, #in~filep.offset;
    ~cmd := #in~cmd;
    ~arg := #in~arg;
    havoc ~err~160;
    call mutex_lock_nested(~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset, 0);
    call #t~ret125 := mraid_mm_ioctl(~filep.base, ~filep.offset, ~cmd, ~arg);
    return;
}

procedure mraid_mm_unlocked_ioctl(#in~filep.base : int, #in~filep.offset : int, #in~cmd : int, #in~arg : int) returns (#res : int);
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_spin;

implementation ldv_spin_unlock_irqrestore_8(#in~lock.base : int, #in~lock.offset : int, #in~flags : int) returns (){
    var ~lock.base : int, ~lock.offset : int;
    var ~flags : int;
    var ~__cil_tmp5~36.base : int, ~__cil_tmp5~36.offset : int;

  loc3:
    ~lock.base, ~lock.offset := #in~lock.base, #in~lock.offset;
    ~flags := #in~flags;
    havoc ~__cil_tmp5~36.base, ~__cil_tmp5~36.offset;
    ~__cil_tmp5~36.base, ~__cil_tmp5~36.offset := ~lock.base, ~lock.offset;
    call _raw_spin_unlock_irqrestore(~__cil_tmp5~36.base, ~__cil_tmp5~36.offset, ~flags);
    assume true;
    return;
}

procedure ldv_spin_unlock_irqrestore_8(#in~lock.base : int, #in~lock.offset : int, #in~flags : int) returns ();
modifies ;

implementation mraid_mm_attach_buf(#in~adp.base : int, #in~adp.offset : int, #in~kioc.base : int, #in~kioc.offset : int, #in~xferlen : int) returns (#res : int){
    var #t~mem222 : int;
    var #t~mem223 : int;
    var #t~mem227.base : int, #t~mem227.offset : int;
    var #t~mem229 : int;
    var #t~mem232.base : int, #t~mem232.offset : int;
    var #t~ret233.base : int, #t~ret233.offset : int;
    var #t~mem235.base : int, #t~mem235.offset : int;
    var ~adp.base : int, ~adp.offset : int;
    var ~kioc.base : int, ~kioc.offset : int;
    var ~xferlen : int;
    var ~pool~280.base : int, ~pool~280.offset : int;
    var ~right_pool~280 : int;
    var ~flags~280 : int;
    var ~i~280 : int;
    var ~tmp~280.base : int, ~tmp~280.offset : int;
    var ~__cil_tmp9~280 : int;
    var ~__cil_tmp10~280 : int;
    var ~__cil_tmp11~280 : int;
    var ~__cil_tmp12~280 : int;
    var ~__cil_tmp13~280 : int;
    var ~__cil_tmp14~280 : int;
    var ~__cil_tmp15~280 : int;
    var ~__cil_tmp16~280 : int;
    var ~__cil_tmp17~280 : int;
    var ~__cil_tmp18~280 : int;
    var ~__cil_tmp19~280 : int;
    var ~__cil_tmp20~280.base : int, ~__cil_tmp20~280.offset : int;
    var ~__cil_tmp21~280.base : int, ~__cil_tmp21~280.offset : int;
    var ~__cil_tmp22~280 : int;
    var ~__cil_tmp23~280 : int;
    var ~__cil_tmp24~280 : ~uint32_t;
    var ~__cil_tmp25~280 : ~uint32_t;
    var ~__cil_tmp26~280 : int;
    var ~__cil_tmp27~280 : int;
    var ~__cil_tmp28~280 : ~uint8_t;
    var ~__cil_tmp29~280 : int;
    var ~__cil_tmp30~280 : int;
    var ~__cil_tmp31~280 : int;
    var ~__cil_tmp32~280 : int;
    var ~__cil_tmp33~280 : int;
    var ~__cil_tmp34~280 : int;
    var ~__cil_tmp35~280 : int;
    var ~__cil_tmp36~280 : int;
    var ~__cil_tmp37~280 : int;
    var ~__cil_tmp38~280 : int;
    var ~__cil_tmp39~280 : int;
    var ~__cil_tmp40~280 : int;
    var ~__cil_tmp41~280 : int;
    var ~__cil_tmp42~280.base : int, ~__cil_tmp42~280.offset : int;
    var ~__cil_tmp43~280 : int;
    var ~__cil_tmp44~280 : int;
    var ~__cil_tmp45~280.base : int, ~__cil_tmp45~280.offset : int;
    var ~__cil_tmp46~280 : int;
    var ~__cil_tmp47~280 : int;
    var ~__cil_tmp48~280 : int;
    var ~__cil_tmp49~280.base : int, ~__cil_tmp49~280.offset : int;
    var ~__cil_tmp50~280.base : int, ~__cil_tmp50~280.offset : int;
    var ~__cil_tmp51~280 : int;
    var ~__cil_tmp52~280 : int;
    var ~__cil_tmp53~280 : int;
    var ~__cil_tmp54~280 : int;
    var ~__cil_tmp55~280 : int;
    var ~__cil_tmp56~280 : int;
    var ~__cil_tmp57~280.base : int, ~__cil_tmp57~280.offset : int;
    var ~__cil_tmp58~280 : int;
    var ~__cil_tmp59~280 : int;
    var ~__cil_tmp60~280.base : int, ~__cil_tmp60~280.offset : int;
    var ~__cil_tmp61~280 : int;
    var ~__cil_tmp62~280 : int;
    var ~__cil_tmp63~280 : int;
    var ~__cil_tmp64~280 : int;
    var ~__cil_tmp65~280.base : int, ~__cil_tmp65~280.offset : int;
    var ~__cil_tmp66~280.base : int, ~__cil_tmp66~280.offset : int;
    var ~__cil_tmp67~280 : int;
    var ~__cil_tmp68~280 : int;
    var ~__cil_tmp69~280 : int;
    var ~__cil_tmp70~280.base : int, ~__cil_tmp70~280.offset : int;
    var ~__cil_tmp71~280 : int;

  loc4:
    ~adp.base, ~adp.offset := #in~adp.base, #in~adp.offset;
    ~kioc.base, ~kioc.offset := #in~kioc.base, #in~kioc.offset;
    ~xferlen := #in~xferlen;
    havoc ~pool~280.base, ~pool~280.offset;
    havoc ~right_pool~280;
    havoc ~flags~280;
    havoc ~i~280;
    havoc ~tmp~280.base, ~tmp~280.offset;
    havoc ~__cil_tmp9~280;
    havoc ~__cil_tmp10~280;
    havoc ~__cil_tmp11~280;
    havoc ~__cil_tmp12~280;
    havoc ~__cil_tmp13~280;
    havoc ~__cil_tmp14~280;
    havoc ~__cil_tmp15~280;
    havoc ~__cil_tmp16~280;
    havoc ~__cil_tmp17~280;
    havoc ~__cil_tmp18~280;
    havoc ~__cil_tmp19~280;
    havoc ~__cil_tmp20~280.base, ~__cil_tmp20~280.offset;
    havoc ~__cil_tmp21~280.base, ~__cil_tmp21~280.offset;
    havoc ~__cil_tmp22~280;
    havoc ~__cil_tmp23~280;
    havoc ~__cil_tmp24~280;
    havoc ~__cil_tmp25~280;
    havoc ~__cil_tmp26~280;
    havoc ~__cil_tmp27~280;
    havoc ~__cil_tmp28~280;
    havoc ~__cil_tmp29~280;
    havoc ~__cil_tmp30~280;
    havoc ~__cil_tmp31~280;
    havoc ~__cil_tmp32~280;
    havoc ~__cil_tmp33~280;
    havoc ~__cil_tmp34~280;
    havoc ~__cil_tmp35~280;
    havoc ~__cil_tmp36~280;
    havoc ~__cil_tmp37~280;
    havoc ~__cil_tmp38~280;
    havoc ~__cil_tmp39~280;
    havoc ~__cil_tmp40~280;
    havoc ~__cil_tmp41~280;
    havoc ~__cil_tmp42~280.base, ~__cil_tmp42~280.offset;
    havoc ~__cil_tmp43~280;
    havoc ~__cil_tmp44~280;
    havoc ~__cil_tmp45~280.base, ~__cil_tmp45~280.offset;
    havoc ~__cil_tmp46~280;
    havoc ~__cil_tmp47~280;
    havoc ~__cil_tmp48~280;
    havoc ~__cil_tmp49~280.base, ~__cil_tmp49~280.offset;
    havoc ~__cil_tmp50~280.base, ~__cil_tmp50~280.offset;
    havoc ~__cil_tmp51~280;
    havoc ~__cil_tmp52~280;
    havoc ~__cil_tmp53~280;
    havoc ~__cil_tmp54~280;
    havoc ~__cil_tmp55~280;
    havoc ~__cil_tmp56~280;
    havoc ~__cil_tmp57~280.base, ~__cil_tmp57~280.offset;
    havoc ~__cil_tmp58~280;
    havoc ~__cil_tmp59~280;
    havoc ~__cil_tmp60~280.base, ~__cil_tmp60~280.offset;
    havoc ~__cil_tmp61~280;
    havoc ~__cil_tmp62~280;
    havoc ~__cil_tmp63~280;
    havoc ~__cil_tmp64~280;
    havoc ~__cil_tmp65~280.base, ~__cil_tmp65~280.offset;
    havoc ~__cil_tmp66~280.base, ~__cil_tmp66~280.offset;
    havoc ~__cil_tmp67~280;
    havoc ~__cil_tmp68~280;
    havoc ~__cil_tmp69~280;
    havoc ~__cil_tmp70~280.base, ~__cil_tmp70~280.offset;
    havoc ~__cil_tmp71~280;
    ~right_pool~280 := -1;
    ~__cil_tmp9~280 := ~kioc.base + ~kioc.offset;
    ~__cil_tmp10~280 := ~__cil_tmp9~280 + 264;
    call write~int(-1, 0, (if ~__cil_tmp10~280 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp10~280 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp10~280 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp11~280 := ~kioc.base + ~kioc.offset;
    ~__cil_tmp12~280 := ~__cil_tmp11~280 + 248;
    call write~$Pointer$(0, 0, 0, (if ~__cil_tmp12~280 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp12~280 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp12~280 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp13~280 := ~kioc.base + ~kioc.offset;
    ~__cil_tmp14~280 := ~__cil_tmp13~280 + 256;
    call write~int(0, 0, (if ~__cil_tmp14~280 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp14~280 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp14~280 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp15~280 := ~kioc.base + ~kioc.offset;
    ~__cil_tmp16~280 := ~__cil_tmp15~280 + 265;
    call write~int(0, 0, (if ~__cil_tmp16~280 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp16~280 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp16~280 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~i~280 := 0;
    goto loc5;
  loc5:
    goto loc5_0, loc5_1;
  loc5_0:
    assume ~i~280 <= 4;
    ~__cil_tmp17~280 := ~i~280;
    ~__cil_tmp18~280 := ~adp.base + ~adp.offset;
    ~__cil_tmp19~280 := ~__cil_tmp18~280 + 272;
    ~__cil_tmp20~280.base, ~__cil_tmp20~280.offset := 0, (if ~__cil_tmp19~280 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp19~280 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp19~280 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp21~280.base, ~__cil_tmp21~280.offset := ~__cil_tmp20~280.base, ~__cil_tmp20~280.offset;
    ~pool~280.base, ~pool~280.offset := ~__cil_tmp21~280.base, ~__cil_tmp21~280.offset + (if ~__cil_tmp17~280 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp17~280 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp17~280 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616) * 97;
    ~__cil_tmp22~280 := ~pool~280.base + ~pool~280.offset;
    ~__cil_tmp23~280 := ~__cil_tmp22~280 + 16;
    call #t~mem222 := read~int(0, (if ~__cil_tmp23~280 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp23~280 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp23~280 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp24~280 := #t~mem222;
    havoc #t~mem222;
    ~__cil_tmp25~280 := ~xferlen;
    assume !(~__cil_tmp25~280 % 4294967296 > ~__cil_tmp24~280 % 4294967296);
    assume ~right_pool~280 == -1;
    ~right_pool~280 := ~i~280;
    call ldv_spin_lock();
    ~__cil_tmp26~280 := ~pool~280.base + ~pool~280.offset;
    ~__cil_tmp27~280 := ~__cil_tmp26~280 + 104;
    call #t~mem223 := read~int(0, (if ~__cil_tmp27~280 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp27~280 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp27~280 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp28~280 := #t~mem223;
    havoc #t~mem223;
    ~__cil_tmp29~280 := ~__cil_tmp28~280 % 256;
    assume !(~__cil_tmp29~280 % 4294967296 == 0);
    ~__cil_tmp43~280 := ~pool~280.base + ~pool~280.offset;
    ~__cil_tmp44~280 := ~__cil_tmp43~280 + 32;
    ~__cil_tmp45~280.base, ~__cil_tmp45~280.offset := 0, (if ~__cil_tmp44~280 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp44~280 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp44~280 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    call spin_unlock_irqrestore(~__cil_tmp45~280.base, ~__cil_tmp45~280.offset, ~flags~280);
    ~i~280 := ~i~280 + 1;
    goto loc5;
  loc5_1:
    assume !(~i~280 <= 4);
    assume !(~right_pool~280 == -1);
    ~__cil_tmp46~280 := ~right_pool~280;
    ~__cil_tmp47~280 := ~adp.base + ~adp.offset;
    ~__cil_tmp48~280 := ~__cil_tmp47~280 + 272;
    ~__cil_tmp49~280.base, ~__cil_tmp49~280.offset := 0, (if ~__cil_tmp48~280 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp48~280 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp48~280 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp50~280.base, ~__cil_tmp50~280.offset := ~__cil_tmp49~280.base, ~__cil_tmp49~280.offset;
    ~pool~280.base, ~pool~280.offset := ~__cil_tmp50~280.base, ~__cil_tmp50~280.offset + (if ~__cil_tmp46~280 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp46~280 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp46~280 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616) * 97;
    call ldv_spin_lock();
    ~__cil_tmp51~280 := ~kioc.base + ~kioc.offset;
    ~__cil_tmp52~280 := ~__cil_tmp51~280 + 264;
    call write~int((if ~right_pool~280 % 256 <= 127 then ~right_pool~280 % 256 else ~right_pool~280 % 256 - 256), 0, (if ~__cil_tmp52~280 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp52~280 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp52~280 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp53~280 := ~kioc.base + ~kioc.offset;
    ~__cil_tmp54~280 := ~__cil_tmp53~280 + 265;
    call write~int(1, 0, (if ~__cil_tmp54~280 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp54~280 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp54~280 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp55~280 := ~pool~280.base + ~pool~280.offset;
    ~__cil_tmp56~280 := ~__cil_tmp55~280 + 24;
    call #t~mem232.base, #t~mem232.offset := read~$Pointer$(0, (if ~__cil_tmp56~280 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp56~280 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp56~280 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp57~280.base, ~__cil_tmp57~280.offset := #t~mem232.base, #t~mem232.offset;
    havoc #t~mem232.base, #t~mem232.offset;
    ~__cil_tmp58~280 := ~kioc.base + ~kioc.offset;
    ~__cil_tmp59~280 := ~__cil_tmp58~280 + 256;
    ~__cil_tmp60~280.base, ~__cil_tmp60~280.offset := 0, (if ~__cil_tmp59~280 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp59~280 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp59~280 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    call #t~ret233.base, #t~ret233.offset := ldv_dma_pool_alloc_19(~__cil_tmp57~280.base, ~__cil_tmp57~280.offset, 208, ~__cil_tmp60~280.base, ~__cil_tmp60~280.offset);
    return;
}

procedure mraid_mm_attach_buf(#in~adp.base : int, #in~adp.offset : int, #in~kioc.base : int, #in~kioc.offset : int, #in~xferlen : int) returns (#res : int);
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_spin;

implementation mraid_mm_ioctl(#in~filep.base : int, #in~filep.offset : int, #in~cmd : int, #in~arg : int) returns (#res : int){
    var #t~ret92 : int;
    var #t~mem93 : int;
    var #t~nondet94.base : int, #t~nondet94.offset : int;
    var #t~ret95 : int;
    var #t~nondet96.base : int, #t~nondet96.offset : int;
    var #t~ret97 : int;
    var #t~ret98 : int;
    var #t~mem100 : int;
    var #t~mem101 : int;
    var #t~mem102 : int;
    var #t~mem103 : int;
    var #t~ret105.base : int, #t~ret105.offset : int;
    var #t~mem106 : int;
    var #t~mem107 : int;
    var #t~mem108 : int;
    var #t~nondet109.base : int, #t~nondet109.offset : int;
    var #t~ret110 : int;
    var #t~ret111.base : int, #t~ret111.offset : int;
    var #t~ret112 : int;
    var #t~mem114 : int;
    var #t~mem115 : int;
    var #t~ret117 : int;
    var #t~mem119 : int;
    var #t~mem120 : int;
    var #t~mem121 : int;
    var #t~ret122 : int;
    var #t~mem124 : int;
    var ~filep.base : int, ~filep.offset : int;
    var ~cmd : int;
    var ~arg : int;
    var ~kioc~102.base : int, ~kioc~102.offset : int;
    var ~#signature~102.base : int, ~#signature~102.offset : int;
    var ~#rval~102.base : int, ~#rval~102.offset : int;
    var ~adp~102.base : int, ~adp~102.offset : int;
    var ~old_ioctl~102 : ~uint8_t;
    var ~#drvrcmd_rval~102.base : int, ~#drvrcmd_rval~102.offset : int;
    var ~argp~102.base : int, ~argp~102.offset : int;
    var ~tmp~102 : int;
    var ~tmp___0~102 : int;
    var ~__cil_tmp13~102 : int;
    var ~__cil_tmp14~102 : int;
    var ~__cil_tmp15~102 : int;
    var ~__cil_tmp16~102 : int;
    var ~__cil_tmp17~102 : int;
    var ~__cil_tmp18~102 : int;
    var ~__cil_tmp19~102 : int;
    var ~__cil_tmp20~102 : int;
    var ~__cil_tmp21~102 : int;
    var ~__cil_tmp22~102 : int;
    var ~__cil_tmp23~102 : int;
    var ~__cil_tmp24~102 : int;
    var ~__cil_tmp25~102 : int;
    var ~__cil_tmp26~102 : int;
    var ~__cil_tmp27~102 : int;
    var ~__cil_tmp28~102 : int;
    var ~__cil_tmp29~102 : int;
    var ~__cil_tmp30~102 : int;
    var ~__cil_tmp31~102 : int;
    var ~__cil_tmp32~102 : int;
    var ~__cil_tmp33~102 : int;
    var ~__cil_tmp34~102 : int;
    var ~__cil_tmp35~102 : int;
    var ~__cil_tmp36~102 : int;
    var ~__cil_tmp37~102 : int;
    var ~__cil_tmp38~102 : int;
    var ~__cil_tmp39~102 : int;
    var ~__cil_tmp40~102 : int;
    var ~__cil_tmp41~102 : int;
    var ~__cil_tmp42~102 : int;
    var ~__cil_tmp43~102 : int;
    var ~__cil_tmp44~102 : int;
    var ~__cil_tmp45~102 : int;
    var ~__cil_tmp46~102 : int;
    var ~__cil_tmp47~102.base : int, ~__cil_tmp47~102.offset : int;
    var ~__cil_tmp48~102.base : int, ~__cil_tmp48~102.offset : int;
    var ~__cil_tmp49~102.base : int, ~__cil_tmp49~102.offset : int;
    var ~__cil_tmp50~102 : int;
    var ~__cil_tmp51~102.base : int, ~__cil_tmp51~102.offset : int;
    var ~__cil_tmp52~102.base : int, ~__cil_tmp52~102.offset : int;
    var ~__cil_tmp53~102 : int;
    var ~__cil_tmp54~102.base : int, ~__cil_tmp54~102.offset : int;
    var ~__cil_tmp55~102 : int;
    var ~__cil_tmp56~102 : ~uint8_t;
    var ~__cil_tmp57~102.base : int, ~__cil_tmp57~102.offset : int;
    var ~__cil_tmp58~102 : int;
    var ~__cil_tmp59~102.base : int, ~__cil_tmp59~102.offset : int;
    var ~__cil_tmp60~102.base : int, ~__cil_tmp60~102.offset : int;
    var ~__cil_tmp61~102 : int;
    var ~__cil_tmp62~102.base : int, ~__cil_tmp62~102.offset : int;
    var ~__cil_tmp63~102.base : int, ~__cil_tmp63~102.offset : int;
    var ~__cil_tmp64~102.base : int, ~__cil_tmp64~102.offset : int;
    var ~__cil_tmp65~102.base : int, ~__cil_tmp65~102.offset : int;
    var ~__cil_tmp66~102 : int;
    var ~__cil_tmp67~102 : int;
    var ~__cil_tmp68~102.base : int, ~__cil_tmp68~102.offset : int;
    var ~__cil_tmp69~102 : int;
    var ~__cil_tmp70~102 : int;
    var ~__cil_tmp71~102 : ~uint32_t;
    var ~__cil_tmp72~102.base : int, ~__cil_tmp72~102.offset : int;
    var ~__cil_tmp73~102 : int;
    var ~__cil_tmp74~102.base : int, ~__cil_tmp74~102.offset : int;
    var ~__cil_tmp75~102.base : int, ~__cil_tmp75~102.offset : int;
    var ~__cil_tmp76~102.base : int, ~__cil_tmp76~102.offset : int;
    var ~__cil_tmp77~102 : int;
    var ~__cil_tmp78~102.base : int, ~__cil_tmp78~102.offset : int;
    var ~__cil_tmp79~102 : int;
    var ~__cil_tmp80~102 : int;
    var ~__cil_tmp81~102.base : int, ~__cil_tmp81~102.offset : int;
    var ~__cil_tmp82~102.base : int, ~__cil_tmp82~102.offset : int;
    var ~__cil_tmp83~102 : int;
    var ~__cil_tmp84~102 : int;
    var ~__cil_tmp85~102 : int;
    var ~__cil_tmp86~102 : ~uint8_t;
    var ~__cil_tmp87~102 : int;
    var ~__cil_tmp88~102.base : int, ~__cil_tmp88~102.offset : int;
    var ~__cil_tmp89~102.base : int, ~__cil_tmp89~102.offset : int;
    var ~__cil_tmp90~102.base : int, ~__cil_tmp90~102.offset : int;
    var ~__cil_tmp91~102.base : int, ~__cil_tmp91~102.offset : int;

  loc6:
    ~filep.base, ~filep.offset := #in~filep.base, #in~filep.offset;
    ~cmd := #in~cmd;
    ~arg := #in~arg;
    havoc ~kioc~102.base, ~kioc~102.offset;
    call ~#signature~102.base, ~#signature~102.offset := #Ultimate.alloc(16);
    call ~#rval~102.base, ~#rval~102.offset := #Ultimate.alloc(4);
    havoc ~adp~102.base, ~adp~102.offset;
    havoc ~old_ioctl~102;
    call ~#drvrcmd_rval~102.base, ~#drvrcmd_rval~102.offset := #Ultimate.alloc(4);
    havoc ~argp~102.base, ~argp~102.offset;
    havoc ~tmp~102;
    havoc ~tmp___0~102;
    havoc ~__cil_tmp13~102;
    havoc ~__cil_tmp14~102;
    havoc ~__cil_tmp15~102;
    havoc ~__cil_tmp16~102;
    havoc ~__cil_tmp17~102;
    havoc ~__cil_tmp18~102;
    havoc ~__cil_tmp19~102;
    havoc ~__cil_tmp20~102;
    havoc ~__cil_tmp21~102;
    havoc ~__cil_tmp22~102;
    havoc ~__cil_tmp23~102;
    havoc ~__cil_tmp24~102;
    havoc ~__cil_tmp25~102;
    havoc ~__cil_tmp26~102;
    havoc ~__cil_tmp27~102;
    havoc ~__cil_tmp28~102;
    havoc ~__cil_tmp29~102;
    havoc ~__cil_tmp30~102;
    havoc ~__cil_tmp31~102;
    havoc ~__cil_tmp32~102;
    havoc ~__cil_tmp33~102;
    havoc ~__cil_tmp34~102;
    havoc ~__cil_tmp35~102;
    havoc ~__cil_tmp36~102;
    havoc ~__cil_tmp37~102;
    havoc ~__cil_tmp38~102;
    havoc ~__cil_tmp39~102;
    havoc ~__cil_tmp40~102;
    havoc ~__cil_tmp41~102;
    havoc ~__cil_tmp42~102;
    havoc ~__cil_tmp43~102;
    havoc ~__cil_tmp44~102;
    havoc ~__cil_tmp45~102;
    havoc ~__cil_tmp46~102;
    havoc ~__cil_tmp47~102.base, ~__cil_tmp47~102.offset;
    havoc ~__cil_tmp48~102.base, ~__cil_tmp48~102.offset;
    havoc ~__cil_tmp49~102.base, ~__cil_tmp49~102.offset;
    havoc ~__cil_tmp50~102;
    havoc ~__cil_tmp51~102.base, ~__cil_tmp51~102.offset;
    havoc ~__cil_tmp52~102.base, ~__cil_tmp52~102.offset;
    havoc ~__cil_tmp53~102;
    havoc ~__cil_tmp54~102.base, ~__cil_tmp54~102.offset;
    havoc ~__cil_tmp55~102;
    havoc ~__cil_tmp56~102;
    havoc ~__cil_tmp57~102.base, ~__cil_tmp57~102.offset;
    havoc ~__cil_tmp58~102;
    havoc ~__cil_tmp59~102.base, ~__cil_tmp59~102.offset;
    havoc ~__cil_tmp60~102.base, ~__cil_tmp60~102.offset;
    havoc ~__cil_tmp61~102;
    havoc ~__cil_tmp62~102.base, ~__cil_tmp62~102.offset;
    havoc ~__cil_tmp63~102.base, ~__cil_tmp63~102.offset;
    havoc ~__cil_tmp64~102.base, ~__cil_tmp64~102.offset;
    havoc ~__cil_tmp65~102.base, ~__cil_tmp65~102.offset;
    havoc ~__cil_tmp66~102;
    havoc ~__cil_tmp67~102;
    havoc ~__cil_tmp68~102.base, ~__cil_tmp68~102.offset;
    havoc ~__cil_tmp69~102;
    havoc ~__cil_tmp70~102;
    havoc ~__cil_tmp71~102;
    havoc ~__cil_tmp72~102.base, ~__cil_tmp72~102.offset;
    havoc ~__cil_tmp73~102;
    havoc ~__cil_tmp74~102.base, ~__cil_tmp74~102.offset;
    havoc ~__cil_tmp75~102.base, ~__cil_tmp75~102.offset;
    havoc ~__cil_tmp76~102.base, ~__cil_tmp76~102.offset;
    havoc ~__cil_tmp77~102;
    havoc ~__cil_tmp78~102.base, ~__cil_tmp78~102.offset;
    havoc ~__cil_tmp79~102;
    havoc ~__cil_tmp80~102;
    havoc ~__cil_tmp81~102.base, ~__cil_tmp81~102.offset;
    havoc ~__cil_tmp82~102.base, ~__cil_tmp82~102.offset;
    havoc ~__cil_tmp83~102;
    havoc ~__cil_tmp84~102;
    havoc ~__cil_tmp85~102;
    havoc ~__cil_tmp86~102;
    havoc ~__cil_tmp87~102;
    havoc ~__cil_tmp88~102.base, ~__cil_tmp88~102.offset;
    havoc ~__cil_tmp89~102.base, ~__cil_tmp89~102.offset;
    havoc ~__cil_tmp90~102.base, ~__cil_tmp90~102.offset;
    havoc ~__cil_tmp91~102.base, ~__cil_tmp91~102.offset;
    ~__cil_tmp13~102 := 0;
    ~__cil_tmp14~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp13~102;
    call write~int(0, 0, (if ~__cil_tmp14~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp14~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp14~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp15~102 := 1;
    ~__cil_tmp16~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp15~102;
    call write~int(0, 0, (if ~__cil_tmp16~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp16~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp16~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp17~102 := 2;
    ~__cil_tmp18~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp17~102;
    call write~int(0, 0, (if ~__cil_tmp18~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp18~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp18~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp19~102 := 3;
    ~__cil_tmp20~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp19~102;
    call write~int(0, 0, (if ~__cil_tmp20~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp20~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp20~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp21~102 := 4;
    ~__cil_tmp22~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp21~102;
    call write~int(0, 0, (if ~__cil_tmp22~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp22~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp22~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp23~102 := 5;
    ~__cil_tmp24~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp23~102;
    call write~int(0, 0, (if ~__cil_tmp24~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp24~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp24~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp25~102 := 6;
    ~__cil_tmp26~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp25~102;
    call write~int(0, 0, (if ~__cil_tmp26~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp26~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp26~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp27~102 := 7;
    ~__cil_tmp28~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp27~102;
    call write~int(0, 0, (if ~__cil_tmp28~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp28~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp28~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp29~102 := 8;
    ~__cil_tmp30~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp29~102;
    call write~int(0, 0, (if ~__cil_tmp30~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp30~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp30~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp31~102 := 9;
    ~__cil_tmp32~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp31~102;
    call write~int(0, 0, (if ~__cil_tmp32~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp32~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp32~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp33~102 := 10;
    ~__cil_tmp34~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp33~102;
    call write~int(0, 0, (if ~__cil_tmp34~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp34~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp34~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp35~102 := 11;
    ~__cil_tmp36~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp35~102;
    call write~int(0, 0, (if ~__cil_tmp36~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp36~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp36~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp37~102 := 12;
    ~__cil_tmp38~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp37~102;
    call write~int(0, 0, (if ~__cil_tmp38~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp38~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp38~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp39~102 := 13;
    ~__cil_tmp40~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp39~102;
    call write~int(0, 0, (if ~__cil_tmp40~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp40~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp40~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp41~102 := 14;
    ~__cil_tmp42~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp41~102;
    call write~int(0, 0, (if ~__cil_tmp42~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp42~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp42~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~__cil_tmp43~102 := 15;
    ~__cil_tmp44~102 := ~#signature~102.base + ~#signature~102.offset + ~__cil_tmp43~102;
    call write~int(0, 0, (if ~__cil_tmp44~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp44~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp44~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 1);
    ~argp~102.base, ~argp~102.offset := 0, (if ~arg % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~arg % 18446744073709551616 % 18446744073709551616 else ~arg % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp45~102 := ~shiftRight(~cmd, 8);
    ~__cil_tmp46~102 := ~bitwiseAnd(~__cil_tmp45~102, 255);
    assume !(~__cil_tmp46~102 % 4294967296 != 109);
    ~__cil_tmp47~102.base, ~__cil_tmp47~102.offset := ~#signature~102.base, ~#signature~102.offset;
    ~__cil_tmp48~102.base, ~__cil_tmp48~102.offset := ~argp~102.base, ~argp~102.offset;
    call #t~ret92 := copy_from_user(~__cil_tmp47~102.base, ~__cil_tmp47~102.offset, ~__cil_tmp48~102.base, ~__cil_tmp48~102.offset, 16);
    ~tmp~102 := #t~ret92;
    havoc #t~ret92;
    assume !(~tmp~102 % 18446744073709551616 != 0);
    ~__cil_tmp51~102.base, ~__cil_tmp51~102.offset := ~#signature~102.base, ~#signature~102.offset;
    call #t~nondet96.base, #t~nondet96.offset := #Ultimate.alloc(17);
    ~__cil_tmp52~102.base, ~__cil_tmp52~102.offset := #t~nondet96.base, #t~nondet96.offset;
    havoc #t~nondet96.base, #t~nondet96.offset;
    call #t~ret97 := memcmp(~__cil_tmp51~102.base, ~__cil_tmp51~102.offset, ~__cil_tmp52~102.base, ~__cil_tmp52~102.offset, 16);
    assume -2147483648 <= #t~ret97 && #t~ret97 <= 2147483647;
    ~tmp___0~102 := #t~ret97;
    havoc #t~ret97;
    assume ~tmp___0~102 == 0;
    ~old_ioctl~102 := 0;
    ~__cil_tmp53~102 := ~old_ioctl~102 % 256;
    assume !(~__cil_tmp53~102 % 4294967296 == 0);
    ~__cil_tmp54~102.base, ~__cil_tmp54~102.offset := ~#rval~102.base, ~#rval~102.offset;
    ~__cil_tmp55~102 := ~old_ioctl~102 % 256;
    ~__cil_tmp56~102 := ~__cil_tmp55~102;
    call #t~ret98 := handle_drvrcmd(~argp~102.base, ~argp~102.offset, ~__cil_tmp56~102, ~#drvrcmd_rval~102.base, ~#drvrcmd_rval~102.offset);
    assume -2147483648 <= #t~ret98 && #t~ret98 <= 2147483647;
    call write~int(#t~ret98, ~__cil_tmp54~102.base, ~__cil_tmp54~102.offset, 4);
    havoc #t~ret98;
    ~__cil_tmp57~102.base, ~__cil_tmp57~102.offset := ~#rval~102.base, ~#rval~102.offset;
    call #t~mem100 := read~int(~__cil_tmp57~102.base, ~__cil_tmp57~102.offset, 4);
    ~__cil_tmp58~102 := #t~mem100;
    havoc #t~mem100;
    assume !(~__cil_tmp58~102 < 0);
    ~__cil_tmp60~102.base, ~__cil_tmp60~102.offset := ~#rval~102.base, ~#rval~102.offset;
    call #t~mem102 := read~int(~__cil_tmp60~102.base, ~__cil_tmp60~102.offset, 4);
    ~__cil_tmp61~102 := #t~mem102;
    havoc #t~mem102;
    assume !(~__cil_tmp61~102 == 0);
    ~__cil_tmp63~102.base, ~__cil_tmp63~102.offset := ~#rval~102.base, ~#rval~102.offset;
    call write~int(0, ~__cil_tmp63~102.base, ~__cil_tmp63~102.offset, 4);
    ~__cil_tmp64~102.base, ~__cil_tmp64~102.offset := ~argp~102.base, ~argp~102.offset;
    call #t~ret105.base, #t~ret105.offset := mraid_mm_get_adapter(~__cil_tmp64~102.base, ~__cil_tmp64~102.offset, ~#rval~102.base, ~#rval~102.offset);
    ~adp~102.base, ~adp~102.offset := #t~ret105.base, #t~ret105.offset;
    havoc #t~ret105.base, #t~ret105.offset;
    ~__cil_tmp65~102.base, ~__cil_tmp65~102.offset := 0, 0;
    ~__cil_tmp66~102 := ~__cil_tmp65~102.base + ~__cil_tmp65~102.offset;
    ~__cil_tmp67~102 := ~adp~102.base + ~adp~102.offset;
    assume !(~__cil_tmp67~102 % 18446744073709551616 == ~__cil_tmp66~102 % 18446744073709551616);
    ~__cil_tmp69~102 := ~adp~102.base + ~adp~102.offset;
    ~__cil_tmp70~102 := ~__cil_tmp69~102 + 40;
    call #t~mem107 := read~int(0, (if ~__cil_tmp70~102 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp70~102 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp70~102 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp71~102 := #t~mem107;
    havoc #t~mem107;
    assume !(~__cil_tmp71~102 % 4294967296 == 0);
    call #t~ret111.base, #t~ret111.offset := mraid_mm_alloc_kioc(~adp~102.base, ~adp~102.offset);
    ~kioc~102.base, ~kioc~102.offset := #t~ret111.base, #t~ret111.offset;
    havoc #t~ret111.base, #t~ret111.offset;
    ~__cil_tmp74~102.base, ~__cil_tmp74~102.offset := ~#rval~102.base, ~#rval~102.offset;
    ~__cil_tmp75~102.base, ~__cil_tmp75~102.offset := ~argp~102.base, ~argp~102.offset;
    call #t~ret112 := mimd_to_kioc(~__cil_tmp75~102.base, ~__cil_tmp75~102.offset, ~adp~102.base, ~adp~102.offset, ~kioc~102.base, ~kioc~102.offset);
    return;
}

procedure mraid_mm_ioctl(#in~filep.base : int, #in~filep.offset : int, #in~cmd : int, #in~arg : int) returns (#res : int);
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length, ~ldv_spin;

implementation list_empty(#in~head.base : int, #in~head.offset : int) returns (#res : int){
    var #t~mem8.base : int, #t~mem8.offset : int;
    var ~head.base : int, ~head.offset : int;
    var ~__cil_tmp2~16 : int;
    var ~__cil_tmp3~16.base : int, ~__cil_tmp3~16.offset : int;
    var ~__cil_tmp4~16.base : int, ~__cil_tmp4~16.offset : int;
    var ~__cil_tmp5~16 : int;

  loc7:
    ~head.base, ~head.offset := #in~head.base, #in~head.offset;
    havoc ~__cil_tmp2~16;
    havoc ~__cil_tmp3~16.base, ~__cil_tmp3~16.offset;
    havoc ~__cil_tmp4~16.base, ~__cil_tmp4~16.offset;
    havoc ~__cil_tmp5~16;
    ~__cil_tmp2~16 := ~head.base + ~head.offset;
    call #t~mem8.base, #t~mem8.offset := read~$Pointer$(~head.base, ~head.offset, 8);
    ~__cil_tmp3~16.base, ~__cil_tmp3~16.offset := #t~mem8.base, #t~mem8.offset;
    havoc #t~mem8.base, #t~mem8.offset;
    ~__cil_tmp4~16.base, ~__cil_tmp4~16.offset := ~__cil_tmp3~16.base, ~__cil_tmp3~16.offset;
    ~__cil_tmp5~16 := ~__cil_tmp4~16.base + ~__cil_tmp4~16.offset;
    #res := (if ~__cil_tmp5~16 % 18446744073709551616 == ~__cil_tmp2~16 % 18446744073709551616 then 1 else 0);
    assume true;
    return;
}

procedure list_empty(#in~head.base : int, #in~head.offset : int) returns (#res : int);
modifies ;

implementation main() returns (){
    var #t~nondet357 : int;
    var #t~mem359 : int;
    var #t~ret360 : int;
    var #t~nondet361 : int;
    var #t~ret362 : int;
    var #t~ret363 : int;
    var #t~ret364 : int;
    var #t~nondet365 : int;
    var ~var_group1~454.base : int, ~var_group1~454.offset : int;
    var ~var_group2~454.base : int, ~var_group2~454.offset : int;
    var ~res_mraid_mm_open_0~454 : int;
    var ~var_mraid_mm_unlocked_ioctl_2_p1~454 : int;
    var ~var_mraid_mm_unlocked_ioctl_2_p2~454 : int;
    var ~var_mraid_mm_compat_ioctl_21_p1~454 : int;
    var ~var_mraid_mm_compat_ioctl_21_p2~454 : int;
    var ~var_lld_timedout_11_p0~454 : int;
    var ~ldv_s_lsi_fops_file_operations~454 : int;
    var ~tmp~454 : int;
    var ~tmp___0~454 : int;
    var ~tmp___1~454 : int;

  loc8:
    havoc ~var_group1~454.base, ~var_group1~454.offset;
    havoc ~var_group2~454.base, ~var_group2~454.offset;
    havoc ~res_mraid_mm_open_0~454;
    havoc ~var_mraid_mm_unlocked_ioctl_2_p1~454;
    havoc ~var_mraid_mm_unlocked_ioctl_2_p2~454;
    havoc ~var_mraid_mm_compat_ioctl_21_p1~454;
    havoc ~var_mraid_mm_compat_ioctl_21_p2~454;
    havoc ~var_lld_timedout_11_p0~454;
    havoc ~ldv_s_lsi_fops_file_operations~454;
    havoc ~tmp~454;
    havoc ~tmp___0~454;
    havoc ~tmp___1~454;
    assume -2147483648 <= #t~nondet357 && #t~nondet357 <= 2147483647;
    call write~int(#t~nondet357, ~#adapters_count_g.base, ~#adapters_count_g.offset, 4);
    havoc #t~nondet357;
    call #t~mem359 := read~int(~#adapters_count_g.base, ~#adapters_count_g.offset, 4);
    assume #t~mem359 >= 0;
    havoc #t~mem359;
    ~ldv_s_lsi_fops_file_operations~454 := 0;
    ~LDV_IN_INTERRUPT := 1;
    call ldv_initialize();
    call #t~ret360 := mraid_mm_init();
    assume -2147483648 <= #t~ret360 && #t~ret360 <= 2147483647;
    ~tmp~454 := #t~ret360;
    havoc #t~ret360;
    assume !(~tmp~454 != 0);
    assume -2147483648 <= #t~nondet365 && #t~nondet365 <= 2147483647;
    ~tmp___1~454 := #t~nondet365;
    havoc #t~nondet365;
    assume ~tmp___1~454 != 0;
    assume -2147483648 <= #t~nondet361 && #t~nondet361 <= 2147483647;
    ~tmp___0~454 := #t~nondet361;
    havoc #t~nondet361;
    assume !(~tmp___0~454 == 0);
    assume ~tmp___0~454 == 1;
    call #t~ret363 := mraid_mm_unlocked_ioctl(~var_group2~454.base, ~var_group2~454.offset, ~var_mraid_mm_unlocked_ioctl_2_p1~454, ~var_mraid_mm_unlocked_ioctl_2_p2~454);
    return;
}

procedure main() returns ();
modifies #memory_int, ~LDV_IN_INTERRUPT, #valid, #length, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_spin;

implementation mraid_mm_init() returns (#res : int){
    var #t~mem340 : int;
    var #t~nondet341.base : int, #t~nondet341.offset : int;
    var #t~nondet342.base : int, #t~nondet342.offset : int;
    var #t~nondet343.base : int, #t~nondet343.offset : int;
    var #t~ret344 : int;
    var #t~ret345 : int;
    var #t~mem346 : int;
    var #t~nondet347.base : int, #t~nondet347.offset : int;
    var #t~ret348 : int;
    var #t~nondet349.base : int, #t~nondet349.offset : int;
    var ~err~425 : int;
    var ~#__key~425.base : int, ~#__key~425.offset : int;
    var ~__cil_tmp3~425.base : int, ~__cil_tmp3~425.offset : int;
    var ~__cil_tmp4~425 : int;
    var ~__cil_tmp5~425.base : int, ~__cil_tmp5~425.offset : int;
    var ~__cil_tmp6~425.base : int, ~__cil_tmp6~425.offset : int;
    var ~__cil_tmp7~425.base : int, ~__cil_tmp7~425.offset : int;
    var ~__cil_tmp8~425 : int;

  loc9:
    havoc ~err~425;
    call ~#__key~425.base, ~#__key~425.offset := #Ultimate.alloc(8);
    havoc ~__cil_tmp3~425.base, ~__cil_tmp3~425.offset;
    havoc ~__cil_tmp4~425;
    havoc ~__cil_tmp5~425.base, ~__cil_tmp5~425.offset;
    havoc ~__cil_tmp6~425.base, ~__cil_tmp6~425.offset;
    havoc ~__cil_tmp7~425.base, ~__cil_tmp7~425.offset;
    havoc ~__cil_tmp8~425;
    ~__cil_tmp3~425.base, ~__cil_tmp3~425.offset := ~#dbglevel.base, ~#dbglevel.offset;
    call #t~mem340 := read~int(~__cil_tmp3~425.base, ~__cil_tmp3~425.offset, 4);
    ~__cil_tmp4~425 := #t~mem340;
    havoc #t~mem340;
    assume !(~__cil_tmp4~425 >= 0);
    call #t~ret345 := misc_register(~#megaraid_mm_dev.base, ~#megaraid_mm_dev.offset);
    assume -2147483648 <= #t~ret345 && #t~ret345 <= 2147483647;
    ~err~425 := #t~ret345;
    havoc #t~ret345;
    assume !(~err~425 < 0);
    call #t~nondet349.base, #t~nondet349.offset := #Ultimate.alloc(8);
    call __init_waitqueue_head(~#wait_q.base, ~#wait_q.offset, #t~nondet349.base, #t~nondet349.offset, ~#__key~425.base, ~#__key~425.offset);
    havoc #t~nondet349.base, #t~nondet349.offset;
    call INIT_LIST_HEAD(~#adapters_list_g.base, ~#adapters_list_g.offset);
    #res := 0;
    call ULTIMATE.dealloc(~#__key~425.base, ~#__key~425.offset);
    havoc ~#__key~425.base, ~#__key~425.offset;
    assume true;
    return;
}

procedure mraid_mm_init() returns (#res : int);
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length, #memory_int;

implementation ldv_spin_unlock() returns (){
  loc10:
    ~ldv_spin := 0;
    assume true;
    return;
}

procedure ldv_spin_unlock() returns ();
modifies ~ldv_spin;

implementation mraid_mm_get_adapter(#in~umimd.base : int, #in~umimd.offset : int, #in~rval.base : int, #in~rval.offset : int) returns (#res.base : int, #res.offset : int){
    var #t~ret126 : int;
    var #t~mem128 : int;
    var #t~mem129 : int;
    var #t~mem131.base : int, #t~mem131.offset : int;
    var #t~mem132.base : int, #t~mem132.offset : int;
    var ~umimd.base : int, ~umimd.offset : int;
    var ~rval.base : int, ~rval.offset : int;
    var ~adapter~163.base : int, ~adapter~163.offset : int;
    var ~#mimd~163.base : int, ~#mimd~163.offset : int;
    var ~adapno~163 : ~uint32_t;
    var ~iterator~163 : int;
    var ~tmp~163 : int;
    var ~__mptr~163.base : int, ~__mptr~163.offset : int;
    var ~tmp___0~163 : int;
    var ~__mptr___0~163.base : int, ~__mptr___0~163.offset : int;
    var ~__cil_tmp11~163.base : int, ~__cil_tmp11~163.offset : int;
    var ~__cil_tmp12~163.base : int, ~__cil_tmp12~163.offset : int;
    var ~__cil_tmp13~163 : int;
    var ~__cil_tmp14~163 : int;
    var ~__cil_tmp15~163 : int;
    var ~__cil_tmp16~163 : ~uint16_t;
    var ~__cil_tmp17~163 : int;
    var ~__cil_tmp18~163.base : int, ~__cil_tmp18~163.offset : int;
    var ~__cil_tmp19~163 : int;
    var ~__cil_tmp20~163 : ~uint32_t;
    var ~__cil_tmp21~163.base : int, ~__cil_tmp21~163.offset : int;
    var ~__cil_tmp22~163.base : int, ~__cil_tmp22~163.offset : int;
    var ~__cil_tmp23~163.base : int, ~__cil_tmp23~163.offset : int;
    var ~__cil_tmp24~163 : ~uint32_t;
    var ~__cil_tmp25~163 : int;
    var ~__cil_tmp26~163 : int;
    var ~__cil_tmp27~163.base : int, ~__cil_tmp27~163.offset : int;
    var ~__cil_tmp28~163.base : int, ~__cil_tmp28~163.offset : int;
    var ~__cil_tmp29~163 : int;
    var ~__cil_tmp30~163 : int;
    var ~__cil_tmp31~163 : int;
    var ~__cil_tmp32~163.base : int, ~__cil_tmp32~163.offset : int;
    var ~__cil_tmp33~163 : int;
    var ~__cil_tmp34~163.base : int, ~__cil_tmp34~163.offset : int;
    var ~__cil_tmp35~163 : int;
    var ~__cil_tmp36~163 : int;

  loc11:
    ~umimd.base, ~umimd.offset := #in~umimd.base, #in~umimd.offset;
    ~rval.base, ~rval.offset := #in~rval.base, #in~rval.offset;
    havoc ~adapter~163.base, ~adapter~163.offset;
    call ~#mimd~163.base, ~#mimd~163.offset := #Ultimate.alloc(113);
    havoc ~adapno~163;
    havoc ~iterator~163;
    havoc ~tmp~163;
    havoc ~__mptr~163.base, ~__mptr~163.offset;
    havoc ~tmp___0~163;
    havoc ~__mptr___0~163.base, ~__mptr___0~163.offset;
    havoc ~__cil_tmp11~163.base, ~__cil_tmp11~163.offset;
    havoc ~__cil_tmp12~163.base, ~__cil_tmp12~163.offset;
    havoc ~__cil_tmp13~163;
    havoc ~__cil_tmp14~163;
    havoc ~__cil_tmp15~163;
    havoc ~__cil_tmp16~163;
    havoc ~__cil_tmp17~163;
    havoc ~__cil_tmp18~163.base, ~__cil_tmp18~163.offset;
    havoc ~__cil_tmp19~163;
    havoc ~__cil_tmp20~163;
    havoc ~__cil_tmp21~163.base, ~__cil_tmp21~163.offset;
    havoc ~__cil_tmp22~163.base, ~__cil_tmp22~163.offset;
    havoc ~__cil_tmp23~163.base, ~__cil_tmp23~163.offset;
    havoc ~__cil_tmp24~163;
    havoc ~__cil_tmp25~163;
    havoc ~__cil_tmp26~163;
    havoc ~__cil_tmp27~163.base, ~__cil_tmp27~163.offset;
    havoc ~__cil_tmp28~163.base, ~__cil_tmp28~163.offset;
    havoc ~__cil_tmp29~163;
    havoc ~__cil_tmp30~163;
    havoc ~__cil_tmp31~163;
    havoc ~__cil_tmp32~163.base, ~__cil_tmp32~163.offset;
    havoc ~__cil_tmp33~163;
    havoc ~__cil_tmp34~163.base, ~__cil_tmp34~163.offset;
    havoc ~__cil_tmp35~163;
    havoc ~__cil_tmp36~163;
    ~__cil_tmp11~163.base, ~__cil_tmp11~163.offset := ~#mimd~163.base, ~#mimd~163.offset;
    ~__cil_tmp12~163.base, ~__cil_tmp12~163.offset := ~umimd.base, ~umimd.offset;
    call #t~ret126 := copy_from_user(~__cil_tmp11~163.base, ~__cil_tmp11~163.offset, ~__cil_tmp12~163.base, ~__cil_tmp12~163.offset, 110);
    ~tmp~163 := #t~ret126;
    havoc #t~ret126;
    assume ~tmp~163 % 18446744073709551616 != 0;
    call write~int(-14, ~rval.base, ~rval.offset, 4);
    #res.base, #res.offset := 0, 0;
    call ULTIMATE.dealloc(~#mimd~163.base, ~#mimd~163.offset);
    havoc ~#mimd~163.base, ~#mimd~163.offset;
    assume true;
    return;
}

procedure mraid_mm_get_adapter(#in~umimd.base : int, #in~umimd.offset : int, #in~rval.base : int, #in~rval.offset : int) returns (#res.base : int, #res.offset : int);
modifies #memory_int, #valid, #length, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation ldv_spin_lock() returns (){
  loc12:
    ~ldv_spin := 1;
    assume true;
    return;
}

procedure ldv_spin_lock() returns ();
modifies ~ldv_spin;

implementation INIT_LIST_HEAD(#in~list.base : int, #in~list.offset : int) returns (){
    var ~list.base : int, ~list.offset : int;
    var ~__cil_tmp2~6 : int;
    var ~__cil_tmp3~6 : int;

  loc13:
    ~list.base, ~list.offset := #in~list.base, #in~list.offset;
    havoc ~__cil_tmp2~6;
    havoc ~__cil_tmp3~6;
    call write~$Pointer$(~list.base, ~list.offset, ~list.base, ~list.offset, 8);
    ~__cil_tmp2~6 := ~list.base + ~list.offset;
    ~__cil_tmp3~6 := ~__cil_tmp2~6 + 8;
    call write~$Pointer$(~list.base, ~list.offset, 0, (if ~__cil_tmp3~6 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp3~6 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp3~6 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    assume true;
    return;
}

procedure INIT_LIST_HEAD(#in~list.base : int, #in~list.offset : int) returns ();
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;

implementation spin_unlock_irqrestore(#in~lock.base : int, #in~lock.offset : int, #in~flags : int) returns (){
    var ~lock.base : int, ~lock.offset : int;
    var ~flags : int;

  loc14:
    ~lock.base, ~lock.offset := #in~lock.base, #in~lock.offset;
    ~flags := #in~flags;
    call ldv_spin_unlock();
    call ldv_spin_unlock_irqrestore_8(~lock.base, ~lock.offset, ~flags);
    assume true;
    return;
}

procedure spin_unlock_irqrestore(#in~lock.base : int, #in~lock.offset : int, #in~flags : int) returns ();
modifies ~ldv_spin;

implementation ldv_dma_pool_alloc_19(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int, #in~ldv_func_arg2 : int, #in~ldv_func_arg3.base : int, #in~ldv_func_arg3.offset : int) returns (#res.base : int, #res.offset : int){
    var #t~ret366.base : int, #t~ret366.offset : int;
    var ~ldv_func_arg1.base : int, ~ldv_func_arg1.offset : int;
    var ~ldv_func_arg2 : int;
    var ~ldv_func_arg3.base : int, ~ldv_func_arg3.offset : int;

  loc15:
    ~ldv_func_arg1.base, ~ldv_func_arg1.offset := #in~ldv_func_arg1.base, #in~ldv_func_arg1.offset;
    ~ldv_func_arg2 := #in~ldv_func_arg2;
    ~ldv_func_arg3.base, ~ldv_func_arg3.offset := #in~ldv_func_arg3.base, #in~ldv_func_arg3.offset;
    call ldv_check_alloc_flags(~ldv_func_arg2);
    return;
}

procedure ldv_dma_pool_alloc_19(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int, #in~ldv_func_arg2 : int, #in~ldv_func_arg3.base : int, #in~ldv_func_arg3.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation ULTIMATE.init() returns (){
    var #t~union367.head : int, #t~union367.tail : int;
    var #t~nondet72.base : int, #t~nondet72.offset : int;
    var #t~union368.__padding : [int]int, #t~union368.dep_map.key.base : int, #t~union368.dep_map.key.offset : int, #t~union368.dep_map.class_cache.base : [int]int, #t~union368.dep_map.class_cache.offset : [int]int, #t~union368.dep_map.name.base : int, #t~union368.dep_map.name.offset : int, #t~union368.dep_map.cpu : int, #t~union368.dep_map.ip : int;
    var #t~nondet73.base : int, #t~nondet73.offset : int;
    var #t~union369.raw_lock.ldv_5907.head_tail : int, #t~union369.raw_lock.ldv_5907.tickets.head : int, #t~union369.raw_lock.ldv_5907.tickets.tail : int, #t~union369.magic : int, #t~union369.owner_cpu : int, #t~union369.owner.base : int, #t~union369.owner.offset : int, #t~union369.dep_map.key.base : int, #t~union369.dep_map.key.offset : int, #t~union369.dep_map.class_cache.base : [int]int, #t~union369.dep_map.class_cache.offset : [int]int, #t~union369.dep_map.name.base : int, #t~union369.dep_map.name.offset : int, #t~union369.dep_map.cpu : int, #t~union369.dep_map.ip : int;
    var #t~union370.__padding : [int]int, #t~union370.dep_map.key.base : int, #t~union370.dep_map.key.offset : int, #t~union370.dep_map.class_cache.base : [int]int, #t~union370.dep_map.class_cache.offset : [int]int, #t~union370.dep_map.name.base : int, #t~union370.dep_map.name.offset : int, #t~union370.dep_map.cpu : int, #t~union370.dep_map.ip : int;
    var #t~nondet74.base : int, #t~nondet74.offset : int;

  loc16:
    #NULL.base, #NULL.offset := 0, 0;
    #valid := #valid[0 := 0];
    call ~#dbglevel.base, ~#dbglevel.offset := #Ultimate.alloc(4);
    call write~int(0, ~#dbglevel.base, ~#dbglevel.offset, 4);
    call ~#adapters_count_g.base, ~#adapters_count_g.offset := #Ultimate.alloc(4);
    call write~int(0, ~#adapters_count_g.base, ~#adapters_count_g.offset, 4);
    ~LDV_IN_INTERRUPT := 0;
    ~ldv_spin := 0;
    call ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset := #Ultimate.alloc(156);
    call write~int(1, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 0 + 0, 4);
    call write~int(0, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union367.head, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union367.tail, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(3735899821, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 4, 4);
    call write~int(4294967295, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, -1, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 20 + 0, 8);
    call write~$Pointer$(0, 0, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 20 + 8 + 0, 8);
    call write~$Pointer$(0, 0, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 20 + 8 + 8, 8);
    call #t~nondet72.base, #t~nondet72.offset := #Ultimate.alloc(25);
    call write~$Pointer$(#t~nondet72.base, #t~nondet72.offset, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union368.__padding[0], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0, 1);
    call write~int(#t~union368.__padding[1], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union368.__padding[2], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union368.__padding[3], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[4], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[5], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[6], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[7], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[8], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[9], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[10], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[11], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[12], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[13], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[14], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[15], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[16], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[17], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[18], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[19], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[20], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[21], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[22], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union368.__padding[23], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union368.dep_map.key.base, #t~union368.dep_map.key.offset, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union368.dep_map.class_cache.base[0], #t~union368.dep_map.class_cache.offset[0], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union368.dep_map.class_cache.base[1], #t~union368.dep_map.class_cache.offset[1], ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union368.dep_map.name.base, #t~union368.dep_map.name.offset, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union368.dep_map.cpu, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union368.dep_map.ip, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 4 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 72, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 72 + 0, 8);
    call write~$Pointer$(~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 72, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 72 + 8, 8);
    call write~$Pointer$(0, 0, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 96, 8);
    call write~$Pointer$(~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 104, 8);
    call write~$Pointer$(0, 0, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 112 + 0, 8);
    call write~$Pointer$(0, 0, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 112 + 8 + 0, 8);
    call write~$Pointer$(0, 0, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 112 + 8 + 8, 8);
    call #t~nondet73.base, #t~nondet73.offset := #Ultimate.alloc(15);
    call write~$Pointer$(#t~nondet73.base, #t~nondet73.offset, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 112 + 24, 8);
    call write~int(0, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 112 + 32, 4);
    call write~int(0, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset + 112 + 36, 8);
    havoc #t~union367.head, #t~union367.tail;
    havoc #t~nondet72.base, #t~nondet72.offset;
    havoc #t~union368.__padding, #t~union368.dep_map.key.base, #t~union368.dep_map.key.offset, #t~union368.dep_map.class_cache.base, #t~union368.dep_map.class_cache.offset, #t~union368.dep_map.name.base, #t~union368.dep_map.name.offset, #t~union368.dep_map.cpu, #t~union368.dep_map.ip;
    havoc #t~nondet73.base, #t~nondet73.offset;
    call ~#drvr_ver.base, ~#drvr_ver.offset := #Ultimate.alloc(4);
    call write~int(35652103, ~#drvr_ver.base, ~#drvr_ver.offset, 4);
    call ~#adapters_list_g.base, ~#adapters_list_g.offset := #Ultimate.alloc(16);
    call write~$Pointer$(0, 0, ~#adapters_list_g.base, ~#adapters_list_g.offset + 0, 8);
    call write~$Pointer$(0, 0, ~#adapters_list_g.base, ~#adapters_list_g.offset + 8, 8);
    call ~#wait_q.base, ~#wait_q.offset := #Ultimate.alloc(84);
    call write~int(#t~union369.raw_lock.ldv_5907.head_tail, ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union369.raw_lock.ldv_5907.tickets.head, ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union369.raw_lock.ldv_5907.tickets.tail, ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(#t~union369.magic, ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 4, 4);
    call write~int(#t~union369.owner_cpu, ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 8, 4);
    call write~$Pointer$(#t~union369.owner.base, #t~union369.owner.offset, ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 12, 8);
    call write~$Pointer$(#t~union369.dep_map.key.base, #t~union369.dep_map.key.offset, ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 20 + 0, 8);
    call write~$Pointer$(#t~union369.dep_map.class_cache.base[0], #t~union369.dep_map.class_cache.offset[0], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 20 + 8, 8);
    call write~$Pointer$(#t~union369.dep_map.class_cache.base[1], #t~union369.dep_map.class_cache.offset[1], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(#t~union369.dep_map.name.base, #t~union369.dep_map.name.offset, ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 20 + 24, 8);
    call write~int(#t~union369.dep_map.cpu, ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 20 + 32, 4);
    call write~int(#t~union369.dep_map.ip, ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union370.__padding[0], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0, 1);
    call write~int(#t~union370.__padding[1], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union370.__padding[2], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union370.__padding[3], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[4], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[5], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[6], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[7], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[8], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[9], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[10], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[11], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[12], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[13], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[14], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[15], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[16], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[17], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[18], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[19], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[20], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[21], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[22], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union370.__padding[23], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union370.dep_map.key.base, #t~union370.dep_map.key.offset, ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union370.dep_map.class_cache.base[0], #t~union370.dep_map.class_cache.offset[0], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union370.dep_map.class_cache.base[1], #t~union370.dep_map.class_cache.offset[1], ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union370.dep_map.name.base, #t~union370.dep_map.name.offset, ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union370.dep_map.cpu, ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union370.dep_map.ip, ~#wait_q.base, ~#wait_q.offset + 0 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#wait_q.base, ~#wait_q.offset + 68 + 0, 8);
    call write~$Pointer$(0, 0, ~#wait_q.base, ~#wait_q.offset + 68 + 8, 8);
    havoc #t~union369.raw_lock.ldv_5907.head_tail, #t~union369.raw_lock.ldv_5907.tickets.head, #t~union369.raw_lock.ldv_5907.tickets.tail, #t~union369.magic, #t~union369.owner_cpu, #t~union369.owner.base, #t~union369.owner.offset, #t~union369.dep_map.key.base, #t~union369.dep_map.key.offset, #t~union369.dep_map.class_cache.base, #t~union369.dep_map.class_cache.offset, #t~union369.dep_map.name.base, #t~union369.dep_map.name.offset, #t~union369.dep_map.cpu, #t~union369.dep_map.ip;
    havoc #t~union370.__padding, #t~union370.dep_map.key.base, #t~union370.dep_map.key.offset, #t~union370.dep_map.class_cache.base, #t~union370.dep_map.class_cache.offset, #t~union370.dep_map.name.base, #t~union370.dep_map.name.offset, #t~union370.dep_map.cpu, #t~union370.dep_map.ip;
    call ~#lsi_fops.base, ~#lsi_fops.offset := #Ultimate.alloc(208);
    call write~$Pointer$(~#__this_module.base, ~#__this_module.offset, ~#lsi_fops.base, ~#lsi_fops.offset + 0, 8);
    call write~$Pointer$(#funAddr~noop_llseek.base, #funAddr~noop_llseek.offset, ~#lsi_fops.base, ~#lsi_fops.offset + 8, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 16, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 56, 8);
    call write~$Pointer$(#funAddr~mraid_mm_unlocked_ioctl.base, #funAddr~mraid_mm_unlocked_ioctl.offset, ~#lsi_fops.base, ~#lsi_fops.offset + 64, 8);
    call write~$Pointer$(#funAddr~mraid_mm_compat_ioctl.base, #funAddr~mraid_mm_compat_ioctl.offset, ~#lsi_fops.base, ~#lsi_fops.offset + 72, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 80, 8);
    call write~$Pointer$(#funAddr~mraid_mm_open.base, #funAddr~mraid_mm_open.offset, ~#lsi_fops.base, ~#lsi_fops.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 96, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 104, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 112, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 120, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 128, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 136, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 144, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 152, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 160, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 168, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 176, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 184, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 192, 8);
    call write~$Pointer$(0, 0, ~#lsi_fops.base, ~#lsi_fops.offset + 200, 8);
    call ~#megaraid_mm_dev.base, ~#megaraid_mm_dev.offset := #Ultimate.alloc(62);
    call write~int(255, ~#megaraid_mm_dev.base, ~#megaraid_mm_dev.offset + 0, 4);
    call #t~nondet74.base, #t~nondet74.offset := #Ultimate.alloc(9);
    call write~$Pointer$(#t~nondet74.base, #t~nondet74.offset, ~#megaraid_mm_dev.base, ~#megaraid_mm_dev.offset + 4, 8);
    call write~$Pointer$(~#lsi_fops.base, ~#lsi_fops.offset, ~#megaraid_mm_dev.base, ~#megaraid_mm_dev.offset + 12, 8);
    call write~$Pointer$(0, 0, ~#megaraid_mm_dev.base, ~#megaraid_mm_dev.offset + 20 + 0, 8);
    call write~$Pointer$(0, 0, ~#megaraid_mm_dev.base, ~#megaraid_mm_dev.offset + 20 + 8, 8);
    call write~$Pointer$(0, 0, ~#megaraid_mm_dev.base, ~#megaraid_mm_dev.offset + 36, 8);
    call write~$Pointer$(0, 0, ~#megaraid_mm_dev.base, ~#megaraid_mm_dev.offset + 44, 8);
    call write~$Pointer$(0, 0, ~#megaraid_mm_dev.base, ~#megaraid_mm_dev.offset + 52, 8);
    call write~int(0, ~#megaraid_mm_dev.base, ~#megaraid_mm_dev.offset + 60, 2);
    havoc #t~nondet74.base, #t~nondet74.offset;
    assume true;
    return;
}

procedure ULTIMATE.init() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~#dbglevel.base, ~#dbglevel.offset, ~#adapters_count_g.base, ~#adapters_count_g.offset, ~LDV_IN_INTERRUPT, ~ldv_spin, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset, ~#drvr_ver.base, ~#drvr_ver.offset, ~#adapters_list_g.base, ~#adapters_list_g.offset, ~#wait_q.base, ~#wait_q.offset, ~#lsi_fops.base, ~#lsi_fops.offset, ~#megaraid_mm_dev.base, ~#megaraid_mm_dev.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length;

implementation mraid_mm_alloc_kioc(#in~adp.base : int, #in~adp.offset : int) returns (#res.base : int, #res.offset : int){
    var #t~ret236 : int;
    var #t~mem237 : int;
    var #t~nondet238.base : int, #t~nondet238.offset : int;
    var #t~ret239 : int;
    var #t~mem240.base : int, #t~mem240.offset : int;
    var #t~mem241 : int;
    var #t~memset242.base : int, #t~memset242.offset : int;
    var #t~mem243.base : int, #t~mem243.offset : int;
    var #t~memset244.base : int, #t~memset244.offset : int;
    var ~adp.base : int, ~adp.offset : int;
    var ~kioc~301.base : int, ~kioc~301.offset : int;
    var ~head~301.base : int, ~head~301.offset : int;
    var ~flags~301 : int;
    var ~tmp~301 : int;
    var ~__mptr~301.base : int, ~__mptr~301.offset : int;
    var ~__cil_tmp7~301 : int;
    var ~__cil_tmp8~301 : int;
    var ~__cil_tmp9~301.base : int, ~__cil_tmp9~301.offset : int;
    var ~__cil_tmp10~301 : int;
    var ~__cil_tmp11~301 : int;
    var ~__cil_tmp12~301.base : int, ~__cil_tmp12~301.offset : int;
    var ~__cil_tmp13~301 : int;
    var ~__cil_tmp14~301 : int;
    var ~__cil_tmp15~301.base : int, ~__cil_tmp15~301.offset : int;
    var ~__cil_tmp16~301 : int;
    var ~__cil_tmp17~301 : int;
    var ~__cil_tmp18~301.base : int, ~__cil_tmp18~301.offset : int;
    var ~__cil_tmp19~301.base : int, ~__cil_tmp19~301.offset : int;
    var ~__cil_tmp20~301 : int;
    var ~__cil_tmp21~301.base : int, ~__cil_tmp21~301.offset : int;
    var ~__cil_tmp22~301.base : int, ~__cil_tmp22~301.offset : int;
    var ~__cil_tmp23~301 : int;
    var ~__cil_tmp24~301 : int;
    var ~__cil_tmp25~301.base : int, ~__cil_tmp25~301.offset : int;
    var ~__cil_tmp26~301 : int;
    var ~__cil_tmp27~301 : int;
    var ~__cil_tmp28~301.base : int, ~__cil_tmp28~301.offset : int;
    var ~__cil_tmp29~301 : int;
    var ~__cil_tmp30~301 : int;
    var ~__cil_tmp31~301 : ~uint64_t;
    var ~__cil_tmp32~301.base : int, ~__cil_tmp32~301.offset : int;
    var ~__cil_tmp33~301 : int;
    var ~__cil_tmp34~301 : int;
    var ~__cil_tmp35~301.base : int, ~__cil_tmp35~301.offset : int;
    var ~__cil_tmp36~301.base : int, ~__cil_tmp36~301.offset : int;
    var ~__cil_tmp37~301 : int;
    var ~__cil_tmp38~301 : int;
    var ~__cil_tmp39~301 : int;
    var ~__cil_tmp40~301 : int;
    var ~__cil_tmp41~301 : int;
    var ~__cil_tmp42~301 : int;
    var ~__cil_tmp43~301 : int;
    var ~__cil_tmp44~301 : int;
    var ~__cil_tmp45~301 : int;
    var ~__cil_tmp46~301 : int;
    var ~__cil_tmp47~301 : int;
    var ~__cil_tmp48~301 : int;
    var ~__cil_tmp49~301 : int;
    var ~__cil_tmp50~301 : int;
    var ~__cil_tmp51~301 : int;
    var ~__cil_tmp52~301 : int;

  loc17:
    ~adp.base, ~adp.offset := #in~adp.base, #in~adp.offset;
    havoc ~kioc~301.base, ~kioc~301.offset;
    havoc ~head~301.base, ~head~301.offset;
    havoc ~flags~301;
    havoc ~tmp~301;
    havoc ~__mptr~301.base, ~__mptr~301.offset;
    havoc ~__cil_tmp7~301;
    havoc ~__cil_tmp8~301;
    havoc ~__cil_tmp9~301.base, ~__cil_tmp9~301.offset;
    havoc ~__cil_tmp10~301;
    havoc ~__cil_tmp11~301;
    havoc ~__cil_tmp12~301.base, ~__cil_tmp12~301.offset;
    havoc ~__cil_tmp13~301;
    havoc ~__cil_tmp14~301;
    havoc ~__cil_tmp15~301.base, ~__cil_tmp15~301.offset;
    havoc ~__cil_tmp16~301;
    havoc ~__cil_tmp17~301;
    havoc ~__cil_tmp18~301.base, ~__cil_tmp18~301.offset;
    havoc ~__cil_tmp19~301.base, ~__cil_tmp19~301.offset;
    havoc ~__cil_tmp20~301;
    havoc ~__cil_tmp21~301.base, ~__cil_tmp21~301.offset;
    havoc ~__cil_tmp22~301.base, ~__cil_tmp22~301.offset;
    havoc ~__cil_tmp23~301;
    havoc ~__cil_tmp24~301;
    havoc ~__cil_tmp25~301.base, ~__cil_tmp25~301.offset;
    havoc ~__cil_tmp26~301;
    havoc ~__cil_tmp27~301;
    havoc ~__cil_tmp28~301.base, ~__cil_tmp28~301.offset;
    havoc ~__cil_tmp29~301;
    havoc ~__cil_tmp30~301;
    havoc ~__cil_tmp31~301;
    havoc ~__cil_tmp32~301.base, ~__cil_tmp32~301.offset;
    havoc ~__cil_tmp33~301;
    havoc ~__cil_tmp34~301;
    havoc ~__cil_tmp35~301.base, ~__cil_tmp35~301.offset;
    havoc ~__cil_tmp36~301.base, ~__cil_tmp36~301.offset;
    havoc ~__cil_tmp37~301;
    havoc ~__cil_tmp38~301;
    havoc ~__cil_tmp39~301;
    havoc ~__cil_tmp40~301;
    havoc ~__cil_tmp41~301;
    havoc ~__cil_tmp42~301;
    havoc ~__cil_tmp43~301;
    havoc ~__cil_tmp44~301;
    havoc ~__cil_tmp45~301;
    havoc ~__cil_tmp46~301;
    havoc ~__cil_tmp47~301;
    havoc ~__cil_tmp48~301;
    havoc ~__cil_tmp49~301;
    havoc ~__cil_tmp50~301;
    havoc ~__cil_tmp51~301;
    havoc ~__cil_tmp52~301;
    ~__cil_tmp7~301 := ~adp.base + ~adp.offset;
    ~__cil_tmp8~301 := ~__cil_tmp7~301 + 160;
    ~__cil_tmp9~301.base, ~__cil_tmp9~301.offset := 0, (if ~__cil_tmp8~301 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp8~301 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp8~301 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    call down(~__cil_tmp9~301.base, ~__cil_tmp9~301.offset);
    call ldv_spin_lock();
    ~__cil_tmp10~301 := ~adp.base + ~adp.offset;
    ~__cil_tmp11~301 := ~__cil_tmp10~301 + 72;
    ~head~301.base, ~head~301.offset := 0, (if ~__cil_tmp11~301 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp11~301 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp11~301 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp12~301.base, ~__cil_tmp12~301.offset := ~head~301.base, ~head~301.offset;
    call #t~ret236 := list_empty(~__cil_tmp12~301.base, ~__cil_tmp12~301.offset);
    assume -2147483648 <= #t~ret236 && #t~ret236 <= 2147483647;
    ~tmp~301 := #t~ret236;
    havoc #t~ret236;
    assume ~tmp~301 != 0;
    ~__cil_tmp13~301 := ~adp.base + ~adp.offset;
    ~__cil_tmp14~301 := ~__cil_tmp13~301 + 160;
    ~__cil_tmp15~301.base, ~__cil_tmp15~301.offset := 0, (if ~__cil_tmp14~301 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp14~301 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp14~301 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    call up(~__cil_tmp15~301.base, ~__cil_tmp15~301.offset);
    ~__cil_tmp16~301 := ~adp.base + ~adp.offset;
    ~__cil_tmp17~301 := ~__cil_tmp16~301 + 88;
    ~__cil_tmp18~301.base, ~__cil_tmp18~301.offset := 0, (if ~__cil_tmp17~301 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp17~301 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp17~301 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    call spin_unlock_irqrestore(~__cil_tmp18~301.base, ~__cil_tmp18~301.offset, ~flags~301);
    ~__cil_tmp19~301.base, ~__cil_tmp19~301.offset := ~#dbglevel.base, ~#dbglevel.offset;
    call #t~mem237 := read~int(~__cil_tmp19~301.base, ~__cil_tmp19~301.offset, 4);
    ~__cil_tmp20~301 := #t~mem237;
    havoc #t~mem237;
    assume !(~__cil_tmp20~301 >= 0);
    #res.base, #res.offset := 0, 0;
    assume true;
    return;
}

procedure mraid_mm_alloc_kioc(#in~adp.base : int, #in~adp.offset : int) returns (#res.base : int, #res.offset : int);
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int, ~ldv_spin, #valid, #length;

implementation handle_drvrcmd(#in~arg.base : int, #in~arg.offset : int, #in~old_ioctl : int, #in~rval.base : int, #in~rval.offset : int) returns (#res : int){
    var #t~ret135 : int;
    var #t~mem136 : int;
    var #t~mem137 : int;
    var #t~mem138.base : int, #t~mem138.offset : int;
    var #t~ret139 : int;
    var #t~mem141 : int;
    var #t~mem142.base : int, #t~mem142.offset : int;
    var #t~ret143 : int;
    var ~arg.base : int, ~arg.offset : int;
    var ~old_ioctl : int;
    var ~rval.base : int, ~rval.offset : int;
    var ~umimd~180.base : int, ~umimd~180.offset : int;
    var ~#kmimd~180.base : int, ~#kmimd~180.offset : int;
    var ~opcode~180 : ~uint8_t;
    var ~subopcode~180 : ~uint8_t;
    var ~tmp~180 : int;
    var ~tmp___0~180 : int;
    var ~tmp___1~180 : int;
    var ~__cil_tmp11~180 : int;
    var ~__cil_tmp12~180.base : int, ~__cil_tmp12~180.offset : int;
    var ~__cil_tmp13~180.base : int, ~__cil_tmp13~180.offset : int;
    var ~__cil_tmp14~180 : int;
    var ~__cil_tmp15~180 : int;
    var ~__cil_tmp16~180 : int;
    var ~__cil_tmp17~180 : int;
    var ~__cil_tmp18~180 : int;
    var ~__cil_tmp19~180 : int;
    var ~__cil_tmp20~180.base : int, ~__cil_tmp20~180.offset : int;
    var ~__cil_tmp21~180.base : int, ~__cil_tmp21~180.offset : int;
    var ~__cil_tmp22~180.base : int, ~__cil_tmp22~180.offset : int;
    var ~__cil_tmp23~180.base : int, ~__cil_tmp23~180.offset : int;
    var ~__cil_tmp24~180 : int;
    var ~__cil_tmp25~180.base : int, ~__cil_tmp25~180.offset : int;
    var ~__cil_tmp26~180.base : int, ~__cil_tmp26~180.offset : int;
    var ~__cil_tmp27~180.base : int, ~__cil_tmp27~180.offset : int;

  loc18:
    ~arg.base, ~arg.offset := #in~arg.base, #in~arg.offset;
    ~old_ioctl := #in~old_ioctl;
    ~rval.base, ~rval.offset := #in~rval.base, #in~rval.offset;
    havoc ~umimd~180.base, ~umimd~180.offset;
    call ~#kmimd~180.base, ~#kmimd~180.offset := #Ultimate.alloc(113);
    havoc ~opcode~180;
    havoc ~subopcode~180;
    havoc ~tmp~180;
    havoc ~tmp___0~180;
    havoc ~tmp___1~180;
    havoc ~__cil_tmp11~180;
    havoc ~__cil_tmp12~180.base, ~__cil_tmp12~180.offset;
    havoc ~__cil_tmp13~180.base, ~__cil_tmp13~180.offset;
    havoc ~__cil_tmp14~180;
    havoc ~__cil_tmp15~180;
    havoc ~__cil_tmp16~180;
    havoc ~__cil_tmp17~180;
    havoc ~__cil_tmp18~180;
    havoc ~__cil_tmp19~180;
    havoc ~__cil_tmp20~180.base, ~__cil_tmp20~180.offset;
    havoc ~__cil_tmp21~180.base, ~__cil_tmp21~180.offset;
    havoc ~__cil_tmp22~180.base, ~__cil_tmp22~180.offset;
    havoc ~__cil_tmp23~180.base, ~__cil_tmp23~180.offset;
    havoc ~__cil_tmp24~180;
    havoc ~__cil_tmp25~180.base, ~__cil_tmp25~180.offset;
    havoc ~__cil_tmp26~180.base, ~__cil_tmp26~180.offset;
    havoc ~__cil_tmp27~180.base, ~__cil_tmp27~180.offset;
    ~__cil_tmp11~180 := ~old_ioctl % 256;
    assume !(~__cil_tmp11~180 % 4294967296 != 0);
    #res := -524;
    call ULTIMATE.dealloc(~#kmimd~180.base, ~#kmimd~180.offset);
    havoc ~#kmimd~180.base, ~#kmimd~180.offset;
    assume true;
    return;
}

procedure handle_drvrcmd(#in~arg.base : int, #in~arg.offset : int, #in~old_ioctl : int, #in~rval.base : int, #in~rval.offset : int) returns (#res : int);
modifies #memory_int, #valid, #length, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation ULTIMATE.start() returns (){
  loc19:
    call ULTIMATE.init();
    call main();
    return;
}

procedure ULTIMATE.start() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~#dbglevel.base, ~#dbglevel.offset, ~#adapters_count_g.base, ~#adapters_count_g.offset, ~LDV_IN_INTERRUPT, ~ldv_spin, ~#mraid_mm_mutex.base, ~#mraid_mm_mutex.offset, ~#drvr_ver.base, ~#drvr_ver.offset, ~#adapters_list_g.base, ~#adapters_list_g.offset, ~#wait_q.base, ~#wait_q.offset, ~#lsi_fops.base, ~#lsi_fops.offset, ~#megaraid_mm_dev.base, ~#megaraid_mm_dev.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int, ~LDV_IN_INTERRUPT;
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_spin, ~LDV_IN_INTERRUPT;

implementation ldv_check_alloc_flags(#in~flags : int) returns (){
    var ~flags : int;

  loc20:
    ~flags := #in~flags;
    assume ~ldv_spin != 0;
    assume ~flags % 4294967296 != 32;
    call ldv_blast_assert();
    return;
}

procedure ldv_check_alloc_flags(#in~flags : int) returns ();
modifies ;

implementation ldv_blast_assert() returns (){
  loc21:
    assume !false;
    goto loc22;
  loc22:
    assert false;
}

procedure ldv_blast_assert() returns ();
modifies ;

procedure __list_add(#in~3.base : int, #in~3.offset : int, #in~4.base : int, #in~4.offset : int, #in~5.base : int, #in~5.offset : int) returns ();
modifies ;

procedure __VERIFIER_assume(#in~356 : int) returns ();
modifies ;

procedure misc_deregister(#in~71.base : int, #in~71.offset : int) returns (#res : int);
modifies ;

procedure write~$Pointer$(#value.base : int, #value.offset : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #memory_int[#ptr.base,#ptr.offset]];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #value.base] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #value.offset];

procedure down(#in~48.base : int, #in~48.offset : int) returns ();
modifies ;

procedure __bad_percpu_size() returns ();
modifies ;

procedure memcmp(#in~15.base : int, #in~15.offset : int, #in~16.base : int, #in~16.offset : int, #in~17 : int) returns (#res : int);
modifies ;

procedure #Ultimate.alloc(~size : int) returns (#res.base : int, #res.offset : int);
ensures old(#valid)[#res.base] == 0;
ensures #valid == old(#valid)[#res.base := 1];
ensures #res.offset == 0;
ensures #res.base != 0;
ensures #length == old(#length)[#res.base := ~size];
modifies #valid, #length;

procedure autoremove_wake_function(#in~35.base : int, #in~35.offset : int, #in~36 : int, #in~37 : int, #in~38.base : int, #in~38.offset : int) returns (#res : int);
modifies ;

procedure ULTIMATE.free(~addr.base : int, ~addr.offset : int) returns ();
free requires ~addr.offset == 0;
free requires ~addr.base == 0 || #valid[~addr.base] == 1;
free ensures (if ~addr.base == 0 then #valid == old(#valid) else #valid == old(#valid)[~addr.base := 0]);
modifies #valid;

procedure _copy_to_user(#in~53.base : int, #in~53.offset : int, #in~54.base : int, #in~54.offset : int, #in~55 : int) returns (#res : int);
modifies ;

procedure read~int(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value : int);
ensures #value == #memory_int[#ptr.base,#ptr.offset];

procedure _raw_spin_unlock_irqrestore(#in~21.base : int, #in~21.offset : int, #in~22 : int) returns ();
modifies ;

procedure ldv_initialize() returns ();
modifies ;

procedure up(#in~49.base : int, #in~49.offset : int) returns ();
modifies ;

procedure misc_register(#in~70.base : int, #in~70.offset : int) returns (#res : int);
modifies ;

procedure read~$Pointer$(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value.base : int, #value.offset : int);
ensures #value.base == #memory_$Pointer$.base[#ptr.base,#ptr.offset] && #value.offset == #memory_$Pointer$.offset[#ptr.base,#ptr.offset];

procedure del_timer_sync(#in~46.base : int, #in~46.offset : int) returns (#res : int);
modifies ;

procedure __list_del_entry(#in~7.base : int, #in~7.offset : int) returns ();
modifies ;

procedure add_timer(#in~45.base : int, #in~45.offset : int) returns ();
modifies ;

procedure __wake_up(#in~26.base : int, #in~26.offset : int, #in~27 : int, #in~28 : int, #in~29.base : int, #in~29.offset : int) returns ();
modifies ;

procedure dma_pool_alloc(#in~64.base : int, #in~64.offset : int, #in~65 : int, #in~66.base : int, #in~66.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure memset(#in~12.base : int, #in~12.offset : int, #in~13 : int, #in~14 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure ULTIMATE.dealloc(~addr.base : int, ~addr.offset : int) returns ();
free ensures #valid == old(#valid)[~addr.base := 0];
modifies #valid;

procedure init_timer_key(#in~42.base : int, #in~42.offset : int, #in~43.base : int, #in~43.offset : int, #in~44.base : int, #in~44.offset : int) returns ();
modifies ;

procedure might_fault() returns ();
modifies ;

procedure prepare_to_wait(#in~30.base : int, #in~30.offset : int, #in~31.base : int, #in~31.offset : int, #in~32 : int) returns ();
modifies ;

procedure printk(#in~0.base : int, #in~0.offset : int) returns (#res : int);
modifies ;

procedure capable(#in~47 : int) returns (#res : ~bool);
modifies ;

procedure write~int(#value : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #value];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset]] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #memory_$Pointer$.offset[#ptr.base,#ptr.offset]];

procedure mutex_unlock(#in~41.base : int, #in~41.offset : int) returns ();
modifies ;

procedure __memcpy(#in~9.base : int, #in~9.offset : int, #in~10.base : int, #in~10.offset : int, #in~11 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __VERIFIER_error() returns ();
modifies ;

procedure noop_llseek(#in~50.base : int, #in~50.offset : int, #in~51 : int, #in~52 : int) returns (#res : ~loff_t);
modifies ;

procedure ldv_check_return_value(#in~355 : int) returns ();
modifies ;

procedure mutex_lock_nested(#in~39.base : int, #in~39.offset : int, #in~40 : int) returns ();
modifies ;

procedure __init_waitqueue_head(#in~23.base : int, #in~23.offset : int, #in~24.base : int, #in~24.offset : int, #in~25.base : int, #in~25.offset : int) returns ();
modifies ;

procedure warn_slowpath_fmt(#in~18.base : int, #in~18.offset : int, #in~19 : int, #in~20.base : int, #in~20.offset : int) returns ();
modifies ;

procedure schedule() returns ();
modifies ;

procedure ldv_check_final_state() returns ();
modifies ;

procedure __VERIFIER_nondet_int() returns (#res : int);
modifies ;

procedure _copy_from_user(#in~56.base : int, #in~56.offset : int, #in~57.base : int, #in~57.offset : int, #in~58 : int) returns (#res : int);
modifies ;

procedure finish_wait(#in~33.base : int, #in~33.offset : int, #in~34.base : int, #in~34.offset : int) returns ();
modifies ;

procedure dma_pool_free(#in~67.base : int, #in~67.offset : int, #in~68.base : int, #in~68.offset : int, #in~69 : int) returns ();
modifies ;

