type STRUCT~task_struct;
type STRUCT~optimistic_spin_queue;
type STRUCT~tvec_base;
type STRUCT~workqueue_struct;
type STRUCT~xol_area;
type STRUCT~slab;
type STRUCT~anon_vma;
type STRUCT~file;
type STRUCT~mempolicy;
type STRUCT~linux_binfmt;
type STRUCT~kioctx_table;
type STRUCT~mmu_notifier_mm;
type STRUCT~fasync_struct;
type STRUCT~sock;
type STRUCT~module;
type STRUCT~poll_table_struct;
type STRUCT~kiocb;
type STRUCT~pipe_inode_info;
type STRUCT~kernfs_open_node;
type STRUCT~kernfs_iattrs;
type STRUCT~seq_file;
type STRUCT~kmem_cache_node;
type STRUCT~mem_cgroup;
type STRUCT~pinctrl;
type STRUCT~pinctrl_state;
type STRUCT~iommu_ops;
type STRUCT~subsys_private;
type STRUCT~driver_private;
type STRUCT~acpi_device;
type STRUCT~device_private;
type STRUCT~dma_coherent_mem;
type STRUCT~cma;
type STRUCT~device_node;
type STRUCT~iommu_group;
type STRUCT~nsproxy;
type STRUCT~net_device;
type STRUCT~sec_path;
type STRUCT~inode;
type STRUCT~super_block;
type STRUCT~vfsmount;
type STRUCT~path;
type STRUCT~writeback_control;
type STRUCT~swap_info_struct;
type STRUCT~backing_dev_info;
type STRUCT~prot_inuse;
type STRUCT~proc_dir_entry;
type STRUCT~ipv4_devconf;
type STRUCT~fib_rules_ops;
type STRUCT~fib_table;
type STRUCT~inet_peer_base;
type STRUCT~tcpm_hash_bucket;
type STRUCT~xt_table;
type STRUCT~dst_entry;
type STRUCT~neighbour;
type STRUCT~ipv6_devconf;
type STRUCT~rt6_info;
type STRUCT~rt6_statistics;
type STRUCT~fib6_table;
type STRUCT~sctp_mib;
type STRUCT~nf_logger;
type STRUCT~ebt_table;
type STRUCT~ip_conntrack_stat;
type STRUCT~nf_ct_event_notifier;
type STRUCT~nf_exp_event_notifier;
type STRUCT~nft_af_info;
type STRUCT~user_namespace;
type STRUCT~net_generic;
type STRUCT~netns_ipvs;
type STRUCT~wireless_dev;
type STRUCT~iw_handler_def;
type STRUCT~ep_device;
type STRUCT~mon_bus;
type STRUCT~usb_tt;
type STRUCT~wusb_dev;
type STRUCT~rtl92c_firmware_header;
type STRUCT~rtl_rate_priv;
type ~__u8 = int;
type ~__s16 = int;
type ~__u16 = int;
type ~__u32 = int;
type ~s8 = int;
type ~u8 = int;
type ~u16 = int;
type ~s32 = int;
type ~u32 = int;
type ~s64 = int;
type ~u64 = int;
type ~__kernel_long_t = int;
type ~__kernel_ulong_t = int;
type ~__kernel_uid32_t = int;
type ~__kernel_gid32_t = int;
type ~__kernel_loff_t = int;
type ~umode_t = int;
type ~bool = int;
type ~sector_t = int;
type ~gfp_t = int;
type ~pteval_t = int;
type ~pgdval_t = int;
type ~pgprotval_t = int;
type ~__kernel_sa_family_t = int;
type ~sk_buff_data_t = int;
type ~kernel_ulong_t = int;
type ~__kernel_size_t = ~__kernel_ulong_t;
type ~__kernel_ssize_t = ~__kernel_long_t;
type ~__le16 = ~__u16;
type ~__be16 = ~__u16;
type ~__le32 = ~__u32;
type ~__be32 = ~__u32;
type ~__wsum = ~__u32;
type ~__kernel_dev_t = ~__u32;
type ~dev_t = ~__kernel_dev_t;
type ~uid_t = ~__kernel_uid32_t;
type ~gid_t = ~__kernel_gid32_t;
type ~loff_t = ~__kernel_loff_t;
type ~size_t = ~__kernel_size_t;
type ~ssize_t = ~__kernel_ssize_t;
type ~dma_addr_t = ~u64;
type ~__ticket_t = ~u16;
type ~__ticketpair_t = ~u32;
type ~sa_family_t = ~__kernel_sa_family_t;
type ~socket_state = int;
type ~dma_cookie_t = ~s32;
type ~netdev_features_t = ~u64;
type ~int16_t = ~__s16;
const #funAddr~halbtc_read_1byte.base : int;
const #funAddr~halbtc_read_1byte.offset : int;
const #funAddr~halbtc_write_1byte.base : int;
const #funAddr~halbtc_write_1byte.offset : int;
const #funAddr~halbtc_bitmask_write_1byte.base : int;
const #funAddr~halbtc_bitmask_write_1byte.offset : int;
const #funAddr~halbtc_read_2byte.base : int;
const #funAddr~halbtc_read_2byte.offset : int;
const #funAddr~halbtc_write_2byte.base : int;
const #funAddr~halbtc_write_2byte.offset : int;
const #funAddr~halbtc_read_4byte.base : int;
const #funAddr~halbtc_read_4byte.offset : int;
const #funAddr~halbtc_write_4byte.base : int;
const #funAddr~halbtc_write_4byte.offset : int;
const #funAddr~halbtc_set_bbreg.base : int;
const #funAddr~halbtc_set_bbreg.offset : int;
const #funAddr~halbtc_get_bbreg.base : int;
const #funAddr~halbtc_get_bbreg.offset : int;
const #funAddr~halbtc_set_rfreg.base : int;
const #funAddr~halbtc_set_rfreg.offset : int;
const #funAddr~halbtc_get_rfreg.base : int;
const #funAddr~halbtc_get_rfreg.offset : int;
const #funAddr~halbtc_fill_h2c_cmd.base : int;
const #funAddr~halbtc_fill_h2c_cmd.offset : int;
const #funAddr~halbtc_display_dbg_msg.base : int;
const #funAddr~halbtc_display_dbg_msg.offset : int;
const #funAddr~halbtc_get.base : int;
const #funAddr~halbtc_get.offset : int;
const #funAddr~halbtc_set.base : int;
const #funAddr~halbtc_set.offset : int;
const #funAddr~rtl_btc_init_variables.base : int;
const #funAddr~rtl_btc_init_variables.offset : int;
const #funAddr~rtl_btc_init_hal_vars.base : int;
const #funAddr~rtl_btc_init_hal_vars.offset : int;
const #funAddr~rtl_btc_init_hw_config.base : int;
const #funAddr~rtl_btc_init_hw_config.offset : int;
const #funAddr~rtl_btc_ips_notify.base : int;
const #funAddr~rtl_btc_ips_notify.offset : int;
const #funAddr~rtl_btc_scan_notify.base : int;
const #funAddr~rtl_btc_scan_notify.offset : int;
const #funAddr~rtl_btc_connect_notify.base : int;
const #funAddr~rtl_btc_connect_notify.offset : int;
const #funAddr~rtl_btc_mediastatus_notify.base : int;
const #funAddr~rtl_btc_mediastatus_notify.offset : int;
const #funAddr~rtl_btc_periodical.base : int;
const #funAddr~rtl_btc_periodical.offset : int;
const #funAddr~rtl_btc_halt_notify.base : int;
const #funAddr~rtl_btc_halt_notify.offset : int;
const #funAddr~rtl_btc_btinfo_notify.base : int;
const #funAddr~rtl_btc_btinfo_notify.offset : int;
const #funAddr~rtl_btc_is_limited_dig.base : int;
const #funAddr~rtl_btc_is_limited_dig.offset : int;
const #funAddr~rtl_btc_is_disable_edca_turbo.base : int;
const #funAddr~rtl_btc_is_disable_edca_turbo.offset : int;
const #funAddr~rtl_btc_is_bt_disabled.base : int;
const #funAddr~rtl_btc_is_bt_disabled.offset : int;
const #funAddr~rtl_btc_get_ops_pointer.base : int;
const #funAddr~rtl_btc_get_ops_pointer.offset : int;
const ~rpm_status~RPM_ACTIVE : int;
const ~rpm_status~RPM_RESUMING : int;
const ~rpm_status~RPM_SUSPENDED : int;
const ~rpm_status~RPM_SUSPENDING : int;
const ~rpm_request~RPM_REQ_NONE : int;
const ~rpm_request~RPM_REQ_IDLE : int;
const ~rpm_request~RPM_REQ_SUSPEND : int;
const ~rpm_request~RPM_REQ_AUTOSUSPEND : int;
const ~rpm_request~RPM_REQ_RESUME : int;
const ~ldv_13278~SS_FREE : int;
const ~ldv_13278~SS_UNCONNECTED : int;
const ~ldv_13278~SS_CONNECTING : int;
const ~ldv_13278~SS_CONNECTED : int;
const ~ldv_13278~SS_DISCONNECTING : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NONE : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NET : int;
const ~kobj_ns_type~KOBJ_NS_TYPES : int;
const ~dma_data_direction~DMA_BIDIRECTIONAL : int;
const ~dma_data_direction~DMA_TO_DEVICE : int;
const ~dma_data_direction~DMA_FROM_DEVICE : int;
const ~dma_data_direction~DMA_NONE : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_RESUME_LATENCY : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_LATENCY_TOLERANCE : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_FLAGS : int;
const ~pm_qos_type~PM_QOS_UNITIALIZED : int;
const ~pm_qos_type~PM_QOS_MAX : int;
const ~pm_qos_type~PM_QOS_MIN : int;
const ~migrate_mode~MIGRATE_ASYNC : int;
const ~migrate_mode~MIGRATE_SYNC_LIGHT : int;
const ~migrate_mode~MIGRATE_SYNC : int;
const ~nl80211_iftype~NL80211_IFTYPE_UNSPECIFIED : int;
const ~nl80211_iftype~NL80211_IFTYPE_ADHOC : int;
const ~nl80211_iftype~NL80211_IFTYPE_STATION : int;
const ~nl80211_iftype~NL80211_IFTYPE_AP : int;
const ~nl80211_iftype~NL80211_IFTYPE_AP_VLAN : int;
const ~nl80211_iftype~NL80211_IFTYPE_WDS : int;
const ~nl80211_iftype~NL80211_IFTYPE_MONITOR : int;
const ~nl80211_iftype~NL80211_IFTYPE_MESH_POINT : int;
const ~nl80211_iftype~NL80211_IFTYPE_P2P_CLIENT : int;
const ~nl80211_iftype~NL80211_IFTYPE_P2P_GO : int;
const ~nl80211_iftype~NL80211_IFTYPE_P2P_DEVICE : int;
const ~nl80211_iftype~NUM_NL80211_IFTYPES : int;
const ~nl80211_iftype~NL80211_IFTYPE_MAX : int;
const ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_CORE : int;
const ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_USER : int;
const ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_DRIVER : int;
const ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_COUNTRY_IE : int;
const ~nl80211_dfs_regions~NL80211_DFS_UNSET : int;
const ~nl80211_dfs_regions~NL80211_DFS_FCC : int;
const ~nl80211_dfs_regions~NL80211_DFS_ETSI : int;
const ~nl80211_dfs_regions~NL80211_DFS_JP : int;
const ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_USER : int;
const ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_CELL_BASE : int;
const ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_INDOOR : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_20_NOHT : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_20 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_40 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_80 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_80P80 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_160 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_5 : int;
const ~nl80211_chan_width~NL80211_CHAN_WIDTH_10 : int;
const ~nl80211_dfs_state~NL80211_DFS_USABLE : int;
const ~nl80211_dfs_state~NL80211_DFS_UNAVAILABLE : int;
const ~nl80211_dfs_state~NL80211_DFS_AVAILABLE : int;
const ~environment_cap~ENVIRON_ANY : int;
const ~environment_cap~ENVIRON_INDOOR : int;
const ~environment_cap~ENVIRON_OUTDOOR : int;
const ~ieee80211_band~IEEE80211_BAND_2GHZ : int;
const ~ieee80211_band~IEEE80211_BAND_5GHZ : int;
const ~ieee80211_band~IEEE80211_BAND_60GHZ : int;
const ~ieee80211_band~IEEE80211_NUM_BANDS : int;
const ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_NONE : int;
const ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_MBM : int;
const ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_UNSPEC : int;
const ~btc_chip_interface~BTC_INTF_UNKNOWN : int;
const ~btc_chip_interface~BTC_INTF_PCI : int;
const ~btc_chip_interface~BTC_INTF_USB : int;
const ~btc_chip_interface~BTC_INTF_SDIO : int;
const ~btc_chip_interface~BTC_INTF_GSPI : int;
const ~btc_chip_interface~BTC_INTF_MAX : int;
const ~usb_device_speed~USB_SPEED_UNKNOWN : int;
const ~usb_device_speed~USB_SPEED_LOW : int;
const ~usb_device_speed~USB_SPEED_FULL : int;
const ~usb_device_speed~USB_SPEED_HIGH : int;
const ~usb_device_speed~USB_SPEED_WIRELESS : int;
const ~usb_device_speed~USB_SPEED_SUPER : int;
const ~usb_device_state~USB_STATE_NOTATTACHED : int;
const ~usb_device_state~USB_STATE_ATTACHED : int;
const ~usb_device_state~USB_STATE_POWERED : int;
const ~usb_device_state~USB_STATE_RECONNECTING : int;
const ~usb_device_state~USB_STATE_UNAUTHENTICATED : int;
const ~usb_device_state~USB_STATE_DEFAULT : int;
const ~usb_device_state~USB_STATE_ADDRESS : int;
const ~usb_device_state~USB_STATE_CONFIGURED : int;
const ~usb_device_state~USB_STATE_SUSPENDED : int;
const ~usb_interface_condition~USB_INTERFACE_UNBOUND : int;
const ~usb_interface_condition~USB_INTERFACE_BINDING : int;
const ~usb_interface_condition~USB_INTERFACE_BOUND : int;
const ~usb_interface_condition~USB_INTERFACE_UNBINDING : int;
const ~usb_device_removable~USB_DEVICE_REMOVABLE_UNKNOWN : int;
const ~usb_device_removable~USB_DEVICE_REMOVABLE : int;
const ~usb_device_removable~USB_DEVICE_FIXED : int;
const ~nl80211_channel_type~NL80211_CHAN_NO_HT : int;
const ~nl80211_channel_type~NL80211_CHAN_HT20 : int;
const ~nl80211_channel_type~NL80211_CHAN_HT40MINUS : int;
const ~nl80211_channel_type~NL80211_CHAN_HT40PLUS : int;
const ~ieee80211_smps_mode~IEEE80211_SMPS_AUTOMATIC : int;
const ~ieee80211_smps_mode~IEEE80211_SMPS_OFF : int;
const ~ieee80211_smps_mode~IEEE80211_SMPS_STATIC : int;
const ~ieee80211_smps_mode~IEEE80211_SMPS_DYNAMIC : int;
const ~ieee80211_smps_mode~IEEE80211_SMPS_NUM_MODES : int;
const ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_20 : int;
const ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_40 : int;
const ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_80 : int;
const ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_160 : int;
const ~intf_type~INTF_PCI : int;
const ~intf_type~INTF_USB : int;
const ~radio_path~RF90_PATH_A : int;
const ~radio_path~RF90_PATH_B : int;
const ~radio_path~RF90_PATH_C : int;
const ~radio_path~RF90_PATH_D : int;
const ~rf_pwrstate~ERFON : int;
const ~rf_pwrstate~ERFSLEEP : int;
const ~rf_pwrstate~ERFOFF : int;
const ~io_type~IO_CMD_PAUSE_DM_BY_SCAN : int;
const ~io_type~IO_CMD_PAUSE_BAND0_DM_BY_SCAN : int;
const ~io_type~IO_CMD_PAUSE_BAND1_DM_BY_SCAN : int;
const ~io_type~IO_CMD_RESUME_DM_BY_SCAN : int;
const ~_RT_MEDIA_STATUS~RT_MEDIA_DISCONNECT : int;
const ~_RT_MEDIA_STATUS~RT_MEDIA_CONNECT : int;
const ~ht_channel_width~HT_CHANNEL_WIDTH_20 : int;
const ~ht_channel_width~HT_CHANNEL_WIDTH_20_40 : int;
const ~ht_channel_width~HT_CHANNEL_WIDTH_80 : int;
const ~rt_enc_alg~NO_ENCRYPTION : int;
const ~rt_enc_alg~WEP40_ENCRYPTION : int;
const ~rt_enc_alg~TKIP_ENCRYPTION : int;
const ~rt_enc_alg~RSERVED_ENCRYPTION : int;
const ~rt_enc_alg~AESCCMP_ENCRYPTION : int;
const ~rt_enc_alg~WEP104_ENCRYPTION : int;
const ~rt_enc_alg~AESCMAC_ENCRYPTION : int;
const ~rt_psmode~EACTIVE : int;
const ~rt_psmode~EMAXPS : int;
const ~rt_psmode~EFASTPS : int;
const ~rt_psmode~EAUTOPS : int;
const ~led_ctl_mode~LED_CTL_POWER_ON : int;
const ~led_ctl_mode~LED_CTL_LINK : int;
const ~led_ctl_mode~LED_CTL_NO_LINK : int;
const ~led_ctl_mode~LED_CTL_TX : int;
const ~led_ctl_mode~LED_CTL_RX : int;
const ~led_ctl_mode~LED_CTL_SITE_SURVEY : int;
const ~led_ctl_mode~LED_CTL_POWER_OFF : int;
const ~led_ctl_mode~LED_CTL_START_TO_LINK : int;
const ~led_ctl_mode~LED_CTL_START_WPS : int;
const ~led_ctl_mode~LED_CTL_STOP_WPS : int;
const ~macphy_mode~SINGLEMAC_SINGLEPHY : int;
const ~macphy_mode~DUALMAC_DUALPHY : int;
const ~macphy_mode~DUALMAC_SINGLEPHY : int;
const ~band_type~BAND_ON_2_4G : int;
const ~band_type~BAND_ON_5G : int;
const ~band_type~BAND_ON_BOTH : int;
const ~band_type~BANDMAX : int;
const ~rtl_link_state~MAC80211_NOLINK : int;
const ~rtl_link_state~MAC80211_LINKING : int;
const ~rtl_link_state~MAC80211_LINKED : int;
const ~rtl_link_state~MAC80211_LINKED_SCANNING : int;
const ~rt_polarity_ctl~RT_POLARITY_LOW_ACT : int;
const ~rt_polarity_ctl~RT_POLARITY_HIGH_ACT : int;
const ~p2p_ps_state~P2P_PS_DISABLE : int;
const ~p2p_ps_state~P2P_PS_ENABLE : int;
const ~p2p_ps_state~P2P_PS_SCAN : int;
const ~p2p_ps_state~P2P_PS_SCAN_DONE : int;
const ~p2p_ps_state~P2P_PS_ALLSTASLEEP : int;
const ~p2p_ps_mode~P2P_PS_NONE : int;
const ~p2p_ps_mode~P2P_PS_CTWINDOW : int;
const ~p2p_ps_mode~P2P_PS_NOA : int;
const ~p2p_ps_mode~P2P_PS_MIX : int;
axiom #funAddr~halbtc_read_1byte.base == -1 && #funAddr~halbtc_read_1byte.offset == 0;
axiom #funAddr~halbtc_write_1byte.base == -1 && #funAddr~halbtc_write_1byte.offset == 1;
axiom #funAddr~halbtc_bitmask_write_1byte.base == -1 && #funAddr~halbtc_bitmask_write_1byte.offset == 2;
axiom #funAddr~halbtc_read_2byte.base == -1 && #funAddr~halbtc_read_2byte.offset == 3;
axiom #funAddr~halbtc_write_2byte.base == -1 && #funAddr~halbtc_write_2byte.offset == 4;
axiom #funAddr~halbtc_read_4byte.base == -1 && #funAddr~halbtc_read_4byte.offset == 5;
axiom #funAddr~halbtc_write_4byte.base == -1 && #funAddr~halbtc_write_4byte.offset == 6;
axiom #funAddr~halbtc_set_bbreg.base == -1 && #funAddr~halbtc_set_bbreg.offset == 7;
axiom #funAddr~halbtc_get_bbreg.base == -1 && #funAddr~halbtc_get_bbreg.offset == 8;
axiom #funAddr~halbtc_set_rfreg.base == -1 && #funAddr~halbtc_set_rfreg.offset == 9;
axiom #funAddr~halbtc_get_rfreg.base == -1 && #funAddr~halbtc_get_rfreg.offset == 10;
axiom #funAddr~halbtc_fill_h2c_cmd.base == -1 && #funAddr~halbtc_fill_h2c_cmd.offset == 11;
axiom #funAddr~halbtc_display_dbg_msg.base == -1 && #funAddr~halbtc_display_dbg_msg.offset == 12;
axiom #funAddr~halbtc_get.base == -1 && #funAddr~halbtc_get.offset == 13;
axiom #funAddr~halbtc_set.base == -1 && #funAddr~halbtc_set.offset == 14;
axiom #funAddr~rtl_btc_init_variables.base == -1 && #funAddr~rtl_btc_init_variables.offset == 15;
axiom #funAddr~rtl_btc_init_hal_vars.base == -1 && #funAddr~rtl_btc_init_hal_vars.offset == 16;
axiom #funAddr~rtl_btc_init_hw_config.base == -1 && #funAddr~rtl_btc_init_hw_config.offset == 17;
axiom #funAddr~rtl_btc_ips_notify.base == -1 && #funAddr~rtl_btc_ips_notify.offset == 18;
axiom #funAddr~rtl_btc_scan_notify.base == -1 && #funAddr~rtl_btc_scan_notify.offset == 19;
axiom #funAddr~rtl_btc_connect_notify.base == -1 && #funAddr~rtl_btc_connect_notify.offset == 20;
axiom #funAddr~rtl_btc_mediastatus_notify.base == -1 && #funAddr~rtl_btc_mediastatus_notify.offset == 21;
axiom #funAddr~rtl_btc_periodical.base == -1 && #funAddr~rtl_btc_periodical.offset == 22;
axiom #funAddr~rtl_btc_halt_notify.base == -1 && #funAddr~rtl_btc_halt_notify.offset == 23;
axiom #funAddr~rtl_btc_btinfo_notify.base == -1 && #funAddr~rtl_btc_btinfo_notify.offset == 24;
axiom #funAddr~rtl_btc_is_limited_dig.base == -1 && #funAddr~rtl_btc_is_limited_dig.offset == 25;
axiom #funAddr~rtl_btc_is_disable_edca_turbo.base == -1 && #funAddr~rtl_btc_is_disable_edca_turbo.offset == 26;
axiom #funAddr~rtl_btc_is_bt_disabled.base == -1 && #funAddr~rtl_btc_is_bt_disabled.offset == 27;
axiom #funAddr~rtl_btc_get_ops_pointer.base == -1 && #funAddr~rtl_btc_get_ops_pointer.offset == 28;
axiom ~rpm_status~RPM_ACTIVE == 0;
axiom ~rpm_status~RPM_RESUMING == 1;
axiom ~rpm_status~RPM_SUSPENDED == 2;
axiom ~rpm_status~RPM_SUSPENDING == 3;
axiom ~rpm_request~RPM_REQ_NONE == 0;
axiom ~rpm_request~RPM_REQ_IDLE == 1;
axiom ~rpm_request~RPM_REQ_SUSPEND == 2;
axiom ~rpm_request~RPM_REQ_AUTOSUSPEND == 3;
axiom ~rpm_request~RPM_REQ_RESUME == 4;
axiom ~ldv_13278~SS_FREE == 0;
axiom ~ldv_13278~SS_UNCONNECTED == 1;
axiom ~ldv_13278~SS_CONNECTING == 2;
axiom ~ldv_13278~SS_CONNECTED == 3;
axiom ~ldv_13278~SS_DISCONNECTING == 4;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NONE == 0;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NET == 1;
axiom ~kobj_ns_type~KOBJ_NS_TYPES == 2;
axiom ~dma_data_direction~DMA_BIDIRECTIONAL == 0;
axiom ~dma_data_direction~DMA_TO_DEVICE == 1;
axiom ~dma_data_direction~DMA_FROM_DEVICE == 2;
axiom ~dma_data_direction~DMA_NONE == 3;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_RESUME_LATENCY == 1;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_LATENCY_TOLERANCE == 2;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_FLAGS == 3;
axiom ~pm_qos_type~PM_QOS_UNITIALIZED == 0;
axiom ~pm_qos_type~PM_QOS_MAX == 1;
axiom ~pm_qos_type~PM_QOS_MIN == 2;
axiom ~migrate_mode~MIGRATE_ASYNC == 0;
axiom ~migrate_mode~MIGRATE_SYNC_LIGHT == 1;
axiom ~migrate_mode~MIGRATE_SYNC == 2;
axiom ~nl80211_iftype~NL80211_IFTYPE_UNSPECIFIED == 0;
axiom ~nl80211_iftype~NL80211_IFTYPE_ADHOC == 1;
axiom ~nl80211_iftype~NL80211_IFTYPE_STATION == 2;
axiom ~nl80211_iftype~NL80211_IFTYPE_AP == 3;
axiom ~nl80211_iftype~NL80211_IFTYPE_AP_VLAN == 4;
axiom ~nl80211_iftype~NL80211_IFTYPE_WDS == 5;
axiom ~nl80211_iftype~NL80211_IFTYPE_MONITOR == 6;
axiom ~nl80211_iftype~NL80211_IFTYPE_MESH_POINT == 7;
axiom ~nl80211_iftype~NL80211_IFTYPE_P2P_CLIENT == 8;
axiom ~nl80211_iftype~NL80211_IFTYPE_P2P_GO == 9;
axiom ~nl80211_iftype~NL80211_IFTYPE_P2P_DEVICE == 10;
axiom ~nl80211_iftype~NUM_NL80211_IFTYPES == 11;
axiom ~nl80211_iftype~NL80211_IFTYPE_MAX == 10;
axiom ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_CORE == 0;
axiom ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_USER == 1;
axiom ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_DRIVER == 2;
axiom ~nl80211_reg_initiator~NL80211_REGDOM_SET_BY_COUNTRY_IE == 3;
axiom ~nl80211_dfs_regions~NL80211_DFS_UNSET == 0;
axiom ~nl80211_dfs_regions~NL80211_DFS_FCC == 1;
axiom ~nl80211_dfs_regions~NL80211_DFS_ETSI == 2;
axiom ~nl80211_dfs_regions~NL80211_DFS_JP == 3;
axiom ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_USER == 0;
axiom ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_CELL_BASE == 1;
axiom ~nl80211_user_reg_hint_type~NL80211_USER_REG_HINT_INDOOR == 2;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_20_NOHT == 0;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_20 == 1;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_40 == 2;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_80 == 3;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_80P80 == 4;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_160 == 5;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_5 == 6;
axiom ~nl80211_chan_width~NL80211_CHAN_WIDTH_10 == 7;
axiom ~nl80211_dfs_state~NL80211_DFS_USABLE == 0;
axiom ~nl80211_dfs_state~NL80211_DFS_UNAVAILABLE == 1;
axiom ~nl80211_dfs_state~NL80211_DFS_AVAILABLE == 2;
axiom ~environment_cap~ENVIRON_ANY == 0;
axiom ~environment_cap~ENVIRON_INDOOR == 1;
axiom ~environment_cap~ENVIRON_OUTDOOR == 2;
axiom ~ieee80211_band~IEEE80211_BAND_2GHZ == 0;
axiom ~ieee80211_band~IEEE80211_BAND_5GHZ == 1;
axiom ~ieee80211_band~IEEE80211_BAND_60GHZ == 2;
axiom ~ieee80211_band~IEEE80211_NUM_BANDS == 3;
axiom ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_NONE == 0;
axiom ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_MBM == 1;
axiom ~cfg80211_signal_type~CFG80211_SIGNAL_TYPE_UNSPEC == 2;
axiom ~btc_chip_interface~BTC_INTF_UNKNOWN == 0;
axiom ~btc_chip_interface~BTC_INTF_PCI == 1;
axiom ~btc_chip_interface~BTC_INTF_USB == 2;
axiom ~btc_chip_interface~BTC_INTF_SDIO == 3;
axiom ~btc_chip_interface~BTC_INTF_GSPI == 4;
axiom ~btc_chip_interface~BTC_INTF_MAX == 5;
axiom ~usb_device_speed~USB_SPEED_UNKNOWN == 0;
axiom ~usb_device_speed~USB_SPEED_LOW == 1;
axiom ~usb_device_speed~USB_SPEED_FULL == 2;
axiom ~usb_device_speed~USB_SPEED_HIGH == 3;
axiom ~usb_device_speed~USB_SPEED_WIRELESS == 4;
axiom ~usb_device_speed~USB_SPEED_SUPER == 5;
axiom ~usb_device_state~USB_STATE_NOTATTACHED == 0;
axiom ~usb_device_state~USB_STATE_ATTACHED == 1;
axiom ~usb_device_state~USB_STATE_POWERED == 2;
axiom ~usb_device_state~USB_STATE_RECONNECTING == 3;
axiom ~usb_device_state~USB_STATE_UNAUTHENTICATED == 4;
axiom ~usb_device_state~USB_STATE_DEFAULT == 5;
axiom ~usb_device_state~USB_STATE_ADDRESS == 6;
axiom ~usb_device_state~USB_STATE_CONFIGURED == 7;
axiom ~usb_device_state~USB_STATE_SUSPENDED == 8;
axiom ~usb_interface_condition~USB_INTERFACE_UNBOUND == 0;
axiom ~usb_interface_condition~USB_INTERFACE_BINDING == 1;
axiom ~usb_interface_condition~USB_INTERFACE_BOUND == 2;
axiom ~usb_interface_condition~USB_INTERFACE_UNBINDING == 3;
axiom ~usb_device_removable~USB_DEVICE_REMOVABLE_UNKNOWN == 0;
axiom ~usb_device_removable~USB_DEVICE_REMOVABLE == 1;
axiom ~usb_device_removable~USB_DEVICE_FIXED == 2;
axiom ~nl80211_channel_type~NL80211_CHAN_NO_HT == 0;
axiom ~nl80211_channel_type~NL80211_CHAN_HT20 == 1;
axiom ~nl80211_channel_type~NL80211_CHAN_HT40MINUS == 2;
axiom ~nl80211_channel_type~NL80211_CHAN_HT40PLUS == 3;
axiom ~ieee80211_smps_mode~IEEE80211_SMPS_AUTOMATIC == 0;
axiom ~ieee80211_smps_mode~IEEE80211_SMPS_OFF == 1;
axiom ~ieee80211_smps_mode~IEEE80211_SMPS_STATIC == 2;
axiom ~ieee80211_smps_mode~IEEE80211_SMPS_DYNAMIC == 3;
axiom ~ieee80211_smps_mode~IEEE80211_SMPS_NUM_MODES == 4;
axiom ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_20 == 0;
axiom ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_40 == 1;
axiom ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_80 == 2;
axiom ~ieee80211_sta_rx_bandwidth~IEEE80211_STA_RX_BW_160 == 3;
axiom ~intf_type~INTF_PCI == 0;
axiom ~intf_type~INTF_USB == 1;
axiom ~radio_path~RF90_PATH_A == 0;
axiom ~radio_path~RF90_PATH_B == 1;
axiom ~radio_path~RF90_PATH_C == 2;
axiom ~radio_path~RF90_PATH_D == 3;
axiom ~rf_pwrstate~ERFON == 0;
axiom ~rf_pwrstate~ERFSLEEP == 1;
axiom ~rf_pwrstate~ERFOFF == 2;
axiom ~io_type~IO_CMD_PAUSE_DM_BY_SCAN == 0;
axiom ~io_type~IO_CMD_PAUSE_BAND0_DM_BY_SCAN == 0;
axiom ~io_type~IO_CMD_PAUSE_BAND1_DM_BY_SCAN == 1;
axiom ~io_type~IO_CMD_RESUME_DM_BY_SCAN == 2;
axiom ~_RT_MEDIA_STATUS~RT_MEDIA_DISCONNECT == 0;
axiom ~_RT_MEDIA_STATUS~RT_MEDIA_CONNECT == 1;
axiom ~ht_channel_width~HT_CHANNEL_WIDTH_20 == 0;
axiom ~ht_channel_width~HT_CHANNEL_WIDTH_20_40 == 1;
axiom ~ht_channel_width~HT_CHANNEL_WIDTH_80 == 2;
axiom ~rt_enc_alg~NO_ENCRYPTION == 0;
axiom ~rt_enc_alg~WEP40_ENCRYPTION == 1;
axiom ~rt_enc_alg~TKIP_ENCRYPTION == 2;
axiom ~rt_enc_alg~RSERVED_ENCRYPTION == 3;
axiom ~rt_enc_alg~AESCCMP_ENCRYPTION == 4;
axiom ~rt_enc_alg~WEP104_ENCRYPTION == 5;
axiom ~rt_enc_alg~AESCMAC_ENCRYPTION == 6;
axiom ~rt_psmode~EACTIVE == 0;
axiom ~rt_psmode~EMAXPS == 1;
axiom ~rt_psmode~EFASTPS == 2;
axiom ~rt_psmode~EAUTOPS == 3;
axiom ~led_ctl_mode~LED_CTL_POWER_ON == 1;
axiom ~led_ctl_mode~LED_CTL_LINK == 2;
axiom ~led_ctl_mode~LED_CTL_NO_LINK == 3;
axiom ~led_ctl_mode~LED_CTL_TX == 4;
axiom ~led_ctl_mode~LED_CTL_RX == 5;
axiom ~led_ctl_mode~LED_CTL_SITE_SURVEY == 6;
axiom ~led_ctl_mode~LED_CTL_POWER_OFF == 7;
axiom ~led_ctl_mode~LED_CTL_START_TO_LINK == 8;
axiom ~led_ctl_mode~LED_CTL_START_WPS == 9;
axiom ~led_ctl_mode~LED_CTL_STOP_WPS == 10;
axiom ~macphy_mode~SINGLEMAC_SINGLEPHY == 0;
axiom ~macphy_mode~DUALMAC_DUALPHY == 1;
axiom ~macphy_mode~DUALMAC_SINGLEPHY == 2;
axiom ~band_type~BAND_ON_2_4G == 0;
axiom ~band_type~BAND_ON_5G == 1;
axiom ~band_type~BAND_ON_BOTH == 2;
axiom ~band_type~BANDMAX == 3;
axiom ~rtl_link_state~MAC80211_NOLINK == 0;
axiom ~rtl_link_state~MAC80211_LINKING == 1;
axiom ~rtl_link_state~MAC80211_LINKED == 2;
axiom ~rtl_link_state~MAC80211_LINKED_SCANNING == 3;
axiom ~rt_polarity_ctl~RT_POLARITY_LOW_ACT == 0;
axiom ~rt_polarity_ctl~RT_POLARITY_HIGH_ACT == 1;
axiom ~p2p_ps_state~P2P_PS_DISABLE == 0;
axiom ~p2p_ps_state~P2P_PS_ENABLE == 1;
axiom ~p2p_ps_state~P2P_PS_SCAN == 2;
axiom ~p2p_ps_state~P2P_PS_SCAN_DONE == 3;
axiom ~p2p_ps_state~P2P_PS_ALLSTASLEEP == 4;
axiom ~p2p_ps_mode~P2P_PS_NONE == 0;
axiom ~p2p_ps_mode~P2P_PS_CTWINDOW == 1;
axiom ~p2p_ps_mode~P2P_PS_NOA == 2;
axiom ~p2p_ps_mode~P2P_PS_MIX == 3;
function { :overapproximation "bitwiseAnd" } ~bitwiseAnd(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseOr" } ~bitwiseOr(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "shiftRight" } ~shiftRight(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseComplement" } ~bitwiseComplement(in0 : int) returns (out : int);
function { :overapproximation "shiftLeft" } ~shiftLeft(in0 : int, in1 : int) returns (out : int);
var ~ldv_state_variable_1 : int;

var ~ref_cnt : int;

var ~ldv_state_variable_0 : int;

var ~ldv_retval_0 : int;

var ~last_index : int;

var ~btc_dbg_type : [int]~u32;

var ~#glcoex_dm_8723b_2ant.base : int, ~#glcoex_dm_8723b_2ant.offset : int;

var ~coex_dm.base : int, ~coex_dm.offset : int;

var ~#glcoex_sta_8723b_2ant.base : int, ~#glcoex_sta_8723b_2ant.offset : int;

var ~coex_sta.base : int, ~coex_sta.offset : int;

var ~glcoex_ver_date_8723b_2ant : ~u32;

var ~glcoex_ver_8723b_2ant : ~u32;

var ~#gl_bt_coexist.base : int, ~#gl_bt_coexist.offset : int;

var ~#btc_dbg_buf.base : int, ~#btc_dbg_buf.offset : int;

var ~rtl_btc_operation_group0.base : int, ~rtl_btc_operation_group0.offset : int;

var ~#rtl_btc_operation.base : int, ~#rtl_btc_operation.offset : int;

var ~#set_impl.base : int, ~#set_impl.offset : int;

var ~LDV_SKBS.base : int, ~LDV_SKBS.offset : int;

var #NULL.base : int, #NULL.offset : int;

var #valid : [int]int;

var #length : [int]int;

var #memory_int : [int,int]int;

var #memory_$Pointer$.base : [int,int]int, #memory_$Pointer$.offset : [int,int]int;

implementation ULTIMATE.init() returns (){
  loc0:
    #NULL.base, #NULL.offset := 0, 0;
    #valid := #valid[0 := 0];
    ~ldv_state_variable_1 := 0;
    ~ref_cnt := 0;
    ~ldv_state_variable_0 := 0;
    ~ldv_retval_0 := 0;
    ~last_index := 0;
    ~btc_dbg_type := ~btc_dbg_type[0 := 0];
    ~btc_dbg_type := ~btc_dbg_type[1 := 0];
    call ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset := #Ultimate.alloc(78);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 0, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 1, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 2, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 3, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 4, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 5, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 6, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 7, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 8 + 0, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 8 + 1, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 8 + 2, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 8 + 3, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 8 + 4, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 13, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 14, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 15, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 16, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 17, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 18, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 19, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 20, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 21, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 22, 4);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 26, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 27, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 28, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 29, 4);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 33, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 34, 4);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 38, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 39, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 40, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 41, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 42, 4);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 46, 4);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 50, 4);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 54, 4);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 58, 4);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 62, 4);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 66, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 67, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 68, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 69, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 70, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 71, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 72 + 0, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 72 + 1, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 72 + 2, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 75, 1);
    call write~int(0, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset + 76, 2);
    ~coex_dm.base, ~coex_dm.offset := ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset;
    call ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset := #Ultimate.alloc(75);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 0, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 1, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 2, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 3, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 4, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 5, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 6, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 7, 4);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 11, 4);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 15, 4);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 19, 4);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 23, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 24, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 25 + 0, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 25 + 1, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 25 + 2, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 25 + 3, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 29, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 0 + 0, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 0 + 1, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 0 + 2, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 0 + 3, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 0 + 4, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 0 + 5, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 0 + 6, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 0 + 7, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 0 + 8, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 0 + 9, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 10 + 0, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 10 + 1, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 10 + 2, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 10 + 3, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 10 + 4, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 10 + 5, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 10 + 6, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 10 + 7, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 10 + 8, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 10 + 9, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 20 + 0, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 20 + 1, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 20 + 2, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 20 + 3, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 20 + 4, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 20 + 5, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 20 + 6, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 20 + 7, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 20 + 8, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 30 + 20 + 9, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 60 + 0, 4);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 60 + 4, 4);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 60 + 8, 4);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 72, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 73, 1);
    call write~int(0, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset + 74, 1);
    ~coex_sta.base, ~coex_sta.offset := ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset;
    ~glcoex_ver_date_8723b_2ant := 20130731;
    ~glcoex_ver_8723b_2ant := 59;
    call ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset := #Ultimate.alloc(258);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 0, 1);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 1, 8);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 9 + 0, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 9 + 1, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 9 + 2, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 9 + 3, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 9 + 4, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 0, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 1, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 2, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 3, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 4, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 5, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 6, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 7, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 8, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 9, 2);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 11, 2);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 13, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 14, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 15, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 16, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 17, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 18, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 19, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 20, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 14 + 21, 4);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 39 + 0, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 39 + 1, 2);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 39 + 3, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 39 + 4, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 39 + 5, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 39 + 6, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 39 + 7, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 39 + 8, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 39 + 9, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 39 + 10, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 39 + 11, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 39 + 12, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 52, 4);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 56 + 0, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 56 + 1, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 56 + 2, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 56 + 3, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 56 + 4, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 56 + 5, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 56 + 6, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 56 + 7, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 56 + 8, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 65, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 66, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 67, 1);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 68, 8);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 76 + 0, 4);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 76 + 4, 4);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 76 + 8, 4);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 76 + 12, 4);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 76 + 16, 4);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 76 + 20, 4);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 76 + 24, 4);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 76 + 28, 4);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 76 + 32, 4);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 76 + 36, 4);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 76 + 40, 4);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 76 + 44, 4);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 76 + 48, 4);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 128 + 0, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 128 + 1, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 128 + 2, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 128 + 3, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 128 + 4, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 128 + 5, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 128 + 6, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 128 + 7, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 128 + 8, 1);
    call write~int(0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 128 + 9, 1);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 138, 8);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 146, 8);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 154, 8);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 162, 8);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 170, 8);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 178, 8);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 186, 8);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 194, 8);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 202, 8);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 210, 8);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 218, 8);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 226, 8);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 234, 8);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 242, 8);
    call write~$Pointer$(0, 0, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset + 250, 8);
    call ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset := #Ultimate.alloc(100);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 0, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 1, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 2, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 3, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 4, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 5, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 6, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 7, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 8, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 9, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 10, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 11, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 12, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 13, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 14, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 15, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 16, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 17, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 18, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 19, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 20, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 21, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 22, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 23, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 24, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 25, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 26, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 27, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 28, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 29, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 30, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 31, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 32, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 33, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 34, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 35, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 36, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 37, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 38, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 39, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 40, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 41, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 42, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 43, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 44, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 45, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 46, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 47, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 48, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 49, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 50, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 51, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 52, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 53, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 54, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 55, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 56, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 57, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 58, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 59, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 60, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 61, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 62, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 63, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 64, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 65, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 66, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 67, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 68, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 69, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 70, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 71, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 72, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 73, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 74, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 75, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 76, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 77, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 78, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 79, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 80, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 81, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 82, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 83, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 84, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 85, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 86, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 87, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 88, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 89, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 90, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 91, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 92, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 93, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 94, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 95, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 96, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 97, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 98, 1);
    call write~int(0, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset + 99, 1);
    ~rtl_btc_operation_group0.base, ~rtl_btc_operation_group0.offset := 0, 0;
    call ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset := #Ultimate.alloc(104);
    call write~$Pointer$(#funAddr~rtl_btc_init_variables.base, #funAddr~rtl_btc_init_variables.offset, ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset + 0, 8);
    call write~$Pointer$(#funAddr~rtl_btc_init_hal_vars.base, #funAddr~rtl_btc_init_hal_vars.offset, ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset + 8, 8);
    call write~$Pointer$(#funAddr~rtl_btc_init_hw_config.base, #funAddr~rtl_btc_init_hw_config.offset, ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset + 16, 8);
    call write~$Pointer$(#funAddr~rtl_btc_ips_notify.base, #funAddr~rtl_btc_ips_notify.offset, ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset + 24, 8);
    call write~$Pointer$(#funAddr~rtl_btc_scan_notify.base, #funAddr~rtl_btc_scan_notify.offset, ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset + 32, 8);
    call write~$Pointer$(#funAddr~rtl_btc_connect_notify.base, #funAddr~rtl_btc_connect_notify.offset, ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset + 40, 8);
    call write~$Pointer$(#funAddr~rtl_btc_mediastatus_notify.base, #funAddr~rtl_btc_mediastatus_notify.offset, ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset + 48, 8);
    call write~$Pointer$(#funAddr~rtl_btc_periodical.base, #funAddr~rtl_btc_periodical.offset, ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset + 56, 8);
    call write~$Pointer$(#funAddr~rtl_btc_halt_notify.base, #funAddr~rtl_btc_halt_notify.offset, ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset + 64, 8);
    call write~$Pointer$(#funAddr~rtl_btc_btinfo_notify.base, #funAddr~rtl_btc_btinfo_notify.offset, ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset + 72, 8);
    call write~$Pointer$(#funAddr~rtl_btc_is_limited_dig.base, #funAddr~rtl_btc_is_limited_dig.offset, ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset + 80, 8);
    call write~$Pointer$(#funAddr~rtl_btc_is_disable_edca_turbo.base, #funAddr~rtl_btc_is_disable_edca_turbo.offset, ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset + 88, 8);
    call write~$Pointer$(#funAddr~rtl_btc_is_bt_disabled.base, #funAddr~rtl_btc_is_bt_disabled.offset, ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset + 96, 8);
    call ~#set_impl.base, ~#set_impl.offset := #Ultimate.alloc(120);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 0, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 8, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 16, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 56, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 64, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 72, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 96, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 104, 8);
    call write~$Pointer$(0, 0, ~#set_impl.base, ~#set_impl.offset + 112, 8);
    ~LDV_SKBS.base, ~LDV_SKBS.offset := 0, 0;
    assume true;
    return;
}

procedure ULTIMATE.init() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_retval_0, ~last_index, ~btc_dbg_type, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset, ~coex_dm.base, ~coex_dm.offset, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset, ~coex_sta.base, ~coex_sta.offset, ~glcoex_ver_date_8723b_2ant, ~glcoex_ver_8723b_2ant, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset, ~rtl_btc_operation_group0.base, ~rtl_btc_operation_group0.offset, ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset, ~#set_impl.base, ~#set_impl.offset, ~LDV_SKBS.base, ~LDV_SKBS.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length;

implementation ldv_set_is_empty(#in~set.base : int, #in~set.offset : int) returns (#res : int){
    var ~set.base : int, ~set.offset : int;

  loc1:
    ~set.base, ~set.offset := #in~set.base, #in~set.offset;
    #res := (if ~last_index == 0 then 1 else 0);
    assume true;
    return;
}

procedure ldv_set_is_empty(#in~set.base : int, #in~set.offset : int) returns (#res : int);
modifies ;

implementation ldv_error() returns (){
  loc2:
    assume !false;
    goto loc3;
  loc3:
    assert false;
}

procedure ldv_error() returns ();
modifies ;

implementation #Ultimate.C_memset(#ptr.base : int, #ptr.offset : int, #value : int, #amount : int) returns (#res.base : int, #res.offset : int){
    var #t~loopctr1872 : int;

  loc4:
    #t~loopctr1872 := 0;
    goto loc5;
  loc5:
    goto loc5_0, loc5_1;
  loc5_0:
    assume #t~loopctr1872 < #amount;
    #memory_int := #memory_int[#ptr.base,#ptr.offset + #t~loopctr1872 * 1 := #value];
    #memory_$Pointer$.base, #memory_$Pointer$.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset + #t~loopctr1872 * 1 := 0], #memory_$Pointer$.offset[#ptr.base,#ptr.offset + #t~loopctr1872 * 1 := #value % 256];
    #t~loopctr1872 := #t~loopctr1872 + 1;
    goto loc5;
  loc5_1:
    assume !(#t~loopctr1872 < #amount);
    assume #res.base == #ptr.base && #res.offset == #ptr.offset;
    return;
}

procedure #Ultimate.C_memset(#ptr.base : int, #ptr.offset : int, #value : int, #amount : int) returns (#res.base : int, #res.offset : int);
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
free ensures #res.base == #ptr.base && #res.offset == #ptr.offset;

implementation ldv_check_final_state() returns (){
    var #t~ret1862 : int;
    var ~tmp___7~1454 : int;

  loc6:
    havoc ~tmp___7~1454;
    call #t~ret1862 := ldv_set_is_empty(~LDV_SKBS.base, ~LDV_SKBS.offset);
    assume -2147483648 <= #t~ret1862 && #t~ret1862 <= 2147483647;
    ~tmp___7~1454 := #t~ret1862;
    havoc #t~ret1862;
    assume !(~tmp___7~1454 != 0);
    call ldv_error();
    return;
}

procedure ldv_check_final_state() returns ();
modifies ;

implementation ldv_zalloc(#in~size : int) returns (#res.base : int, #res.offset : int){
    var #t~nondet1 : int;
    var #t~malloc2.base : int, #t~malloc2.offset : int;
    var ~size : int;
    var ~p~7.base : int, ~p~7.offset : int;
    var ~tmp~7.base : int, ~tmp~7.offset : int;
    var ~tmp___0~7 : int;

  loc7:
    ~size := #in~size;
    havoc ~p~7.base, ~p~7.offset;
    havoc ~tmp~7.base, ~tmp~7.offset;
    havoc ~tmp___0~7;
    assume -2147483648 <= #t~nondet1 && #t~nondet1 <= 2147483647;
    ~tmp___0~7 := #t~nondet1;
    havoc #t~nondet1;
    assume ~tmp___0~7 != 0;
    #res.base, #res.offset := 0, 0;
    assume true;
    return;
}

procedure ldv_zalloc(#in~size : int) returns (#res.base : int, #res.offset : int);
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation rtl_btcoexist_module_init() returns (#res : int){
  loc8:
    #res := 0;
    assume true;
    return;
}

procedure rtl_btcoexist_module_init() returns (#res : int);
modifies ;

implementation ULTIMATE.start() returns (){
    var #t~ret1863 : int;

  loc9:
    call ULTIMATE.init();
    call #t~ret1863 := main();
    return;
}

procedure ULTIMATE.start() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_retval_0, ~last_index, ~btc_dbg_type, ~#glcoex_dm_8723b_2ant.base, ~#glcoex_dm_8723b_2ant.offset, ~coex_dm.base, ~coex_dm.offset, ~#glcoex_sta_8723b_2ant.base, ~#glcoex_sta_8723b_2ant.offset, ~coex_sta.base, ~coex_sta.offset, ~glcoex_ver_date_8723b_2ant, ~glcoex_ver_8723b_2ant, ~#gl_bt_coexist.base, ~#gl_bt_coexist.offset, ~#btc_dbg_buf.base, ~#btc_dbg_buf.offset, ~rtl_btc_operation_group0.base, ~rtl_btc_operation_group0.offset, ~#rtl_btc_operation.base, ~#rtl_btc_operation.offset, ~#set_impl.base, ~#set_impl.offset, ~LDV_SKBS.base, ~LDV_SKBS.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_retval_0;
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~last_index, ~rtl_btc_operation_group0.base, ~rtl_btc_operation_group0.offset, ~btc_dbg_type, ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_retval_0;

implementation main() returns (#res : int){
    var #t~ret1845 : ~u8;
    var #t~ret1846 : ~u8;
    var #t~ret1847 : ~u8;
    var #t~ret1848 : ~u8;
    var #t~ret1849.base : int, #t~ret1849.offset : int;
    var #t~memset1850.base : int, #t~memset1850.offset : int;
    var #t~nondet1851 : int;
    var #t~switch1852 : bool;
    var #t~nondet1853 : int;
    var #t~switch1854 : bool;
    var #t~mem1855 : int;
    var #t~ret1856 : ~bool;
    var #t~ret1857 : ~bool;
    var #t~ret1858 : ~bool;
    var #t~nondet1859 : int;
    var #t~switch1860 : bool;
    var #t~ret1861 : int;
    var ~ldvarg1~1402 : ~u8;
    var ~tmp~1402 : ~u8;
    var ~#ldvarg4~1402.base : int, ~#ldvarg4~1402.offset : int;
    var ~ldvarg3~1402 : ~u8;
    var ~tmp___0~1402 : ~u8;
    var ~ldvarg0~1402 : ~u8;
    var ~tmp___1~1402 : ~u8;
    var ~ldvarg5~1402 : ~u8;
    var ~tmp___2~1402 : ~u8;
    var ~ldvarg2~1402.base : int, ~ldvarg2~1402.offset : int;
    var ~tmp___3~1402.base : int, ~tmp___3~1402.offset : int;
    var ~tmp___4~1402 : int;
    var ~tmp___5~1402 : int;
    var ~tmp___6~1402 : int;

  loc10:
    havoc ~ldvarg1~1402;
    havoc ~tmp~1402;
    call ~#ldvarg4~1402.base, ~#ldvarg4~1402.offset := #Ultimate.alloc(4);
    havoc ~ldvarg3~1402;
    havoc ~tmp___0~1402;
    havoc ~ldvarg0~1402;
    havoc ~tmp___1~1402;
    havoc ~ldvarg5~1402;
    havoc ~tmp___2~1402;
    havoc ~ldvarg2~1402.base, ~ldvarg2~1402.offset;
    havoc ~tmp___3~1402.base, ~tmp___3~1402.offset;
    havoc ~tmp___4~1402;
    havoc ~tmp___5~1402;
    havoc ~tmp___6~1402;
    call #t~ret1845 := __VERIFIER_nondet_u8();
    ~tmp~1402 := #t~ret1845;
    havoc #t~ret1845;
    ~ldvarg1~1402 := ~tmp~1402;
    call #t~ret1846 := __VERIFIER_nondet_u8();
    ~tmp___0~1402 := #t~ret1846;
    havoc #t~ret1846;
    ~ldvarg3~1402 := ~tmp___0~1402;
    call #t~ret1847 := __VERIFIER_nondet_u8();
    ~tmp___1~1402 := #t~ret1847;
    havoc #t~ret1847;
    ~ldvarg0~1402 := ~tmp___1~1402;
    call #t~ret1848 := __VERIFIER_nondet_u8();
    ~tmp___2~1402 := #t~ret1848;
    havoc #t~ret1848;
    ~ldvarg5~1402 := ~tmp___2~1402;
    call #t~ret1849.base, #t~ret1849.offset := ldv_zalloc(1);
    ~tmp___3~1402.base, ~tmp___3~1402.offset := #t~ret1849.base, #t~ret1849.offset;
    havoc #t~ret1849.base, #t~ret1849.offset;
    ~ldvarg2~1402.base, ~ldvarg2~1402.offset := ~tmp___3~1402.base, ~tmp___3~1402.offset;
    call ldv_initialize();
    call #t~memset1850.base, #t~memset1850.offset := #Ultimate.C_memset(~#ldvarg4~1402.base, ~#ldvarg4~1402.offset, 0, 4);
    havoc #t~memset1850.base, #t~memset1850.offset;
    ~ldv_state_variable_1 := 0;
    ~ref_cnt := 0;
    ~ldv_state_variable_0 := 1;
    assume -2147483648 <= #t~nondet1851 && #t~nondet1851 <= 2147483647;
    ~tmp___4~1402 := #t~nondet1851;
    havoc #t~nondet1851;
    #t~switch1852 := ~tmp___4~1402 == 0;
    assume !#t~switch1852;
    #t~switch1852 := #t~switch1852 || ~tmp___4~1402 == 1;
    assume #t~switch1852;
    assume ~ldv_state_variable_0 != 0;
    assume -2147483648 <= #t~nondet1859 && #t~nondet1859 <= 2147483647;
    ~tmp___6~1402 := #t~nondet1859;
    havoc #t~nondet1859;
    #t~switch1860 := ~tmp___6~1402 == 0;
    assume !#t~switch1860;
    #t~switch1860 := #t~switch1860 || ~tmp___6~1402 == 1;
    assume #t~switch1860;
    assume ~ldv_state_variable_0 == 1;
    call #t~ret1861 := rtl_btcoexist_module_init();
    assume -2147483648 <= #t~ret1861 && #t~ret1861 <= 2147483647;
    ~ldv_retval_0 := #t~ret1861;
    havoc #t~ret1861;
    assume !(~ldv_retval_0 == 0);
    assume ~ldv_retval_0 != 0;
    ~ldv_state_variable_0 := 2;
    call ldv_check_final_state();
    return;
}

procedure main() returns (#res : int);
modifies ~ldv_state_variable_1, ~ref_cnt, ~ldv_state_variable_0, ~ldv_retval_0, #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~last_index, ~rtl_btc_operation_group0.base, ~rtl_btc_operation_group0.offset, ~btc_dbg_type;

implementation ldv_initialize() returns (){
  loc11:
    call ldv_set_init(~LDV_SKBS.base, ~LDV_SKBS.offset);
    assume true;
    return;
}

procedure ldv_initialize() returns ();
modifies ~last_index;

implementation ldv_set_init(#in~set.base : int, #in~set.offset : int) returns (){
    var ~set.base : int, ~set.offset : int;

  loc12:
    ~set.base, ~set.offset := #in~set.base, #in~set.offset;
    ~set.base, ~set.offset := ~#set_impl.base, ~#set_impl.offset;
    ~last_index := 0;
    assume true;
    return;
}

procedure ldv_set_init(#in~set.base : int, #in~set.offset : int) returns ();
modifies ~last_index;

procedure #Ultimate.alloc(~size : int) returns (#res.base : int, #res.offset : int);
ensures old(#valid)[#res.base] == 0;
ensures #valid == old(#valid)[#res.base := 1];
ensures #res.offset == 0;
ensures #res.base != 0;
ensures #length == old(#length)[#res.base := ~size];
modifies #valid, #length;

procedure ULTIMATE.free(~addr.base : int, ~addr.offset : int) returns ();
free requires ~addr.offset == 0;
free requires ~addr.base == 0 || #valid[~addr.base] == 1;
free ensures (if ~addr.base == 0 then #valid == old(#valid) else #valid == old(#valid)[~addr.base := 0]);
modifies #valid;

procedure read~int(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value : int);
ensures #value == #memory_int[#ptr.base,#ptr.offset];

procedure write~int(#value : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #value];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset]] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #memory_$Pointer$.offset[#ptr.base,#ptr.offset]];

procedure __VERIFIER_error() returns ();
modifies ;

procedure __VERIFIER_assume(#in~expression : int) returns ();
modifies ;

procedure __const_udelay(#in~3 : int) returns ();
modifies ;

procedure write~$Pointer$(#value.base : int, #value.offset : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #memory_int[#ptr.base,#ptr.offset]];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #value.base] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #value.offset];

procedure __bad_percpu_size() returns ();
modifies ;

procedure read~$Pointer$(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value.base : int, #value.offset : int);
ensures #value.base == #memory_$Pointer$.base[#ptr.base,#ptr.offset] && #value.offset == #memory_$Pointer$.offset[#ptr.base,#ptr.offset];

procedure memset(#in~1805.base : int, #in~1805.offset : int, #in~1806 : int, #in~1807 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure ULTIMATE.dealloc(~addr.base : int, ~addr.offset : int) returns ();
free ensures #valid == old(#valid)[~addr.base := 0];
modifies #valid;

procedure printk(#in~0.base : int, #in~0.offset : int) returns (#res : int);
modifies ;

procedure calloc(#in~nmemb : int, #in~size : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __VERIFIER_nondet_int() returns (#res : int);
modifies ;

procedure __VERIFIER_nondet_u8() returns (#res : ~u8);
modifies ;

