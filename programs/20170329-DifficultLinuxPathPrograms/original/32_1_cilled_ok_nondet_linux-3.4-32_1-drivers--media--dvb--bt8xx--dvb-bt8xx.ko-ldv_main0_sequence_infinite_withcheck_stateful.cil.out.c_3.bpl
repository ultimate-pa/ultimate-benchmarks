type STRUCT~task_struct;
type STRUCT~tvec_base;
type STRUCT~nsproxy;
type STRUCT~sock;
type STRUCT~sysfs_dirent;
type STRUCT~module_param_attrs;
type STRUCT~module_sect_attrs;
type STRUCT~module_notes_attrs;
type STRUCT~ftrace_event_call;
type STRUCT~iommu_ops;
type STRUCT~subsys_private;
type STRUCT~driver_private;
type STRUCT~device_private;
type STRUCT~dma_coherent_mem;
type STRUCT~anon_vma;
type STRUCT~mempolicy;
type STRUCT~linux_binfmt;
type STRUCT~mmu_notifier_mm;
type STRUCT~pid_namespace;
type STRUCT~keyring_list;
type STRUCT~key_type;
type STRUCT~key_user;
type STRUCT~user_namespace;
type STRUCT~eventfd_ctx;
type UNION~i2c_smbus_data;
type STRUCT~nameidata;
type STRUCT~vfsmount;
type STRUCT~radix_tree_node;
type STRUCT~writeback_control;
type STRUCT~backing_dev_info;
type STRUCT~hd_struct;
type STRUCT~gendisk;
type STRUCT~request_queue;
type STRUCT~pipe_inode_info;
type STRUCT~posix_acl;
type STRUCT~files_struct;
type STRUCT~nlm_lockowner;
type STRUCT~nfs4_lock_state;
type STRUCT~export_operations;
type STRUCT~xattr_handler;
type STRUCT~mtd_info;
type STRUCT~kstatfs;
type STRUCT~seq_file;
type STRUCT~sec_path;
type STRUCT~prot_inuse;
type STRUCT~fib_rules_ops;
type STRUCT~xt_table;
type STRUCT~dst_entry;
type STRUCT~neighbour;
type STRUCT~ipv6_devconf;
type STRUCT~rt6_info;
type STRUCT~rt6_statistics;
type STRUCT~fib6_table;
type STRUCT~ebt_table;
type STRUCT~ip_conntrack_stat;
type STRUCT~nf_ct_event_notifier;
type STRUCT~nf_exp_event_notifier;
type STRUCT~net_generic;
type STRUCT~netns_ipvs;
type STRUCT~mii_bus;
type STRUCT~Qdisc;
type STRUCT~neigh_parms;
type STRUCT~netpoll_info;
type STRUCT~pcpu_lstats;
type STRUCT~pcpu_tstats;
type STRUCT~pcpu_dstats;
type STRUCT~iw_handler_def;
type STRUCT~iw_public_data;
type STRUCT~vlan_info;
type STRUCT~dn_dev;
type STRUCT~inet6_dev;
type STRUCT~wireless_dev;
type STRUCT~cpu_rmap;
type STRUCT~garp_port;
type STRUCT~rtnl_link_ops;
type STRUCT~phy_device;
type STRUCT~ip_mc_list;
type STRUCT~v4l2_ctrl_handler;
type STRUCT~v4l2_ioctl_ops;
type STRUCT~tuner_setup;
type STRUCT~v4l2_subdev_fh;
type STRUCT~hotplug_slot;
type STRUCT~pci_sriov;
type STRUCT~pcie_link_state;
type STRUCT~pci_vpd;
type STRUCT~pci_ats;
type ~__s8 = int;
type ~__u8 = int;
type ~__s16 = int;
type ~__u16 = int;
type ~__s32 = int;
type ~__u32 = int;
type ~__s64 = int;
type ~__u64 = int;
type ~s8 = int;
type ~u8 = int;
type ~s16 = int;
type ~u16 = int;
type ~s32 = int;
type ~u32 = int;
type ~s64 = int;
type ~u64 = int;
type ~__kernel_long_t = int;
type ~__kernel_ulong_t = int;
type ~__kernel_pid_t = int;
type ~__kernel_uid32_t = int;
type ~__kernel_gid32_t = int;
type ~__kernel_loff_t = int;
type ~umode_t = int;
type ~bool = int;
type ~sector_t = int;
type ~blkcnt_t = int;
type ~gfp_t = int;
type ~fmode_t = int;
type ~pgdval_t = int;
type ~pgprotval_t = int;
type ~kernel_ulong_t = int;
type ~qsize_t = int;
type ~__kernel_sa_family_t = int;
type ~sk_buff_data_t = int;
type ~pci_power_t = int;
type ~pci_channel_state_t = int;
type ~pci_dev_flags_t = int;
type ~pci_bus_flags_t = int;
type ~pci_ers_result_t = int;
type ~__kernel_nlink_t = ~__kernel_ulong_t;
type ~__kernel_size_t = ~__kernel_ulong_t;
type ~__kernel_ssize_t = ~__kernel_long_t;
type ~__kernel_off_t = ~__kernel_long_t;
type ~__kernel_time_t = ~__kernel_long_t;
type ~__kernel_dev_t = ~__u32;
type ~dev_t = ~__kernel_dev_t;
type ~nlink_t = ~__kernel_nlink_t;
type ~off_t = ~__kernel_off_t;
type ~pid_t = ~__kernel_pid_t;
type ~uid_t = ~__kernel_uid32_t;
type ~gid_t = ~__kernel_gid32_t;
type ~loff_t = ~__kernel_loff_t;
type ~size_t = ~__kernel_size_t;
type ~ssize_t = ~__kernel_ssize_t;
type ~time_t = ~__kernel_time_t;
type ~int32_t = ~__s32;
type ~uint8_t = ~__u8;
type ~uint32_t = ~__u32;
type ~uint64_t = ~__u64;
type ~dma_addr_t = ~u64;
type ~__be16 = ~__u16;
type ~__le32 = ~__u32;
type ~__be32 = ~__u32;
type ~__wsum = ~__u32;
type ~phys_addr_t = ~u64;
type ~resource_size_t = ~phys_addr_t;
type ~__ticket_t = ~u16;
type ~__ticketpair_t = ~u32;
type ~Elf64_Addr = ~__u64;
type ~Elf64_Half = ~__u16;
type ~Elf64_Word = ~__u32;
type ~Elf64_Xword = ~__u64;
type ~key_serial_t = ~int32_t;
type ~key_perm_t = ~uint32_t;
type ~phandle = ~u32;
type ~qid_t = ~__kernel_uid32_t;
type ~dmx_output_t = int;
type ~dmx_input_t = int;
type ~dmx_pes_type_t = int;
type ~dmx_source_t = int;
type ~fe_type_t = int;
type ~fe_caps_t = int;
type ~fe_sec_voltage_t = int;
type ~fe_sec_tone_mode_t = int;
type ~fe_sec_mini_cmd_t = int;
type ~fe_status_t = int;
type ~fe_spectral_inversion_t = int;
type ~fe_code_rate_t = int;
type ~fe_modulation_t = int;
type ~fe_transmit_mode_t = int;
type ~fe_guard_interval_t = int;
type ~fe_hierarchy_t = int;
type ~fe_pilot_t = int;
type ~fe_rolloff_t = int;
type ~fe_delivery_system_t = int;
type ~sa_family_t = ~__kernel_sa_family_t;
type ~dma_cookie_t = ~s32;
type ~netdev_features_t = ~u64;
type ~netdev_tx_t = int;
type ~rx_handler_result_t = int;
type ~v4l2_std_id = ~__u64;
type ~lg_chip_type = int;
const #funAddr~dvb_dmx_swfilter_204.base : int;
const #funAddr~dvb_dmx_swfilter_204.offset : int;
const #funAddr~dvb_dmx_swfilter.base : int;
const #funAddr~dvb_dmx_swfilter.offset : int;
const #funAddr~thomson_dtt7579_demod_init.base : int;
const #funAddr~thomson_dtt7579_demod_init.offset : int;
const #funAddr~microtune_mt7202dtf_request_firmware.base : int;
const #funAddr~microtune_mt7202dtf_request_firmware.offset : int;
const #funAddr~advbt771_samsung_tdtc9251dh0_demod_init.base : int;
const #funAddr~advbt771_samsung_tdtc9251dh0_demod_init.offset : int;
const #funAddr~or51211_request_firmware.base : int;
const #funAddr~or51211_request_firmware.offset : int;
const #funAddr~or51211_setmode.base : int;
const #funAddr~or51211_setmode.offset : int;
const #funAddr~or51211_reset.base : int;
const #funAddr~or51211_reset.offset : int;
const #funAddr~or51211_sleep.base : int;
const #funAddr~or51211_sleep.offset : int;
const #funAddr~digitv_alps_tded4_demod_init.base : int;
const #funAddr~digitv_alps_tded4_demod_init.offset : int;
const #funAddr~thomson_dtt7579_tuner_calc_regs.base : int;
const #funAddr~thomson_dtt7579_tuner_calc_regs.offset : int;
const #funAddr~vp3021_alps_tded4_tuner_set_params.base : int;
const #funAddr~vp3021_alps_tded4_tuner_set_params.offset : int;
const #funAddr~digitv_alps_tded4_tuner_calc_regs.base : int;
const #funAddr~digitv_alps_tded4_tuner_calc_regs.offset : int;
const #funAddr~microtune_mt7202dtf_tuner_set_params.base : int;
const #funAddr~microtune_mt7202dtf_tuner_set_params.offset : int;
const #funAddr~advbt771_samsung_tdtc9251dh0_tuner_calc_regs.base : int;
const #funAddr~advbt771_samsung_tdtc9251dh0_tuner_calc_regs.offset : int;
const #funAddr~pinnsat_tuner_init.base : int;
const #funAddr~pinnsat_tuner_init.offset : int;
const #funAddr~pinnsat_tuner_sleep.base : int;
const #funAddr~pinnsat_tuner_sleep.offset : int;
const #funAddr~cx24108_tuner_set_params.base : int;
const #funAddr~cx24108_tuner_set_params.offset : int;
const #funAddr~dvb_bt8xx_start_feed.base : int;
const #funAddr~dvb_bt8xx_start_feed.offset : int;
const #funAddr~dvb_bt8xx_stop_feed.base : int;
const #funAddr~dvb_bt8xx_stop_feed.offset : int;
const #funAddr~dvb_bt8xx_task.base : int;
const #funAddr~dvb_bt8xx_task.offset : int;
const #funAddr~dvb_bt8xx_probe.base : int;
const #funAddr~dvb_bt8xx_probe.offset : int;
const #funAddr~dvb_bt8xx_remove.base : int;
const #funAddr~dvb_bt8xx_remove.offset : int;
const ~rpm_status~RPM_ACTIVE : int;
const ~rpm_status~RPM_RESUMING : int;
const ~rpm_status~RPM_SUSPENDED : int;
const ~rpm_status~RPM_SUSPENDING : int;
const ~rpm_request~RPM_REQ_NONE : int;
const ~rpm_request~RPM_REQ_IDLE : int;
const ~rpm_request~RPM_REQ_SUSPEND : int;
const ~rpm_request~RPM_REQ_AUTOSUSPEND : int;
const ~rpm_request~RPM_REQ_RESUME : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NONE : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NET : int;
const ~kobj_ns_type~KOBJ_NS_TYPES : int;
const ~module_state~MODULE_STATE_LIVE : int;
const ~module_state~MODULE_STATE_COMING : int;
const ~module_state~MODULE_STATE_GOING : int;
const ~pid_type~PIDTYPE_PID : int;
const ~pid_type~PIDTYPE_PGID : int;
const ~pid_type~PIDTYPE_SID : int;
const ~pid_type~PIDTYPE_MAX : int;
const ~migrate_mode~MIGRATE_ASYNC : int;
const ~migrate_mode~MIGRATE_SYNC_LIGHT : int;
const ~migrate_mode~MIGRATE_SYNC : int;
const ~__anonenum_dmx_output_t_248~DMX_OUT_DECODER : int;
const ~__anonenum_dmx_output_t_248~DMX_OUT_TAP : int;
const ~__anonenum_dmx_output_t_248~DMX_OUT_TS_TAP : int;
const ~__anonenum_dmx_output_t_248~DMX_OUT_TSDEMUX_TAP : int;
const ~__anonenum_dmx_input_t_249~DMX_IN_FRONTEND : int;
const ~__anonenum_dmx_input_t_249~DMX_IN_DVR : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_AUDIO0 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_VIDEO0 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_TELETEXT0 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_SUBTITLE0 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_PCR0 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_AUDIO1 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_VIDEO1 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_TELETEXT1 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_SUBTITLE1 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_PCR1 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_AUDIO2 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_VIDEO2 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_TELETEXT2 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_SUBTITLE2 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_PCR2 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_AUDIO3 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_VIDEO3 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_TELETEXT3 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_SUBTITLE3 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_PCR3 : int;
const ~__anonenum_dmx_pes_type_t_250~DMX_PES_OTHER : int;
const ~__anonenum_dmx_source_t_251~DMX_SOURCE_FRONT0 : int;
const ~__anonenum_dmx_source_t_251~DMX_SOURCE_FRONT1 : int;
const ~__anonenum_dmx_source_t_251~DMX_SOURCE_FRONT2 : int;
const ~__anonenum_dmx_source_t_251~DMX_SOURCE_FRONT3 : int;
const ~__anonenum_dmx_source_t_251~DMX_SOURCE_DVR0 : int;
const ~__anonenum_dmx_source_t_251~DMX_SOURCE_DVR1 : int;
const ~__anonenum_dmx_source_t_251~DMX_SOURCE_DVR2 : int;
const ~__anonenum_dmx_source_t_251~DMX_SOURCE_DVR3 : int;
const ~dmx_success~DMX_OK : int;
const ~dmx_success~DMX_LENGTH_ERROR : int;
const ~dmx_success~DMX_OVERRUN_ERROR : int;
const ~dmx_success~DMX_CRC_ERROR : int;
const ~dmx_success~DMX_FRAME_ERROR : int;
const ~dmx_success~DMX_FIFO_ERROR : int;
const ~dmx_success~DMX_MISSED_ERROR : int;
const ~dmx_ts_pes~DMX_TS_PES_AUDIO0 : int;
const ~dmx_ts_pes~DMX_TS_PES_VIDEO0 : int;
const ~dmx_ts_pes~DMX_TS_PES_TELETEXT0 : int;
const ~dmx_ts_pes~DMX_TS_PES_SUBTITLE0 : int;
const ~dmx_ts_pes~DMX_TS_PES_PCR0 : int;
const ~dmx_ts_pes~DMX_TS_PES_AUDIO1 : int;
const ~dmx_ts_pes~DMX_TS_PES_VIDEO1 : int;
const ~dmx_ts_pes~DMX_TS_PES_TELETEXT1 : int;
const ~dmx_ts_pes~DMX_TS_PES_SUBTITLE1 : int;
const ~dmx_ts_pes~DMX_TS_PES_PCR1 : int;
const ~dmx_ts_pes~DMX_TS_PES_AUDIO2 : int;
const ~dmx_ts_pes~DMX_TS_PES_VIDEO2 : int;
const ~dmx_ts_pes~DMX_TS_PES_TELETEXT2 : int;
const ~dmx_ts_pes~DMX_TS_PES_SUBTITLE2 : int;
const ~dmx_ts_pes~DMX_TS_PES_PCR2 : int;
const ~dmx_ts_pes~DMX_TS_PES_AUDIO3 : int;
const ~dmx_ts_pes~DMX_TS_PES_VIDEO3 : int;
const ~dmx_ts_pes~DMX_TS_PES_TELETEXT3 : int;
const ~dmx_ts_pes~DMX_TS_PES_SUBTITLE3 : int;
const ~dmx_ts_pes~DMX_TS_PES_PCR3 : int;
const ~dmx_ts_pes~DMX_TS_PES_OTHER : int;
const ~dmx_frontend_source~DMX_MEMORY_FE : int;
const ~dmx_frontend_source~DMX_FRONTEND_0 : int;
const ~dmx_frontend_source~DMX_FRONTEND_1 : int;
const ~dmx_frontend_source~DMX_FRONTEND_2 : int;
const ~dmx_frontend_source~DMX_FRONTEND_3 : int;
const ~dmx_frontend_source~DMX_STREAM_0 : int;
const ~dmx_frontend_source~DMX_STREAM_1 : int;
const ~dmx_frontend_source~DMX_STREAM_2 : int;
const ~dmx_frontend_source~DMX_STREAM_3 : int;
const ~dmxdev_type~DMXDEV_TYPE_NONE : int;
const ~dmxdev_type~DMXDEV_TYPE_SEC : int;
const ~dmxdev_type~DMXDEV_TYPE_PES : int;
const ~dmxdev_state~DMXDEV_STATE_FREE : int;
const ~dmxdev_state~DMXDEV_STATE_ALLOCATED : int;
const ~dmxdev_state~DMXDEV_STATE_SET : int;
const ~dmxdev_state~DMXDEV_STATE_GO : int;
const ~dmxdev_state~DMXDEV_STATE_DONE : int;
const ~dmxdev_state~DMXDEV_STATE_TIMEDOUT : int;
const ~fe_type~FE_QPSK : int;
const ~fe_type~FE_QAM : int;
const ~fe_type~FE_OFDM : int;
const ~fe_type~FE_ATSC : int;
const ~fe_caps~FE_IS_STUPID : int;
const ~fe_caps~FE_CAN_INVERSION_AUTO : int;
const ~fe_caps~FE_CAN_FEC_1_2 : int;
const ~fe_caps~FE_CAN_FEC_2_3 : int;
const ~fe_caps~FE_CAN_FEC_3_4 : int;
const ~fe_caps~FE_CAN_FEC_4_5 : int;
const ~fe_caps~FE_CAN_FEC_5_6 : int;
const ~fe_caps~FE_CAN_FEC_6_7 : int;
const ~fe_caps~FE_CAN_FEC_7_8 : int;
const ~fe_caps~FE_CAN_FEC_8_9 : int;
const ~fe_caps~FE_CAN_FEC_AUTO : int;
const ~fe_caps~FE_CAN_QPSK : int;
const ~fe_caps~FE_CAN_QAM_16 : int;
const ~fe_caps~FE_CAN_QAM_32 : int;
const ~fe_caps~FE_CAN_QAM_64 : int;
const ~fe_caps~FE_CAN_QAM_128 : int;
const ~fe_caps~FE_CAN_QAM_256 : int;
const ~fe_caps~FE_CAN_QAM_AUTO : int;
const ~fe_caps~FE_CAN_TRANSMISSION_MODE_AUTO : int;
const ~fe_caps~FE_CAN_BANDWIDTH_AUTO : int;
const ~fe_caps~FE_CAN_GUARD_INTERVAL_AUTO : int;
const ~fe_caps~FE_CAN_HIERARCHY_AUTO : int;
const ~fe_caps~FE_CAN_8VSB : int;
const ~fe_caps~FE_CAN_16VSB : int;
const ~fe_caps~FE_HAS_EXTENDED_CAPS : int;
const ~fe_caps~FE_CAN_TURBO_FEC : int;
const ~fe_caps~FE_CAN_2G_MODULATION : int;
const ~fe_caps~FE_NEEDS_BENDING : int;
const ~fe_caps~FE_CAN_RECOVER : int;
const ~fe_caps~FE_CAN_MUTE_TS : int;
const ~fe_sec_voltage~SEC_VOLTAGE_13 : int;
const ~fe_sec_voltage~SEC_VOLTAGE_18 : int;
const ~fe_sec_voltage~SEC_VOLTAGE_OFF : int;
const ~fe_sec_tone_mode~SEC_TONE_ON : int;
const ~fe_sec_tone_mode~SEC_TONE_OFF : int;
const ~fe_sec_mini_cmd~SEC_MINI_A : int;
const ~fe_sec_mini_cmd~SEC_MINI_B : int;
const ~fe_status~FE_HAS_SIGNAL : int;
const ~fe_status~FE_HAS_CARRIER : int;
const ~fe_status~FE_HAS_VITERBI : int;
const ~fe_status~FE_HAS_SYNC : int;
const ~fe_status~FE_HAS_LOCK : int;
const ~fe_status~FE_TIMEDOUT : int;
const ~fe_status~FE_REINIT : int;
const ~fe_spectral_inversion~INVERSION_OFF : int;
const ~fe_spectral_inversion~INVERSION_ON : int;
const ~fe_spectral_inversion~INVERSION_AUTO : int;
const ~fe_code_rate~FEC_NONE : int;
const ~fe_code_rate~FEC_1_2 : int;
const ~fe_code_rate~FEC_2_3 : int;
const ~fe_code_rate~FEC_3_4 : int;
const ~fe_code_rate~FEC_4_5 : int;
const ~fe_code_rate~FEC_5_6 : int;
const ~fe_code_rate~FEC_6_7 : int;
const ~fe_code_rate~FEC_7_8 : int;
const ~fe_code_rate~FEC_8_9 : int;
const ~fe_code_rate~FEC_AUTO : int;
const ~fe_code_rate~FEC_3_5 : int;
const ~fe_code_rate~FEC_9_10 : int;
const ~fe_modulation~QPSK : int;
const ~fe_modulation~QAM_16 : int;
const ~fe_modulation~QAM_32 : int;
const ~fe_modulation~QAM_64 : int;
const ~fe_modulation~QAM_128 : int;
const ~fe_modulation~QAM_256 : int;
const ~fe_modulation~QAM_AUTO : int;
const ~fe_modulation~VSB_8 : int;
const ~fe_modulation~VSB_16 : int;
const ~fe_modulation~PSK_8 : int;
const ~fe_modulation~APSK_16 : int;
const ~fe_modulation~APSK_32 : int;
const ~fe_modulation~DQPSK : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_2K : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_8K : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_AUTO : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_4K : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_1K : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_16K : int;
const ~fe_transmit_mode~TRANSMISSION_MODE_32K : int;
const ~fe_guard_interval~GUARD_INTERVAL_1_32 : int;
const ~fe_guard_interval~GUARD_INTERVAL_1_16 : int;
const ~fe_guard_interval~GUARD_INTERVAL_1_8 : int;
const ~fe_guard_interval~GUARD_INTERVAL_1_4 : int;
const ~fe_guard_interval~GUARD_INTERVAL_AUTO : int;
const ~fe_guard_interval~GUARD_INTERVAL_1_128 : int;
const ~fe_guard_interval~GUARD_INTERVAL_19_128 : int;
const ~fe_guard_interval~GUARD_INTERVAL_19_256 : int;
const ~fe_hierarchy~HIERARCHY_NONE : int;
const ~fe_hierarchy~HIERARCHY_1 : int;
const ~fe_hierarchy~HIERARCHY_2 : int;
const ~fe_hierarchy~HIERARCHY_4 : int;
const ~fe_hierarchy~HIERARCHY_AUTO : int;
const ~fe_pilot~PILOT_ON : int;
const ~fe_pilot~PILOT_OFF : int;
const ~fe_pilot~PILOT_AUTO : int;
const ~fe_rolloff~ROLLOFF_35 : int;
const ~fe_rolloff~ROLLOFF_20 : int;
const ~fe_rolloff~ROLLOFF_25 : int;
const ~fe_rolloff~ROLLOFF_AUTO : int;
const ~fe_delivery_system~SYS_UNDEFINED : int;
const ~fe_delivery_system~SYS_DVBC_ANNEX_A : int;
const ~fe_delivery_system~SYS_DVBC_ANNEX_B : int;
const ~fe_delivery_system~SYS_DVBT : int;
const ~fe_delivery_system~SYS_DSS : int;
const ~fe_delivery_system~SYS_DVBS : int;
const ~fe_delivery_system~SYS_DVBS2 : int;
const ~fe_delivery_system~SYS_DVBH : int;
const ~fe_delivery_system~SYS_ISDBT : int;
const ~fe_delivery_system~SYS_ISDBS : int;
const ~fe_delivery_system~SYS_ISDBC : int;
const ~fe_delivery_system~SYS_ATSC : int;
const ~fe_delivery_system~SYS_ATSCMH : int;
const ~fe_delivery_system~SYS_DMBTH : int;
const ~fe_delivery_system~SYS_CMMB : int;
const ~fe_delivery_system~SYS_DAB : int;
const ~fe_delivery_system~SYS_DVBT2 : int;
const ~fe_delivery_system~SYS_TURBO : int;
const ~fe_delivery_system~SYS_DVBC_ANNEX_C : int;
const ~tuner_param~DVBFE_TUNER_FREQUENCY : int;
const ~tuner_param~DVBFE_TUNER_TUNERSTEP : int;
const ~tuner_param~DVBFE_TUNER_IFFREQ : int;
const ~tuner_param~DVBFE_TUNER_BANDWIDTH : int;
const ~tuner_param~DVBFE_TUNER_REFCLOCK : int;
const ~tuner_param~DVBFE_TUNER_IQSENSE : int;
const ~tuner_param~DVBFE_TUNER_DUMMY : int;
const ~dvbfe_algo~DVBFE_ALGO_HW : int;
const ~dvbfe_algo~DVBFE_ALGO_SW : int;
const ~dvbfe_algo~DVBFE_ALGO_CUSTOM : int;
const ~dvbfe_algo~DVBFE_ALGO_RECOVERY : int;
const ~dvbfe_search~DVBFE_ALGO_SEARCH_SUCCESS : int;
const ~dvbfe_search~DVBFE_ALGO_SEARCH_ASLEEP : int;
const ~dvbfe_search~DVBFE_ALGO_SEARCH_FAILED : int;
const ~dvbfe_search~DVBFE_ALGO_SEARCH_INVALID : int;
const ~dvbfe_search~DVBFE_ALGO_SEARCH_AGAIN : int;
const ~dvbfe_search~DVBFE_ALGO_SEARCH_ERROR : int;
const ~dma_data_direction~DMA_BIDIRECTIONAL : int;
const ~dma_data_direction~DMA_TO_DEVICE : int;
const ~dma_data_direction~DMA_FROM_DEVICE : int;
const ~dma_data_direction~DMA_NONE : int;
const ~pm_qos_type~PM_QOS_UNITIALIZED : int;
const ~pm_qos_type~PM_QOS_MAX : int;
const ~pm_qos_type~PM_QOS_MIN : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_INACTIVE : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_ACTIVE : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_ON : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_OFF : int;
const ~netdev_tx~__NETDEV_TX_MIN : int;
const ~netdev_tx~NETDEV_TX_OK : int;
const ~netdev_tx~NETDEV_TX_BUSY : int;
const ~netdev_tx~NETDEV_TX_LOCKED : int;
const ~rx_handler_result~RX_HANDLER_CONSUMED : int;
const ~rx_handler_result~RX_HANDLER_ANOTHER : int;
const ~rx_handler_result~RX_HANDLER_EXACT : int;
const ~rx_handler_result~RX_HANDLER_PASS : int;
const ~__anonenum_reg_state_344~NETREG_UNINITIALIZED : int;
const ~__anonenum_reg_state_344~NETREG_REGISTERED : int;
const ~__anonenum_reg_state_344~NETREG_UNREGISTERING : int;
const ~__anonenum_reg_state_344~NETREG_UNREGISTERED : int;
const ~__anonenum_reg_state_344~NETREG_RELEASED : int;
const ~__anonenum_reg_state_344~NETREG_DUMMY : int;
const ~__anonenum_rtnl_link_state_345~RTNL_LINK_INITIALIZED : int;
const ~__anonenum_rtnl_link_state_345~RTNL_LINK_INITIALIZING : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_CAPTURE : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OUTPUT : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OVERLAY : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VBI_CAPTURE : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VBI_OUTPUT : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_SLICED_VBI_CAPTURE : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_SLICED_VBI_OUTPUT : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE : int;
const ~v4l2_buf_type~V4L2_BUF_TYPE_PRIVATE : int;
const ~v4l2_tuner_type~V4L2_TUNER_RADIO : int;
const ~v4l2_tuner_type~V4L2_TUNER_ANALOG_TV : int;
const ~v4l2_tuner_type~V4L2_TUNER_DIGITAL_TV : int;
const ~v4l2_priority~V4L2_PRIORITY_UNSET : int;
const ~v4l2_priority~V4L2_PRIORITY_BACKGROUND : int;
const ~v4l2_priority~V4L2_PRIORITY_INTERACTIVE : int;
const ~v4l2_priority~V4L2_PRIORITY_RECORD : int;
const ~v4l2_priority~V4L2_PRIORITY_DEFAULT : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_INTEGER : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_BOOLEAN : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_MENU : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_BUTTON : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_INTEGER64 : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_CTRL_CLASS : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_STRING : int;
const ~v4l2_ctrl_type~V4L2_CTRL_TYPE_BITMASK : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_FIXED : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB444_2X8_PADHI_BE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB444_2X8_PADHI_LE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB555_2X8_PADHI_BE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB555_2X8_PADHI_LE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_BGR565_2X8_BE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_BGR565_2X8_LE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB565_2X8_BE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB565_2X8_LE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_Y8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_UYVY8_1_5X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_VYUY8_1_5X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV8_1_5X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU8_1_5X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_UYVY8_2X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_VYUY8_2X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV8_2X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU8_2X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_Y10_1X10 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV10_2X10 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU10_2X10 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_Y12_1X12 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_UYVY8_1X16 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_VYUY8_1X16 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV8_1X16 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU8_1X16 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV10_1X20 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU10_1X20 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_DPCM8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG10_DPCM8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG10_DPCM8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB10_DPCM8_1X8 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_BE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_LE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_BE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_LE : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_1X10 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG10_1X10 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG10_1X10 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB10_1X10 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR12_1X12 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG12_1X12 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG12_1X12 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB12_1X12 : int;
const ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_JPEG_1X8 : int;
const ~v4l2_mbus_type~V4L2_MBUS_PARALLEL : int;
const ~v4l2_mbus_type~V4L2_MBUS_BT656 : int;
const ~v4l2_mbus_type~V4L2_MBUS_CSI2 : int;
const ~v4l2_subdev_ir_mode~V4L2_SUBDEV_IR_MODE_PULSE_WIDTH : int;
const ~pci_channel_state~pci_channel_io_normal : int;
const ~pci_channel_state~pci_channel_io_frozen : int;
const ~pci_channel_state~pci_channel_io_perm_failure : int;
const ~lg_chip_t~UNDEFINED : int;
const ~lg_chip_t~LGDT3302 : int;
const ~lg_chip_t~LGDT3303 : int;
axiom #funAddr~dvb_dmx_swfilter_204.base == -1 && #funAddr~dvb_dmx_swfilter_204.offset == 0;
axiom #funAddr~dvb_dmx_swfilter.base == -1 && #funAddr~dvb_dmx_swfilter.offset == 1;
axiom #funAddr~thomson_dtt7579_demod_init.base == -1 && #funAddr~thomson_dtt7579_demod_init.offset == 2;
axiom #funAddr~microtune_mt7202dtf_request_firmware.base == -1 && #funAddr~microtune_mt7202dtf_request_firmware.offset == 3;
axiom #funAddr~advbt771_samsung_tdtc9251dh0_demod_init.base == -1 && #funAddr~advbt771_samsung_tdtc9251dh0_demod_init.offset == 4;
axiom #funAddr~or51211_request_firmware.base == -1 && #funAddr~or51211_request_firmware.offset == 5;
axiom #funAddr~or51211_setmode.base == -1 && #funAddr~or51211_setmode.offset == 6;
axiom #funAddr~or51211_reset.base == -1 && #funAddr~or51211_reset.offset == 7;
axiom #funAddr~or51211_sleep.base == -1 && #funAddr~or51211_sleep.offset == 8;
axiom #funAddr~digitv_alps_tded4_demod_init.base == -1 && #funAddr~digitv_alps_tded4_demod_init.offset == 9;
axiom #funAddr~thomson_dtt7579_tuner_calc_regs.base == -1 && #funAddr~thomson_dtt7579_tuner_calc_regs.offset == 10;
axiom #funAddr~vp3021_alps_tded4_tuner_set_params.base == -1 && #funAddr~vp3021_alps_tded4_tuner_set_params.offset == 11;
axiom #funAddr~digitv_alps_tded4_tuner_calc_regs.base == -1 && #funAddr~digitv_alps_tded4_tuner_calc_regs.offset == 12;
axiom #funAddr~microtune_mt7202dtf_tuner_set_params.base == -1 && #funAddr~microtune_mt7202dtf_tuner_set_params.offset == 13;
axiom #funAddr~advbt771_samsung_tdtc9251dh0_tuner_calc_regs.base == -1 && #funAddr~advbt771_samsung_tdtc9251dh0_tuner_calc_regs.offset == 14;
axiom #funAddr~pinnsat_tuner_init.base == -1 && #funAddr~pinnsat_tuner_init.offset == 15;
axiom #funAddr~pinnsat_tuner_sleep.base == -1 && #funAddr~pinnsat_tuner_sleep.offset == 16;
axiom #funAddr~cx24108_tuner_set_params.base == -1 && #funAddr~cx24108_tuner_set_params.offset == 17;
axiom #funAddr~dvb_bt8xx_start_feed.base == -1 && #funAddr~dvb_bt8xx_start_feed.offset == 18;
axiom #funAddr~dvb_bt8xx_stop_feed.base == -1 && #funAddr~dvb_bt8xx_stop_feed.offset == 19;
axiom #funAddr~dvb_bt8xx_task.base == -1 && #funAddr~dvb_bt8xx_task.offset == 20;
axiom #funAddr~dvb_bt8xx_probe.base == -1 && #funAddr~dvb_bt8xx_probe.offset == 21;
axiom #funAddr~dvb_bt8xx_remove.base == -1 && #funAddr~dvb_bt8xx_remove.offset == 22;
axiom ~rpm_status~RPM_ACTIVE == 0;
axiom ~rpm_status~RPM_RESUMING == 1;
axiom ~rpm_status~RPM_SUSPENDED == 2;
axiom ~rpm_status~RPM_SUSPENDING == 3;
axiom ~rpm_request~RPM_REQ_NONE == 0;
axiom ~rpm_request~RPM_REQ_IDLE == 1;
axiom ~rpm_request~RPM_REQ_SUSPEND == 2;
axiom ~rpm_request~RPM_REQ_AUTOSUSPEND == 3;
axiom ~rpm_request~RPM_REQ_RESUME == 4;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NONE == 0;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NET == 1;
axiom ~kobj_ns_type~KOBJ_NS_TYPES == 2;
axiom ~module_state~MODULE_STATE_LIVE == 0;
axiom ~module_state~MODULE_STATE_COMING == 1;
axiom ~module_state~MODULE_STATE_GOING == 2;
axiom ~pid_type~PIDTYPE_PID == 0;
axiom ~pid_type~PIDTYPE_PGID == 1;
axiom ~pid_type~PIDTYPE_SID == 2;
axiom ~pid_type~PIDTYPE_MAX == 3;
axiom ~migrate_mode~MIGRATE_ASYNC == 0;
axiom ~migrate_mode~MIGRATE_SYNC_LIGHT == 1;
axiom ~migrate_mode~MIGRATE_SYNC == 2;
axiom ~__anonenum_dmx_output_t_248~DMX_OUT_DECODER == 0;
axiom ~__anonenum_dmx_output_t_248~DMX_OUT_TAP == 1;
axiom ~__anonenum_dmx_output_t_248~DMX_OUT_TS_TAP == 2;
axiom ~__anonenum_dmx_output_t_248~DMX_OUT_TSDEMUX_TAP == 3;
axiom ~__anonenum_dmx_input_t_249~DMX_IN_FRONTEND == 0;
axiom ~__anonenum_dmx_input_t_249~DMX_IN_DVR == 1;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_AUDIO0 == 0;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_VIDEO0 == 1;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_TELETEXT0 == 2;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_SUBTITLE0 == 3;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_PCR0 == 4;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_AUDIO1 == 5;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_VIDEO1 == 6;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_TELETEXT1 == 7;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_SUBTITLE1 == 8;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_PCR1 == 9;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_AUDIO2 == 10;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_VIDEO2 == 11;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_TELETEXT2 == 12;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_SUBTITLE2 == 13;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_PCR2 == 14;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_AUDIO3 == 15;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_VIDEO3 == 16;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_TELETEXT3 == 17;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_SUBTITLE3 == 18;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_PCR3 == 19;
axiom ~__anonenum_dmx_pes_type_t_250~DMX_PES_OTHER == 20;
axiom ~__anonenum_dmx_source_t_251~DMX_SOURCE_FRONT0 == 0;
axiom ~__anonenum_dmx_source_t_251~DMX_SOURCE_FRONT1 == 1;
axiom ~__anonenum_dmx_source_t_251~DMX_SOURCE_FRONT2 == 2;
axiom ~__anonenum_dmx_source_t_251~DMX_SOURCE_FRONT3 == 3;
axiom ~__anonenum_dmx_source_t_251~DMX_SOURCE_DVR0 == 16;
axiom ~__anonenum_dmx_source_t_251~DMX_SOURCE_DVR1 == 17;
axiom ~__anonenum_dmx_source_t_251~DMX_SOURCE_DVR2 == 18;
axiom ~__anonenum_dmx_source_t_251~DMX_SOURCE_DVR3 == 19;
axiom ~dmx_success~DMX_OK == 0;
axiom ~dmx_success~DMX_LENGTH_ERROR == 1;
axiom ~dmx_success~DMX_OVERRUN_ERROR == 2;
axiom ~dmx_success~DMX_CRC_ERROR == 3;
axiom ~dmx_success~DMX_FRAME_ERROR == 4;
axiom ~dmx_success~DMX_FIFO_ERROR == 5;
axiom ~dmx_success~DMX_MISSED_ERROR == 6;
axiom ~dmx_ts_pes~DMX_TS_PES_AUDIO0 == 0;
axiom ~dmx_ts_pes~DMX_TS_PES_VIDEO0 == 1;
axiom ~dmx_ts_pes~DMX_TS_PES_TELETEXT0 == 2;
axiom ~dmx_ts_pes~DMX_TS_PES_SUBTITLE0 == 3;
axiom ~dmx_ts_pes~DMX_TS_PES_PCR0 == 4;
axiom ~dmx_ts_pes~DMX_TS_PES_AUDIO1 == 5;
axiom ~dmx_ts_pes~DMX_TS_PES_VIDEO1 == 6;
axiom ~dmx_ts_pes~DMX_TS_PES_TELETEXT1 == 7;
axiom ~dmx_ts_pes~DMX_TS_PES_SUBTITLE1 == 8;
axiom ~dmx_ts_pes~DMX_TS_PES_PCR1 == 9;
axiom ~dmx_ts_pes~DMX_TS_PES_AUDIO2 == 10;
axiom ~dmx_ts_pes~DMX_TS_PES_VIDEO2 == 11;
axiom ~dmx_ts_pes~DMX_TS_PES_TELETEXT2 == 12;
axiom ~dmx_ts_pes~DMX_TS_PES_SUBTITLE2 == 13;
axiom ~dmx_ts_pes~DMX_TS_PES_PCR2 == 14;
axiom ~dmx_ts_pes~DMX_TS_PES_AUDIO3 == 15;
axiom ~dmx_ts_pes~DMX_TS_PES_VIDEO3 == 16;
axiom ~dmx_ts_pes~DMX_TS_PES_TELETEXT3 == 17;
axiom ~dmx_ts_pes~DMX_TS_PES_SUBTITLE3 == 18;
axiom ~dmx_ts_pes~DMX_TS_PES_PCR3 == 19;
axiom ~dmx_ts_pes~DMX_TS_PES_OTHER == 20;
axiom ~dmx_frontend_source~DMX_MEMORY_FE == 0;
axiom ~dmx_frontend_source~DMX_FRONTEND_0 == 1;
axiom ~dmx_frontend_source~DMX_FRONTEND_1 == 2;
axiom ~dmx_frontend_source~DMX_FRONTEND_2 == 3;
axiom ~dmx_frontend_source~DMX_FRONTEND_3 == 4;
axiom ~dmx_frontend_source~DMX_STREAM_0 == 5;
axiom ~dmx_frontend_source~DMX_STREAM_1 == 6;
axiom ~dmx_frontend_source~DMX_STREAM_2 == 7;
axiom ~dmx_frontend_source~DMX_STREAM_3 == 8;
axiom ~dmxdev_type~DMXDEV_TYPE_NONE == 0;
axiom ~dmxdev_type~DMXDEV_TYPE_SEC == 1;
axiom ~dmxdev_type~DMXDEV_TYPE_PES == 2;
axiom ~dmxdev_state~DMXDEV_STATE_FREE == 0;
axiom ~dmxdev_state~DMXDEV_STATE_ALLOCATED == 1;
axiom ~dmxdev_state~DMXDEV_STATE_SET == 2;
axiom ~dmxdev_state~DMXDEV_STATE_GO == 3;
axiom ~dmxdev_state~DMXDEV_STATE_DONE == 4;
axiom ~dmxdev_state~DMXDEV_STATE_TIMEDOUT == 5;
axiom ~fe_type~FE_QPSK == 0;
axiom ~fe_type~FE_QAM == 1;
axiom ~fe_type~FE_OFDM == 2;
axiom ~fe_type~FE_ATSC == 3;
axiom ~fe_caps~FE_IS_STUPID == 0;
axiom ~fe_caps~FE_CAN_INVERSION_AUTO == 1;
axiom ~fe_caps~FE_CAN_FEC_1_2 == 2;
axiom ~fe_caps~FE_CAN_FEC_2_3 == 4;
axiom ~fe_caps~FE_CAN_FEC_3_4 == 8;
axiom ~fe_caps~FE_CAN_FEC_4_5 == 16;
axiom ~fe_caps~FE_CAN_FEC_5_6 == 32;
axiom ~fe_caps~FE_CAN_FEC_6_7 == 64;
axiom ~fe_caps~FE_CAN_FEC_7_8 == 128;
axiom ~fe_caps~FE_CAN_FEC_8_9 == 256;
axiom ~fe_caps~FE_CAN_FEC_AUTO == 512;
axiom ~fe_caps~FE_CAN_QPSK == 1024;
axiom ~fe_caps~FE_CAN_QAM_16 == 2048;
axiom ~fe_caps~FE_CAN_QAM_32 == 4096;
axiom ~fe_caps~FE_CAN_QAM_64 == 8192;
axiom ~fe_caps~FE_CAN_QAM_128 == 16384;
axiom ~fe_caps~FE_CAN_QAM_256 == 32768;
axiom ~fe_caps~FE_CAN_QAM_AUTO == 65536;
axiom ~fe_caps~FE_CAN_TRANSMISSION_MODE_AUTO == 131072;
axiom ~fe_caps~FE_CAN_BANDWIDTH_AUTO == 262144;
axiom ~fe_caps~FE_CAN_GUARD_INTERVAL_AUTO == 524288;
axiom ~fe_caps~FE_CAN_HIERARCHY_AUTO == 1048576;
axiom ~fe_caps~FE_CAN_8VSB == 2097152;
axiom ~fe_caps~FE_CAN_16VSB == 4194304;
axiom ~fe_caps~FE_HAS_EXTENDED_CAPS == 8388608;
axiom ~fe_caps~FE_CAN_TURBO_FEC == 134217728;
axiom ~fe_caps~FE_CAN_2G_MODULATION == 268435456;
axiom ~fe_caps~FE_NEEDS_BENDING == 536870912;
axiom ~fe_caps~FE_CAN_RECOVER == 1073741824;
axiom ~fe_caps~FE_CAN_MUTE_TS == -2147483648;
axiom ~fe_sec_voltage~SEC_VOLTAGE_13 == 0;
axiom ~fe_sec_voltage~SEC_VOLTAGE_18 == 1;
axiom ~fe_sec_voltage~SEC_VOLTAGE_OFF == 2;
axiom ~fe_sec_tone_mode~SEC_TONE_ON == 0;
axiom ~fe_sec_tone_mode~SEC_TONE_OFF == 1;
axiom ~fe_sec_mini_cmd~SEC_MINI_A == 0;
axiom ~fe_sec_mini_cmd~SEC_MINI_B == 1;
axiom ~fe_status~FE_HAS_SIGNAL == 1;
axiom ~fe_status~FE_HAS_CARRIER == 2;
axiom ~fe_status~FE_HAS_VITERBI == 4;
axiom ~fe_status~FE_HAS_SYNC == 8;
axiom ~fe_status~FE_HAS_LOCK == 16;
axiom ~fe_status~FE_TIMEDOUT == 32;
axiom ~fe_status~FE_REINIT == 64;
axiom ~fe_spectral_inversion~INVERSION_OFF == 0;
axiom ~fe_spectral_inversion~INVERSION_ON == 1;
axiom ~fe_spectral_inversion~INVERSION_AUTO == 2;
axiom ~fe_code_rate~FEC_NONE == 0;
axiom ~fe_code_rate~FEC_1_2 == 1;
axiom ~fe_code_rate~FEC_2_3 == 2;
axiom ~fe_code_rate~FEC_3_4 == 3;
axiom ~fe_code_rate~FEC_4_5 == 4;
axiom ~fe_code_rate~FEC_5_6 == 5;
axiom ~fe_code_rate~FEC_6_7 == 6;
axiom ~fe_code_rate~FEC_7_8 == 7;
axiom ~fe_code_rate~FEC_8_9 == 8;
axiom ~fe_code_rate~FEC_AUTO == 9;
axiom ~fe_code_rate~FEC_3_5 == 10;
axiom ~fe_code_rate~FEC_9_10 == 11;
axiom ~fe_modulation~QPSK == 0;
axiom ~fe_modulation~QAM_16 == 1;
axiom ~fe_modulation~QAM_32 == 2;
axiom ~fe_modulation~QAM_64 == 3;
axiom ~fe_modulation~QAM_128 == 4;
axiom ~fe_modulation~QAM_256 == 5;
axiom ~fe_modulation~QAM_AUTO == 6;
axiom ~fe_modulation~VSB_8 == 7;
axiom ~fe_modulation~VSB_16 == 8;
axiom ~fe_modulation~PSK_8 == 9;
axiom ~fe_modulation~APSK_16 == 10;
axiom ~fe_modulation~APSK_32 == 11;
axiom ~fe_modulation~DQPSK == 12;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_2K == 0;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_8K == 1;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_AUTO == 2;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_4K == 3;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_1K == 4;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_16K == 5;
axiom ~fe_transmit_mode~TRANSMISSION_MODE_32K == 6;
axiom ~fe_guard_interval~GUARD_INTERVAL_1_32 == 0;
axiom ~fe_guard_interval~GUARD_INTERVAL_1_16 == 1;
axiom ~fe_guard_interval~GUARD_INTERVAL_1_8 == 2;
axiom ~fe_guard_interval~GUARD_INTERVAL_1_4 == 3;
axiom ~fe_guard_interval~GUARD_INTERVAL_AUTO == 4;
axiom ~fe_guard_interval~GUARD_INTERVAL_1_128 == 5;
axiom ~fe_guard_interval~GUARD_INTERVAL_19_128 == 6;
axiom ~fe_guard_interval~GUARD_INTERVAL_19_256 == 7;
axiom ~fe_hierarchy~HIERARCHY_NONE == 0;
axiom ~fe_hierarchy~HIERARCHY_1 == 1;
axiom ~fe_hierarchy~HIERARCHY_2 == 2;
axiom ~fe_hierarchy~HIERARCHY_4 == 3;
axiom ~fe_hierarchy~HIERARCHY_AUTO == 4;
axiom ~fe_pilot~PILOT_ON == 0;
axiom ~fe_pilot~PILOT_OFF == 1;
axiom ~fe_pilot~PILOT_AUTO == 2;
axiom ~fe_rolloff~ROLLOFF_35 == 0;
axiom ~fe_rolloff~ROLLOFF_20 == 1;
axiom ~fe_rolloff~ROLLOFF_25 == 2;
axiom ~fe_rolloff~ROLLOFF_AUTO == 3;
axiom ~fe_delivery_system~SYS_UNDEFINED == 0;
axiom ~fe_delivery_system~SYS_DVBC_ANNEX_A == 1;
axiom ~fe_delivery_system~SYS_DVBC_ANNEX_B == 2;
axiom ~fe_delivery_system~SYS_DVBT == 3;
axiom ~fe_delivery_system~SYS_DSS == 4;
axiom ~fe_delivery_system~SYS_DVBS == 5;
axiom ~fe_delivery_system~SYS_DVBS2 == 6;
axiom ~fe_delivery_system~SYS_DVBH == 7;
axiom ~fe_delivery_system~SYS_ISDBT == 8;
axiom ~fe_delivery_system~SYS_ISDBS == 9;
axiom ~fe_delivery_system~SYS_ISDBC == 10;
axiom ~fe_delivery_system~SYS_ATSC == 11;
axiom ~fe_delivery_system~SYS_ATSCMH == 12;
axiom ~fe_delivery_system~SYS_DMBTH == 13;
axiom ~fe_delivery_system~SYS_CMMB == 14;
axiom ~fe_delivery_system~SYS_DAB == 15;
axiom ~fe_delivery_system~SYS_DVBT2 == 16;
axiom ~fe_delivery_system~SYS_TURBO == 17;
axiom ~fe_delivery_system~SYS_DVBC_ANNEX_C == 18;
axiom ~tuner_param~DVBFE_TUNER_FREQUENCY == 1;
axiom ~tuner_param~DVBFE_TUNER_TUNERSTEP == 2;
axiom ~tuner_param~DVBFE_TUNER_IFFREQ == 4;
axiom ~tuner_param~DVBFE_TUNER_BANDWIDTH == 8;
axiom ~tuner_param~DVBFE_TUNER_REFCLOCK == 16;
axiom ~tuner_param~DVBFE_TUNER_IQSENSE == 32;
axiom ~tuner_param~DVBFE_TUNER_DUMMY == -2147483648;
axiom ~dvbfe_algo~DVBFE_ALGO_HW == 1;
axiom ~dvbfe_algo~DVBFE_ALGO_SW == 2;
axiom ~dvbfe_algo~DVBFE_ALGO_CUSTOM == 4;
axiom ~dvbfe_algo~DVBFE_ALGO_RECOVERY == -2147483648;
axiom ~dvbfe_search~DVBFE_ALGO_SEARCH_SUCCESS == 1;
axiom ~dvbfe_search~DVBFE_ALGO_SEARCH_ASLEEP == 2;
axiom ~dvbfe_search~DVBFE_ALGO_SEARCH_FAILED == 4;
axiom ~dvbfe_search~DVBFE_ALGO_SEARCH_INVALID == 8;
axiom ~dvbfe_search~DVBFE_ALGO_SEARCH_AGAIN == 16;
axiom ~dvbfe_search~DVBFE_ALGO_SEARCH_ERROR == -2147483648;
axiom ~dma_data_direction~DMA_BIDIRECTIONAL == 0;
axiom ~dma_data_direction~DMA_TO_DEVICE == 1;
axiom ~dma_data_direction~DMA_FROM_DEVICE == 2;
axiom ~dma_data_direction~DMA_NONE == 3;
axiom ~pm_qos_type~PM_QOS_UNITIALIZED == 0;
axiom ~pm_qos_type~PM_QOS_MAX == 1;
axiom ~pm_qos_type~PM_QOS_MIN == 2;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_INACTIVE == 0;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_ACTIVE == 1;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_ON == 2;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_OFF == 3;
axiom ~netdev_tx~__NETDEV_TX_MIN == -2147483648;
axiom ~netdev_tx~NETDEV_TX_OK == 0;
axiom ~netdev_tx~NETDEV_TX_BUSY == 16;
axiom ~netdev_tx~NETDEV_TX_LOCKED == 32;
axiom ~rx_handler_result~RX_HANDLER_CONSUMED == 0;
axiom ~rx_handler_result~RX_HANDLER_ANOTHER == 1;
axiom ~rx_handler_result~RX_HANDLER_EXACT == 2;
axiom ~rx_handler_result~RX_HANDLER_PASS == 3;
axiom ~__anonenum_reg_state_344~NETREG_UNINITIALIZED == 0;
axiom ~__anonenum_reg_state_344~NETREG_REGISTERED == 1;
axiom ~__anonenum_reg_state_344~NETREG_UNREGISTERING == 2;
axiom ~__anonenum_reg_state_344~NETREG_UNREGISTERED == 3;
axiom ~__anonenum_reg_state_344~NETREG_RELEASED == 4;
axiom ~__anonenum_reg_state_344~NETREG_DUMMY == 5;
axiom ~__anonenum_rtnl_link_state_345~RTNL_LINK_INITIALIZED == 0;
axiom ~__anonenum_rtnl_link_state_345~RTNL_LINK_INITIALIZING == 1;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_CAPTURE == 1;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OUTPUT == 2;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OVERLAY == 3;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VBI_CAPTURE == 4;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VBI_OUTPUT == 5;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_SLICED_VBI_CAPTURE == 6;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_SLICED_VBI_OUTPUT == 7;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY == 8;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE == 9;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE == 10;
axiom ~v4l2_buf_type~V4L2_BUF_TYPE_PRIVATE == 128;
axiom ~v4l2_tuner_type~V4L2_TUNER_RADIO == 1;
axiom ~v4l2_tuner_type~V4L2_TUNER_ANALOG_TV == 2;
axiom ~v4l2_tuner_type~V4L2_TUNER_DIGITAL_TV == 3;
axiom ~v4l2_priority~V4L2_PRIORITY_UNSET == 0;
axiom ~v4l2_priority~V4L2_PRIORITY_BACKGROUND == 1;
axiom ~v4l2_priority~V4L2_PRIORITY_INTERACTIVE == 2;
axiom ~v4l2_priority~V4L2_PRIORITY_RECORD == 3;
axiom ~v4l2_priority~V4L2_PRIORITY_DEFAULT == 2;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_INTEGER == 1;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_BOOLEAN == 2;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_MENU == 3;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_BUTTON == 4;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_INTEGER64 == 5;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_CTRL_CLASS == 6;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_STRING == 7;
axiom ~v4l2_ctrl_type~V4L2_CTRL_TYPE_BITMASK == 8;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_FIXED == 1;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB444_2X8_PADHI_BE == 4097;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB444_2X8_PADHI_LE == 4098;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB555_2X8_PADHI_BE == 4099;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB555_2X8_PADHI_LE == 4100;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_BGR565_2X8_BE == 4101;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_BGR565_2X8_LE == 4102;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB565_2X8_BE == 4103;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_RGB565_2X8_LE == 4104;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_Y8_1X8 == 8193;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_UYVY8_1_5X8 == 8194;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_VYUY8_1_5X8 == 8195;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV8_1_5X8 == 8196;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU8_1_5X8 == 8197;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_UYVY8_2X8 == 8198;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_VYUY8_2X8 == 8199;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV8_2X8 == 8200;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU8_2X8 == 8201;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_Y10_1X10 == 8202;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV10_2X10 == 8203;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU10_2X10 == 8204;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_Y12_1X12 == 8211;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_UYVY8_1X16 == 8207;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_VYUY8_1X16 == 8208;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV8_1X16 == 8209;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU8_1X16 == 8210;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YUYV10_1X20 == 8205;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_YVYU10_1X20 == 8206;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR8_1X8 == 12289;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG8_1X8 == 12307;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG8_1X8 == 12290;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB8_1X8 == 12308;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_DPCM8_1X8 == 12299;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG10_DPCM8_1X8 == 12300;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG10_DPCM8_1X8 == 12297;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB10_DPCM8_1X8 == 12301;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_BE == 12291;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADHI_LE == 12292;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_BE == 12293;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_2X8_PADLO_LE == 12294;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR10_1X10 == 12295;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG10_1X10 == 12302;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG10_1X10 == 12298;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB10_1X10 == 12303;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SBGGR12_1X12 == 12296;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGBRG12_1X12 == 12304;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SGRBG12_1X12 == 12305;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_SRGGB12_1X12 == 12306;
axiom ~v4l2_mbus_pixelcode~V4L2_MBUS_FMT_JPEG_1X8 == 16385;
axiom ~v4l2_mbus_type~V4L2_MBUS_PARALLEL == 0;
axiom ~v4l2_mbus_type~V4L2_MBUS_BT656 == 1;
axiom ~v4l2_mbus_type~V4L2_MBUS_CSI2 == 2;
axiom ~v4l2_subdev_ir_mode~V4L2_SUBDEV_IR_MODE_PULSE_WIDTH == 0;
axiom ~pci_channel_state~pci_channel_io_normal == 1;
axiom ~pci_channel_state~pci_channel_io_frozen == 2;
axiom ~pci_channel_state~pci_channel_io_perm_failure == 3;
axiom ~lg_chip_t~UNDEFINED == 0;
axiom ~lg_chip_t~LGDT3302 == 1;
axiom ~lg_chip_t~LGDT3303 == 2;
function { :overapproximation "shiftLeft" } ~shiftLeft(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseOr" } ~bitwiseOr(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "shiftRight" } ~shiftRight(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseAnd" } ~bitwiseAnd(in0 : int, in1 : int) returns (out : int);
var ~bt878_num : int;

var ~#debug.base : int, ~#debug.offset : int;

var ~#adapter_nr.base : int, ~#adapter_nr.offset : int;

var ~LDV_IN_INTERRUPT : int;

var ~res_dvb_bt8xx_probe_25 : int;

var ~ldv_mutex : int;

var ~#__this_module.base : int, ~#__this_module.offset : int;

var ~#bt878.base : int, ~#bt878.offset : int;

var ~#mt352_clock_config.base : int, ~#mt352_clock_config.offset : int;

var ~#mt352_reset.base : int, ~#mt352_reset.offset : int;

var ~#mt352_adc_ctl_1_cfg.base : int, ~#mt352_adc_ctl_1_cfg.offset : int;

var ~#mt352_agc_cfg.base : int, ~#mt352_agc_cfg.offset : int;

var ~#mt352_gpp_ctl_cfg.base : int, ~#mt352_gpp_ctl_cfg.offset : int;

var ~#mt352_capt_range_cfg.base : int, ~#mt352_capt_range_cfg.offset : int;

var ~#thomson_dtt7579_config.base : int, ~#thomson_dtt7579_config.offset : int;

var ~#thomson_dtt7579_zl10353_config.base : int, ~#thomson_dtt7579_zl10353_config.offset : int;

var ~#pctvsat_config.base : int, ~#pctvsat_config.offset : int;

var ~#microtune_mt7202dtf_config.base : int, ~#microtune_mt7202dtf_config.offset : int;

var ~#mt352_clock_config___0.base : int, ~#mt352_clock_config___0.offset : int;

var ~#mt352_reset___0.base : int, ~#mt352_reset___0.offset : int;

var ~#mt352_adc_ctl_1_cfg___0.base : int, ~#mt352_adc_ctl_1_cfg___0.offset : int;

var ~#mt352_agc_cfg___0.base : int, ~#mt352_agc_cfg___0.offset : int;

var ~#mt352_av771_extra.base : int, ~#mt352_av771_extra.offset : int;

var ~#mt352_capt_range_cfg___0.base : int, ~#mt352_capt_range_cfg___0.offset : int;

var ~#advbt771_samsung_tdtc9251dh0_config.base : int, ~#advbt771_samsung_tdtc9251dh0_config.offset : int;

var ~#dst_config.base : int, ~#dst_config.offset : int;

var ~#or51211_config.base : int, ~#or51211_config.offset : int;

var ~#vp3021_alps_tded4_config.base : int, ~#vp3021_alps_tded4_config.offset : int;

var ~#mt352_clock_config___1.base : int, ~#mt352_clock_config___1.offset : int;

var ~#mt352_reset___1.base : int, ~#mt352_reset___1.offset : int;

var ~#mt352_adc_ctl_1_cfg___1.base : int, ~#mt352_adc_ctl_1_cfg___1.offset : int;

var ~#mt352_agc_cfg___1.base : int, ~#mt352_agc_cfg___1.offset : int;

var ~#mt352_capt_range_cfg___1.base : int, ~#mt352_capt_range_cfg___1.offset : int;

var ~#digitv_alps_tded4_config.base : int, ~#digitv_alps_tded4_config.offset : int;

var ~#tdvs_tua6034_config.base : int, ~#tdvs_tua6034_config.offset : int;

var ~#__key___6.base : int, ~#__key___6.offset : int;

var ~#__key___7.base : int, ~#__key___7.offset : int;

var ~#driver.base : int, ~#driver.offset : int;

var #NULL.base : int, #NULL.offset : int;

var #valid : [int]int;

var #length : [int]int;

var #memory_$Pointer$.base : [int,int]int, #memory_$Pointer$.offset : [int,int]int;

var #memory_int : [int,int]int;

implementation dvb_bt8xx_878_match(#in~bttv_nr : int, #in~bttv_pci_dev.base : int, #in~bttv_pci_dev.offset : int) returns (#res.base : int, #res.offset : int){
    var #t~mem74.base : int, #t~mem74.offset : int;
    var #t~ret75 : int;
    var ~bttv_nr : int;
    var ~bttv_pci_dev.base : int, ~bttv_pci_dev.offset : int;
    var ~card_nr~125 : int;
    var ~tmp___7~125 : int;
    var ~__cil_tmp5~125 : int;
    var ~__cil_tmp6~125 : int;
    var ~__cil_tmp7~125 : int;
    var ~__cil_tmp8~125 : int;
    var ~__cil_tmp9~125.base : int, ~__cil_tmp9~125.offset : int;
    var ~__cil_tmp10~125 : int;
    var ~__cil_tmp11~125 : int;
    var ~__cil_tmp12~125.base : int, ~__cil_tmp12~125.offset : int;

  loc0:
    ~bttv_nr := #in~bttv_nr;
    ~bttv_pci_dev.base, ~bttv_pci_dev.offset := #in~bttv_pci_dev.base, #in~bttv_pci_dev.offset;
    havoc ~card_nr~125;
    havoc ~tmp___7~125;
    havoc ~__cil_tmp5~125;
    havoc ~__cil_tmp6~125;
    havoc ~__cil_tmp7~125;
    havoc ~__cil_tmp8~125;
    havoc ~__cil_tmp9~125.base, ~__cil_tmp9~125.offset;
    havoc ~__cil_tmp10~125;
    havoc ~__cil_tmp11~125;
    havoc ~__cil_tmp12~125.base, ~__cil_tmp12~125.offset;
    ~card_nr~125 := 0;
    assume true;
    assume !false;
    ~__cil_tmp5~125 := ~bt878_num;
    assume !(~card_nr~125 % 4294967296 < ~__cil_tmp5~125 % 4294967296);
    ~__cil_tmp12~125.base, ~__cil_tmp12~125.offset := 0, 0;
    #res.base, #res.offset := ~__cil_tmp12~125.base, ~__cil_tmp12~125.offset;
    assume true;
    return;
}

procedure dvb_bt8xx_878_match(#in~bttv_nr : int, #in~bttv_pci_dev.base : int, #in~bttv_pci_dev.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation dvb_bt8xx_load_card(#in~card.base : int, #in~card.offset : int, #in~type : int) returns (#res : int){
    var #t~mem513.base : int, #t~mem513.offset : int;
    var #t~mem514.base : int, #t~mem514.offset : int;
    var #t~ret515 : int;
    var #t~nondet516.base : int, #t~nondet516.offset : int;
    var #t~ret517 : int;
    var #t~mem519.base : int, #t~mem519.offset : int;
    var #t~mem521.base : int, #t~mem521.offset : int;
    var #t~memset522.base : int, #t~memset522.offset : int;
    var #t~ret530 : int;
    var #t~nondet531.base : int, #t~nondet531.offset : int;
    var #t~ret532 : int;
    var #t~ret536 : int;
    var #t~nondet537.base : int, #t~nondet537.offset : int;
    var #t~ret538 : int;
    var #t~mem540.base : int, #t~mem540.offset : int;
    var #t~ret541 : int;
    var #t~nondet542.base : int, #t~nondet542.offset : int;
    var #t~ret543 : int;
    var #t~mem545.base : int, #t~mem545.offset : int;
    var #t~ret546 : int;
    var #t~nondet547.base : int, #t~nondet547.offset : int;
    var #t~ret548 : int;
    var #t~mem549.base : int, #t~mem549.offset : int;
    var #t~ret550 : int;
    var #t~nondet551.base : int, #t~nondet551.offset : int;
    var #t~ret552 : int;
    var #t~ret553 : int;
    var #t~nondet554.base : int, #t~nondet554.offset : int;
    var #t~ret555 : int;
    var #t~mem556.base : int, #t~mem556.offset : int;
    var #t~mem557.base : int, #t~mem557.offset : int;
    var #t~ret558 : int;
    var #t~mem559.base : int, #t~mem559.offset : int;
    var #t~ret560 : int;
    var #t~mem561.base : int, #t~mem561.offset : int;
    var #t~ret562 : int;
    var #t~ret563 : int;
    var ~card.base : int, ~card.offset : int;
    var ~type : int;
    var ~result~602 : int;
    var ~__cil_tmp4~602 : int;
    var ~__cil_tmp5~602 : int;
    var ~__cil_tmp6~602.base : int, ~__cil_tmp6~602.offset : int;
    var ~__cil_tmp7~602 : int;
    var ~__cil_tmp8~602 : int;
    var ~__cil_tmp9~602 : int;
    var ~__cil_tmp10~602 : int;
    var ~__cil_tmp11~602.base : int, ~__cil_tmp11~602.offset : int;
    var ~__cil_tmp12~602.base : int, ~__cil_tmp12~602.offset : int;
    var ~__cil_tmp13~602 : int;
    var ~__cil_tmp14~602 : int;
    var ~__cil_tmp15~602.base : int, ~__cil_tmp15~602.offset : int;
    var ~__cil_tmp16~602 : int;
    var ~__cil_tmp17~602 : int;
    var ~__cil_tmp18~602.base : int, ~__cil_tmp18~602.offset : int;
    var ~__cil_tmp19~602 : int;
    var ~__cil_tmp20~602 : int;
    var ~__cil_tmp21~602.base : int, ~__cil_tmp21~602.offset : int;
    var ~__cil_tmp22~602 : int;
    var ~__cil_tmp23~602 : int;
    var ~__cil_tmp24~602.base : int, ~__cil_tmp24~602.offset : int;
    var ~__cil_tmp25~602 : int;
    var ~__cil_tmp26~602 : int;
    var ~__cil_tmp27~602 : int;
    var ~__cil_tmp28~602 : int;
    var ~__cil_tmp29~602 : int;
    var ~__cil_tmp30~602.base : int, ~__cil_tmp30~602.offset : int;
    var ~__cil_tmp31~602 : int;
    var ~__cil_tmp32~602 : int;
    var ~__cil_tmp33~602 : int;
    var ~__cil_tmp34~602 : int;
    var ~__cil_tmp35~602 : int;
    var ~__cil_tmp36~602 : int;
    var ~__cil_tmp37~602.base : int, ~__cil_tmp37~602.offset : int;
    var ~__cil_tmp38~602.base : int, ~__cil_tmp38~602.offset : int;
    var ~__cil_tmp39~602 : int;
    var ~__cil_tmp40~602 : int;
    var ~__cil_tmp41~602 : int;
    var ~__cil_tmp42~602 : int;
    var ~__cil_tmp43~602 : int;
    var ~__cil_tmp44~602 : int;
    var ~__cil_tmp45~602 : int;
    var ~__cil_tmp46~602 : int;
    var ~__cil_tmp47~602 : int;
    var ~__cil_tmp48~602 : int;
    var ~__cil_tmp49~602 : int;
    var ~__cil_tmp50~602 : int;
    var ~__cil_tmp51~602 : int;
    var ~__cil_tmp52~602 : int;
    var ~__cil_tmp53~602 : int;
    var ~__cil_tmp54~602 : int;
    var ~__cil_tmp55~602 : int;
    var ~__cil_tmp56~602 : int;
    var ~__cil_tmp57~602 : int;
    var ~__cil_tmp58~602 : int;
    var ~__cil_tmp59~602.base : int, ~__cil_tmp59~602.offset : int;
    var ~__cil_tmp60~602 : int;
    var ~__cil_tmp61~602 : int;
    var ~__cil_tmp62~602.base : int, ~__cil_tmp62~602.offset : int;
    var ~__cil_tmp63~602 : int;
    var ~__cil_tmp64~602 : int;
    var ~__cil_tmp65~602 : int;
    var ~__cil_tmp66~602 : int;
    var ~__cil_tmp67~602 : int;
    var ~__cil_tmp68~602 : int;
    var ~__cil_tmp69~602 : int;
    var ~__cil_tmp70~602 : int;
    var ~__cil_tmp71~602 : int;
    var ~__cil_tmp72~602 : int;
    var ~__cil_tmp73~602 : int;
    var ~__cil_tmp74~602 : int;
    var ~__cil_tmp75~602 : int;
    var ~__cil_tmp76~602.base : int, ~__cil_tmp76~602.offset : int;
    var ~__cil_tmp77~602 : int;
    var ~__cil_tmp78~602 : int;
    var ~__cil_tmp79~602.base : int, ~__cil_tmp79~602.offset : int;
    var ~__cil_tmp80~602 : int;
    var ~__cil_tmp81~602 : int;
    var ~__cil_tmp82~602 : int;
    var ~__cil_tmp83~602 : int;
    var ~__cil_tmp84~602 : int;
    var ~__cil_tmp85~602 : int;
    var ~__cil_tmp86~602 : int;
    var ~__cil_tmp87~602.base : int, ~__cil_tmp87~602.offset : int;
    var ~__cil_tmp88~602 : int;
    var ~__cil_tmp89~602 : int;
    var ~__cil_tmp90~602.base : int, ~__cil_tmp90~602.offset : int;
    var ~__cil_tmp91~602 : int;
    var ~__cil_tmp92~602 : int;
    var ~__cil_tmp93~602.base : int, ~__cil_tmp93~602.offset : int;
    var ~__cil_tmp94~602 : int;
    var ~__cil_tmp95~602 : int;
    var ~__cil_tmp96~602 : int;
    var ~__cil_tmp97~602 : int;
    var ~__cil_tmp98~602 : int;
    var ~__cil_tmp99~602 : int;
    var ~__cil_tmp100~602 : int;
    var ~__cil_tmp101~602.base : int, ~__cil_tmp101~602.offset : int;
    var ~__cil_tmp102~602 : int;
    var ~__cil_tmp103~602 : int;
    var ~__cil_tmp104~602.base : int, ~__cil_tmp104~602.offset : int;
    var ~__cil_tmp105~602 : int;
    var ~__cil_tmp106~602 : int;
    var ~__cil_tmp107~602.base : int, ~__cil_tmp107~602.offset : int;
    var ~__cil_tmp108~602 : int;
    var ~__cil_tmp109~602 : int;
    var ~__cil_tmp110~602 : int;
    var ~__cil_tmp111~602 : int;
    var ~__cil_tmp112~602.base : int, ~__cil_tmp112~602.offset : int;
    var ~__cil_tmp113~602 : int;
    var ~__cil_tmp114~602 : int;
    var ~__cil_tmp115~602.base : int, ~__cil_tmp115~602.offset : int;
    var ~__cil_tmp116~602 : int;
    var ~__cil_tmp117~602 : int;
    var ~__cil_tmp118~602.base : int, ~__cil_tmp118~602.offset : int;
    var ~__cil_tmp119~602 : int;
    var ~__cil_tmp120~602 : int;
    var ~__cil_tmp121~602.base : int, ~__cil_tmp121~602.offset : int;
    var ~__cil_tmp122~602 : int;
    var ~__cil_tmp123~602 : int;
    var ~__cil_tmp124~602.base : int, ~__cil_tmp124~602.offset : int;
    var ~__cil_tmp125~602 : int;
    var ~__cil_tmp126~602 : int;
    var ~__cil_tmp127~602.base : int, ~__cil_tmp127~602.offset : int;
    var ~__cil_tmp128~602 : int;
    var ~__cil_tmp129~602 : int;
    var ~__cil_tmp130~602.base : int, ~__cil_tmp130~602.offset : int;
    var ~__cil_tmp131~602 : int;
    var ~__cil_tmp132~602 : int;
    var ~__cil_tmp133~602.base : int, ~__cil_tmp133~602.offset : int;
    var ~__cil_tmp134~602 : int;
    var ~__cil_tmp135~602 : int;
    var ~__cil_tmp136~602 : int;
    var ~__cil_tmp137~602 : int;
    var ~__cil_tmp138~602 : int;
    var ~__cil_tmp139~602.base : int, ~__cil_tmp139~602.offset : int;
    var ~__cil_tmp140~602 : int;
    var ~__cil_tmp141~602 : int;
    var ~__cil_tmp142~602.base : int, ~__cil_tmp142~602.offset : int;
    var ~__cil_tmp143~602 : int;
    var ~__cil_tmp144~602 : int;
    var ~__cil_tmp145~602 : int;
    var ~__cil_tmp146~602 : int;
    var ~__cil_tmp147~602.base : int, ~__cil_tmp147~602.offset : int;
    var ~__cil_tmp148~602 : int;
    var ~__cil_tmp149~602 : int;
    var ~__cil_tmp150~602.base : int, ~__cil_tmp150~602.offset : int;
    var ~__cil_tmp151~602 : int;
    var ~__cil_tmp152~602 : int;
    var ~__cil_tmp153~602.base : int, ~__cil_tmp153~602.offset : int;
    var ~__cil_tmp154~602 : int;
    var ~__cil_tmp155~602 : int;
    var ~__cil_tmp156~602 : int;
    var ~__cil_tmp157~602 : int;
    var ~__cil_tmp158~602.base : int, ~__cil_tmp158~602.offset : int;
    var ~__cil_tmp159~602 : int;
    var ~__cil_tmp160~602 : int;
    var ~__cil_tmp161~602.base : int, ~__cil_tmp161~602.offset : int;
    var ~__cil_tmp162~602 : int;
    var ~__cil_tmp163~602 : int;
    var ~__cil_tmp164~602.base : int, ~__cil_tmp164~602.offset : int;
    var ~__cil_tmp165~602 : int;
    var ~__cil_tmp166~602 : int;
    var ~__cil_tmp167~602.base : int, ~__cil_tmp167~602.offset : int;
    var ~__cil_tmp168~602 : int;
    var ~__cil_tmp169~602 : int;
    var ~__cil_tmp170~602.base : int, ~__cil_tmp170~602.offset : int;
    var ~__cil_tmp171~602 : int;
    var ~__cil_tmp172~602 : int;
    var ~__cil_tmp173~602.base : int, ~__cil_tmp173~602.offset : int;

  loc1:
    ~card.base, ~card.offset := #in~card.base, #in~card.offset;
    ~type := #in~type;
    havoc ~result~602;
    havoc ~__cil_tmp4~602;
    havoc ~__cil_tmp5~602;
    havoc ~__cil_tmp6~602.base, ~__cil_tmp6~602.offset;
    havoc ~__cil_tmp7~602;
    havoc ~__cil_tmp8~602;
    havoc ~__cil_tmp9~602;
    havoc ~__cil_tmp10~602;
    havoc ~__cil_tmp11~602.base, ~__cil_tmp11~602.offset;
    havoc ~__cil_tmp12~602.base, ~__cil_tmp12~602.offset;
    havoc ~__cil_tmp13~602;
    havoc ~__cil_tmp14~602;
    havoc ~__cil_tmp15~602.base, ~__cil_tmp15~602.offset;
    havoc ~__cil_tmp16~602;
    havoc ~__cil_tmp17~602;
    havoc ~__cil_tmp18~602.base, ~__cil_tmp18~602.offset;
    havoc ~__cil_tmp19~602;
    havoc ~__cil_tmp20~602;
    havoc ~__cil_tmp21~602.base, ~__cil_tmp21~602.offset;
    havoc ~__cil_tmp22~602;
    havoc ~__cil_tmp23~602;
    havoc ~__cil_tmp24~602.base, ~__cil_tmp24~602.offset;
    havoc ~__cil_tmp25~602;
    havoc ~__cil_tmp26~602;
    havoc ~__cil_tmp27~602;
    havoc ~__cil_tmp28~602;
    havoc ~__cil_tmp29~602;
    havoc ~__cil_tmp30~602.base, ~__cil_tmp30~602.offset;
    havoc ~__cil_tmp31~602;
    havoc ~__cil_tmp32~602;
    havoc ~__cil_tmp33~602;
    havoc ~__cil_tmp34~602;
    havoc ~__cil_tmp35~602;
    havoc ~__cil_tmp36~602;
    havoc ~__cil_tmp37~602.base, ~__cil_tmp37~602.offset;
    havoc ~__cil_tmp38~602.base, ~__cil_tmp38~602.offset;
    havoc ~__cil_tmp39~602;
    havoc ~__cil_tmp40~602;
    havoc ~__cil_tmp41~602;
    havoc ~__cil_tmp42~602;
    havoc ~__cil_tmp43~602;
    havoc ~__cil_tmp44~602;
    havoc ~__cil_tmp45~602;
    havoc ~__cil_tmp46~602;
    havoc ~__cil_tmp47~602;
    havoc ~__cil_tmp48~602;
    havoc ~__cil_tmp49~602;
    havoc ~__cil_tmp50~602;
    havoc ~__cil_tmp51~602;
    havoc ~__cil_tmp52~602;
    havoc ~__cil_tmp53~602;
    havoc ~__cil_tmp54~602;
    havoc ~__cil_tmp55~602;
    havoc ~__cil_tmp56~602;
    havoc ~__cil_tmp57~602;
    havoc ~__cil_tmp58~602;
    havoc ~__cil_tmp59~602.base, ~__cil_tmp59~602.offset;
    havoc ~__cil_tmp60~602;
    havoc ~__cil_tmp61~602;
    havoc ~__cil_tmp62~602.base, ~__cil_tmp62~602.offset;
    havoc ~__cil_tmp63~602;
    havoc ~__cil_tmp64~602;
    havoc ~__cil_tmp65~602;
    havoc ~__cil_tmp66~602;
    havoc ~__cil_tmp67~602;
    havoc ~__cil_tmp68~602;
    havoc ~__cil_tmp69~602;
    havoc ~__cil_tmp70~602;
    havoc ~__cil_tmp71~602;
    havoc ~__cil_tmp72~602;
    havoc ~__cil_tmp73~602;
    havoc ~__cil_tmp74~602;
    havoc ~__cil_tmp75~602;
    havoc ~__cil_tmp76~602.base, ~__cil_tmp76~602.offset;
    havoc ~__cil_tmp77~602;
    havoc ~__cil_tmp78~602;
    havoc ~__cil_tmp79~602.base, ~__cil_tmp79~602.offset;
    havoc ~__cil_tmp80~602;
    havoc ~__cil_tmp81~602;
    havoc ~__cil_tmp82~602;
    havoc ~__cil_tmp83~602;
    havoc ~__cil_tmp84~602;
    havoc ~__cil_tmp85~602;
    havoc ~__cil_tmp86~602;
    havoc ~__cil_tmp87~602.base, ~__cil_tmp87~602.offset;
    havoc ~__cil_tmp88~602;
    havoc ~__cil_tmp89~602;
    havoc ~__cil_tmp90~602.base, ~__cil_tmp90~602.offset;
    havoc ~__cil_tmp91~602;
    havoc ~__cil_tmp92~602;
    havoc ~__cil_tmp93~602.base, ~__cil_tmp93~602.offset;
    havoc ~__cil_tmp94~602;
    havoc ~__cil_tmp95~602;
    havoc ~__cil_tmp96~602;
    havoc ~__cil_tmp97~602;
    havoc ~__cil_tmp98~602;
    havoc ~__cil_tmp99~602;
    havoc ~__cil_tmp100~602;
    havoc ~__cil_tmp101~602.base, ~__cil_tmp101~602.offset;
    havoc ~__cil_tmp102~602;
    havoc ~__cil_tmp103~602;
    havoc ~__cil_tmp104~602.base, ~__cil_tmp104~602.offset;
    havoc ~__cil_tmp105~602;
    havoc ~__cil_tmp106~602;
    havoc ~__cil_tmp107~602.base, ~__cil_tmp107~602.offset;
    havoc ~__cil_tmp108~602;
    havoc ~__cil_tmp109~602;
    havoc ~__cil_tmp110~602;
    havoc ~__cil_tmp111~602;
    havoc ~__cil_tmp112~602.base, ~__cil_tmp112~602.offset;
    havoc ~__cil_tmp113~602;
    havoc ~__cil_tmp114~602;
    havoc ~__cil_tmp115~602.base, ~__cil_tmp115~602.offset;
    havoc ~__cil_tmp116~602;
    havoc ~__cil_tmp117~602;
    havoc ~__cil_tmp118~602.base, ~__cil_tmp118~602.offset;
    havoc ~__cil_tmp119~602;
    havoc ~__cil_tmp120~602;
    havoc ~__cil_tmp121~602.base, ~__cil_tmp121~602.offset;
    havoc ~__cil_tmp122~602;
    havoc ~__cil_tmp123~602;
    havoc ~__cil_tmp124~602.base, ~__cil_tmp124~602.offset;
    havoc ~__cil_tmp125~602;
    havoc ~__cil_tmp126~602;
    havoc ~__cil_tmp127~602.base, ~__cil_tmp127~602.offset;
    havoc ~__cil_tmp128~602;
    havoc ~__cil_tmp129~602;
    havoc ~__cil_tmp130~602.base, ~__cil_tmp130~602.offset;
    havoc ~__cil_tmp131~602;
    havoc ~__cil_tmp132~602;
    havoc ~__cil_tmp133~602.base, ~__cil_tmp133~602.offset;
    havoc ~__cil_tmp134~602;
    havoc ~__cil_tmp135~602;
    havoc ~__cil_tmp136~602;
    havoc ~__cil_tmp137~602;
    havoc ~__cil_tmp138~602;
    havoc ~__cil_tmp139~602.base, ~__cil_tmp139~602.offset;
    havoc ~__cil_tmp140~602;
    havoc ~__cil_tmp141~602;
    havoc ~__cil_tmp142~602.base, ~__cil_tmp142~602.offset;
    havoc ~__cil_tmp143~602;
    havoc ~__cil_tmp144~602;
    havoc ~__cil_tmp145~602;
    havoc ~__cil_tmp146~602;
    havoc ~__cil_tmp147~602.base, ~__cil_tmp147~602.offset;
    havoc ~__cil_tmp148~602;
    havoc ~__cil_tmp149~602;
    havoc ~__cil_tmp150~602.base, ~__cil_tmp150~602.offset;
    havoc ~__cil_tmp151~602;
    havoc ~__cil_tmp152~602;
    havoc ~__cil_tmp153~602.base, ~__cil_tmp153~602.offset;
    havoc ~__cil_tmp154~602;
    havoc ~__cil_tmp155~602;
    havoc ~__cil_tmp156~602;
    havoc ~__cil_tmp157~602;
    havoc ~__cil_tmp158~602.base, ~__cil_tmp158~602.offset;
    havoc ~__cil_tmp159~602;
    havoc ~__cil_tmp160~602;
    havoc ~__cil_tmp161~602.base, ~__cil_tmp161~602.offset;
    havoc ~__cil_tmp162~602;
    havoc ~__cil_tmp163~602;
    havoc ~__cil_tmp164~602.base, ~__cil_tmp164~602.offset;
    havoc ~__cil_tmp165~602;
    havoc ~__cil_tmp166~602;
    havoc ~__cil_tmp167~602.base, ~__cil_tmp167~602.offset;
    havoc ~__cil_tmp168~602;
    havoc ~__cil_tmp169~602;
    havoc ~__cil_tmp170~602.base, ~__cil_tmp170~602.offset;
    havoc ~__cil_tmp171~602;
    havoc ~__cil_tmp172~602;
    havoc ~__cil_tmp173~602.base, ~__cil_tmp173~602.offset;
    ~__cil_tmp4~602 := ~card.base + ~card.offset;
    ~__cil_tmp5~602 := ~__cil_tmp4~602 + 112;
    ~__cil_tmp6~602.base, ~__cil_tmp6~602.offset := 0, (if ~__cil_tmp5~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp5~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp5~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp7~602 := 0;
    ~__cil_tmp8~602 := 76 + ~__cil_tmp7~602;
    ~__cil_tmp9~602 := ~card.base + ~card.offset;
    ~__cil_tmp10~602 := ~__cil_tmp9~602 + ~__cil_tmp8~602;
    ~__cil_tmp11~602.base, ~__cil_tmp11~602.offset := 0, (if ~__cil_tmp10~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp10~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp10~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp12~602.base, ~__cil_tmp12~602.offset := ~__cil_tmp11~602.base, ~__cil_tmp11~602.offset;
    ~__cil_tmp13~602 := ~card.base + ~card.offset;
    ~__cil_tmp14~602 := ~__cil_tmp13~602 + 288;
    call #t~mem513.base, #t~mem513.offset := read~$Pointer$(0, (if ~__cil_tmp14~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp14~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp14~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp15~602.base, ~__cil_tmp15~602.offset := #t~mem513.base, #t~mem513.offset;
    havoc #t~mem513.base, #t~mem513.offset;
    ~__cil_tmp16~602 := ~__cil_tmp15~602.base + ~__cil_tmp15~602.offset;
    ~__cil_tmp17~602 := ~__cil_tmp16~602 + 88;
    call #t~mem514.base, #t~mem514.offset := read~$Pointer$(0, (if ~__cil_tmp17~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp17~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp17~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp18~602.base, ~__cil_tmp18~602.offset := #t~mem514.base, #t~mem514.offset;
    havoc #t~mem514.base, #t~mem514.offset;
    ~__cil_tmp19~602 := ~__cil_tmp18~602.base + ~__cil_tmp18~602.offset;
    ~__cil_tmp20~602 := ~__cil_tmp19~602 + 144;
    ~__cil_tmp21~602.base, ~__cil_tmp21~602.offset := 0, (if ~__cil_tmp20~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp20~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp20~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp22~602 := 0;
    ~__cil_tmp23~602 := ~#adapter_nr.base + ~#adapter_nr.offset + ~__cil_tmp22~602;
    ~__cil_tmp24~602.base, ~__cil_tmp24~602.offset := 0, (if ~__cil_tmp23~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp23~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp23~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    call #t~ret515 := dvb_register_adapter(~__cil_tmp6~602.base, ~__cil_tmp6~602.offset, ~__cil_tmp12~602.base, ~__cil_tmp12~602.offset, ~#__this_module.base, ~#__this_module.offset, ~__cil_tmp21~602.base, ~__cil_tmp21~602.offset, ~__cil_tmp24~602.base, ~__cil_tmp24~602.offset);
    assume -2147483648 <= #t~ret515 && #t~ret515 <= 2147483647;
    ~result~602 := #t~ret515;
    havoc #t~ret515;
    assume !(~result~602 < 0);
    ~__cil_tmp25~602 := 168;
    ~__cil_tmp26~602 := ~card.base + ~card.offset;
    ~__cil_tmp27~602 := ~__cil_tmp26~602 + ~__cil_tmp25~602;
    call write~$Pointer$(~card.base, ~card.offset, 0, (if ~__cil_tmp27~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp27~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp27~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp28~602 := ~card.base + ~card.offset;
    ~__cil_tmp29~602 := ~__cil_tmp28~602 + 288;
    call #t~mem519.base, #t~mem519.offset := read~$Pointer$(0, (if ~__cil_tmp29~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp29~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp29~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp30~602.base, ~__cil_tmp30~602.offset := #t~mem519.base, #t~mem519.offset;
    havoc #t~mem519.base, #t~mem519.offset;
    ~__cil_tmp31~602 := ~__cil_tmp30~602.base + ~__cil_tmp30~602.offset;
    ~__cil_tmp32~602 := ~__cil_tmp31~602 + 80;
    ~__cil_tmp33~602 := ~card.base + ~card.offset;
    ~__cil_tmp34~602 := ~__cil_tmp33~602 + 1432;
    call #t~mem521.base, #t~mem521.offset := read~$Pointer$(0, (if ~__cil_tmp34~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp34~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp34~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    call write~$Pointer$(#t~mem521.base, #t~mem521.offset, 0, (if ~__cil_tmp32~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp32~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp32~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    havoc #t~mem521.base, #t~mem521.offset;
    ~__cil_tmp35~602 := ~card.base + ~card.offset;
    ~__cil_tmp36~602 := ~__cil_tmp35~602 + 304;
    ~__cil_tmp37~602.base, ~__cil_tmp37~602.offset := 0, (if ~__cil_tmp36~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp36~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp36~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp38~602.base, ~__cil_tmp38~602.offset := ~__cil_tmp37~602.base, ~__cil_tmp37~602.offset;
    call #t~memset522.base, #t~memset522.offset := #Ultimate.C_memset(~__cil_tmp38~602.base, ~__cil_tmp38~602.offset, 0, 808);
    havoc #t~memset522.base, #t~memset522.offset;
    ~__cil_tmp39~602 := ~card.base + ~card.offset;
    ~__cil_tmp40~602 := ~__cil_tmp39~602 + 304;
    call write~int(13, 0, (if ~__cil_tmp40~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp40~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp40~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp41~602 := 456;
    ~__cil_tmp42~602 := ~card.base + ~card.offset;
    ~__cil_tmp43~602 := ~__cil_tmp42~602 + ~__cil_tmp41~602;
    call write~$Pointer$(~card.base, ~card.offset, 0, (if ~__cil_tmp43~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp43~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp43~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp44~602 := 464;
    ~__cil_tmp45~602 := ~card.base + ~card.offset;
    ~__cil_tmp46~602 := ~__cil_tmp45~602 + ~__cil_tmp44~602;
    call write~int(256, 0, (if ~__cil_tmp46~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp46~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp46~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp47~602 := 468;
    ~__cil_tmp48~602 := ~card.base + ~card.offset;
    ~__cil_tmp49~602 := ~__cil_tmp48~602 + ~__cil_tmp47~602;
    call write~int(256, 0, (if ~__cil_tmp49~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp49~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp49~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp50~602 := 472;
    ~__cil_tmp51~602 := ~card.base + ~card.offset;
    ~__cil_tmp52~602 := ~__cil_tmp51~602 + ~__cil_tmp50~602;
    call write~$Pointer$(#funAddr~dvb_bt8xx_start_feed.base, #funAddr~dvb_bt8xx_start_feed.offset, 0, (if ~__cil_tmp52~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp52~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp52~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp53~602 := 480;
    ~__cil_tmp54~602 := ~card.base + ~card.offset;
    ~__cil_tmp55~602 := ~__cil_tmp54~602 + ~__cil_tmp53~602;
    call write~$Pointer$(#funAddr~dvb_bt8xx_stop_feed.base, #funAddr~dvb_bt8xx_stop_feed.offset, 0, (if ~__cil_tmp55~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp55~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp55~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp56~602 := 488;
    ~__cil_tmp57~602 := ~card.base + ~card.offset;
    ~__cil_tmp58~602 := ~__cil_tmp57~602 + ~__cil_tmp56~602;
    ~__cil_tmp59~602.base, ~__cil_tmp59~602.offset := 0, 0;
    call write~$Pointer$(~__cil_tmp59~602.base, ~__cil_tmp59~602.offset, 0, (if ~__cil_tmp58~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp58~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp58~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp60~602 := ~card.base + ~card.offset;
    ~__cil_tmp61~602 := ~__cil_tmp60~602 + 304;
    ~__cil_tmp62~602.base, ~__cil_tmp62~602.offset := 0, (if ~__cil_tmp61~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp61~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp61~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    call #t~ret530 := dvb_dmx_init(~__cil_tmp62~602.base, ~__cil_tmp62~602.offset);
    assume -2147483648 <= #t~ret530 && #t~ret530 <= 2147483647;
    ~result~602 := #t~ret530;
    havoc #t~ret530;
    assume !(~result~602 < 0);
    ~__cil_tmp63~602 := 1144;
    ~__cil_tmp64~602 := ~card.base + ~card.offset;
    ~__cil_tmp65~602 := ~__cil_tmp64~602 + ~__cil_tmp63~602;
    call write~int(256, 0, (if ~__cil_tmp65~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp65~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp65~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp66~602 := 1136;
    ~__cil_tmp67~602 := ~card.base + ~card.offset;
    ~__cil_tmp68~602 := ~__cil_tmp67~602 + ~__cil_tmp66~602;
    ~__cil_tmp69~602 := ~card.base + ~card.offset;
    ~__cil_tmp70~602 := ~__cil_tmp69~602 + 304;
    call write~$Pointer$(0, (if ~__cil_tmp70~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp70~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp70~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 0, (if ~__cil_tmp68~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp68~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp68~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp71~602 := 1148;
    ~__cil_tmp72~602 := ~card.base + ~card.offset;
    ~__cil_tmp73~602 := ~__cil_tmp72~602 + ~__cil_tmp71~602;
    call write~int(0, 0, (if ~__cil_tmp73~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp73~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp73~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp74~602 := ~card.base + ~card.offset;
    ~__cil_tmp75~602 := ~__cil_tmp74~602 + 1112;
    ~__cil_tmp76~602.base, ~__cil_tmp76~602.offset := 0, (if ~__cil_tmp75~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp75~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp75~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp77~602 := ~card.base + ~card.offset;
    ~__cil_tmp78~602 := ~__cil_tmp77~602 + 112;
    ~__cil_tmp79~602.base, ~__cil_tmp79~602.offset := 0, (if ~__cil_tmp78~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp78~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp78~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    call #t~ret536 := dvb_dmxdev_init(~__cil_tmp76~602.base, ~__cil_tmp76~602.offset, ~__cil_tmp79~602.base, ~__cil_tmp79~602.offset);
    assume -2147483648 <= #t~ret536 && #t~ret536 <= 2147483647;
    ~result~602 := #t~ret536;
    havoc #t~ret536;
    assume !(~result~602 < 0);
    ~__cil_tmp80~602 := 1384;
    ~__cil_tmp81~602 := ~card.base + ~card.offset;
    ~__cil_tmp82~602 := ~__cil_tmp81~602 + ~__cil_tmp80~602;
    call write~int(1, 0, (if ~__cil_tmp82~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp82~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp82~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp83~602 := 80;
    ~__cil_tmp84~602 := 304 + ~__cil_tmp83~602;
    ~__cil_tmp85~602 := ~card.base + ~card.offset;
    ~__cil_tmp86~602 := ~__cil_tmp85~602 + ~__cil_tmp84~602;
    call #t~mem540.base, #t~mem540.offset := read~$Pointer$(0, (if ~__cil_tmp86~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp86~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp86~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp87~602.base, ~__cil_tmp87~602.offset := #t~mem540.base, #t~mem540.offset;
    havoc #t~mem540.base, #t~mem540.offset;
    ~__cil_tmp88~602 := ~card.base + ~card.offset;
    ~__cil_tmp89~602 := ~__cil_tmp88~602 + 304;
    ~__cil_tmp90~602.base, ~__cil_tmp90~602.offset := 0, (if ~__cil_tmp89~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp89~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp89~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp91~602 := ~card.base + ~card.offset;
    ~__cil_tmp92~602 := ~__cil_tmp91~602 + 1368;
    ~__cil_tmp93~602.base, ~__cil_tmp93~602.offset := 0, (if ~__cil_tmp92~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp92~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp92~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    call #t~ret541 := ##fun~$Pointer$~X~$Pointer$~TO~int(~__cil_tmp90~602.base, ~__cil_tmp90~602.offset, ~__cil_tmp93~602.base, ~__cil_tmp93~602.offset, ~__cil_tmp87~602.base, ~__cil_tmp87~602.offset);
    assume -2147483648 <= #t~ret541 && #t~ret541 <= 2147483647;
    ~result~602 := #t~ret541;
    havoc #t~ret541;
    assume !(~result~602 < 0);
    ~__cil_tmp94~602 := 1408;
    ~__cil_tmp95~602 := ~card.base + ~card.offset;
    ~__cil_tmp96~602 := ~__cil_tmp95~602 + ~__cil_tmp94~602;
    call write~int(0, 0, (if ~__cil_tmp96~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp96~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp96~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp97~602 := 80;
    ~__cil_tmp98~602 := 304 + ~__cil_tmp97~602;
    ~__cil_tmp99~602 := ~card.base + ~card.offset;
    ~__cil_tmp100~602 := ~__cil_tmp99~602 + ~__cil_tmp98~602;
    call #t~mem545.base, #t~mem545.offset := read~$Pointer$(0, (if ~__cil_tmp100~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp100~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp100~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp101~602.base, ~__cil_tmp101~602.offset := #t~mem545.base, #t~mem545.offset;
    havoc #t~mem545.base, #t~mem545.offset;
    ~__cil_tmp102~602 := ~card.base + ~card.offset;
    ~__cil_tmp103~602 := ~__cil_tmp102~602 + 304;
    ~__cil_tmp104~602.base, ~__cil_tmp104~602.offset := 0, (if ~__cil_tmp103~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp103~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp103~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp105~602 := ~card.base + ~card.offset;
    ~__cil_tmp106~602 := ~__cil_tmp105~602 + 1392;
    ~__cil_tmp107~602.base, ~__cil_tmp107~602.offset := 0, (if ~__cil_tmp106~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp106~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp106~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    call #t~ret546 := ##fun~$Pointer$~X~$Pointer$~TO~int(~__cil_tmp104~602.base, ~__cil_tmp104~602.offset, ~__cil_tmp107~602.base, ~__cil_tmp107~602.offset, ~__cil_tmp101~602.base, ~__cil_tmp101~602.offset);
    assume -2147483648 <= #t~ret546 && #t~ret546 <= 2147483647;
    ~result~602 := #t~ret546;
    havoc #t~ret546;
    assume !(~result~602 < 0);
    ~__cil_tmp108~602 := 104;
    ~__cil_tmp109~602 := 304 + ~__cil_tmp108~602;
    ~__cil_tmp110~602 := ~card.base + ~card.offset;
    ~__cil_tmp111~602 := ~__cil_tmp110~602 + ~__cil_tmp109~602;
    call #t~mem549.base, #t~mem549.offset := read~$Pointer$(0, (if ~__cil_tmp111~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp111~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp111~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp112~602.base, ~__cil_tmp112~602.offset := #t~mem549.base, #t~mem549.offset;
    havoc #t~mem549.base, #t~mem549.offset;
    ~__cil_tmp113~602 := ~card.base + ~card.offset;
    ~__cil_tmp114~602 := ~__cil_tmp113~602 + 304;
    ~__cil_tmp115~602.base, ~__cil_tmp115~602.offset := 0, (if ~__cil_tmp114~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp114~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp114~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp116~602 := ~card.base + ~card.offset;
    ~__cil_tmp117~602 := ~__cil_tmp116~602 + 1368;
    ~__cil_tmp118~602.base, ~__cil_tmp118~602.offset := 0, (if ~__cil_tmp117~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp117~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp117~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    call #t~ret550 := ##fun~$Pointer$~X~$Pointer$~TO~int(~__cil_tmp115~602.base, ~__cil_tmp115~602.offset, ~__cil_tmp118~602.base, ~__cil_tmp118~602.offset, ~__cil_tmp112~602.base, ~__cil_tmp112~602.offset);
    assume -2147483648 <= #t~ret550 && #t~ret550 <= 2147483647;
    ~result~602 := #t~ret550;
    havoc #t~ret550;
    assume !(~result~602 < 0);
    ~__cil_tmp119~602 := ~card.base + ~card.offset;
    ~__cil_tmp120~602 := ~__cil_tmp119~602 + 112;
    ~__cil_tmp121~602.base, ~__cil_tmp121~602.offset := 0, (if ~__cil_tmp120~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp120~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp120~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp122~602 := ~card.base + ~card.offset;
    ~__cil_tmp123~602 := ~__cil_tmp122~602 + 1440;
    ~__cil_tmp124~602.base, ~__cil_tmp124~602.offset := 0, (if ~__cil_tmp123~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp123~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp123~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp125~602 := ~card.base + ~card.offset;
    ~__cil_tmp126~602 := ~__cil_tmp125~602 + 304;
    ~__cil_tmp127~602.base, ~__cil_tmp127~602.offset := 0, (if ~__cil_tmp126~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp126~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp126~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    call #t~ret553 := dvb_net_init(~__cil_tmp121~602.base, ~__cil_tmp121~602.offset, ~__cil_tmp124~602.base, ~__cil_tmp124~602.offset, ~__cil_tmp127~602.base, ~__cil_tmp127~602.offset);
    assume -2147483648 <= #t~ret553 && #t~ret553 <= 2147483647;
    ~result~602 := #t~ret553;
    havoc #t~ret553;
    assume ~result~602 < 0;
    call #t~nondet554.base, #t~nondet554.offset := #Ultimate.alloc(49);
    call #t~ret555 := printk(#t~nondet554.base, #t~nondet554.offset);
    assume -2147483648 <= #t~ret555 && #t~ret555 <= 2147483647;
    havoc #t~nondet554.base, #t~nondet554.offset;
    havoc #t~ret555;
    ~__cil_tmp135~602 := 112;
    ~__cil_tmp136~602 := 304 + ~__cil_tmp135~602;
    ~__cil_tmp137~602 := ~card.base + ~card.offset;
    ~__cil_tmp138~602 := ~__cil_tmp137~602 + ~__cil_tmp136~602;
    call #t~mem557.base, #t~mem557.offset := read~$Pointer$(0, (if ~__cil_tmp138~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp138~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp138~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp139~602.base, ~__cil_tmp139~602.offset := #t~mem557.base, #t~mem557.offset;
    havoc #t~mem557.base, #t~mem557.offset;
    ~__cil_tmp140~602 := ~card.base + ~card.offset;
    ~__cil_tmp141~602 := ~__cil_tmp140~602 + 304;
    ~__cil_tmp142~602.base, ~__cil_tmp142~602.offset := 0, (if ~__cil_tmp141~602 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp141~602 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp141~602 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    call #t~ret558 := ##fun~$Pointer$~TO~int(~__cil_tmp142~602.base, ~__cil_tmp142~602.offset, ~__cil_tmp139~602.base, ~__cil_tmp139~602.offset);
    return;
}

procedure dvb_bt8xx_load_card(#in~card.base : int, #in~card.offset : int, #in~type : int) returns (#res : int);
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int, #valid, #length, ~ldv_mutex;

implementation #Ultimate.C_memset(#ptr.base : int, #ptr.offset : int, #value : int, #amount : int) returns (#res.base : int, #res.offset : int){
    var #t~loopctr672 : int;

  loc2:
    #t~loopctr672 := 0;
    goto loc3;
  loc3:
    goto loc3_0, loc3_1;
  loc3_0:
    assume #t~loopctr672 < #amount;
    #memory_$Pointer$.base, #memory_$Pointer$.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset + #t~loopctr672 * 1 := 0], #memory_$Pointer$.offset[#ptr.base,#ptr.offset + #t~loopctr672 * 1 := #value % 256];
    #memory_int := #memory_int[#ptr.base,#ptr.offset + #t~loopctr672 * 1 := #value];
    #t~loopctr672 := #t~loopctr672 + 1;
    goto loc3;
  loc3_1:
    assume !(#t~loopctr672 < #amount);
    assume #res.base == #ptr.base && #res.offset == #ptr.offset;
    return;
}

procedure #Ultimate.C_memset(#ptr.base : int, #ptr.offset : int, #value : int, #amount : int) returns (#res.base : int, #res.offset : int);
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
free ensures #res.base == #ptr.base && #res.offset == #ptr.offset;

implementation main() returns (){
    var #t~ret647 : int;
    var #t~nondet648 : int;
    var #t~nondet649 : int;
    var #t~ret650 : int;
    var #t~ret651 : int;
    var #t~ret652 : int;
    var #t~ret653 : int;
    var #t~ret654 : int;
    var #t~ret655 : int;
    var ~var_group1~714.base : int, ~var_group1~714.offset : int;
    var ~var_microtune_mt7202dtf_request_firmware_11_p1~714.base : int, ~var_microtune_mt7202dtf_request_firmware_11_p1~714.offset : int;
    var ~var_microtune_mt7202dtf_request_firmware_11_p2~714.base : int, ~var_microtune_mt7202dtf_request_firmware_11_p2~714.offset : int;
    var ~var_or51211_request_firmware_14_p1~714.base : int, ~var_or51211_request_firmware_14_p1~714.offset : int;
    var ~var_or51211_request_firmware_14_p2~714.base : int, ~var_or51211_request_firmware_14_p2~714.offset : int;
    var ~var_group2~714.base : int, ~var_group2~714.offset : int;
    var ~var_or51211_setmode_15_p1~714 : int;
    var ~var_group3~714.base : int, ~var_group3~714.offset : int;
    var ~tmp___7~714 : int;
    var ~ldv_s_driver_bttv_sub_driver~714 : int;
    var ~tmp___8~714 : int;
    var ~tmp___9~714 : int;
    var ~__cil_tmp13~714 : int;

  loc4:
    havoc ~var_group1~714.base, ~var_group1~714.offset;
    havoc ~var_microtune_mt7202dtf_request_firmware_11_p1~714.base, ~var_microtune_mt7202dtf_request_firmware_11_p1~714.offset;
    havoc ~var_microtune_mt7202dtf_request_firmware_11_p2~714.base, ~var_microtune_mt7202dtf_request_firmware_11_p2~714.offset;
    havoc ~var_or51211_request_firmware_14_p1~714.base, ~var_or51211_request_firmware_14_p1~714.offset;
    havoc ~var_or51211_request_firmware_14_p2~714.base, ~var_or51211_request_firmware_14_p2~714.offset;
    havoc ~var_group2~714.base, ~var_group2~714.offset;
    havoc ~var_or51211_setmode_15_p1~714;
    havoc ~var_group3~714.base, ~var_group3~714.offset;
    havoc ~tmp___7~714;
    havoc ~ldv_s_driver_bttv_sub_driver~714;
    havoc ~tmp___8~714;
    havoc ~tmp___9~714;
    havoc ~__cil_tmp13~714;
    ~LDV_IN_INTERRUPT := 1;
    call ldv_initialize();
    call #t~ret647 := dvb_bt8xx_init();
    assume -2147483648 <= #t~ret647 && #t~ret647 <= 2147483647;
    ~tmp___7~714 := #t~ret647;
    havoc #t~ret647;
    assume !(~tmp___7~714 != 0);
    ~ldv_s_driver_bttv_sub_driver~714 := 0;
    assume true;
    assume !false;
    assume -2147483648 <= #t~nondet648 && #t~nondet648 <= 2147483647;
    ~tmp___9~714 := #t~nondet648;
    havoc #t~nondet648;
    assume ~tmp___9~714 != 0;
    assume -2147483648 <= #t~nondet649 && #t~nondet649 <= 2147483647;
    ~tmp___8~714 := #t~nondet649;
    havoc #t~nondet649;
    assume !(~tmp___8~714 == 0);
    assume !(~tmp___8~714 == 1);
    assume !(~tmp___8~714 == 2);
    assume !(~tmp___8~714 == 3);
    assume !(~tmp___8~714 == 4);
    assume !(~tmp___8~714 == 5);
    assume !(~tmp___8~714 == 6);
    assume !(~tmp___8~714 == 7);
    assume ~tmp___8~714 == 8;
    assume ~ldv_s_driver_bttv_sub_driver~714 == 0;
    call #t~ret655 := dvb_bt8xx_probe(~var_group3~714.base, ~var_group3~714.offset);
    return;
}

procedure main() returns ();
modifies ~LDV_IN_INTERRUPT, ~res_dvb_bt8xx_probe_25, #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_mutex;

implementation dvb_bt8xx_stop_feed(#in~dvbdmxfeed.base : int, #in~dvbdmxfeed.offset : int) returns (#res : int){
    var #t~mem54.base : int, #t~mem54.offset : int;
    var #t~mem55.base : int, #t~mem55.offset : int;
    var #t~mem56 : int;
    var #t~nondet57.base : int, #t~nondet57.offset : int;
    var #t~ret58 : int;
    var #t~mem59.base : int, #t~mem59.offset : int;
    var #t~mem60 : int;
    var #t~mem62 : int;
    var #t~mem63.base : int, #t~mem63.offset : int;
    var ~dvbdmxfeed.base : int, ~dvbdmxfeed.offset : int;
    var ~dvbdmx~93.base : int, ~dvbdmx~93.offset : int;
    var ~card~93.base : int, ~card~93.offset : int;
    var ~__cil_tmp4~93 : int;
    var ~__cil_tmp5~93 : int;
    var ~__cil_tmp6~93 : int;
    var ~__cil_tmp7~93 : int;
    var ~__cil_tmp8~93.base : int, ~__cil_tmp8~93.offset : int;
    var ~__cil_tmp9~93.base : int, ~__cil_tmp9~93.offset : int;
    var ~__cil_tmp10~93 : int;
    var ~__cil_tmp11~93 : int;
    var ~__cil_tmp12~93 : int;
    var ~__cil_tmp13~93.base : int, ~__cil_tmp13~93.offset : int;
    var ~__cil_tmp14~93.base : int, ~__cil_tmp14~93.offset : int;
    var ~__cil_tmp15~93 : int;
    var ~__cil_tmp16~93 : int;
    var ~__cil_tmp17~93 : int;
    var ~__cil_tmp18~93 : int;
    var ~__cil_tmp19~93 : int;
    var ~__cil_tmp20~93 : int;
    var ~__cil_tmp21~93 : int;
    var ~__cil_tmp22~93 : int;
    var ~__cil_tmp23~93 : int;
    var ~__cil_tmp24~93 : int;
    var ~__cil_tmp25~93.base : int, ~__cil_tmp25~93.offset : int;
    var ~__cil_tmp26~93.base : int, ~__cil_tmp26~93.offset : int;

  loc5:
    ~dvbdmxfeed.base, ~dvbdmxfeed.offset := #in~dvbdmxfeed.base, #in~dvbdmxfeed.offset;
    havoc ~dvbdmx~93.base, ~dvbdmx~93.offset;
    havoc ~card~93.base, ~card~93.offset;
    havoc ~__cil_tmp4~93;
    havoc ~__cil_tmp5~93;
    havoc ~__cil_tmp6~93;
    havoc ~__cil_tmp7~93;
    havoc ~__cil_tmp8~93.base, ~__cil_tmp8~93.offset;
    havoc ~__cil_tmp9~93.base, ~__cil_tmp9~93.offset;
    havoc ~__cil_tmp10~93;
    havoc ~__cil_tmp11~93;
    havoc ~__cil_tmp12~93;
    havoc ~__cil_tmp13~93.base, ~__cil_tmp13~93.offset;
    havoc ~__cil_tmp14~93.base, ~__cil_tmp14~93.offset;
    havoc ~__cil_tmp15~93;
    havoc ~__cil_tmp16~93;
    havoc ~__cil_tmp17~93;
    havoc ~__cil_tmp18~93;
    havoc ~__cil_tmp19~93;
    havoc ~__cil_tmp20~93;
    havoc ~__cil_tmp21~93;
    havoc ~__cil_tmp22~93;
    havoc ~__cil_tmp23~93;
    havoc ~__cil_tmp24~93;
    havoc ~__cil_tmp25~93.base, ~__cil_tmp25~93.offset;
    havoc ~__cil_tmp26~93.base, ~__cil_tmp26~93.offset;
    ~__cil_tmp4~93 := ~dvbdmxfeed.base + ~dvbdmxfeed.offset;
    ~__cil_tmp5~93 := ~__cil_tmp4~93 + 4384;
    call #t~mem54.base, #t~mem54.offset := read~$Pointer$(0, (if ~__cil_tmp5~93 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp5~93 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp5~93 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~dvbdmx~93.base, ~dvbdmx~93.offset := #t~mem54.base, #t~mem54.offset;
    havoc #t~mem54.base, #t~mem54.offset;
    ~__cil_tmp6~93 := ~dvbdmx~93.base + ~dvbdmx~93.offset;
    ~__cil_tmp7~93 := ~__cil_tmp6~93 + 152;
    call #t~mem55.base, #t~mem55.offset := read~$Pointer$(0, (if ~__cil_tmp7~93 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp7~93 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp7~93 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp8~93.base, ~__cil_tmp8~93.offset := #t~mem55.base, #t~mem55.offset;
    havoc #t~mem55.base, #t~mem55.offset;
    ~card~93.base, ~card~93.offset := ~__cil_tmp8~93.base, ~__cil_tmp8~93.offset;
    assume true;
    assume !false;
    ~__cil_tmp9~93.base, ~__cil_tmp9~93.offset := ~#debug.base, ~#debug.offset;
    call #t~mem56 := read~int(~__cil_tmp9~93.base, ~__cil_tmp9~93.offset, 4);
    assume !(#t~mem56 != 0);
    havoc #t~mem56;
    ~__cil_tmp10~93 := 8;
    ~__cil_tmp11~93 := ~dvbdmx~93.base + ~dvbdmx~93.offset;
    ~__cil_tmp12~93 := ~__cil_tmp11~93 + ~__cil_tmp10~93;
    call #t~mem59.base, #t~mem59.offset := read~$Pointer$(0, (if ~__cil_tmp12~93 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp12~93 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp12~93 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp13~93.base, ~__cil_tmp13~93.offset := #t~mem59.base, #t~mem59.offset;
    havoc #t~mem59.base, #t~mem59.offset;
    assume !(~__cil_tmp13~93.base == 0 && ~__cil_tmp13~93.offset == 0);
    ~__cil_tmp14~93.base, ~__cil_tmp14~93.offset := ~card~93.base, ~card~93.offset;
    call mutex_lock(~__cil_tmp14~93.base, ~__cil_tmp14~93.offset);
    ~__cil_tmp15~93 := ~card~93.base + ~card~93.offset;
    ~__cil_tmp16~93 := ~__cil_tmp15~93 + 72;
    ~__cil_tmp17~93 := ~card~93.base + ~card~93.offset;
    ~__cil_tmp18~93 := ~__cil_tmp17~93 + 72;
    call #t~mem60 := read~int(0, (if ~__cil_tmp18~93 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp18~93 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp18~93 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp19~93 := #t~mem60;
    havoc #t~mem60;
    call write~int(~__cil_tmp19~93 - 1, 0, (if ~__cil_tmp16~93 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp16~93 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp16~93 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp20~93 := ~card~93.base + ~card~93.offset;
    ~__cil_tmp21~93 := ~__cil_tmp20~93 + 72;
    call #t~mem62 := read~int(0, (if ~__cil_tmp21~93 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp21~93 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp21~93 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp22~93 := #t~mem62;
    havoc #t~mem62;
    assume !(~__cil_tmp22~93 == 0);
    ~__cil_tmp26~93.base, ~__cil_tmp26~93.offset := ~card~93.base, ~card~93.offset;
    call mutex_unlock(~__cil_tmp26~93.base, ~__cil_tmp26~93.offset);
    return;
}

procedure dvb_bt8xx_stop_feed(#in~dvbdmxfeed.base : int, #in~dvbdmxfeed.offset : int) returns (#res : int);
modifies #memory_int, #valid, #length, ~ldv_mutex, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation dvb_bt8xx_probe(#in~sub.base : int, #in~sub.offset : int) returns (#res : int){
    var #t~ret564.base : int, #t~ret564.offset : int;
    var #t~nondet565.base : int, #t~nondet565.offset : int;
    var #t~mem566.base : int, #t~mem566.offset : int;
    var #t~mem568 : int;
    var #t~mem569.base : int, #t~mem569.offset : int;
    var #t~ret570 : int;
    var #t~mem571.base : int, #t~mem571.offset : int;
    var #t~mem573.base : int, #t~mem573.offset : int;
    var #t~mem574 : int;
    var #t~mem596.base : int, #t~mem596.offset : int;
    var #t~mem597 : int;
    var #t~nondet598.base : int, #t~nondet598.offset : int;
    var #t~ret599 : int;
    var #t~mem600 : int;
    var #t~mem601 : int;
    var #t~nondet602.base : int, #t~nondet602.offset : int;
    var #t~ret603 : int;
    var #t~mem604 : int;
    var #t~ret605.base : int, #t~ret605.offset : int;
    var #t~mem606 : int;
    var #t~nondet607.base : int, #t~nondet607.offset : int;
    var #t~ret608 : int;
    var #t~mem609 : int;
    var #t~ret610.base : int, #t~ret610.offset : int;
    var #t~mem612 : int;
    var #t~nondet613.base : int, #t~nondet613.offset : int;
    var #t~ret614 : int;
    var #t~nondet615.base : int, #t~nondet615.offset : int;
    var #t~ret616 : int;
    var #t~mem617.base : int, #t~mem617.offset : int;
    var #t~nondet618.base : int, #t~nondet618.offset : int;
    var #t~mem619.base : int, #t~mem619.offset : int;
    var #t~mem620.base : int, #t~mem620.offset : int;
    var #t~mem622 : int;
    var #t~mem623.base : int, #t~mem623.offset : int;
    var #t~mem624 : int;
    var #t~ret625 : int;
    var #t~ret626 : int;
    var ~sub.base : int, ~sub.offset : int;
    var ~card~642.base : int, ~card~642.offset : int;
    var ~bttv_pci_dev~642.base : int, ~bttv_pci_dev~642.offset : int;
    var ~ret~642 : int;
    var ~tmp___7~642.base : int, ~tmp___7~642.offset : int;
    var ~tmp___8~642.base : int, ~tmp___8~642.offset : int;
    var ~__cil_tmp7~642.base : int, ~__cil_tmp7~642.offset : int;
    var ~__cil_tmp8~642 : int;
    var ~__cil_tmp9~642 : int;
    var ~__cil_tmp10~642 : int;
    var ~__cil_tmp11~642 : int;
    var ~__cil_tmp12~642.base : int, ~__cil_tmp12~642.offset : int;
    var ~__cil_tmp13~642 : int;
    var ~__cil_tmp14~642 : int;
    var ~__cil_tmp15~642 : int;
    var ~__cil_tmp16~642 : int;
    var ~__cil_tmp17~642 : int;
    var ~__cil_tmp18~642 : int;
    var ~__cil_tmp19~642.base : int, ~__cil_tmp19~642.offset : int;
    var ~__cil_tmp20~642 : int;
    var ~__cil_tmp21~642 : int;
    var ~__cil_tmp22~642 : int;
    var ~__cil_tmp23~642 : int;
    var ~__cil_tmp24~642 : int;
    var ~__cil_tmp25~642.base : int, ~__cil_tmp25~642.offset : int;
    var ~__cil_tmp26~642 : int;
    var ~__cil_tmp27~642 : int;
    var ~__cil_tmp28~642.base : int, ~__cil_tmp28~642.offset : int;
    var ~__cil_tmp29~642.base : int, ~__cil_tmp29~642.offset : int;
    var ~__cil_tmp30~642 : int;
    var ~__cil_tmp31~642 : int;
    var ~__cil_tmp32~642 : int;
    var ~__cil_tmp33~642 : int;
    var ~__cil_tmp34~642.base : int, ~__cil_tmp34~642.offset : int;
    var ~__cil_tmp35~642 : int;
    var ~__cil_tmp36~642 : int;
    var ~__cil_tmp37~642 : int;
    var ~__cil_tmp38~642 : int;
    var ~__cil_tmp39~642.base : int, ~__cil_tmp39~642.offset : int;
    var ~__cil_tmp40~642 : int;
    var ~__cil_tmp41~642 : int;
    var ~__cil_tmp42~642 : int;
    var ~__cil_tmp43~642 : int;
    var ~__cil_tmp44~642 : int;
    var ~__cil_tmp45~642 : int;
    var ~__cil_tmp46~642 : int;
    var ~__cil_tmp47~642 : int;
    var ~__cil_tmp48~642 : int;
    var ~__cil_tmp49~642 : int;
    var ~__cil_tmp50~642 : int;
    var ~__cil_tmp51~642 : int;
    var ~__cil_tmp52~642 : int;
    var ~__cil_tmp53~642 : int;
    var ~__cil_tmp54~642 : int;
    var ~__cil_tmp55~642 : int;
    var ~__cil_tmp56~642 : int;
    var ~__cil_tmp57~642 : int;
    var ~__cil_tmp58~642 : int;
    var ~__cil_tmp59~642 : int;
    var ~__cil_tmp60~642 : int;
    var ~__cil_tmp61~642 : int;
    var ~__cil_tmp62~642 : int;
    var ~__cil_tmp63~642 : int;
    var ~__cil_tmp64~642 : int;
    var ~__cil_tmp65~642 : int;
    var ~__cil_tmp66~642 : int;
    var ~__cil_tmp67~642 : int;
    var ~__cil_tmp68~642 : int;
    var ~__cil_tmp69~642 : int;
    var ~__cil_tmp70~642 : int;
    var ~__cil_tmp71~642 : int;
    var ~__cil_tmp72~642 : int;
    var ~__cil_tmp73~642 : int;
    var ~__cil_tmp74~642 : int;
    var ~__cil_tmp75~642 : int;
    var ~__cil_tmp76~642 : int;
    var ~__cil_tmp77~642 : int;
    var ~__cil_tmp78~642 : int;
    var ~__cil_tmp79~642 : int;
    var ~__cil_tmp80~642 : int;
    var ~__cil_tmp81~642 : int;
    var ~__cil_tmp82~642 : int;
    var ~__cil_tmp83~642 : int;
    var ~__cil_tmp84~642 : int;
    var ~__cil_tmp85~642 : int;
    var ~__cil_tmp86~642 : int;
    var ~__cil_tmp87~642 : int;
    var ~__cil_tmp88~642 : int;
    var ~__cil_tmp89~642 : int;
    var ~__cil_tmp90~642 : int;
    var ~__cil_tmp91~642 : int;
    var ~__cil_tmp92~642 : int;
    var ~__cil_tmp93~642 : int;
    var ~__cil_tmp94~642 : int;
    var ~__cil_tmp95~642 : int;
    var ~__cil_tmp96~642 : int;
    var ~__cil_tmp97~642 : int;
    var ~__cil_tmp98~642 : int;
    var ~__cil_tmp99~642 : int;
    var ~__cil_tmp100~642 : int;
    var ~__cil_tmp101~642 : int;
    var ~__cil_tmp102~642 : int;
    var ~__cil_tmp103~642 : int;
    var ~__cil_tmp104~642 : int;
    var ~__cil_tmp105~642 : int;
    var ~__cil_tmp106~642 : int;
    var ~__cil_tmp107~642 : int;
    var ~__cil_tmp108~642 : int;
    var ~__cil_tmp109~642 : int;
    var ~__cil_tmp110~642 : int;
    var ~__cil_tmp111~642 : int;
    var ~__cil_tmp112~642 : int;
    var ~__cil_tmp113~642 : int;
    var ~__cil_tmp114~642 : int;
    var ~__cil_tmp115~642 : int;
    var ~__cil_tmp116~642 : int;
    var ~__cil_tmp117~642 : int;
    var ~__cil_tmp118~642 : int;
    var ~__cil_tmp119~642 : int;
    var ~__cil_tmp120~642 : int;
    var ~__cil_tmp121~642 : int;
    var ~__cil_tmp122~642 : int;
    var ~__cil_tmp123~642 : int;
    var ~__cil_tmp124~642.base : int, ~__cil_tmp124~642.offset : int;
    var ~__cil_tmp125~642 : int;
    var ~__cil_tmp126~642 : int;
    var ~__cil_tmp127~642 : int;
    var ~__cil_tmp128~642.base : int, ~__cil_tmp128~642.offset : int;
    var ~__cil_tmp129~642.base : int, ~__cil_tmp129~642.offset : int;
    var ~__cil_tmp130~642 : int;
    var ~__cil_tmp131~642 : int;
    var ~__cil_tmp132~642 : int;
    var ~__cil_tmp133~642 : int;
    var ~__cil_tmp134~642 : int;
    var ~__cil_tmp135~642 : int;
    var ~__cil_tmp136~642 : int;
    var ~__cil_tmp137~642.base : int, ~__cil_tmp137~642.offset : int;
    var ~__cil_tmp138~642 : int;
    var ~__cil_tmp139~642 : int;
    var ~__cil_tmp140~642 : int;
    var ~__cil_tmp141~642 : int;
    var ~__cil_tmp142~642 : int;
    var ~__cil_tmp143~642 : int;
    var ~__cil_tmp144~642.base : int, ~__cil_tmp144~642.offset : int;
    var ~__cil_tmp145~642 : int;
    var ~__cil_tmp146~642 : int;
    var ~__cil_tmp147~642 : int;
    var ~__cil_tmp148~642 : int;
    var ~__cil_tmp149~642 : int;
    var ~__cil_tmp150~642 : int;
    var ~__cil_tmp151~642 : int;
    var ~__cil_tmp152~642 : int;
    var ~__cil_tmp153~642.base : int, ~__cil_tmp153~642.offset : int;
    var ~__cil_tmp154~642 : int;
    var ~__cil_tmp155~642 : int;
    var ~__cil_tmp156~642.base : int, ~__cil_tmp156~642.offset : int;
    var ~__cil_tmp157~642.base : int, ~__cil_tmp157~642.offset : int;
    var ~__cil_tmp158~642 : int;
    var ~__cil_tmp159~642 : int;
    var ~__cil_tmp160~642.base : int, ~__cil_tmp160~642.offset : int;
    var ~__cil_tmp161~642 : int;
    var ~__cil_tmp162~642 : int;
    var ~__cil_tmp163~642 : int;
    var ~__cil_tmp164~642 : int;
    var ~__cil_tmp165~642.base : int, ~__cil_tmp165~642.offset : int;
    var ~__cil_tmp166~642 : int;
    var ~__cil_tmp167~642 : int;
    var ~__cil_tmp168~642 : int;
    var ~__cil_tmp169~642 : int;
    var ~__cil_tmp170~642.base : int, ~__cil_tmp170~642.offset : int;
    var ~__cil_tmp171~642 : int;
    var ~__cil_tmp172~642 : int;
    var ~__cil_tmp173~642 : int;
    var ~__cil_tmp174~642.base : int, ~__cil_tmp174~642.offset : int;
    var ~__cil_tmp175~642.base : int, ~__cil_tmp175~642.offset : int;
    var ~__cil_tmp176~642.base : int, ~__cil_tmp176~642.offset : int;

  loc6:
    ~sub.base, ~sub.offset := #in~sub.base, #in~sub.offset;
    havoc ~card~642.base, ~card~642.offset;
    havoc ~bttv_pci_dev~642.base, ~bttv_pci_dev~642.offset;
    havoc ~ret~642;
    havoc ~tmp___7~642.base, ~tmp___7~642.offset;
    havoc ~tmp___8~642.base, ~tmp___8~642.offset;
    havoc ~__cil_tmp7~642.base, ~__cil_tmp7~642.offset;
    havoc ~__cil_tmp8~642;
    havoc ~__cil_tmp9~642;
    havoc ~__cil_tmp10~642;
    havoc ~__cil_tmp11~642;
    havoc ~__cil_tmp12~642.base, ~__cil_tmp12~642.offset;
    havoc ~__cil_tmp13~642;
    havoc ~__cil_tmp14~642;
    havoc ~__cil_tmp15~642;
    havoc ~__cil_tmp16~642;
    havoc ~__cil_tmp17~642;
    havoc ~__cil_tmp18~642;
    havoc ~__cil_tmp19~642.base, ~__cil_tmp19~642.offset;
    havoc ~__cil_tmp20~642;
    havoc ~__cil_tmp21~642;
    havoc ~__cil_tmp22~642;
    havoc ~__cil_tmp23~642;
    havoc ~__cil_tmp24~642;
    havoc ~__cil_tmp25~642.base, ~__cil_tmp25~642.offset;
    havoc ~__cil_tmp26~642;
    havoc ~__cil_tmp27~642;
    havoc ~__cil_tmp28~642.base, ~__cil_tmp28~642.offset;
    havoc ~__cil_tmp29~642.base, ~__cil_tmp29~642.offset;
    havoc ~__cil_tmp30~642;
    havoc ~__cil_tmp31~642;
    havoc ~__cil_tmp32~642;
    havoc ~__cil_tmp33~642;
    havoc ~__cil_tmp34~642.base, ~__cil_tmp34~642.offset;
    havoc ~__cil_tmp35~642;
    havoc ~__cil_tmp36~642;
    havoc ~__cil_tmp37~642;
    havoc ~__cil_tmp38~642;
    havoc ~__cil_tmp39~642.base, ~__cil_tmp39~642.offset;
    havoc ~__cil_tmp40~642;
    havoc ~__cil_tmp41~642;
    havoc ~__cil_tmp42~642;
    havoc ~__cil_tmp43~642;
    havoc ~__cil_tmp44~642;
    havoc ~__cil_tmp45~642;
    havoc ~__cil_tmp46~642;
    havoc ~__cil_tmp47~642;
    havoc ~__cil_tmp48~642;
    havoc ~__cil_tmp49~642;
    havoc ~__cil_tmp50~642;
    havoc ~__cil_tmp51~642;
    havoc ~__cil_tmp52~642;
    havoc ~__cil_tmp53~642;
    havoc ~__cil_tmp54~642;
    havoc ~__cil_tmp55~642;
    havoc ~__cil_tmp56~642;
    havoc ~__cil_tmp57~642;
    havoc ~__cil_tmp58~642;
    havoc ~__cil_tmp59~642;
    havoc ~__cil_tmp60~642;
    havoc ~__cil_tmp61~642;
    havoc ~__cil_tmp62~642;
    havoc ~__cil_tmp63~642;
    havoc ~__cil_tmp64~642;
    havoc ~__cil_tmp65~642;
    havoc ~__cil_tmp66~642;
    havoc ~__cil_tmp67~642;
    havoc ~__cil_tmp68~642;
    havoc ~__cil_tmp69~642;
    havoc ~__cil_tmp70~642;
    havoc ~__cil_tmp71~642;
    havoc ~__cil_tmp72~642;
    havoc ~__cil_tmp73~642;
    havoc ~__cil_tmp74~642;
    havoc ~__cil_tmp75~642;
    havoc ~__cil_tmp76~642;
    havoc ~__cil_tmp77~642;
    havoc ~__cil_tmp78~642;
    havoc ~__cil_tmp79~642;
    havoc ~__cil_tmp80~642;
    havoc ~__cil_tmp81~642;
    havoc ~__cil_tmp82~642;
    havoc ~__cil_tmp83~642;
    havoc ~__cil_tmp84~642;
    havoc ~__cil_tmp85~642;
    havoc ~__cil_tmp86~642;
    havoc ~__cil_tmp87~642;
    havoc ~__cil_tmp88~642;
    havoc ~__cil_tmp89~642;
    havoc ~__cil_tmp90~642;
    havoc ~__cil_tmp91~642;
    havoc ~__cil_tmp92~642;
    havoc ~__cil_tmp93~642;
    havoc ~__cil_tmp94~642;
    havoc ~__cil_tmp95~642;
    havoc ~__cil_tmp96~642;
    havoc ~__cil_tmp97~642;
    havoc ~__cil_tmp98~642;
    havoc ~__cil_tmp99~642;
    havoc ~__cil_tmp100~642;
    havoc ~__cil_tmp101~642;
    havoc ~__cil_tmp102~642;
    havoc ~__cil_tmp103~642;
    havoc ~__cil_tmp104~642;
    havoc ~__cil_tmp105~642;
    havoc ~__cil_tmp106~642;
    havoc ~__cil_tmp107~642;
    havoc ~__cil_tmp108~642;
    havoc ~__cil_tmp109~642;
    havoc ~__cil_tmp110~642;
    havoc ~__cil_tmp111~642;
    havoc ~__cil_tmp112~642;
    havoc ~__cil_tmp113~642;
    havoc ~__cil_tmp114~642;
    havoc ~__cil_tmp115~642;
    havoc ~__cil_tmp116~642;
    havoc ~__cil_tmp117~642;
    havoc ~__cil_tmp118~642;
    havoc ~__cil_tmp119~642;
    havoc ~__cil_tmp120~642;
    havoc ~__cil_tmp121~642;
    havoc ~__cil_tmp122~642;
    havoc ~__cil_tmp123~642;
    havoc ~__cil_tmp124~642.base, ~__cil_tmp124~642.offset;
    havoc ~__cil_tmp125~642;
    havoc ~__cil_tmp126~642;
    havoc ~__cil_tmp127~642;
    havoc ~__cil_tmp128~642.base, ~__cil_tmp128~642.offset;
    havoc ~__cil_tmp129~642.base, ~__cil_tmp129~642.offset;
    havoc ~__cil_tmp130~642;
    havoc ~__cil_tmp131~642;
    havoc ~__cil_tmp132~642;
    havoc ~__cil_tmp133~642;
    havoc ~__cil_tmp134~642;
    havoc ~__cil_tmp135~642;
    havoc ~__cil_tmp136~642;
    havoc ~__cil_tmp137~642.base, ~__cil_tmp137~642.offset;
    havoc ~__cil_tmp138~642;
    havoc ~__cil_tmp139~642;
    havoc ~__cil_tmp140~642;
    havoc ~__cil_tmp141~642;
    havoc ~__cil_tmp142~642;
    havoc ~__cil_tmp143~642;
    havoc ~__cil_tmp144~642.base, ~__cil_tmp144~642.offset;
    havoc ~__cil_tmp145~642;
    havoc ~__cil_tmp146~642;
    havoc ~__cil_tmp147~642;
    havoc ~__cil_tmp148~642;
    havoc ~__cil_tmp149~642;
    havoc ~__cil_tmp150~642;
    havoc ~__cil_tmp151~642;
    havoc ~__cil_tmp152~642;
    havoc ~__cil_tmp153~642.base, ~__cil_tmp153~642.offset;
    havoc ~__cil_tmp154~642;
    havoc ~__cil_tmp155~642;
    havoc ~__cil_tmp156~642.base, ~__cil_tmp156~642.offset;
    havoc ~__cil_tmp157~642.base, ~__cil_tmp157~642.offset;
    havoc ~__cil_tmp158~642;
    havoc ~__cil_tmp159~642;
    havoc ~__cil_tmp160~642.base, ~__cil_tmp160~642.offset;
    havoc ~__cil_tmp161~642;
    havoc ~__cil_tmp162~642;
    havoc ~__cil_tmp163~642;
    havoc ~__cil_tmp164~642;
    havoc ~__cil_tmp165~642.base, ~__cil_tmp165~642.offset;
    havoc ~__cil_tmp166~642;
    havoc ~__cil_tmp167~642;
    havoc ~__cil_tmp168~642;
    havoc ~__cil_tmp169~642;
    havoc ~__cil_tmp170~642.base, ~__cil_tmp170~642.offset;
    havoc ~__cil_tmp171~642;
    havoc ~__cil_tmp172~642;
    havoc ~__cil_tmp173~642;
    havoc ~__cil_tmp174~642.base, ~__cil_tmp174~642.offset;
    havoc ~__cil_tmp175~642.base, ~__cil_tmp175~642.offset;
    havoc ~__cil_tmp176~642.base, ~__cil_tmp176~642.offset;
    call #t~ret564.base, #t~ret564.offset := kzalloc(1592, 208);
    ~tmp___7~642.base, ~tmp___7~642.offset := #t~ret564.base, #t~ret564.offset;
    havoc #t~ret564.base, #t~ret564.offset;
    ~card~642.base, ~card~642.offset := ~tmp___7~642.base, ~tmp___7~642.offset;
    assume ~card~642.base != 0 || ~card~642.offset != 0;
    assume true;
    assume !false;
    ~__cil_tmp7~642.base, ~__cil_tmp7~642.offset := ~card~642.base, ~card~642.offset;
    call #t~nondet565.base, #t~nondet565.offset := #Ultimate.alloc(12);
    call __mutex_init(~__cil_tmp7~642.base, ~__cil_tmp7~642.offset, #t~nondet565.base, #t~nondet565.offset, ~#__key___6.base, ~#__key___6.offset);
    havoc #t~nondet565.base, #t~nondet565.offset;
    ~__cil_tmp8~642 := ~card~642.base + ~card~642.offset;
    ~__cil_tmp9~642 := ~__cil_tmp8~642 + 296;
    ~__cil_tmp10~642 := ~sub.base + ~sub.offset;
    ~__cil_tmp11~642 := ~__cil_tmp10~642 + 768;
    call #t~mem566.base, #t~mem566.offset := read~$Pointer$(0, (if ~__cil_tmp11~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp11~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp11~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp12~642.base, ~__cil_tmp12~642.offset := #t~mem566.base, #t~mem566.offset;
    havoc #t~mem566.base, #t~mem566.offset;
    ~__cil_tmp13~642 := ~__cil_tmp12~642.base + ~__cil_tmp12~642.offset;
    ~__cil_tmp14~642 := ~__cil_tmp13~642 + 1328;
    call #t~mem568 := read~int(0, (if ~__cil_tmp14~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp14~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp14~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    call write~int(#t~mem568, 0, (if ~__cil_tmp9~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp9~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp9~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    havoc #t~mem568;
    ~__cil_tmp15~642 := 0;
    ~__cil_tmp16~642 := 76 + ~__cil_tmp15~642;
    ~__cil_tmp17~642 := ~card~642.base + ~card~642.offset;
    ~__cil_tmp18~642 := ~__cil_tmp17~642 + ~__cil_tmp16~642;
    ~__cil_tmp19~642.base, ~__cil_tmp19~642.offset := 0, (if ~__cil_tmp18~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp18~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp18~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp20~642 := 0;
    ~__cil_tmp21~642 := 56 + ~__cil_tmp20~642;
    ~__cil_tmp22~642 := 0 + ~__cil_tmp21~642;
    ~__cil_tmp23~642 := ~sub.base + ~sub.offset;
    ~__cil_tmp24~642 := ~__cil_tmp23~642 + 768;
    call #t~mem569.base, #t~mem569.offset := read~$Pointer$(0, (if ~__cil_tmp24~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp24~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp24~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp25~642.base, ~__cil_tmp25~642.offset := #t~mem569.base, #t~mem569.offset;
    havoc #t~mem569.base, #t~mem569.offset;
    ~__cil_tmp26~642 := ~__cil_tmp25~642.base + ~__cil_tmp25~642.offset;
    ~__cil_tmp27~642 := ~__cil_tmp26~642 + ~__cil_tmp22~642;
    ~__cil_tmp28~642.base, ~__cil_tmp28~642.offset := 0, (if ~__cil_tmp27~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp27~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp27~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616);
    ~__cil_tmp29~642.base, ~__cil_tmp29~642.offset := ~__cil_tmp28~642.base, ~__cil_tmp28~642.offset;
    call #t~ret570 := strlcpy(~__cil_tmp19~642.base, ~__cil_tmp19~642.offset, ~__cil_tmp29~642.base, ~__cil_tmp29~642.offset, 32);
    havoc #t~ret570;
    ~__cil_tmp30~642 := ~card~642.base + ~card~642.offset;
    ~__cil_tmp31~642 := ~__cil_tmp30~642 + 1432;
    ~__cil_tmp32~642 := ~sub.base + ~sub.offset;
    ~__cil_tmp33~642 := ~__cil_tmp32~642 + 768;
    call #t~mem571.base, #t~mem571.offset := read~$Pointer$(0, (if ~__cil_tmp33~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp33~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp33~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp34~642.base, ~__cil_tmp34~642.offset := #t~mem571.base, #t~mem571.offset;
    havoc #t~mem571.base, #t~mem571.offset;
    ~__cil_tmp35~642 := ~__cil_tmp34~642.base + ~__cil_tmp34~642.offset;
    ~__cil_tmp36~642 := ~__cil_tmp35~642 + 224;
    call write~$Pointer$(0, (if ~__cil_tmp36~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp36~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp36~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 0, (if ~__cil_tmp31~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp31~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp31~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp37~642 := ~sub.base + ~sub.offset;
    ~__cil_tmp38~642 := ~__cil_tmp37~642 + 768;
    call #t~mem573.base, #t~mem573.offset := read~$Pointer$(0, (if ~__cil_tmp38~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp38~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp38~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp39~642.base, ~__cil_tmp39~642.offset := #t~mem573.base, #t~mem573.offset;
    havoc #t~mem573.base, #t~mem573.offset;
    ~__cil_tmp40~642 := ~__cil_tmp39~642.base + ~__cil_tmp39~642.offset;
    ~__cil_tmp41~642 := ~__cil_tmp40~642 + 1332;
    call #t~mem574 := read~int(0, (if ~__cil_tmp41~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp41~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp41~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp42~642 := #t~mem574;
    havoc #t~mem574;
    assume (if ~__cil_tmp42~642 % 4294967296 % 4294967296 <= 2147483647 then ~__cil_tmp42~642 % 4294967296 % 4294967296 else ~__cil_tmp42~642 % 4294967296 % 4294967296 - 4294967296) == 94;
    ~__cil_tmp43~642 := ~card~642.base + ~card~642.offset;
    ~__cil_tmp44~642 := ~__cil_tmp43~642 + 1416;
    call write~int(67158112, 0, (if ~__cil_tmp44~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp44~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp44~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp45~642 := ~card~642.base + ~card~642.offset;
    ~__cil_tmp46~642 := ~__cil_tmp45~642 + 1420;
    ~__cil_tmp47~642 := ~shiftLeft(1, 15);
    call write~int(~__cil_tmp47~642, 0, (if ~__cil_tmp46~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp46~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp46~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp48~642 := ~card~642.base + ~card~642.offset;
    ~__cil_tmp49~642 := ~__cil_tmp48~642 + 1424;
    ~__cil_tmp50~642 := ~shiftLeft(1, 14);
    ~__cil_tmp51~642 := ~shiftLeft(1, 12);
    ~__cil_tmp52~642 := ~bitwiseOr(~__cil_tmp51~642, ~__cil_tmp50~642);
    call write~int(~__cil_tmp52~642, 0, (if ~__cil_tmp49~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp49~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp49~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    assume true;
    assume !false;
    ~__cil_tmp129~642.base, ~__cil_tmp129~642.offset := ~#debug.base, ~#debug.offset;
    call #t~mem600 := read~int(~__cil_tmp129~642.base, ~__cil_tmp129~642.offset, 4);
    assume !(#t~mem600 != 0);
    havoc #t~mem600;
    ~__cil_tmp138~642 := ~card~642.base + ~card~642.offset;
    ~__cil_tmp139~642 := ~__cil_tmp138~642 + 296;
    call #t~mem604 := read~int(0, (if ~__cil_tmp139~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp139~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp139~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp140~642 := #t~mem604;
    havoc #t~mem604;
    call #t~ret605.base, #t~ret605.offset := bttv_get_pcidev(~__cil_tmp140~642);
    ~bttv_pci_dev~642.base, ~bttv_pci_dev~642.offset := #t~ret605.base, #t~ret605.offset;
    havoc #t~ret605.base, #t~ret605.offset;
    assume ~bttv_pci_dev~642.base != 0 || ~bttv_pci_dev~642.offset != 0;
    ~__cil_tmp145~642 := ~card~642.base + ~card~642.offset;
    ~__cil_tmp146~642 := ~__cil_tmp145~642 + 296;
    call #t~mem609 := read~int(0, (if ~__cil_tmp146~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp146~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp146~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp147~642 := #t~mem609;
    havoc #t~mem609;
    call #t~ret610.base, #t~ret610.offset := dvb_bt8xx_878_match(~__cil_tmp147~642, ~bttv_pci_dev~642.base, ~bttv_pci_dev~642.offset);
    ~tmp___8~642.base, ~tmp___8~642.offset := #t~ret610.base, #t~ret610.offset;
    havoc #t~ret610.base, #t~ret610.offset;
    ~__cil_tmp148~642 := ~card~642.base + ~card~642.offset;
    ~__cil_tmp149~642 := ~__cil_tmp148~642 + 288;
    call write~$Pointer$(~tmp___8~642.base, ~tmp___8~642.offset, 0, (if ~__cil_tmp149~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp149~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp149~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    assume ~tmp___8~642.base != 0 || ~tmp___8~642.offset != 0;
    assume true;
    assume !false;
    ~__cil_tmp154~642 := ~card~642.base + ~card~642.offset;
    ~__cil_tmp155~642 := ~__cil_tmp154~642 + 288;
    call #t~mem617.base, #t~mem617.offset := read~$Pointer$(0, (if ~__cil_tmp155~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp155~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp155~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp156~642.base, ~__cil_tmp156~642.offset := #t~mem617.base, #t~mem617.offset;
    havoc #t~mem617.base, #t~mem617.offset;
    ~__cil_tmp157~642.base, ~__cil_tmp157~642.offset := ~__cil_tmp156~642.base, ~__cil_tmp156~642.offset;
    call #t~nondet618.base, #t~nondet618.offset := #Ultimate.alloc(21);
    call __mutex_init(~__cil_tmp157~642.base, ~__cil_tmp157~642.offset, #t~nondet618.base, #t~nondet618.offset, ~#__key___7.base, ~#__key___7.offset);
    havoc #t~nondet618.base, #t~nondet618.offset;
    ~__cil_tmp158~642 := ~card~642.base + ~card~642.offset;
    ~__cil_tmp159~642 := ~__cil_tmp158~642 + 288;
    call #t~mem619.base, #t~mem619.offset := read~$Pointer$(0, (if ~__cil_tmp159~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp159~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp159~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp160~642.base, ~__cil_tmp160~642.offset := #t~mem619.base, #t~mem619.offset;
    havoc #t~mem619.base, #t~mem619.offset;
    ~__cil_tmp161~642 := ~__cil_tmp160~642.base + ~__cil_tmp160~642.offset;
    ~__cil_tmp162~642 := ~__cil_tmp161~642 + 76;
    ~__cil_tmp163~642 := ~sub.base + ~sub.offset;
    ~__cil_tmp164~642 := ~__cil_tmp163~642 + 768;
    call #t~mem620.base, #t~mem620.offset := read~$Pointer$(0, (if ~__cil_tmp164~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp164~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp164~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp165~642.base, ~__cil_tmp165~642.offset := #t~mem620.base, #t~mem620.offset;
    havoc #t~mem620.base, #t~mem620.offset;
    ~__cil_tmp166~642 := ~__cil_tmp165~642.base + ~__cil_tmp165~642.offset;
    ~__cil_tmp167~642 := ~__cil_tmp166~642 + 1328;
    call #t~mem622 := read~int(0, (if ~__cil_tmp167~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp167~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp167~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    call write~int(#t~mem622, 0, (if ~__cil_tmp162~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp162~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp162~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    havoc #t~mem622;
    ~__cil_tmp168~642 := ~sub.base + ~sub.offset;
    ~__cil_tmp169~642 := ~__cil_tmp168~642 + 768;
    call #t~mem623.base, #t~mem623.offset := read~$Pointer$(0, (if ~__cil_tmp169~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp169~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp169~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 8);
    ~__cil_tmp170~642.base, ~__cil_tmp170~642.offset := #t~mem623.base, #t~mem623.offset;
    havoc #t~mem623.base, #t~mem623.offset;
    ~__cil_tmp171~642 := ~__cil_tmp170~642.base + ~__cil_tmp170~642.offset;
    ~__cil_tmp172~642 := ~__cil_tmp171~642 + 1332;
    call #t~mem624 := read~int(0, (if ~__cil_tmp172~642 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~__cil_tmp172~642 % 18446744073709551616 % 18446744073709551616 else ~__cil_tmp172~642 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616), 4);
    ~__cil_tmp173~642 := #t~mem624;
    havoc #t~mem624;
    call #t~ret625 := dvb_bt8xx_load_card(~card~642.base, ~card~642.offset, ~__cil_tmp173~642);
    return;
}

procedure dvb_bt8xx_probe(#in~sub.base : int, #in~sub.offset : int) returns (#res : int);
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length, ~ldv_mutex;

implementation mutex_unlock(#in~lock.base : int, #in~lock.offset : int) returns (){
    var ~lock.base : int, ~lock.offset : int;

  loc7:
    ~lock.base, ~lock.offset := #in~lock.base, #in~lock.offset;
    assume !(~ldv_mutex == 2);
    call ldv_blast_assert();
    return;
}

procedure mutex_unlock(#in~lock.base : int, #in~lock.offset : int) returns ();
modifies ~ldv_mutex;

implementation ULTIMATE.init() returns (){
    var #t~nondet643.base : int, #t~nondet643.offset : int;

  loc8:
    #NULL.base, #NULL.offset := 0, 0;
    #valid := #valid[0 := 0];
    call ~#debug.base, ~#debug.offset := #Ultimate.alloc(4);
    call write~int(0, ~#debug.base, ~#debug.offset, 4);
    call ~#adapter_nr.base, ~#adapter_nr.offset := #Ultimate.alloc(16);
    call write~int(-1, ~#adapter_nr.base, ~#adapter_nr.offset + 0, 2);
    call write~int(-1, ~#adapter_nr.base, ~#adapter_nr.offset + 2, 2);
    call write~int(-1, ~#adapter_nr.base, ~#adapter_nr.offset + 4, 2);
    call write~int(-1, ~#adapter_nr.base, ~#adapter_nr.offset + 6, 2);
    call write~int(-1, ~#adapter_nr.base, ~#adapter_nr.offset + 8, 2);
    call write~int(-1, ~#adapter_nr.base, ~#adapter_nr.offset + 10, 2);
    call write~int(-1, ~#adapter_nr.base, ~#adapter_nr.offset + 12, 2);
    call write~int(-1, ~#adapter_nr.base, ~#adapter_nr.offset + 14, 2);
    ~LDV_IN_INTERRUPT := 0;
    ~res_dvb_bt8xx_probe_25 := 0;
    ~ldv_mutex := 1;
    call ~#mt352_clock_config.base, ~#mt352_clock_config.offset := #Ultimate.alloc(3);
    call write~int(137, ~#mt352_clock_config.base, ~#mt352_clock_config.offset + 0, 1);
    call write~int(56, ~#mt352_clock_config.base, ~#mt352_clock_config.offset + 1, 1);
    call write~int(56, ~#mt352_clock_config.base, ~#mt352_clock_config.offset + 2, 1);
    call ~#mt352_reset.base, ~#mt352_reset.offset := #Ultimate.alloc(2);
    call write~int(80, ~#mt352_reset.base, ~#mt352_reset.offset + 0, 1);
    call write~int(128, ~#mt352_reset.base, ~#mt352_reset.offset + 1, 1);
    call ~#mt352_adc_ctl_1_cfg.base, ~#mt352_adc_ctl_1_cfg.offset := #Ultimate.alloc(2);
    call write~int(142, ~#mt352_adc_ctl_1_cfg.base, ~#mt352_adc_ctl_1_cfg.offset + 0, 1);
    call write~int(64, ~#mt352_adc_ctl_1_cfg.base, ~#mt352_adc_ctl_1_cfg.offset + 1, 1);
    call ~#mt352_agc_cfg.base, ~#mt352_agc_cfg.offset := #Ultimate.alloc(3);
    call write~int(103, ~#mt352_agc_cfg.base, ~#mt352_agc_cfg.offset + 0, 1);
    call write~int(40, ~#mt352_agc_cfg.base, ~#mt352_agc_cfg.offset + 1, 1);
    call write~int(32, ~#mt352_agc_cfg.base, ~#mt352_agc_cfg.offset + 2, 1);
    call ~#mt352_gpp_ctl_cfg.base, ~#mt352_gpp_ctl_cfg.offset := #Ultimate.alloc(2);
    call write~int(140, ~#mt352_gpp_ctl_cfg.base, ~#mt352_gpp_ctl_cfg.offset + 0, 1);
    call write~int(51, ~#mt352_gpp_ctl_cfg.base, ~#mt352_gpp_ctl_cfg.offset + 1, 1);
    call ~#mt352_capt_range_cfg.base, ~#mt352_capt_range_cfg.offset := #Ultimate.alloc(2);
    call write~int(117, ~#mt352_capt_range_cfg.base, ~#mt352_capt_range_cfg.offset + 0, 1);
    call write~int(50, ~#mt352_capt_range_cfg.base, ~#mt352_capt_range_cfg.offset + 1, 1);
    call ~#thomson_dtt7579_config.base, ~#thomson_dtt7579_config.offset := #Ultimate.alloc(21);
    call write~int(15, ~#thomson_dtt7579_config.base, ~#thomson_dtt7579_config.offset + 0, 1);
    call write~int(0, ~#thomson_dtt7579_config.base, ~#thomson_dtt7579_config.offset + 1, 4);
    call write~int(0, ~#thomson_dtt7579_config.base, ~#thomson_dtt7579_config.offset + 5, 4);
    call write~int(0, ~#thomson_dtt7579_config.base, ~#thomson_dtt7579_config.offset + 9, 4);
    call write~$Pointer$(#funAddr~thomson_dtt7579_demod_init.base, #funAddr~thomson_dtt7579_demod_init.offset, ~#thomson_dtt7579_config.base, ~#thomson_dtt7579_config.offset + 13, 8);
    call ~#thomson_dtt7579_zl10353_config.base, ~#thomson_dtt7579_zl10353_config.offset := #Ultimate.alloc(20);
    call write~int(15, ~#thomson_dtt7579_zl10353_config.base, ~#thomson_dtt7579_zl10353_config.offset + 0, 1);
    call write~int(0, ~#thomson_dtt7579_zl10353_config.base, ~#thomson_dtt7579_zl10353_config.offset + 1, 4);
    call write~int(0, ~#thomson_dtt7579_zl10353_config.base, ~#thomson_dtt7579_zl10353_config.offset + 5, 4);
    call write~int(0, ~#thomson_dtt7579_zl10353_config.base, ~#thomson_dtt7579_zl10353_config.offset + 9, 4);
    call write~int(0, ~#thomson_dtt7579_zl10353_config.base, ~#thomson_dtt7579_zl10353_config.offset + 13, 4);
    call write~int(0, ~#thomson_dtt7579_zl10353_config.base, ~#thomson_dtt7579_zl10353_config.offset + 17, 1);
    call write~int(0, ~#thomson_dtt7579_zl10353_config.base, ~#thomson_dtt7579_zl10353_config.offset + 18, 1);
    call write~int(0, ~#thomson_dtt7579_zl10353_config.base, ~#thomson_dtt7579_zl10353_config.offset + 19, 1);
    call ~#pctvsat_config.base, ~#pctvsat_config.offset := #Ultimate.alloc(1);
    call write~int(85, ~#pctvsat_config.base, ~#pctvsat_config.offset + 0, 1);
    call ~#microtune_mt7202dtf_config.base, ~#microtune_mt7202dtf_config.offset := #Ultimate.alloc(9);
    call write~int(112, ~#microtune_mt7202dtf_config.base, ~#microtune_mt7202dtf_config.offset + 0, 1);
    call write~$Pointer$(#funAddr~microtune_mt7202dtf_request_firmware.base, #funAddr~microtune_mt7202dtf_request_firmware.offset, ~#microtune_mt7202dtf_config.base, ~#microtune_mt7202dtf_config.offset + 1, 8);
    call ~#mt352_clock_config___0.base, ~#mt352_clock_config___0.offset := #Ultimate.alloc(3);
    call write~int(137, ~#mt352_clock_config___0.base, ~#mt352_clock_config___0.offset + 0, 1);
    call write~int(56, ~#mt352_clock_config___0.base, ~#mt352_clock_config___0.offset + 1, 1);
    call write~int(45, ~#mt352_clock_config___0.base, ~#mt352_clock_config___0.offset + 2, 1);
    call ~#mt352_reset___0.base, ~#mt352_reset___0.offset := #Ultimate.alloc(2);
    call write~int(80, ~#mt352_reset___0.base, ~#mt352_reset___0.offset + 0, 1);
    call write~int(128, ~#mt352_reset___0.base, ~#mt352_reset___0.offset + 1, 1);
    call ~#mt352_adc_ctl_1_cfg___0.base, ~#mt352_adc_ctl_1_cfg___0.offset := #Ultimate.alloc(2);
    call write~int(142, ~#mt352_adc_ctl_1_cfg___0.base, ~#mt352_adc_ctl_1_cfg___0.offset + 0, 1);
    call write~int(64, ~#mt352_adc_ctl_1_cfg___0.base, ~#mt352_adc_ctl_1_cfg___0.offset + 1, 1);
    call ~#mt352_agc_cfg___0.base, ~#mt352_agc_cfg___0.offset := #Ultimate.alloc(11);
    call write~int(103, ~#mt352_agc_cfg___0.base, ~#mt352_agc_cfg___0.offset + 0, 1);
    call write~int(16, ~#mt352_agc_cfg___0.base, ~#mt352_agc_cfg___0.offset + 1, 1);
    call write~int(35, ~#mt352_agc_cfg___0.base, ~#mt352_agc_cfg___0.offset + 2, 1);
    call write~int(0, ~#mt352_agc_cfg___0.base, ~#mt352_agc_cfg___0.offset + 3, 1);
    call write~int(255, ~#mt352_agc_cfg___0.base, ~#mt352_agc_cfg___0.offset + 4, 1);
    call write~int(255, ~#mt352_agc_cfg___0.base, ~#mt352_agc_cfg___0.offset + 5, 1);
    call write~int(0, ~#mt352_agc_cfg___0.base, ~#mt352_agc_cfg___0.offset + 6, 1);
    call write~int(255, ~#mt352_agc_cfg___0.base, ~#mt352_agc_cfg___0.offset + 7, 1);
    call write~int(0, ~#mt352_agc_cfg___0.base, ~#mt352_agc_cfg___0.offset + 8, 1);
    call write~int(64, ~#mt352_agc_cfg___0.base, ~#mt352_agc_cfg___0.offset + 9, 1);
    call write~int(64, ~#mt352_agc_cfg___0.base, ~#mt352_agc_cfg___0.offset + 10, 1);
    call ~#mt352_av771_extra.base, ~#mt352_av771_extra.offset := #Ultimate.alloc(2);
    call write~int(181, ~#mt352_av771_extra.base, ~#mt352_av771_extra.offset + 0, 1);
    call write~int(122, ~#mt352_av771_extra.base, ~#mt352_av771_extra.offset + 1, 1);
    call ~#mt352_capt_range_cfg___0.base, ~#mt352_capt_range_cfg___0.offset := #Ultimate.alloc(2);
    call write~int(117, ~#mt352_capt_range_cfg___0.base, ~#mt352_capt_range_cfg___0.offset + 0, 1);
    call write~int(50, ~#mt352_capt_range_cfg___0.base, ~#mt352_capt_range_cfg___0.offset + 1, 1);
    call ~#advbt771_samsung_tdtc9251dh0_config.base, ~#advbt771_samsung_tdtc9251dh0_config.offset := #Ultimate.alloc(21);
    call write~int(15, ~#advbt771_samsung_tdtc9251dh0_config.base, ~#advbt771_samsung_tdtc9251dh0_config.offset + 0, 1);
    call write~int(0, ~#advbt771_samsung_tdtc9251dh0_config.base, ~#advbt771_samsung_tdtc9251dh0_config.offset + 1, 4);
    call write~int(0, ~#advbt771_samsung_tdtc9251dh0_config.base, ~#advbt771_samsung_tdtc9251dh0_config.offset + 5, 4);
    call write~int(0, ~#advbt771_samsung_tdtc9251dh0_config.base, ~#advbt771_samsung_tdtc9251dh0_config.offset + 9, 4);
    call write~$Pointer$(#funAddr~advbt771_samsung_tdtc9251dh0_demod_init.base, #funAddr~advbt771_samsung_tdtc9251dh0_demod_init.offset, ~#advbt771_samsung_tdtc9251dh0_config.base, ~#advbt771_samsung_tdtc9251dh0_config.offset + 13, 8);
    call ~#dst_config.base, ~#dst_config.offset := #Ultimate.alloc(1);
    call write~int(85, ~#dst_config.base, ~#dst_config.offset + 0, 1);
    call ~#or51211_config.base, ~#or51211_config.offset := #Ultimate.alloc(33);
    call write~int(21, ~#or51211_config.base, ~#or51211_config.offset + 0, 1);
    call write~$Pointer$(#funAddr~or51211_request_firmware.base, #funAddr~or51211_request_firmware.offset, ~#or51211_config.base, ~#or51211_config.offset + 1, 8);
    call write~$Pointer$(#funAddr~or51211_setmode.base, #funAddr~or51211_setmode.offset, ~#or51211_config.base, ~#or51211_config.offset + 9, 8);
    call write~$Pointer$(#funAddr~or51211_reset.base, #funAddr~or51211_reset.offset, ~#or51211_config.base, ~#or51211_config.offset + 17, 8);
    call write~$Pointer$(#funAddr~or51211_sleep.base, #funAddr~or51211_sleep.offset, ~#or51211_config.base, ~#or51211_config.offset + 25, 8);
    call ~#vp3021_alps_tded4_config.base, ~#vp3021_alps_tded4_config.offset := #Ultimate.alloc(2);
    call write~int(10, ~#vp3021_alps_tded4_config.base, ~#vp3021_alps_tded4_config.offset + 0, 1);
    call write~int(1, ~#vp3021_alps_tded4_config.base, ~#vp3021_alps_tded4_config.offset + 1, 1);
    call ~#mt352_clock_config___1.base, ~#mt352_clock_config___1.offset := #Ultimate.alloc(3);
    call write~int(137, ~#mt352_clock_config___1.base, ~#mt352_clock_config___1.offset + 0, 1);
    call write~int(56, ~#mt352_clock_config___1.base, ~#mt352_clock_config___1.offset + 1, 1);
    call write~int(45, ~#mt352_clock_config___1.base, ~#mt352_clock_config___1.offset + 2, 1);
    call ~#mt352_reset___1.base, ~#mt352_reset___1.offset := #Ultimate.alloc(2);
    call write~int(80, ~#mt352_reset___1.base, ~#mt352_reset___1.offset + 0, 1);
    call write~int(128, ~#mt352_reset___1.base, ~#mt352_reset___1.offset + 1, 1);
    call ~#mt352_adc_ctl_1_cfg___1.base, ~#mt352_adc_ctl_1_cfg___1.offset := #Ultimate.alloc(2);
    call write~int(142, ~#mt352_adc_ctl_1_cfg___1.base, ~#mt352_adc_ctl_1_cfg___1.offset + 0, 1);
    call write~int(64, ~#mt352_adc_ctl_1_cfg___1.base, ~#mt352_adc_ctl_1_cfg___1.offset + 1, 1);
    call ~#mt352_agc_cfg___1.base, ~#mt352_agc_cfg___1.offset := #Ultimate.alloc(3);
    call write~int(103, ~#mt352_agc_cfg___1.base, ~#mt352_agc_cfg___1.offset + 0, 1);
    call write~int(32, ~#mt352_agc_cfg___1.base, ~#mt352_agc_cfg___1.offset + 1, 1);
    call write~int(160, ~#mt352_agc_cfg___1.base, ~#mt352_agc_cfg___1.offset + 2, 1);
    call ~#mt352_capt_range_cfg___1.base, ~#mt352_capt_range_cfg___1.offset := #Ultimate.alloc(2);
    call write~int(117, ~#mt352_capt_range_cfg___1.base, ~#mt352_capt_range_cfg___1.offset + 0, 1);
    call write~int(50, ~#mt352_capt_range_cfg___1.base, ~#mt352_capt_range_cfg___1.offset + 1, 1);
    call ~#digitv_alps_tded4_config.base, ~#digitv_alps_tded4_config.offset := #Ultimate.alloc(21);
    call write~int(10, ~#digitv_alps_tded4_config.base, ~#digitv_alps_tded4_config.offset + 0, 1);
    call write~int(0, ~#digitv_alps_tded4_config.base, ~#digitv_alps_tded4_config.offset + 1, 4);
    call write~int(0, ~#digitv_alps_tded4_config.base, ~#digitv_alps_tded4_config.offset + 5, 4);
    call write~int(0, ~#digitv_alps_tded4_config.base, ~#digitv_alps_tded4_config.offset + 9, 4);
    call write~$Pointer$(#funAddr~digitv_alps_tded4_demod_init.base, #funAddr~digitv_alps_tded4_demod_init.offset, ~#digitv_alps_tded4_config.base, ~#digitv_alps_tded4_config.offset + 13, 8);
    call ~#tdvs_tua6034_config.base, ~#tdvs_tua6034_config.offset := #Ultimate.alloc(29);
    call write~int(14, ~#tdvs_tua6034_config.base, ~#tdvs_tua6034_config.offset + 0, 1);
    call write~int(2, ~#tdvs_tua6034_config.base, ~#tdvs_tua6034_config.offset + 1, 4);
    call write~int(64, ~#tdvs_tua6034_config.base, ~#tdvs_tua6034_config.offset + 5, 4);
    call write~$Pointer$(0, 0, ~#tdvs_tua6034_config.base, ~#tdvs_tua6034_config.offset + 9, 8);
    call write~$Pointer$(0, 0, ~#tdvs_tua6034_config.base, ~#tdvs_tua6034_config.offset + 17, 8);
    call write~int(0, ~#tdvs_tua6034_config.base, ~#tdvs_tua6034_config.offset + 25, 4);
    call ~#__key___6.base, ~#__key___6.offset := #Ultimate.alloc(0);
    call ~#__key___7.base, ~#__key___7.offset := #Ultimate.alloc(0);
    call ~#driver.base, ~#driver.offset := #Ultimate.alloc(141);
    call #t~nondet643.base, #t~nondet643.offset := #Ultimate.alloc(10);
    call write~$Pointer$(#t~nondet643.base, #t~nondet643.offset, ~#driver.base, ~#driver.offset + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#driver.base, ~#driver.offset + 0 + 8, 8);
    call write~$Pointer$(0, 0, ~#driver.base, ~#driver.offset + 0 + 16, 8);
    call write~$Pointer$(0, 0, ~#driver.base, ~#driver.offset + 0 + 24, 8);
    call write~int(0, ~#driver.base, ~#driver.offset + 0 + 32, 1);
    call write~$Pointer$(0, 0, ~#driver.base, ~#driver.offset + 0 + 33, 8);
    call write~$Pointer$(0, 0, ~#driver.base, ~#driver.offset + 0 + 41, 8);
    call write~$Pointer$(0, 0, ~#driver.base, ~#driver.offset + 0 + 49, 8);
    call write~$Pointer$(0, 0, ~#driver.base, ~#driver.offset + 0 + 57, 8);
    call write~$Pointer$(0, 0, ~#driver.base, ~#driver.offset + 0 + 65, 8);
    call write~$Pointer$(0, 0, ~#driver.base, ~#driver.offset + 0 + 73, 8);
    call write~$Pointer$(0, 0, ~#driver.base, ~#driver.offset + 0 + 81, 8);
    call write~$Pointer$(0, 0, ~#driver.base, ~#driver.offset + 0 + 89, 8);
    call write~$Pointer$(0, 0, ~#driver.base, ~#driver.offset + 0 + 97, 8);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 0, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 1, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 2, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 3, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 4, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 5, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 6, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 7, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 8, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 9, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 10, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 11, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 12, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 13, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 14, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 15, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 16, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 17, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 18, 1);
    call write~int(0, ~#driver.base, ~#driver.offset + 105 + 19, 1);
    call write~$Pointer$(#funAddr~dvb_bt8xx_probe.base, #funAddr~dvb_bt8xx_probe.offset, ~#driver.base, ~#driver.offset + 125, 8);
    call write~$Pointer$(#funAddr~dvb_bt8xx_remove.base, #funAddr~dvb_bt8xx_remove.offset, ~#driver.base, ~#driver.offset + 133, 8);
    havoc #t~nondet643.base, #t~nondet643.offset;
    assume true;
    return;
}

procedure ULTIMATE.init() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~#debug.base, ~#debug.offset, ~#adapter_nr.base, ~#adapter_nr.offset, ~LDV_IN_INTERRUPT, ~res_dvb_bt8xx_probe_25, ~ldv_mutex, ~#mt352_clock_config.base, ~#mt352_clock_config.offset, ~#mt352_reset.base, ~#mt352_reset.offset, ~#mt352_adc_ctl_1_cfg.base, ~#mt352_adc_ctl_1_cfg.offset, ~#mt352_agc_cfg.base, ~#mt352_agc_cfg.offset, ~#mt352_gpp_ctl_cfg.base, ~#mt352_gpp_ctl_cfg.offset, ~#mt352_capt_range_cfg.base, ~#mt352_capt_range_cfg.offset, ~#thomson_dtt7579_config.base, ~#thomson_dtt7579_config.offset, ~#thomson_dtt7579_zl10353_config.base, ~#thomson_dtt7579_zl10353_config.offset, ~#pctvsat_config.base, ~#pctvsat_config.offset, ~#microtune_mt7202dtf_config.base, ~#microtune_mt7202dtf_config.offset, ~#mt352_clock_config___0.base, ~#mt352_clock_config___0.offset, ~#mt352_reset___0.base, ~#mt352_reset___0.offset, ~#mt352_adc_ctl_1_cfg___0.base, ~#mt352_adc_ctl_1_cfg___0.offset, ~#mt352_agc_cfg___0.base, ~#mt352_agc_cfg___0.offset, ~#mt352_av771_extra.base, ~#mt352_av771_extra.offset, ~#mt352_capt_range_cfg___0.base, ~#mt352_capt_range_cfg___0.offset, ~#advbt771_samsung_tdtc9251dh0_config.base, ~#advbt771_samsung_tdtc9251dh0_config.offset, ~#dst_config.base, ~#dst_config.offset, ~#or51211_config.base, ~#or51211_config.offset, ~#vp3021_alps_tded4_config.base, ~#vp3021_alps_tded4_config.offset, ~#mt352_clock_config___1.base, ~#mt352_clock_config___1.offset, ~#mt352_reset___1.base, ~#mt352_reset___1.offset, ~#mt352_adc_ctl_1_cfg___1.base, ~#mt352_adc_ctl_1_cfg___1.offset, ~#mt352_agc_cfg___1.base, ~#mt352_agc_cfg___1.offset, ~#mt352_capt_range_cfg___1.base, ~#mt352_capt_range_cfg___1.offset, ~#digitv_alps_tded4_config.base, ~#digitv_alps_tded4_config.offset, ~#tdvs_tua6034_config.base, ~#tdvs_tua6034_config.offset, ~#__key___6.base, ~#__key___6.offset, ~#__key___7.base, ~#__key___7.offset, ~#driver.base, ~#driver.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length;

implementation kzalloc(#in~size : int, #in~flags : int) returns (#res.base : int, #res.offset : int){
    var #t~ret5.base : int, #t~ret5.offset : int;
    var ~size : int;
    var ~flags : int;
    var ~tmp~22.base : int, ~tmp~22.offset : int;
    var ~__cil_tmp4~22 : int;

  loc9:
    ~size := #in~size;
    ~flags := #in~flags;
    havoc ~tmp~22.base, ~tmp~22.offset;
    havoc ~__cil_tmp4~22;
    ~__cil_tmp4~22 := ~bitwiseOr(~flags, 32768);
    call #t~ret5.base, #t~ret5.offset := kmalloc(~size, ~__cil_tmp4~22);
    ~tmp~22.base, ~tmp~22.offset := #t~ret5.base, #t~ret5.offset;
    havoc #t~ret5.base, #t~ret5.offset;
    #res.base, #res.offset := ~tmp~22.base, ~tmp~22.offset;
    assume true;
    return;
}

procedure kzalloc(#in~size : int, #in~flags : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation mutex_lock(#in~lock.base : int, #in~lock.offset : int) returns (){
    var ~lock.base : int, ~lock.offset : int;

  loc10:
    ~lock.base, ~lock.offset := #in~lock.base, #in~lock.offset;
    assume ~ldv_mutex == 1;
    ~ldv_mutex := 2;
    assume true;
    return;
}

procedure mutex_lock(#in~lock.base : int, #in~lock.offset : int) returns ();
modifies ~ldv_mutex;

implementation kmalloc(#in~size : int, #in~flags : int) returns (#res.base : int, #res.offset : int){
    var #t~ret4.base : int, #t~ret4.offset : int;
    var ~size : int;
    var ~flags : int;
    var ~tmp___2~18.base : int, ~tmp___2~18.offset : int;

  loc11:
    ~size := #in~size;
    ~flags := #in~flags;
    havoc ~tmp___2~18.base, ~tmp___2~18.offset;
    call #t~ret4.base, #t~ret4.offset := __kmalloc(~size, ~flags);
    ~tmp___2~18.base, ~tmp___2~18.offset := #t~ret4.base, #t~ret4.offset;
    havoc #t~ret4.base, #t~ret4.offset;
    #res.base, #res.offset := ~tmp___2~18.base, ~tmp___2~18.offset;
    assume true;
    return;
}

procedure kmalloc(#in~size : int, #in~flags : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation ULTIMATE.start() returns (){
  loc12:
    call ULTIMATE.init();
    call main();
    return;
}

procedure ULTIMATE.start() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~#debug.base, ~#debug.offset, ~#adapter_nr.base, ~#adapter_nr.offset, ~LDV_IN_INTERRUPT, ~res_dvb_bt8xx_probe_25, ~ldv_mutex, ~#mt352_clock_config.base, ~#mt352_clock_config.offset, ~#mt352_reset.base, ~#mt352_reset.offset, ~#mt352_adc_ctl_1_cfg.base, ~#mt352_adc_ctl_1_cfg.offset, ~#mt352_agc_cfg.base, ~#mt352_agc_cfg.offset, ~#mt352_gpp_ctl_cfg.base, ~#mt352_gpp_ctl_cfg.offset, ~#mt352_capt_range_cfg.base, ~#mt352_capt_range_cfg.offset, ~#thomson_dtt7579_config.base, ~#thomson_dtt7579_config.offset, ~#thomson_dtt7579_zl10353_config.base, ~#thomson_dtt7579_zl10353_config.offset, ~#pctvsat_config.base, ~#pctvsat_config.offset, ~#microtune_mt7202dtf_config.base, ~#microtune_mt7202dtf_config.offset, ~#mt352_clock_config___0.base, ~#mt352_clock_config___0.offset, ~#mt352_reset___0.base, ~#mt352_reset___0.offset, ~#mt352_adc_ctl_1_cfg___0.base, ~#mt352_adc_ctl_1_cfg___0.offset, ~#mt352_agc_cfg___0.base, ~#mt352_agc_cfg___0.offset, ~#mt352_av771_extra.base, ~#mt352_av771_extra.offset, ~#mt352_capt_range_cfg___0.base, ~#mt352_capt_range_cfg___0.offset, ~#advbt771_samsung_tdtc9251dh0_config.base, ~#advbt771_samsung_tdtc9251dh0_config.offset, ~#dst_config.base, ~#dst_config.offset, ~#or51211_config.base, ~#or51211_config.offset, ~#vp3021_alps_tded4_config.base, ~#vp3021_alps_tded4_config.offset, ~#mt352_clock_config___1.base, ~#mt352_clock_config___1.offset, ~#mt352_reset___1.base, ~#mt352_reset___1.offset, ~#mt352_adc_ctl_1_cfg___1.base, ~#mt352_adc_ctl_1_cfg___1.offset, ~#mt352_agc_cfg___1.base, ~#mt352_agc_cfg___1.offset, ~#mt352_capt_range_cfg___1.base, ~#mt352_capt_range_cfg___1.offset, ~#digitv_alps_tded4_config.base, ~#digitv_alps_tded4_config.offset, ~#tdvs_tua6034_config.base, ~#tdvs_tua6034_config.offset, ~#__key___6.base, ~#__key___6.offset, ~#__key___7.base, ~#__key___7.offset, ~#driver.base, ~#driver.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~LDV_IN_INTERRUPT, ~res_dvb_bt8xx_probe_25;
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_mutex, ~LDV_IN_INTERRUPT, ~res_dvb_bt8xx_probe_25;

implementation ##fun~$Pointer$~X~$Pointer$~TO~int(#in~demux.base : int, #in~demux.offset : int, #in~frontend.base : int, #in~frontend.offset : int, #in~#fp.base : int, #in~#fp.offset : int) returns (#res : int){
    var #~demux.base : int, #~demux.offset : int;
    var #~frontend.base : int, #~frontend.offset : int;

  loc13:
    #~demux.base, #~demux.offset := #in~demux.base, #in~demux.offset;
    #~frontend.base, #~frontend.offset := #in~frontend.base, #in~frontend.offset;
    assume true;
    return;
}

procedure ##fun~$Pointer$~X~$Pointer$~TO~int(#in~demux.base : int, #in~demux.offset : int, #in~frontend.base : int, #in~frontend.offset : int, #in~#fp.base : int, #in~#fp.offset : int) returns (#res : int);
modifies ;

implementation ##fun~$Pointer$~TO~int(#in~demux.base : int, #in~demux.offset : int, #in~#fp.base : int, #in~#fp.offset : int) returns (#res : int){
    var #~demux.base : int, #~demux.offset : int;
    var #t~funptrres660 : int;
    var #t~ret661 : int;
    var #t~ret662 : int;
    var #t~ret663 : int;
    var #t~ret664 : int;
    var #t~ret665 : int;
    var #t~ret666 : int;
    var #t~ret667 : int;
    var #t~ret668 : int;
    var #t~ret669 : int;
    var #t~ret670 : int;
    var #t~ret671 : int;

  loc14:
    #~demux.base, #~demux.offset := #in~demux.base, #in~demux.offset;
    assume !(#in~#fp.base == #funAddr~dvb_bt8xx_probe.base && #in~#fp.offset == #funAddr~dvb_bt8xx_probe.offset);
    assume #in~#fp.base == #funAddr~dvb_bt8xx_stop_feed.base && #in~#fp.offset == #funAddr~dvb_bt8xx_stop_feed.offset;
    call #t~ret670 := dvb_bt8xx_stop_feed(#~demux.base, #~demux.offset);
    return;
}

procedure ##fun~$Pointer$~TO~int(#in~demux.base : int, #in~demux.offset : int, #in~#fp.base : int, #in~#fp.offset : int) returns (#res : int);
modifies #valid, #length, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int, ~ldv_mutex;

implementation ldv_blast_assert() returns (){
  loc15:
    assume !false;
    goto loc16;
  loc16:
    assert false;
}

procedure ldv_blast_assert() returns ();
modifies ;

implementation dvb_bt8xx_init() returns (#res : int){
    var #t~nondet644.base : int, #t~nondet644.offset : int;
    var #t~ret645 : int;
    var ~tmp___7~703 : int;
    var ~__cil_tmp2~703.base : int, ~__cil_tmp2~703.offset : int;

  loc17:
    havoc ~tmp___7~703;
    havoc ~__cil_tmp2~703.base, ~__cil_tmp2~703.offset;
    call #t~nondet644.base, #t~nondet644.offset := #Ultimate.alloc(4);
    #memory_int := #memory_int[#t~nondet644.base,#t~nondet644.offset + 0 := 100];
    #memory_int := #memory_int[#t~nondet644.base,#t~nondet644.offset + 1 := 118];
    #memory_int := #memory_int[#t~nondet644.base,#t~nondet644.offset + 2 := 98];
    #memory_int := #memory_int[#t~nondet644.base,#t~nondet644.offset + 3 := 0];
    ~__cil_tmp2~703.base, ~__cil_tmp2~703.offset := #t~nondet644.base, #t~nondet644.offset;
    havoc #t~nondet644.base, #t~nondet644.offset;
    call #t~ret645 := bttv_sub_register(~#driver.base, ~#driver.offset, ~__cil_tmp2~703.base, ~__cil_tmp2~703.offset);
    assume -2147483648 <= #t~ret645 && #t~ret645 <= 2147483647;
    ~tmp___7~703 := #t~ret645;
    havoc #t~ret645;
    #res := ~tmp___7~703;
    assume true;
    return;
}

procedure dvb_bt8xx_init() returns (#res : int);
modifies #memory_int, #valid, #length, #memory_$Pointer$.base, #memory_$Pointer$.offset;

procedure dev_get_drvdata(#in~dev.base : int, #in~dev.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure dvb_net_init(#in~8.base : int, #in~8.offset : int, #in~9.base : int, #in~9.offset : int, #in~10.base : int, #in~10.offset : int) returns (#res : int);
modifies ;

procedure __kmalloc(#in~size : int, #in~flags : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __const_udelay(#in~xloops : int) returns ();
modifies ;

procedure write~$Pointer$(#value.base : int, #value.offset : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #value.base] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #value.offset];
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #memory_int[#ptr.base,#ptr.offset]];

procedure msleep(#in~msecs : int) returns ();
modifies ;

procedure __request_module(#in~wait : int, #in~name.base : int, #in~name.offset : int) returns (#res : int);
modifies ;

procedure #Ultimate.alloc(~size : int) returns (#res.base : int, #res.offset : int);
ensures old(#valid)[#res.base] == 0;
ensures #valid == old(#valid)[#res.base := 1];
ensures #res.offset == 0;
ensures #res.base != 0;
ensures #length == old(#length)[#res.base := ~size];
modifies #valid, #length;

procedure ULTIMATE.free(~addr.base : int, ~addr.offset : int) returns ();
free requires ~addr.offset == 0;
free requires ~addr.base == 0 || #valid[~addr.base] == 1;
free ensures (if ~addr.base == 0 then #valid == old(#valid) else #valid == old(#valid)[~addr.base := 0]);
modifies #valid;

procedure read~int(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value : int);
ensures #value == #memory_int[#ptr.base,#ptr.offset];

procedure bt878_start(#in~bt.base : int, #in~bt.offset : int, #in~controlreg : int, #in~op_sync_orin : int, #in~irq_err_ignore : int) returns ();
modifies ;

procedure ldv_initialize() returns ();
modifies ;

procedure dvb_dmxdev_init(#in~dmxdev.base : int, #in~dmxdev.offset : int, #in~6.base : int, #in~6.offset : int) returns (#res : int);
modifies ;

procedure read~$Pointer$(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value.base : int, #value.offset : int);
ensures #value.base == #memory_$Pointer$.base[#ptr.base,#ptr.offset] && #value.offset == #memory_$Pointer$.offset[#ptr.base,#ptr.offset];

procedure __symbol_get(#in~symbol.base : int, #in~symbol.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure strlcpy(#in~0.base : int, #in~0.offset : int, #in~1.base : int, #in~1.offset : int, #in~2 : int) returns (#res : int);
modifies ;

procedure dvb_unregister_adapter(#in~adap.base : int, #in~adap.offset : int) returns (#res : int);
modifies ;

procedure dvb_frontend_detach(#in~fe.base : int, #in~fe.offset : int) returns ();
modifies ;

procedure dvb_dmx_swfilter(#in~demux.base : int, #in~demux.offset : int, #in~buf.base : int, #in~buf.offset : int, #in~count : int) returns ();
modifies ;

procedure memset(#in~s.base : int, #in~s.offset : int, #in~c : int, #in~n : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure bttv_get_pcidev(#in~card : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure dvb_unregister_frontend(#in~fe.base : int, #in~fe.offset : int) returns (#res : int);
modifies ;

procedure ULTIMATE.dealloc(~addr.base : int, ~addr.offset : int) returns ();
free ensures #valid == old(#valid)[~addr.base := 0];
modifies #valid;

procedure dev_set_drvdata(#in~dev.base : int, #in~dev.offset : int, #in~data.base : int, #in~data.offset : int) returns (#res : int);
modifies ;

procedure kfree(#in~3.base : int, #in~3.offset : int) returns ();
modifies ;

procedure printk(#in~fmt.base : int, #in~fmt.offset : int) returns (#res : int);
modifies ;

procedure tasklet_init(#in~t.base : int, #in~t.offset : int, #in~func.base : int, #in~func.offset : int, #in~data : int) returns ();
modifies ;

procedure bttv_sub_unregister(#in~drv.base : int, #in~drv.offset : int) returns (#res : int);
modifies ;

procedure write~int(#value : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset]] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #memory_$Pointer$.offset[#ptr.base,#ptr.offset]];
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #value];

procedure dvb_dmxdev_release(#in~dmxdev.base : int, #in~dmxdev.offset : int) returns ();
modifies ;

procedure __mutex_init(#in~lock.base : int, #in~lock.offset : int, #in~name.base : int, #in~name.offset : int, #in~key.base : int, #in~key.offset : int) returns ();
modifies ;

procedure __VERIFIER_error() returns ();
modifies ;

procedure bttv_write_gpio(#in~card : int, #in~mask : int, #in~data : int) returns (#res : int);
modifies ;

procedure request_firmware(#in~fw.base : int, #in~fw.offset : int, #in~name.base : int, #in~name.offset : int, #in~device.base : int, #in~device.offset : int) returns (#res : int);
modifies ;

procedure bttv_sub_register(#in~drv.base : int, #in~drv.offset : int, #in~wanted.base : int, #in~wanted.offset : int) returns (#res : int);
modifies ;

procedure i2c_transfer(#in~adap.base : int, #in~adap.offset : int, #in~msgs.base : int, #in~msgs.offset : int, #in~num : int) returns (#res : int);
modifies ;

procedure ldv_check_return_value(#in~res : int) returns ();
modifies ;

procedure dvb_net_release(#in~7.base : int, #in~7.offset : int) returns ();
modifies ;

procedure bt878_stop(#in~bt.base : int, #in~bt.offset : int) returns ();
modifies ;

procedure __symbol_put(#in~symbol.base : int, #in~symbol.offset : int) returns ();
modifies ;

procedure dvb_dmx_release(#in~dvbdemux.base : int, #in~dvbdemux.offset : int) returns ();
modifies ;

procedure dvb_dmx_init(#in~dvbdemux.base : int, #in~dvbdemux.offset : int) returns (#res : int);
modifies ;

procedure tasklet_kill(#in~t.base : int, #in~t.offset : int) returns ();
modifies ;

procedure __VERIFIER_nondet_int() returns (#res : int);
modifies ;

procedure bttv_gpio_enable(#in~card : int, #in~mask : int, #in~data : int) returns (#res : int);
modifies ;

procedure dvb_dmx_swfilter_204(#in~demux.base : int, #in~demux.offset : int, #in~buf.base : int, #in~buf.offset : int, #in~count : int) returns ();
modifies ;

procedure dvb_register_adapter(#in~adap.base : int, #in~adap.offset : int, #in~name.base : int, #in~name.offset : int, #in~module.base : int, #in~module.offset : int, #in~device.base : int, #in~device.offset : int, #in~adapter_nums.base : int, #in~adapter_nums.offset : int) returns (#res : int);
modifies ;

procedure dvb_register_frontend(#in~dvb.base : int, #in~dvb.offset : int, #in~fe.base : int, #in~fe.offset : int) returns (#res : int);
modifies ;

