type STRUCT~task_struct;
type STRUCT~tvec_base;
type STRUCT~workqueue_struct;
type STRUCT~nsproxy;
type STRUCT~sock;
type STRUCT~file;
type STRUCT~sysfs_dirent;
type STRUCT~module_param_attrs;
type STRUCT~module_sect_attrs;
type STRUCT~module_notes_attrs;
type STRUCT~ftrace_event_call;
type STRUCT~kmem_cache_node;
type STRUCT~mem_cgroup;
type STRUCT~iommu_ops;
type STRUCT~subsys_private;
type STRUCT~driver_private;
type STRUCT~device_private;
type STRUCT~dma_coherent_mem;
type STRUCT~iommu_group;
type STRUCT~slab;
type STRUCT~anon_vma;
type STRUCT~mempolicy;
type STRUCT~linux_binfmt;
type STRUCT~mmu_notifier_mm;
type STRUCT~radix_tree_node;
type STRUCT~writeback_control;
type STRUCT~kiocb;
type STRUCT~swap_info_struct;
type STRUCT~inode;
type STRUCT~backing_dev_info;
type STRUCT~sec_path;
type STRUCT~prot_inuse;
type STRUCT~proc_dir_entry;
type STRUCT~ipv4_devconf;
type STRUCT~fib_rules_ops;
type STRUCT~fib_table;
type STRUCT~inet_peer_base;
type STRUCT~tcpm_hash_bucket;
type STRUCT~xt_table;
type STRUCT~dst_entry;
type STRUCT~neighbour;
type STRUCT~ipv6_devconf;
type STRUCT~rt6_info;
type STRUCT~rt6_statistics;
type STRUCT~fib6_table;
type STRUCT~sctp_mib;
type STRUCT~nf_logger;
type STRUCT~ebt_table;
type STRUCT~ip_conntrack_stat;
type STRUCT~nf_ct_event_notifier;
type STRUCT~nf_exp_event_notifier;
type STRUCT~user_namespace;
type STRUCT~net_generic;
type STRUCT~netns_ipvs;
type STRUCT~mii_bus;
type STRUCT~Qdisc;
type STRUCT~neigh_parms;
type STRUCT~netpoll_info;
type STRUCT~pcpu_lstats;
type STRUCT~pcpu_tstats;
type STRUCT~pcpu_dstats;
type STRUCT~pcpu_vstats;
type STRUCT~iw_handler_def;
type STRUCT~iw_public_data;
type STRUCT~vlan_info;
type STRUCT~in_device;
type STRUCT~dn_dev;
type STRUCT~inet6_dev;
type STRUCT~wireless_dev;
type STRUCT~cpu_rmap;
type STRUCT~garp_port;
type STRUCT~mrp_port;
type STRUCT~rtnl_link_ops;
type STRUCT~phy_device;
type STRUCT~hotplug_slot;
type STRUCT~pci_sriov;
type STRUCT~pcie_link_state;
type STRUCT~pci_vpd;
type STRUCT~pci_ats;
type STRUCT~gpio_desc;
type STRUCT~pcmcia_device;
type STRUCT~sdio_func;
type ~__u8 = int;
type ~__u16 = int;
type ~__s32 = int;
type ~__u32 = int;
type ~__u64 = int;
type ~s8 = int;
type ~u8 = int;
type ~s16 = int;
type ~u16 = int;
type ~s32 = int;
type ~u32 = int;
type ~s64 = int;
type ~u64 = int;
type ~__kernel_long_t = int;
type ~__kernel_ulong_t = int;
type ~__kernel_uid32_t = int;
type ~__kernel_gid32_t = int;
type ~__kernel_loff_t = int;
type ~umode_t = int;
type ~bool = int;
type ~sector_t = int;
type ~gfp_t = int;
type ~pgdval_t = int;
type ~pgprotval_t = int;
type ~__kernel_sa_family_t = int;
type ~sk_buff_data_t = int;
type ~kernel_ulong_t = int;
type ~pci_power_t = int;
type ~pci_channel_state_t = int;
type ~pci_dev_flags_t = int;
type ~pci_bus_flags_t = int;
type ~pci_ers_result_t = int;
type ~__kernel_size_t = ~__kernel_ulong_t;
type ~__kernel_ssize_t = ~__kernel_long_t;
type ~__le16 = ~__u16;
type ~__be16 = ~__u16;
type ~__le32 = ~__u32;
type ~__be32 = ~__u32;
type ~__wsum = ~__u32;
type ~__kernel_dev_t = ~__u32;
type ~dev_t = ~__kernel_dev_t;
type ~uid_t = ~__kernel_uid32_t;
type ~gid_t = ~__kernel_gid32_t;
type ~loff_t = ~__kernel_loff_t;
type ~size_t = ~__kernel_size_t;
type ~ssize_t = ~__kernel_ssize_t;
type ~uint8_t = ~__u8;
type ~uint64_t = ~__u64;
type ~dma_addr_t = ~u64;
type ~phys_addr_t = ~u64;
type ~resource_size_t = ~phys_addr_t;
type ~__ticket_t = ~u16;
type ~__ticketpair_t = ~u32;
type ~kuid_t = ~uid_t;
type ~kgid_t = ~gid_t;
type ~Elf64_Addr = ~__u64;
type ~Elf64_Half = ~__u16;
type ~Elf64_Word = ~__u32;
type ~Elf64_Xword = ~__u64;
type ~dma_cookie_t = ~s32;
type ~sa_family_t = ~__kernel_sa_family_t;
type ~netdev_features_t = ~u64;
type ~irqreturn_t = int;
type ~netdev_tx_t = int;
type ~rx_handler_result_t = int;
type ~phandle = ~u32;
const #funAddr~b44_interrupt.base : int;
const #funAddr~b44_interrupt.offset : int;
const #funAddr~b44_timer.base : int;
const #funAddr~b44_timer.offset : int;
const #funAddr~b44_get_settings.base : int;
const #funAddr~b44_get_settings.offset : int;
const #funAddr~b44_set_settings.base : int;
const #funAddr~b44_set_settings.offset : int;
const #funAddr~b44_get_drvinfo.base : int;
const #funAddr~b44_get_drvinfo.offset : int;
const #funAddr~b44_get_wol.base : int;
const #funAddr~b44_get_wol.offset : int;
const #funAddr~b44_set_wol.base : int;
const #funAddr~b44_set_wol.offset : int;
const #funAddr~b44_get_msglevel.base : int;
const #funAddr~b44_get_msglevel.offset : int;
const #funAddr~b44_set_msglevel.base : int;
const #funAddr~b44_set_msglevel.offset : int;
const #funAddr~b44_nway_reset.base : int;
const #funAddr~b44_nway_reset.offset : int;
const #funAddr~ethtool_op_get_link.base : int;
const #funAddr~ethtool_op_get_link.offset : int;
const #funAddr~b44_get_ringparam.base : int;
const #funAddr~b44_get_ringparam.offset : int;
const #funAddr~b44_set_ringparam.base : int;
const #funAddr~b44_set_ringparam.offset : int;
const #funAddr~b44_get_pauseparam.base : int;
const #funAddr~b44_get_pauseparam.offset : int;
const #funAddr~b44_set_pauseparam.base : int;
const #funAddr~b44_set_pauseparam.offset : int;
const #funAddr~b44_get_strings.base : int;
const #funAddr~b44_get_strings.offset : int;
const #funAddr~b44_get_ethtool_stats.base : int;
const #funAddr~b44_get_ethtool_stats.offset : int;
const #funAddr~b44_get_sset_count.base : int;
const #funAddr~b44_get_sset_count.offset : int;
const #funAddr~b44_open.base : int;
const #funAddr~b44_open.offset : int;
const #funAddr~b44_close.base : int;
const #funAddr~b44_close.offset : int;
const #funAddr~b44_start_xmit.base : int;
const #funAddr~b44_start_xmit.offset : int;
const #funAddr~b44_set_rx_mode.base : int;
const #funAddr~b44_set_rx_mode.offset : int;
const #funAddr~b44_set_mac_addr.base : int;
const #funAddr~b44_set_mac_addr.offset : int;
const #funAddr~eth_validate_addr.base : int;
const #funAddr~eth_validate_addr.offset : int;
const #funAddr~b44_ioctl.base : int;
const #funAddr~b44_ioctl.offset : int;
const #funAddr~b44_change_mtu.base : int;
const #funAddr~b44_change_mtu.offset : int;
const #funAddr~b44_tx_timeout.base : int;
const #funAddr~b44_tx_timeout.offset : int;
const #funAddr~b44_get_stats64.base : int;
const #funAddr~b44_get_stats64.offset : int;
const #funAddr~b44_poll_controller.base : int;
const #funAddr~b44_poll_controller.offset : int;
const #funAddr~b44_poll.base : int;
const #funAddr~b44_poll.offset : int;
const #funAddr~b44_mii_read.base : int;
const #funAddr~b44_mii_read.offset : int;
const #funAddr~b44_mii_write.base : int;
const #funAddr~b44_mii_write.offset : int;
const #funAddr~b44_init_one.base : int;
const #funAddr~b44_init_one.offset : int;
const #funAddr~b44_remove_one.base : int;
const #funAddr~b44_remove_one.offset : int;
const #funAddr~b44_suspend.base : int;
const #funAddr~b44_suspend.offset : int;
const #funAddr~b44_resume.base : int;
const #funAddr~b44_resume.offset : int;
const ~rpm_status~RPM_ACTIVE : int;
const ~rpm_status~RPM_RESUMING : int;
const ~rpm_status~RPM_SUSPENDED : int;
const ~rpm_status~RPM_SUSPENDING : int;
const ~rpm_request~RPM_REQ_NONE : int;
const ~rpm_request~RPM_REQ_IDLE : int;
const ~rpm_request~RPM_REQ_SUSPEND : int;
const ~rpm_request~RPM_REQ_AUTOSUSPEND : int;
const ~rpm_request~RPM_REQ_RESUME : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NONE : int;
const ~kobj_ns_type~KOBJ_NS_TYPE_NET : int;
const ~kobj_ns_type~KOBJ_NS_TYPES : int;
const ~module_state~MODULE_STATE_LIVE : int;
const ~module_state~MODULE_STATE_COMING : int;
const ~module_state~MODULE_STATE_GOING : int;
const ~module_state~MODULE_STATE_UNFORMED : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_LATENCY : int;
const ~dev_pm_qos_req_type~DEV_PM_QOS_FLAGS : int;
const ~pm_qos_type~PM_QOS_UNITIALIZED : int;
const ~pm_qos_type~PM_QOS_MAX : int;
const ~pm_qos_type~PM_QOS_MIN : int;
const ~migrate_mode~MIGRATE_ASYNC : int;
const ~migrate_mode~MIGRATE_SYNC_LIGHT : int;
const ~migrate_mode~MIGRATE_SYNC : int;
const ~dma_data_direction~DMA_BIDIRECTIONAL : int;
const ~dma_data_direction~DMA_TO_DEVICE : int;
const ~dma_data_direction~DMA_FROM_DEVICE : int;
const ~dma_data_direction~DMA_NONE : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_INACTIVE : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_ACTIVE : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_ON : int;
const ~ethtool_phys_id_state~ETHTOOL_ID_OFF : int;
const ~irqreturn~IRQ_NONE : int;
const ~irqreturn~IRQ_HANDLED : int;
const ~irqreturn~IRQ_WAKE_THREAD : int;
const ~netdev_tx~__NETDEV_TX_MIN : int;
const ~netdev_tx~NETDEV_TX_OK : int;
const ~netdev_tx~NETDEV_TX_BUSY : int;
const ~netdev_tx~NETDEV_TX_LOCKED : int;
const ~rx_handler_result~RX_HANDLER_CONSUMED : int;
const ~rx_handler_result~RX_HANDLER_ANOTHER : int;
const ~rx_handler_result~RX_HANDLER_EXACT : int;
const ~rx_handler_result~RX_HANDLER_PASS : int;
const ~pci_channel_state~pci_channel_io_normal : int;
const ~pci_channel_state~pci_channel_io_frozen : int;
const ~pci_channel_state~pci_channel_io_perm_failure : int;
const ~ssb_bustype~SSB_BUSTYPE_SSB : int;
const ~ssb_bustype~SSB_BUSTYPE_PCI : int;
const ~ssb_bustype~SSB_BUSTYPE_PCMCIA : int;
const ~ssb_bustype~SSB_BUSTYPE_SDIO : int;
axiom #funAddr~b44_interrupt.base == -1 && #funAddr~b44_interrupt.offset == 0;
axiom #funAddr~b44_timer.base == -1 && #funAddr~b44_timer.offset == 1;
axiom #funAddr~b44_get_settings.base == -1 && #funAddr~b44_get_settings.offset == 2;
axiom #funAddr~b44_set_settings.base == -1 && #funAddr~b44_set_settings.offset == 3;
axiom #funAddr~b44_get_drvinfo.base == -1 && #funAddr~b44_get_drvinfo.offset == 4;
axiom #funAddr~b44_get_wol.base == -1 && #funAddr~b44_get_wol.offset == 5;
axiom #funAddr~b44_set_wol.base == -1 && #funAddr~b44_set_wol.offset == 6;
axiom #funAddr~b44_get_msglevel.base == -1 && #funAddr~b44_get_msglevel.offset == 7;
axiom #funAddr~b44_set_msglevel.base == -1 && #funAddr~b44_set_msglevel.offset == 8;
axiom #funAddr~b44_nway_reset.base == -1 && #funAddr~b44_nway_reset.offset == 9;
axiom #funAddr~ethtool_op_get_link.base == -1 && #funAddr~ethtool_op_get_link.offset == 10;
axiom #funAddr~b44_get_ringparam.base == -1 && #funAddr~b44_get_ringparam.offset == 11;
axiom #funAddr~b44_set_ringparam.base == -1 && #funAddr~b44_set_ringparam.offset == 12;
axiom #funAddr~b44_get_pauseparam.base == -1 && #funAddr~b44_get_pauseparam.offset == 13;
axiom #funAddr~b44_set_pauseparam.base == -1 && #funAddr~b44_set_pauseparam.offset == 14;
axiom #funAddr~b44_get_strings.base == -1 && #funAddr~b44_get_strings.offset == 15;
axiom #funAddr~b44_get_ethtool_stats.base == -1 && #funAddr~b44_get_ethtool_stats.offset == 16;
axiom #funAddr~b44_get_sset_count.base == -1 && #funAddr~b44_get_sset_count.offset == 17;
axiom #funAddr~b44_open.base == -1 && #funAddr~b44_open.offset == 18;
axiom #funAddr~b44_close.base == -1 && #funAddr~b44_close.offset == 19;
axiom #funAddr~b44_start_xmit.base == -1 && #funAddr~b44_start_xmit.offset == 20;
axiom #funAddr~b44_set_rx_mode.base == -1 && #funAddr~b44_set_rx_mode.offset == 21;
axiom #funAddr~b44_set_mac_addr.base == -1 && #funAddr~b44_set_mac_addr.offset == 22;
axiom #funAddr~eth_validate_addr.base == -1 && #funAddr~eth_validate_addr.offset == 23;
axiom #funAddr~b44_ioctl.base == -1 && #funAddr~b44_ioctl.offset == 24;
axiom #funAddr~b44_change_mtu.base == -1 && #funAddr~b44_change_mtu.offset == 25;
axiom #funAddr~b44_tx_timeout.base == -1 && #funAddr~b44_tx_timeout.offset == 26;
axiom #funAddr~b44_get_stats64.base == -1 && #funAddr~b44_get_stats64.offset == 27;
axiom #funAddr~b44_poll_controller.base == -1 && #funAddr~b44_poll_controller.offset == 28;
axiom #funAddr~b44_poll.base == -1 && #funAddr~b44_poll.offset == 29;
axiom #funAddr~b44_mii_read.base == -1 && #funAddr~b44_mii_read.offset == 30;
axiom #funAddr~b44_mii_write.base == -1 && #funAddr~b44_mii_write.offset == 31;
axiom #funAddr~b44_init_one.base == -1 && #funAddr~b44_init_one.offset == 32;
axiom #funAddr~b44_remove_one.base == -1 && #funAddr~b44_remove_one.offset == 33;
axiom #funAddr~b44_suspend.base == -1 && #funAddr~b44_suspend.offset == 34;
axiom #funAddr~b44_resume.base == -1 && #funAddr~b44_resume.offset == 35;
axiom ~rpm_status~RPM_ACTIVE == 0;
axiom ~rpm_status~RPM_RESUMING == 1;
axiom ~rpm_status~RPM_SUSPENDED == 2;
axiom ~rpm_status~RPM_SUSPENDING == 3;
axiom ~rpm_request~RPM_REQ_NONE == 0;
axiom ~rpm_request~RPM_REQ_IDLE == 1;
axiom ~rpm_request~RPM_REQ_SUSPEND == 2;
axiom ~rpm_request~RPM_REQ_AUTOSUSPEND == 3;
axiom ~rpm_request~RPM_REQ_RESUME == 4;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NONE == 0;
axiom ~kobj_ns_type~KOBJ_NS_TYPE_NET == 1;
axiom ~kobj_ns_type~KOBJ_NS_TYPES == 2;
axiom ~module_state~MODULE_STATE_LIVE == 0;
axiom ~module_state~MODULE_STATE_COMING == 1;
axiom ~module_state~MODULE_STATE_GOING == 2;
axiom ~module_state~MODULE_STATE_UNFORMED == 3;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_LATENCY == 1;
axiom ~dev_pm_qos_req_type~DEV_PM_QOS_FLAGS == 2;
axiom ~pm_qos_type~PM_QOS_UNITIALIZED == 0;
axiom ~pm_qos_type~PM_QOS_MAX == 1;
axiom ~pm_qos_type~PM_QOS_MIN == 2;
axiom ~migrate_mode~MIGRATE_ASYNC == 0;
axiom ~migrate_mode~MIGRATE_SYNC_LIGHT == 1;
axiom ~migrate_mode~MIGRATE_SYNC == 2;
axiom ~dma_data_direction~DMA_BIDIRECTIONAL == 0;
axiom ~dma_data_direction~DMA_TO_DEVICE == 1;
axiom ~dma_data_direction~DMA_FROM_DEVICE == 2;
axiom ~dma_data_direction~DMA_NONE == 3;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_INACTIVE == 0;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_ACTIVE == 1;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_ON == 2;
axiom ~ethtool_phys_id_state~ETHTOOL_ID_OFF == 3;
axiom ~irqreturn~IRQ_NONE == 0;
axiom ~irqreturn~IRQ_HANDLED == 1;
axiom ~irqreturn~IRQ_WAKE_THREAD == 2;
axiom ~netdev_tx~__NETDEV_TX_MIN == -2147483648;
axiom ~netdev_tx~NETDEV_TX_OK == 0;
axiom ~netdev_tx~NETDEV_TX_BUSY == 16;
axiom ~netdev_tx~NETDEV_TX_LOCKED == 32;
axiom ~rx_handler_result~RX_HANDLER_CONSUMED == 0;
axiom ~rx_handler_result~RX_HANDLER_ANOTHER == 1;
axiom ~rx_handler_result~RX_HANDLER_EXACT == 2;
axiom ~rx_handler_result~RX_HANDLER_PASS == 3;
axiom ~pci_channel_state~pci_channel_io_normal == 1;
axiom ~pci_channel_state~pci_channel_io_frozen == 2;
axiom ~pci_channel_state~pci_channel_io_perm_failure == 3;
axiom ~ssb_bustype~SSB_BUSTYPE_SSB == 0;
axiom ~ssb_bustype~SSB_BUSTYPE_PCI == 1;
axiom ~ssb_bustype~SSB_BUSTYPE_PCMCIA == 2;
axiom ~ssb_bustype~SSB_BUSTYPE_SDIO == 3;
function { :overapproximation "bitwiseAnd" } ~bitwiseAnd(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "shiftRight" } ~shiftRight(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "bitwiseOr" } ~bitwiseOr(in0 : int, in1 : int) returns (out : int);
function { :overapproximation "shiftLeft" } ~shiftLeft(in0 : int, in1 : int) returns (out : int);
var ~jiffies : int;

var ~b44_debug : int;

var ~dma_desc_sync_size : int;

var ~instance : int;

var ~#b44_gstrings.base : int, ~#b44_gstrings.offset : int;

var ~LDV_IN_INTERRUPT : int;

var ~ldv_spin : int;

var ~#__this_module.base : int, ~#__this_module.offset : int;

var ~pv_irq_ops.save_fl.func.base : int, ~pv_irq_ops.save_fl.func.offset : int, ~pv_irq_ops.restore_fl.func.base : int, ~pv_irq_ops.restore_fl.func.offset : int, ~pv_irq_ops.irq_disable.func.base : int, ~pv_irq_ops.irq_disable.func.offset : int, ~pv_irq_ops.irq_enable.func.base : int, ~pv_irq_ops.irq_enable.func.offset : int, ~pv_irq_ops.safe_halt.base : int, ~pv_irq_ops.safe_halt.offset : int, ~pv_irq_ops.halt.base : int, ~pv_irq_ops.halt.offset : int, ~pv_irq_ops.adjust_exception_frame.base : int, ~pv_irq_ops.adjust_exception_frame.offset : int;

var ~#x86_dma_fallback_dev.base : int, ~#x86_dma_fallback_dev.offset : int;

var ~dma_ops.base : int, ~dma_ops.offset : int;

var ~#b44_pci_tbl.base : int, ~#b44_pci_tbl.offset : int;

var ~#b44_pci_driver.base : int, ~#b44_pci_driver.offset : int;

var ~#b44_ssb_tbl.base : int, ~#b44_ssb_tbl.offset : int;

var ~#b44_ethtool_ops.base : int, ~#b44_ethtool_ops.offset : int;

var ~#b44_netdev_ops.base : int, ~#b44_netdev_ops.offset : int;

var ~#b44_ssb_driver.base : int, ~#b44_ssb_driver.offset : int;

var #NULL.base : int, #NULL.offset : int;

var #valid : [int]int;

var #length : [int]int;

var #memory_int : [int,int]int;

var #memory_$Pointer$.base : [int,int]int, #memory_$Pointer$.offset : [int,int]int;

implementation ldv_spin_lock_irq_4(#in~lock.base : int, #in~lock.offset : int) returns (){
    var ~lock.base : int, ~lock.offset : int;

  loc0:
    ~lock.base, ~lock.offset := #in~lock.base, #in~lock.offset;
    call _raw_spin_lock_irq(~lock.base, ~lock.offset + 0 + 0);
    assume true;
    return;
}

procedure ldv_spin_lock_irq_4(#in~lock.base : int, #in~lock.offset : int) returns ();
modifies ;

implementation netdev_priv(#in~dev.base : int, #in~dev.offset : int) returns (#res.base : int, #res.offset : int){
    var ~dev.base : int, ~dev.offset : int;

  loc1:
    ~dev.base, ~dev.offset := #in~dev.base, #in~dev.offset;
    #res.base, #res.offset := ~dev.base, ~dev.offset + 2816;
    assume true;
    return;
}

procedure netdev_priv(#in~dev.base : int, #in~dev.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation #Ultimate.C_memset(#ptr.base : int, #ptr.offset : int, #value : int, #amount : int) returns (#res.base : int, #res.offset : int){
    var #t~loopctr1295 : int;

  loc2:
    #t~loopctr1295 := 0;
    assume !(#t~loopctr1295 < #amount);
    assume #res.base == #ptr.base && #res.offset == #ptr.offset;
    return;
}

procedure #Ultimate.C_memset(#ptr.base : int, #ptr.offset : int, #value : int, #amount : int) returns (#res.base : int, #res.offset : int);
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
free ensures #res.base == #ptr.base && #res.offset == #ptr.offset;

implementation b44_alloc_rx_skb(#in~bp.base : int, #in~bp.offset : int, #in~src_idx : int, #in~dest_idx_unmasked : int) returns (#res : int){
    var #t~mem483.base : int, #t~mem483.offset : int;
    var #t~mem484.base : int, #t~mem484.offset : int;
    var #t~mem485.base : int, #t~mem485.offset : int;
    var #t~ret486.base : int, #t~ret486.offset : int;
    var #t~mem487.base : int, #t~mem487.offset : int;
    var #t~mem488.base : int, #t~mem488.offset : int;
    var #t~mem489.base : int, #t~mem489.offset : int;
    var #t~ret490 : ~dma_addr_t;
    var #t~mem491.base : int, #t~mem491.offset : int;
    var #t~mem492.base : int, #t~mem492.offset : int;
    var #t~ret493 : int;
    var #t~mem494.base : int, #t~mem494.offset : int;
    var #t~mem495.base : int, #t~mem495.offset : int;
    var #t~ret496 : int;
    var #t~mem497.base : int, #t~mem497.offset : int;
    var #t~mem498.base : int, #t~mem498.offset : int;
    var #t~ret499.base : int, #t~ret499.offset : int;
    var #t~mem500.base : int, #t~mem500.offset : int;
    var #t~mem501.base : int, #t~mem501.offset : int;
    var #t~mem502.base : int, #t~mem502.offset : int;
    var #t~ret503 : ~dma_addr_t;
    var #t~mem504.base : int, #t~mem504.offset : int;
    var #t~mem505.base : int, #t~mem505.offset : int;
    var #t~ret506 : int;
    var #t~mem507.base : int, #t~mem507.offset : int;
    var #t~mem508.base : int, #t~mem508.offset : int;
    var #t~ret509 : int;
    var #t~mem510.base : int, #t~mem510.offset : int;
    var #t~mem511.base : int, #t~mem511.offset : int;
    var #t~mem513.base : int, #t~mem513.offset : int;
    var #t~mem519.base : int, #t~mem519.offset : int;
    var #t~mem521 : int;
    var #t~mem523 : int;
    var #t~mem524.base : int, #t~mem524.offset : int;
    var #t~mem525 : int;
    var ~bp.base : int, ~bp.offset : int;
    var ~src_idx : int;
    var ~dest_idx_unmasked : int;
    var ~dp~485.base : int, ~dp~485.offset : int;
    var ~src_map~485.base : int, ~src_map~485.offset : int;
    var ~map~485.base : int, ~map~485.offset : int;
    var ~rh~485.base : int, ~rh~485.offset : int;
    var ~skb~485.base : int, ~skb~485.offset : int;
    var ~mapping~485 : ~dma_addr_t;
    var ~dest_idx~485 : int;
    var ~ctrl~485 : ~u32;
    var ~tmp~485 : int;
    var ~tmp___0~485 : int;
    var ~tmp___1~485 : int;
    var ~tmp___2~485 : int;

  loc3:
    ~bp.base, ~bp.offset := #in~bp.base, #in~bp.offset;
    ~src_idx := #in~src_idx;
    ~dest_idx_unmasked := #in~dest_idx_unmasked;
    havoc ~dp~485.base, ~dp~485.offset;
    havoc ~src_map~485.base, ~src_map~485.offset;
    havoc ~map~485.base, ~map~485.offset;
    havoc ~rh~485.base, ~rh~485.offset;
    havoc ~skb~485.base, ~skb~485.offset;
    havoc ~mapping~485;
    havoc ~dest_idx~485;
    havoc ~ctrl~485;
    havoc ~tmp~485;
    havoc ~tmp___0~485;
    havoc ~tmp___1~485;
    havoc ~tmp___2~485;
    ~src_map~485.base, ~src_map~485.offset := 0, 0;
    assume !(~src_idx >= 0);
    ~dest_idx~485 := ~bitwiseAnd((if ~dest_idx_unmasked % 4294967296 % 4294967296 <= 2147483647 then ~dest_idx_unmasked % 4294967296 % 4294967296 else ~dest_idx_unmasked % 4294967296 % 4294967296 - 4294967296), 511);
    call #t~mem484.base, #t~mem484.offset := read~$Pointer$(~bp.base, ~bp.offset + 108, 8);
    ~map~485.base, ~map~485.offset := #t~mem484.base, #t~mem484.offset + (if ~dest_idx~485 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~dest_idx~485 % 18446744073709551616 % 18446744073709551616 else ~dest_idx~485 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616) * 16;
    havoc #t~mem484.base, #t~mem484.offset;
    call #t~mem485.base, #t~mem485.offset := read~$Pointer$(~bp.base, ~bp.offset + 796, 8);
    call #t~ret486.base, #t~ret486.offset := netdev_alloc_skb(#t~mem485.base, #t~mem485.offset, 1566);
    return;
}

procedure b44_alloc_rx_skb(#in~bp.base : int, #in~bp.offset : int, #in~src_idx : int, #in~dest_idx_unmasked : int) returns (#res : int);
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation dma_get_cache_alignment() returns (#res : int){
  loc4:
    #res := 1;
    assume true;
    return;
}

procedure dma_get_cache_alignment() returns (#res : int);
modifies ;

implementation main() returns (#res : int){
    var #t~ret1266 : int;
    var #t~nondet1267 : int;
    var #t~switch1268 : bool;
    var #t~ret1269 : int;
    var #t~ret1270 : int;
    var #t~ret1271 : int;
    var #t~ret1272 : int;
    var #t~ret1273 : int;
    var #t~ret1274 : int;
    var #t~ret1275 : ~u32;
    var #t~ret1276 : int;
    var #t~ret1277 : int;
    var #t~ret1278 : int;
    var #t~ret1279 : ~netdev_tx_t;
    var #t~ret1280.base : int, #t~ret1280.offset : int;
    var #t~ret1281 : int;
    var #t~ret1282 : int;
    var #t~ret1283 : int;
    var #t~ret1284 : int;
    var #t~ret1285 : int;
    var #t~ret1286 : int;
    var #t~ret1287 : ~irqreturn_t;
    var #t~nondet1288 : int;
    var ~var_group1~911.base : int, ~var_group1~911.offset : int;
    var ~var_group2~911.base : int, ~var_group2~911.offset : int;
    var ~var_group3~911.base : int, ~var_group3~911.offset : int;
    var ~var_group4~911.base : int, ~var_group4~911.offset : int;
    var ~var_group5~911.base : int, ~var_group5~911.offset : int;
    var ~var_group6~911.base : int, ~var_group6~911.offset : int;
    var ~var_b44_set_msglevel_59_p1~911 : ~u32;
    var ~var_b44_get_strings_68_p1~911 : ~u32;
    var ~var_b44_get_strings_68_p2~911.base : int, ~var_b44_get_strings_68_p2~911.offset : int;
    var ~var_b44_get_sset_count_69_p1~911 : int;
    var ~var_group7~911.base : int, ~var_group7~911.offset : int;
    var ~var_b44_get_ethtool_stats_70_p2~911.base : int, ~var_b44_get_ethtool_stats_70_p2~911.offset : int;
    var ~res_b44_open_45~911 : int;
    var ~res_b44_close_53~911 : int;
    var ~var_group8~911.base : int, ~var_group8~911.offset : int;
    var ~var_group9~911.base : int, ~var_group9~911.offset : int;
    var ~var_b44_set_mac_addr_43_p1~911.base : int, ~var_b44_set_mac_addr_43_p1~911.offset : int;
    var ~var_group10~911.base : int, ~var_group10~911.offset : int;
    var ~var_b44_ioctl_73_p2~911 : int;
    var ~var_b44_change_mtu_34_p1~911 : int;
    var ~var_group11~911.base : int, ~var_group11~911.offset : int;
    var ~var_b44_init_one_75_p1~911.base : int, ~var_b44_init_one_75_p1~911.offset : int;
    var ~res_b44_init_one_75~911 : int;
    var ~var_b44_suspend_77_p1~911.event : int;
    var ~var_b44_interrupt_31_p0~911 : int;
    var ~var_b44_interrupt_31_p1~911.base : int, ~var_b44_interrupt_31_p1~911.offset : int;
    var ~var_b44_timer_25_p0~911 : int;
    var ~ldv_s_b44_netdev_ops_net_device_ops~911 : int;
    var ~ldv_s_b44_ssb_driver_ssb_driver~911 : int;
    var ~tmp~911 : int;
    var ~tmp___0~911 : int;
    var ~tmp___1~911 : int;

  loc5:
    havoc ~var_group1~911.base, ~var_group1~911.offset;
    havoc ~var_group2~911.base, ~var_group2~911.offset;
    havoc ~var_group3~911.base, ~var_group3~911.offset;
    havoc ~var_group4~911.base, ~var_group4~911.offset;
    havoc ~var_group5~911.base, ~var_group5~911.offset;
    havoc ~var_group6~911.base, ~var_group6~911.offset;
    havoc ~var_b44_set_msglevel_59_p1~911;
    havoc ~var_b44_get_strings_68_p1~911;
    havoc ~var_b44_get_strings_68_p2~911.base, ~var_b44_get_strings_68_p2~911.offset;
    havoc ~var_b44_get_sset_count_69_p1~911;
    havoc ~var_group7~911.base, ~var_group7~911.offset;
    havoc ~var_b44_get_ethtool_stats_70_p2~911.base, ~var_b44_get_ethtool_stats_70_p2~911.offset;
    havoc ~res_b44_open_45~911;
    havoc ~res_b44_close_53~911;
    havoc ~var_group8~911.base, ~var_group8~911.offset;
    havoc ~var_group9~911.base, ~var_group9~911.offset;
    havoc ~var_b44_set_mac_addr_43_p1~911.base, ~var_b44_set_mac_addr_43_p1~911.offset;
    havoc ~var_group10~911.base, ~var_group10~911.offset;
    havoc ~var_b44_ioctl_73_p2~911;
    havoc ~var_b44_change_mtu_34_p1~911;
    havoc ~var_group11~911.base, ~var_group11~911.offset;
    havoc ~var_b44_init_one_75_p1~911.base, ~var_b44_init_one_75_p1~911.offset;
    havoc ~res_b44_init_one_75~911;
    havoc ~var_b44_suspend_77_p1~911.event;
    havoc ~var_b44_interrupt_31_p0~911;
    havoc ~var_b44_interrupt_31_p1~911.base, ~var_b44_interrupt_31_p1~911.offset;
    havoc ~var_b44_timer_25_p0~911;
    havoc ~ldv_s_b44_netdev_ops_net_device_ops~911;
    havoc ~ldv_s_b44_ssb_driver_ssb_driver~911;
    havoc ~tmp~911;
    havoc ~tmp___0~911;
    havoc ~tmp___1~911;
    ~ldv_s_b44_netdev_ops_net_device_ops~911 := 0;
    ~ldv_s_b44_ssb_driver_ssb_driver~911 := 0;
    ~LDV_IN_INTERRUPT := 1;
    call ldv_initialize();
    call ldv_handler_precall();
    call #t~ret1266 := b44_init();
    assume -2147483648 <= #t~ret1266 && #t~ret1266 <= 2147483647;
    ~tmp~911 := #t~ret1266;
    havoc #t~ret1266;
    assume !(~tmp~911 != 0);
    assume -2147483648 <= #t~nondet1288 && #t~nondet1288 <= 2147483647;
    ~tmp___1~911 := #t~nondet1288;
    havoc #t~nondet1288;
    assume (~tmp___1~911 != 0 || ~ldv_s_b44_netdev_ops_net_device_ops~911 != 0) || ~ldv_s_b44_ssb_driver_ssb_driver~911 != 0;
    assume -2147483648 <= #t~nondet1267 && #t~nondet1267 <= 2147483647;
    ~tmp___0~911 := #t~nondet1267;
    havoc #t~nondet1267;
    #t~switch1268 := ~tmp___0~911 == 0;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 1;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 2;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 3;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 4;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 5;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 6;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 7;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 8;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 9;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 10;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 11;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 12;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 13;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 14;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 15;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 16;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 17;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 18;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 19;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 20;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 21;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 22;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 23;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 24;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 25;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 26;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 27;
    assume !#t~switch1268;
    #t~switch1268 := #t~switch1268 || ~tmp___0~911 == 28;
    assume #t~switch1268;
    call ldv_handler_precall();
    call #t~ret1286 := b44_resume(~var_group11~911.base, ~var_group11~911.offset);
    return;
}

procedure main() returns (#res : int);
modifies ~LDV_IN_INTERRUPT, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_spin, #valid, #length, ~dma_desc_sync_size, ~instance;

implementation ldv_spin_lock() returns (){
  loc6:
    ~ldv_spin := 1;
    assume true;
    return;
}

procedure ldv_spin_lock() returns ();
modifies ~ldv_spin;

implementation ssb_get_drvdata(#in~dev.base : int, #in~dev.offset : int) returns (#res.base : int, #res.offset : int){
    var #t~mem283.base : int, #t~mem283.offset : int;
    var ~dev.base : int, ~dev.offset : int;

  loc7:
    ~dev.base, ~dev.offset := #in~dev.base, #in~dev.offset;
    call #t~mem283.base, #t~mem283.offset := read~$Pointer$(~dev.base, ~dev.offset + 42, 8);
    #res.base, #res.offset := #t~mem283.base, #t~mem283.offset;
    havoc #t~mem283.base, #t~mem283.offset;
    assume true;
    return;
}

procedure ssb_get_drvdata(#in~dev.base : int, #in~dev.offset : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation ULTIMATE.init() returns (){
    var #t~nondet319.base : int, #t~nondet319.offset : int;
    var #t~union1292.head : int, #t~union1292.tail : int;
    var #t~union1293.__padding : [int]int, #t~union1293.dep_map.key.base : int, #t~union1293.dep_map.key.offset : int, #t~union1293.dep_map.class_cache.base : [int]int, #t~union1293.dep_map.class_cache.offset : [int]int, #t~union1293.dep_map.name.base : int, #t~union1293.dep_map.name.offset : int, #t~union1293.dep_map.cpu : int, #t~union1293.dep_map.ip : int;
    var #t~nondet1258.base : int, #t~nondet1258.offset : int;

  loc8:
    #NULL.base, #NULL.offset := 0, 0;
    #valid := #valid[0 := 0];
    ~b44_debug := -1;
    ~dma_desc_sync_size := 0;
    ~instance := 0;
    call ~#b44_gstrings.base, ~#b44_gstrings.offset := #Ultimate.alloc(1504);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 2, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 5, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 6, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 7, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 8, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 10, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 0 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 2, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 5, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 6, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 7, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 8, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 10, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 32 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 2, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 3, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 6, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 7, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 64 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 2, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 3, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 5, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 6, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 7, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 96 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 2, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 5, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 6, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 7, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 8, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 9, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 12, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 13, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 14, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 128 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 2, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 3, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 4, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 5, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 6, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 7, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 8, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 9, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 12, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 13, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 14, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 160 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 6, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 7, 1);
    call write~int(52, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 192 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 6, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 7, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 10, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 12, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 13, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 14, 1);
    call write~int(55, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 224 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 6, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 7, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 8, 1);
    call write~int(56, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 13, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 14, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 15, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 256 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 6, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 7, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 8, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 13, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 14, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 15, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 288 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 6, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 7, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 8, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 13, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 14, 1);
    call write~int(48, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 15, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 16, 1);
    call write~int(51, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 320 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 6, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 7, 1);
    call write~int(48, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 8, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 9, 1);
    call write~int(52, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 12, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 13, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 14, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 15, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 16, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 352 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 2, 1);
    call write~int(106, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 4, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 5, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 7, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 9, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 10, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 384 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 2, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 3, 1);
    call write~int(118, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 4, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 5, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 6, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 7, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 8, 1);
    call write~int(122, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 9, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 11, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 12, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 416 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 2, 1);
    call write~int(102, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 4, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 5, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 6, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 7, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 8, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 11, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 12, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 448 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 2, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 3, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 4, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 6, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 7, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 8, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 9, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 10, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 480 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 2, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 5, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 6, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 7, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 8, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 9, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 10, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 11, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 512 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 2, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 3, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 5, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 6, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 7, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 9, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 10, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 11, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 544 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 2, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 3, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 4, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 5, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 6, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 7, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 8, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 9, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 11, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 12, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 13, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 576 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 2, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 3, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 4, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 6, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 7, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 8, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 9, 1);
    call write~int(118, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 10, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 12, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 13, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 14, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 608 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 6, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 7, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 8, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 9, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 10, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 640 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 2, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 4, 1);
    call write~int(102, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 6, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 7, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 8, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 672 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 2, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 4, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 5, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 6, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 7, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 8, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 10, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 704 + 31, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 2, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 4, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 5, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 7, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 8, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 9, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 11, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 736 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 2, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 5, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 6, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 7, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 8, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 10, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 768 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 2, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 5, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 6, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 7, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 8, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 10, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 800 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 2, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 3, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 6, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 7, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 832 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 2, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 3, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 4, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 5, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 6, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 7, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 864 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 2, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 4, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 5, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 6, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 7, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 8, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 9, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 12, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 13, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 14, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 896 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 2, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 3, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 4, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 5, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 6, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 7, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 8, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 9, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 12, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 13, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 14, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 928 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 6, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 7, 1);
    call write~int(52, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 8, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 9, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 960 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 6, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 7, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 10, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 12, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 13, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 14, 1);
    call write~int(55, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 992 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 6, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 7, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 8, 1);
    call write~int(56, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 13, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 14, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 15, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1024 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 6, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 7, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 8, 1);
    call write~int(54, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 13, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 14, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 15, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1056 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 6, 1);
    call write~int(53, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 7, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 8, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 9, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 11, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 12, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 13, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 14, 1);
    call write~int(48, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 15, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 16, 1);
    call write~int(51, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1088 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 2, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 3, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 6, 1);
    call write~int(49, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 7, 1);
    call write~int(48, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 8, 1);
    call write~int(50, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 9, 1);
    call write~int(52, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 12, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 13, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 14, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 15, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 16, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1120 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 2, 1);
    call write~int(106, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 4, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 5, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 7, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 9, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 10, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1152 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 2, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 3, 1);
    call write~int(118, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 4, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 5, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 6, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 7, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 8, 1);
    call write~int(122, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 9, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 11, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 12, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1184 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 2, 1);
    call write~int(102, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 4, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 5, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 6, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 7, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 8, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 9, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 11, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 12, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1216 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 2, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 3, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 4, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 5, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 7, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 9, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 10, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 11, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1248 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 2, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 4, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 6, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 7, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 8, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 9, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 10, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 11, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 12, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 13, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 14, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 15, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1280 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 2, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 3, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 4, 1);
    call write~int(100, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 5, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 6, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 7, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 8, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 9, 1);
    call write~int(122, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 10, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1312 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 2, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 3, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 4, 1);
    call write~int(99, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 5, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 7, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 8, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 9, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 10, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 11, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1344 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 2, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 3, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 4, 1);
    call write~int(105, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 5, 1);
    call write~int(103, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 6, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 7, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 8, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 9, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 10, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 11, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1376 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 2, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 3, 1);
    call write~int(121, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 4, 1);
    call write~int(109, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 5, 1);
    call write~int(98, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 6, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 7, 1);
    call write~int(108, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 8, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 9, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 10, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 11, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 12, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1408 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 2, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 3, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 4, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 5, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 6, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 7, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 8, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 9, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 10, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 11, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 12, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 13, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 14, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1440 + 31, 1);
    call write~int(114, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 0, 1);
    call write~int(120, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 1, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 2, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 3, 1);
    call write~int(111, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 4, 1);
    call write~int(110, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 5, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 6, 1);
    call write~int(97, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 7, 1);
    call write~int(117, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 8, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 9, 1);
    call write~int(101, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 10, 1);
    call write~int(95, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 11, 1);
    call write~int(112, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 12, 1);
    call write~int(107, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 13, 1);
    call write~int(116, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 14, 1);
    call write~int(115, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 15, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 16, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 17, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 18, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 19, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 20, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 21, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 22, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 23, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 24, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 25, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 26, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 27, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 28, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 29, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 30, 1);
    call write~int(0, ~#b44_gstrings.base, ~#b44_gstrings.offset + 1472 + 31, 1);
    ~LDV_IN_INTERRUPT := 0;
    ~ldv_spin := 0;
    call ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset := #Ultimate.alloc(128);
    call write~int(5348, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 0, 4);
    call write~int(17409, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 4, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 8, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 12, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 16, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 20, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 0 + 24, 8);
    call write~int(5348, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 0, 4);
    call write~int(17410, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 4, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 8, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 12, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 16, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 20, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 32 + 24, 8);
    call write~int(5348, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 0, 4);
    call write~int(5900, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 4, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 8, 4);
    call write~int(4294967295, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 12, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 16, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 20, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 64 + 24, 8);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 0, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 4, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 8, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 12, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 16, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 20, 4);
    call write~int(0, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset + 96 + 24, 8);
    call ~#b44_pci_driver.base, ~#b44_pci_driver.offset := #Ultimate.alloc(301);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 0 + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 0 + 8, 8);
    call #t~nondet319.base, #t~nondet319.offset := #Ultimate.alloc(4);
    #memory_int := #memory_int[#t~nondet319.base,#t~nondet319.offset + 0 := 98];
    #memory_int := #memory_int[#t~nondet319.base,#t~nondet319.offset + 1 := 52];
    #memory_int := #memory_int[#t~nondet319.base,#t~nondet319.offset + 2 := 52];
    #memory_int := #memory_int[#t~nondet319.base,#t~nondet319.offset + 3 := 0];
    call write~$Pointer$(#t~nondet319.base, #t~nondet319.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 16, 8);
    call write~$Pointer$(~#b44_pci_tbl.base, ~#b44_pci_tbl.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 56, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 64, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 72, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 96, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 8, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 16, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 24, 8);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 32, 1);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 33, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 41, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 49, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 57, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 65, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 73, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 81, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 89, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 97, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 104 + 105, 8);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 0 + 0, 4);
    call write~int(#t~union1292.head, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 0 + 0 + 0, 2);
    call write~int(#t~union1292.tail, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 0 + 0 + 2, 2);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 4, 4);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 8, 4);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 12, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 20 + 0, 8);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 20 + 8 + 0, 8);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 20 + 8 + 8, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 20 + 24, 8);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 20 + 32, 4);
    call write~int(0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 20 + 36, 8);
    call write~int(#t~union1293.__padding[0], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0, 1);
    call write~int(#t~union1293.__padding[1], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1, 1);
    call write~int(#t~union1293.__padding[2], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[3], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[4], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[5], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[6], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[7], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[8], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[9], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[10], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[11], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[12], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[13], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[14], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[15], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[16], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[17], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[18], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[19], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[20], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[21], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[22], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~int(#t~union1293.__padding[23], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1, 1);
    call write~$Pointer$(#t~union1293.dep_map.key.base, #t~union1293.dep_map.key.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 24 + 0, 8);
    call write~$Pointer$(#t~union1293.dep_map.class_cache.base[0], #t~union1293.dep_map.class_cache.offset[0], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 24 + 8, 8);
    call write~$Pointer$(#t~union1293.dep_map.class_cache.base[1], #t~union1293.dep_map.class_cache.offset[1], ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 24 + 8 + 8, 8);
    call write~$Pointer$(#t~union1293.dep_map.name.base, #t~union1293.dep_map.name.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 24 + 24, 8);
    call write~int(#t~union1293.dep_map.cpu, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 24 + 32, 4);
    call write~int(#t~union1293.dep_map.ip, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 0 + 0 + 0 + 24 + 36, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 68 + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_pci_driver.base, ~#b44_pci_driver.offset + 217 + 68 + 8, 8);
    havoc #t~nondet319.base, #t~nondet319.offset;
    havoc #t~union1292.head, #t~union1292.tail;
    havoc #t~union1293.__padding, #t~union1293.dep_map.key.base, #t~union1293.dep_map.key.offset, #t~union1293.dep_map.class_cache.base, #t~union1293.dep_map.class_cache.offset, #t~union1293.dep_map.name.base, #t~union1293.dep_map.name.offset, #t~union1293.dep_map.cpu, #t~union1293.dep_map.ip;
    call ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset := #Ultimate.alloc(10);
    call write~int(16963, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 0 + 0, 2);
    call write~int(2054, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 0 + 2, 2);
    call write~int(255, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 0 + 4, 1);
    call write~int(0, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 5 + 0, 2);
    call write~int(0, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 5 + 2, 2);
    call write~int(0, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset + 5 + 4, 1);
    call ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset := #Ultimate.alloc(368);
    call write~$Pointer$(#funAddr~b44_get_settings.base, #funAddr~b44_get_settings.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 0, 8);
    call write~$Pointer$(#funAddr~b44_set_settings.base, #funAddr~b44_set_settings.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 8, 8);
    call write~$Pointer$(#funAddr~b44_get_drvinfo.base, #funAddr~b44_get_drvinfo.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 16, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 24, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 32, 8);
    call write~$Pointer$(#funAddr~b44_get_wol.base, #funAddr~b44_get_wol.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 40, 8);
    call write~$Pointer$(#funAddr~b44_set_wol.base, #funAddr~b44_set_wol.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 48, 8);
    call write~$Pointer$(#funAddr~b44_get_msglevel.base, #funAddr~b44_get_msglevel.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 56, 8);
    call write~$Pointer$(#funAddr~b44_set_msglevel.base, #funAddr~b44_set_msglevel.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 64, 8);
    call write~$Pointer$(#funAddr~b44_nway_reset.base, #funAddr~b44_nway_reset.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 72, 8);
    call write~$Pointer$(#funAddr~ethtool_op_get_link.base, #funAddr~ethtool_op_get_link.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 88, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 96, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 104, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 112, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 120, 8);
    call write~$Pointer$(#funAddr~b44_get_ringparam.base, #funAddr~b44_get_ringparam.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 128, 8);
    call write~$Pointer$(#funAddr~b44_set_ringparam.base, #funAddr~b44_set_ringparam.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 136, 8);
    call write~$Pointer$(#funAddr~b44_get_pauseparam.base, #funAddr~b44_get_pauseparam.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 144, 8);
    call write~$Pointer$(#funAddr~b44_set_pauseparam.base, #funAddr~b44_set_pauseparam.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 152, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 160, 8);
    call write~$Pointer$(#funAddr~b44_get_strings.base, #funAddr~b44_get_strings.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 168, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 176, 8);
    call write~$Pointer$(#funAddr~b44_get_ethtool_stats.base, #funAddr~b44_get_ethtool_stats.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 184, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 192, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 200, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 208, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 216, 8);
    call write~$Pointer$(#funAddr~b44_get_sset_count.base, #funAddr~b44_get_sset_count.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 224, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 232, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 240, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 248, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 256, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 264, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 272, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 280, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 288, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 296, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 304, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 312, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 320, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 328, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 336, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 344, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 352, 8);
    call write~$Pointer$(0, 0, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset + 360, 8);
    call ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset := #Ultimate.alloc(408);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 8, 8);
    call write~$Pointer$(#funAddr~b44_open.base, #funAddr~b44_open.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 16, 8);
    call write~$Pointer$(#funAddr~b44_close.base, #funAddr~b44_close.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 24, 8);
    call write~$Pointer$(#funAddr~b44_start_xmit.base, #funAddr~b44_start_xmit.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 32, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 48, 8);
    call write~$Pointer$(#funAddr~b44_set_rx_mode.base, #funAddr~b44_set_rx_mode.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 56, 8);
    call write~$Pointer$(#funAddr~b44_set_mac_addr.base, #funAddr~b44_set_mac_addr.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 64, 8);
    call write~$Pointer$(#funAddr~eth_validate_addr.base, #funAddr~eth_validate_addr.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 72, 8);
    call write~$Pointer$(#funAddr~b44_ioctl.base, #funAddr~b44_ioctl.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 80, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 88, 8);
    call write~$Pointer$(#funAddr~b44_change_mtu.base, #funAddr~b44_change_mtu.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 96, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 104, 8);
    call write~$Pointer$(#funAddr~b44_tx_timeout.base, #funAddr~b44_tx_timeout.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 112, 8);
    call write~$Pointer$(#funAddr~b44_get_stats64.base, #funAddr~b44_get_stats64.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 120, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 128, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 136, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 144, 8);
    call write~$Pointer$(#funAddr~b44_poll_controller.base, #funAddr~b44_poll_controller.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 152, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 160, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 168, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 176, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 184, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 192, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 200, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 208, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 216, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 224, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 232, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 240, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 248, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 256, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 264, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 272, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 280, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 288, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 296, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 304, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 312, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 320, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 328, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 336, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 344, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 352, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 360, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 368, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 376, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 384, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 392, 8);
    call write~$Pointer$(0, 0, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset + 400, 8);
    call ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset := #Ultimate.alloc(169);
    call #t~nondet1258.base, #t~nondet1258.offset := #Ultimate.alloc(4);
    #memory_int := #memory_int[#t~nondet1258.base,#t~nondet1258.offset + 0 := 98];
    #memory_int := #memory_int[#t~nondet1258.base,#t~nondet1258.offset + 1 := 52];
    #memory_int := #memory_int[#t~nondet1258.base,#t~nondet1258.offset + 2 := 52];
    #memory_int := #memory_int[#t~nondet1258.base,#t~nondet1258.offset + 3 := 0];
    call write~$Pointer$(#t~nondet1258.base, #t~nondet1258.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 0, 8);
    call write~$Pointer$(~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 8, 8);
    call write~$Pointer$(#funAddr~b44_init_one.base, #funAddr~b44_init_one.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 16, 8);
    call write~$Pointer$(#funAddr~b44_remove_one.base, #funAddr~b44_remove_one.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 24, 8);
    call write~$Pointer$(#funAddr~b44_suspend.base, #funAddr~b44_suspend.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 32, 8);
    call write~$Pointer$(#funAddr~b44_resume.base, #funAddr~b44_resume.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 40, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 48, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 0, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 8, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 16, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 24, 8);
    call write~int(0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 32, 1);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 33, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 41, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 49, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 57, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 65, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 73, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 81, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 89, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 97, 8);
    call write~$Pointer$(0, 0, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset + 56 + 105, 8);
    havoc #t~nondet1258.base, #t~nondet1258.offset;
    assume true;
    return;
}

procedure ULTIMATE.init() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~b44_debug, ~dma_desc_sync_size, ~instance, ~#b44_gstrings.base, ~#b44_gstrings.offset, ~LDV_IN_INTERRUPT, ~ldv_spin, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, #valid, #length;

implementation b44_init() returns (#res : int){
    var #t~ret1260 : int;
    var #t~ite1261 : int;
    var #t~ret1262 : int;
    var #t~ret1263 : int;
    var ~dma_desc_align_size~897 : int;
    var ~tmp~897 : int;
    var ~err~897 : int;
    var ~__max1~897 : int;
    var ~__max2~897 : int;

  loc9:
    havoc ~dma_desc_align_size~897;
    havoc ~tmp~897;
    havoc ~err~897;
    havoc ~__max1~897;
    havoc ~__max2~897;
    call #t~ret1260 := dma_get_cache_alignment();
    assume -2147483648 <= #t~ret1260 && #t~ret1260 <= 2147483647;
    ~tmp~897 := #t~ret1260;
    havoc #t~ret1260;
    ~dma_desc_align_size~897 := ~tmp~897;
    ~__max1~897 := ~dma_desc_align_size~897;
    ~__max2~897 := 8;
    assume ~__max1~897 % 4294967296 > ~__max2~897 % 4294967296;
    #t~ite1261 := ~__max1~897;
    ~dma_desc_sync_size := (if #t~ite1261 % 4294967296 % 4294967296 <= 2147483647 then #t~ite1261 % 4294967296 % 4294967296 else #t~ite1261 % 4294967296 % 4294967296 - 4294967296);
    havoc #t~ite1261;
    call #t~ret1262 := b44_pci_init();
    assume -2147483648 <= #t~ret1262 && #t~ret1262 <= 2147483647;
    ~err~897 := #t~ret1262;
    havoc #t~ret1262;
    assume ~err~897 != 0;
    #res := ~err~897;
    assume true;
    return;
}

procedure b44_init() returns (#res : int);
modifies ~dma_desc_sync_size;

implementation b44_init_rings(#in~bp.base : int, #in~bp.offset : int) returns (){
    var #t~mem697.base : int, #t~mem697.offset : int;
    var #t~memset698.base : int, #t~memset698.offset : int;
    var #t~mem699.base : int, #t~mem699.offset : int;
    var #t~memset700.base : int, #t~memset700.offset : int;
    var #t~mem701 : int;
    var #t~mem702.base : int, #t~mem702.offset : int;
    var #t~mem703.base : int, #t~mem703.offset : int;
    var #t~mem704 : int;
    var #t~mem705 : int;
    var #t~mem706.base : int, #t~mem706.offset : int;
    var #t~mem707.base : int, #t~mem707.offset : int;
    var #t~mem708 : int;
    var #t~ret709 : int;
    var #t~mem710 : int;
    var ~bp.base : int, ~bp.offset : int;
    var ~i~601 : int;
    var ~tmp~601 : int;

  loc10:
    ~bp.base, ~bp.offset := #in~bp.base, #in~bp.offset;
    havoc ~i~601;
    havoc ~tmp~601;
    call b44_free_rings(~bp.base, ~bp.offset);
    call #t~mem697.base, #t~mem697.offset := read~$Pointer$(~bp.base, ~bp.offset + 76, 8);
    call #t~memset698.base, #t~memset698.offset := #Ultimate.C_memset(#t~mem697.base, #t~mem697.offset, 0, 4096);
    havoc #t~mem697.base, #t~mem697.offset;
    havoc #t~memset698.base, #t~memset698.offset;
    call #t~mem699.base, #t~mem699.offset := read~$Pointer$(~bp.base, ~bp.offset + 84, 8);
    call #t~memset700.base, #t~memset700.offset := #Ultimate.C_memset(#t~mem699.base, #t~mem699.offset, 0, 4096);
    havoc #t~mem699.base, #t~mem699.offset;
    havoc #t~memset700.base, #t~memset700.offset;
    call #t~mem701 := read~int(~bp.base, ~bp.offset + 280, 4);
    assume !(~bitwiseAnd(#t~mem701, 536870912) % 4294967296 != 0);
    havoc #t~mem701;
    call #t~mem705 := read~int(~bp.base, ~bp.offset + 280, 4);
    assume !(~bitwiseAnd(#t~mem705, 1073741824) % 4294967296 != 0);
    havoc #t~mem705;
    ~i~601 := 0;
    call #t~mem710 := read~int(~bp.base, ~bp.offset + 820, 4);
    assume ~i~601 % 4294967296 < #t~mem710 % 4294967296;
    havoc #t~mem710;
    call #t~ret709 := b44_alloc_rx_skb(~bp.base, ~bp.offset, -1, ~i~601);
    return;
}

procedure b44_init_rings(#in~bp.base : int, #in~bp.offset : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;

implementation ldv_error() returns (){
  loc11:
    assume !false;
    goto loc12;
  loc12:
    assert false;
}

procedure ldv_error() returns ();
modifies ;

implementation b44_resume(#in~sdev.base : int, #in~sdev.offset : int) returns (#res : int){
    var #t~ret1244.base : int, #t~ret1244.offset : int;
    var #t~ret1245.base : int, #t~ret1245.offset : int;
    var #t~mem1246.base : int, #t~mem1246.offset : int;
    var #t~ret1247 : int;
    var #t~mem1248.base : int, #t~mem1248.offset : int;
    var #t~nondet1249.base : int, #t~nondet1249.offset : int;
    var #t~ret1250 : int;
    var #t~ret1251 : ~bool;
    var #t~mem1252 : int;
    var #t~ret1253 : int;
    var #t~nondet1254.base : int, #t~nondet1254.offset : int;
    var #t~ret1255 : int;
    var #t~mem1256.base : int, #t~mem1256.offset : int;
    var #t~ret1257 : int;
    var ~sdev.base : int, ~sdev.offset : int;
    var ~dev~883.base : int, ~dev~883.offset : int;
    var ~tmp~883.base : int, ~tmp~883.offset : int;
    var ~bp~883.base : int, ~bp~883.offset : int;
    var ~tmp___0~883.base : int, ~tmp___0~883.offset : int;
    var ~rc~883 : int;
    var ~tmp___1~883 : ~bool;
    var ~tmp___2~883 : int;

  loc13:
    ~sdev.base, ~sdev.offset := #in~sdev.base, #in~sdev.offset;
    havoc ~dev~883.base, ~dev~883.offset;
    havoc ~tmp~883.base, ~tmp~883.offset;
    havoc ~bp~883.base, ~bp~883.offset;
    havoc ~tmp___0~883.base, ~tmp___0~883.offset;
    havoc ~rc~883;
    havoc ~tmp___1~883;
    havoc ~tmp___2~883;
    call #t~ret1244.base, #t~ret1244.offset := ssb_get_drvdata(~sdev.base, ~sdev.offset);
    ~tmp~883.base, ~tmp~883.offset := #t~ret1244.base, #t~ret1244.offset;
    havoc #t~ret1244.base, #t~ret1244.offset;
    ~dev~883.base, ~dev~883.offset := ~tmp~883.base, ~tmp~883.offset;
    call #t~ret1245.base, #t~ret1245.offset := netdev_priv(~dev~883.base, ~dev~883.offset);
    ~tmp___0~883.base, ~tmp___0~883.offset := #t~ret1245.base, #t~ret1245.offset;
    havoc #t~ret1245.base, #t~ret1245.offset;
    ~bp~883.base, ~bp~883.offset := ~tmp___0~883.base, ~tmp___0~883.offset;
    ~rc~883 := 0;
    call #t~mem1246.base, #t~mem1246.offset := read~$Pointer$(~sdev.base, ~sdev.offset + 24, 8);
    call #t~ret1247 := ssb_bus_powerup(#t~mem1246.base, #t~mem1246.offset, 0);
    assume -2147483648 <= #t~ret1247 && #t~ret1247 <= 2147483647;
    ~rc~883 := #t~ret1247;
    havoc #t~mem1246.base, #t~mem1246.offset;
    havoc #t~ret1247;
    assume !(~rc~883 != 0);
    call #t~ret1251 := netif_running(~dev~883.base, ~dev~883.offset);
    ~tmp___1~883 := #t~ret1251;
    havoc #t~ret1251;
    assume ~tmp___1~883 % 256 != 0;
    ~tmp___2~883 := 0;
    assume !(~tmp___2~883 != 0);
    call spin_lock_irq(~bp~883.base, ~bp~883.offset + 0);
    call b44_init_rings(~bp~883.base, ~bp~883.offset);
    return;
}

procedure b44_resume(#in~sdev.base : int, #in~sdev.offset : int) returns (#res : int);
modifies #valid, #length, ~ldv_spin, #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;

implementation ldv___netdev_alloc_skb_28(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int, #in~ldv_func_arg2 : int, #in~flags : int) returns (#res.base : int, #res.offset : int){
    var #t~ret1290.base : int, #t~ret1290.offset : int;
    var ~ldv_func_arg1.base : int, ~ldv_func_arg1.offset : int;
    var ~ldv_func_arg2 : int;
    var ~flags : int;
    var ~tmp~946.base : int, ~tmp~946.offset : int;

  loc14:
    ~ldv_func_arg1.base, ~ldv_func_arg1.offset := #in~ldv_func_arg1.base, #in~ldv_func_arg1.offset;
    ~ldv_func_arg2 := #in~ldv_func_arg2;
    ~flags := #in~flags;
    havoc ~tmp~946.base, ~tmp~946.offset;
    call ldv_check_alloc_flags(~flags);
    return;
}

procedure ldv___netdev_alloc_skb_28(#in~ldv_func_arg1.base : int, #in~ldv_func_arg1.offset : int, #in~ldv_func_arg2 : int, #in~flags : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation b44_free_rings(#in~bp.base : int, #in~bp.offset : int) returns (){
    var #t~mem681.base : int, #t~mem681.offset : int;
    var #t~mem682.base : int, #t~mem682.offset : int;
    var #t~mem683.base : int, #t~mem683.offset : int;
    var #t~mem684.base : int, #t~mem684.offset : int;
    var #t~mem685 : int;
    var #t~mem686.base : int, #t~mem686.offset : int;
    var #t~mem688.base : int, #t~mem688.offset : int;
    var #t~mem689.base : int, #t~mem689.offset : int;
    var #t~mem690.base : int, #t~mem690.offset : int;
    var #t~mem691.base : int, #t~mem691.offset : int;
    var #t~mem692 : int;
    var #t~mem693.base : int, #t~mem693.offset : int;
    var #t~mem694 : int;
    var #t~mem695.base : int, #t~mem695.offset : int;
    var ~bp.base : int, ~bp.offset : int;
    var ~rp~591.base : int, ~rp~591.offset : int;
    var ~i~591 : int;

  loc15:
    ~bp.base, ~bp.offset := #in~bp.base, #in~bp.offset;
    havoc ~rp~591.base, ~rp~591.offset;
    havoc ~i~591;
    ~i~591 := 0;
    goto loc16;
  loc16:
    goto loc16_0, loc16_1;
  loc16_0:
    assume ~i~591 <= 511;
    call #t~mem681.base, #t~mem681.offset := read~$Pointer$(~bp.base, ~bp.offset + 108, 8);
    ~rp~591.base, ~rp~591.offset := #t~mem681.base, #t~mem681.offset + (if ~i~591 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~i~591 % 18446744073709551616 % 18446744073709551616 else ~i~591 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616) * 16;
    havoc #t~mem681.base, #t~mem681.offset;
    call #t~mem682.base, #t~mem682.offset := read~$Pointer$(~rp~591.base, ~rp~591.offset + 0, 8);
    assume (#t~mem682.base + #t~mem682.offset) % 18446744073709551616 == 0;
    havoc #t~mem682.base, #t~mem682.offset;
    ~i~591 := ~i~591 + 1;
    goto loc16;
  loc16_1:
    assume !(~i~591 <= 511);
    ~i~591 := 0;
    goto loc17;
  loc17:
    goto loc17_0, loc17_1;
  loc17_0:
    assume ~i~591 <= 511;
    call #t~mem688.base, #t~mem688.offset := read~$Pointer$(~bp.base, ~bp.offset + 116, 8);
    ~rp~591.base, ~rp~591.offset := #t~mem688.base, #t~mem688.offset + (if ~i~591 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then ~i~591 % 18446744073709551616 % 18446744073709551616 else ~i~591 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616) * 16;
    havoc #t~mem688.base, #t~mem688.offset;
    call #t~mem689.base, #t~mem689.offset := read~$Pointer$(~rp~591.base, ~rp~591.offset + 0, 8);
    assume (#t~mem689.base + #t~mem689.offset) % 18446744073709551616 == 0;
    havoc #t~mem689.base, #t~mem689.offset;
    ~i~591 := ~i~591 + 1;
    goto loc17;
  loc17_1:
    assume !(~i~591 <= 511);
    assume true;
    return;
}

procedure b44_free_rings(#in~bp.base : int, #in~bp.offset : int) returns ();
modifies #memory_$Pointer$.base, #memory_$Pointer$.offset, #memory_int;

implementation constant_test_bit(#in~nr : int, #in~addr.base : int, #in~addr.offset : int) returns (#res : int){
    var #t~mem0 : int;
    var ~nr : int;
    var ~addr.base : int, ~addr.offset : int;

  loc18:
    ~nr := #in~nr;
    ~addr.base, ~addr.offset := #in~addr.base, #in~addr.offset;
    call #t~mem0 := read~int(~addr.base, ~addr.offset + (if (if ~nr % 4294967296 < 0 && ~nr % 4294967296 % 64 != 0 then ~nr % 4294967296 / 64 + 1 else ~nr % 4294967296 / 64) % 4294967296 % 18446744073709551616 % 18446744073709551616 <= 9223372036854775807 then (if ~nr % 4294967296 < 0 && ~nr % 4294967296 % 64 != 0 then ~nr % 4294967296 / 64 + 1 else ~nr % 4294967296 / 64) % 4294967296 % 18446744073709551616 % 18446744073709551616 else (if ~nr % 4294967296 < 0 && ~nr % 4294967296 % 64 != 0 then ~nr % 4294967296 / 64 + 1 else ~nr % 4294967296 / 64) % 4294967296 % 18446744073709551616 % 18446744073709551616 - 18446744073709551616) * 8, 8);
    #res := ~bitwiseAnd((if ~shiftRight(#t~mem0, ~bitwiseAnd((if ~nr % 4294967296 % 4294967296 <= 2147483647 then ~nr % 4294967296 % 4294967296 else ~nr % 4294967296 % 4294967296 - 4294967296), 63)) % 18446744073709551616 % 4294967296 <= 2147483647 then ~shiftRight(#t~mem0, ~bitwiseAnd((if ~nr % 4294967296 % 4294967296 <= 2147483647 then ~nr % 4294967296 % 4294967296 else ~nr % 4294967296 % 4294967296 - 4294967296), 63)) % 18446744073709551616 % 4294967296 else ~shiftRight(#t~mem0, ~bitwiseAnd((if ~nr % 4294967296 % 4294967296 <= 2147483647 then ~nr % 4294967296 % 4294967296 else ~nr % 4294967296 % 4294967296 - 4294967296), 63)) % 18446744073709551616 % 4294967296 - 4294967296), 1);
    havoc #t~mem0;
    assume true;
    return;
}

procedure constant_test_bit(#in~nr : int, #in~addr.base : int, #in~addr.offset : int) returns (#res : int);
modifies ;

implementation spin_lock_irq(#in~lock.base : int, #in~lock.offset : int) returns (){
    var ~lock.base : int, ~lock.offset : int;

  loc19:
    ~lock.base, ~lock.offset := #in~lock.base, #in~lock.offset;
    call ldv_spin_lock();
    call ldv_spin_lock_irq_4(~lock.base, ~lock.offset);
    assume true;
    return;
}

procedure spin_lock_irq(#in~lock.base : int, #in~lock.offset : int) returns ();
modifies ~ldv_spin;

implementation ULTIMATE.start() returns (){
    var #t~ret1294 : int;

  loc20:
    call ULTIMATE.init();
    call #t~ret1294 := main();
    return;
}

procedure ULTIMATE.start() returns ();
modifies #valid, #NULL.base, #NULL.offset, ~b44_debug, ~dma_desc_sync_size, ~instance, ~#b44_gstrings.base, ~#b44_gstrings.offset, ~LDV_IN_INTERRUPT, ~ldv_spin, ~#b44_pci_tbl.base, ~#b44_pci_tbl.offset, ~#b44_pci_driver.base, ~#b44_pci_driver.offset, ~#b44_ssb_tbl.base, ~#b44_ssb_tbl.offset, ~#b44_ethtool_ops.base, ~#b44_ethtool_ops.offset, ~#b44_netdev_ops.base, ~#b44_netdev_ops.offset, ~#b44_ssb_driver.base, ~#b44_ssb_driver.offset, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~LDV_IN_INTERRUPT;
modifies #valid, #length, #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset, ~ldv_spin, ~dma_desc_sync_size, ~instance, ~LDV_IN_INTERRUPT;

implementation ldv_check_alloc_flags(#in~flags : int) returns (){
    var ~flags : int;

  loc21:
    ~flags := #in~flags;
    assume !(~ldv_spin == 0 || ~bitwiseAnd(~flags, 32) % 4294967296 != 0);
    call ldv_error();
    return;
}

procedure ldv_check_alloc_flags(#in~flags : int) returns ();
modifies ;

implementation netdev_alloc_skb(#in~dev.base : int, #in~dev.offset : int, #in~length : int) returns (#res.base : int, #res.offset : int){
    var #t~ret176.base : int, #t~ret176.offset : int;
    var ~dev.base : int, ~dev.offset : int;
    var ~length : int;
    var ~tmp~158.base : int, ~tmp~158.offset : int;

  loc22:
    ~dev.base, ~dev.offset := #in~dev.base, #in~dev.offset;
    ~length := #in~length;
    havoc ~tmp~158.base, ~tmp~158.offset;
    call #t~ret176.base, #t~ret176.offset := ldv___netdev_alloc_skb_28(~dev.base, ~dev.offset, ~length, 32);
    return;
}

procedure netdev_alloc_skb(#in~dev.base : int, #in~dev.offset : int, #in~length : int) returns (#res.base : int, #res.offset : int);
modifies ;

implementation netif_running(#in~dev.base : int, #in~dev.offset : int) returns (#res : ~bool){
    var #t~ret217 : int;
    var ~dev.base : int, ~dev.offset : int;
    var ~tmp~233 : int;

  loc23:
    ~dev.base, ~dev.offset := #in~dev.base, #in~dev.offset;
    havoc ~tmp~233;
    call #t~ret217 := constant_test_bit(0, ~dev.base, ~dev.offset + 68);
    assume -2147483648 <= #t~ret217 && #t~ret217 <= 2147483647;
    ~tmp~233 := #t~ret217;
    havoc #t~ret217;
    #res := (if (if ~tmp~233 != 0 then 1 else 0) == 0 then 0 else 1);
    assume true;
    return;
}

procedure netif_running(#in~dev.base : int, #in~dev.offset : int) returns (#res : ~bool);
modifies ;

implementation b44_pci_init() returns (#res : int){
    var #t~ret1259 : int;
    var ~err~893 : int;

  loc24:
    havoc ~err~893;
    ~err~893 := 0;
    call #t~ret1259 := ssb_pcihost_register(~#b44_pci_driver.base, ~#b44_pci_driver.offset);
    assume -2147483648 <= #t~ret1259 && #t~ret1259 <= 2147483647;
    ~err~893 := #t~ret1259;
    havoc #t~ret1259;
    #res := ~err~893;
    assume true;
    return;
}

procedure b44_pci_init() returns (#res : int);
modifies ;

procedure debug_dma_sync_single_for_device(#in~72.base : int, #in~72.offset : int, #in~73 : int, #in~74 : int, #in~75 : int) returns ();
modifies ;

procedure msleep(#in~41 : int) returns ();
modifies ;

procedure pci_unregister_driver(#in~269.base : int, #in~269.offset : int) returns ();
modifies ;

procedure __alloc_skb(#in~164 : int, #in~165 : int, #in~166 : int, #in~167 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure debug_dma_sync_single_for_cpu(#in~68.base : int, #in~68.offset : int, #in~69 : int, #in~70 : int, #in~71 : int) returns ();
modifies ;

procedure netif_carrier_off(#in~223.base : int, #in~223.offset : int) returns ();
modifies ;

procedure disable_irq(#in~280 : int) returns ();
modifies ;

procedure ethtool_op_get_link(#in~187.base : int, #in~187.offset : int) returns (#res : ~u32);
modifies ;

procedure free_irq(#in~278 : int, #in~279.base : int, #in~279.offset : int) returns ();
modifies ;

procedure dma_set_mask(#in~130.base : int, #in~130.offset : int, #in~131 : int) returns (#res : int);
modifies ;

procedure ssb_device_enable(#in~291.base : int, #in~291.offset : int, #in~292 : int) returns ();
modifies ;

procedure __memcpy(#in~5.base : int, #in~5.offset : int, #in~6.base : int, #in~6.offset : int, #in~7 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure ssb_device_is_enabled(#in~290.base : int, #in~290.offset : int) returns (#res : int);
modifies ;

procedure ldv_check_return_value(#in~1264 : int) returns ();
modifies ;

procedure netif_carrier_on(#in~222.base : int, #in~222.offset : int) returns ();
modifies ;

procedure ssb_device_disable(#in~293.base : int, #in~293.offset : int, #in~294 : int) returns ();
modifies ;

procedure netdev_err(#in~228.base : int, #in~228.offset : int, #in~229.base : int, #in~229.offset : int) returns (#res : int);
modifies ;

procedure ssb_bus_powerup(#in~317.base : int, #in~317.offset : int, #in~318 : int) returns (#res : int);
modifies ;

procedure ssb_driver_unregister(#in~286.base : int, #in~286.offset : int) returns ();
modifies ;

procedure debug_dma_unmap_page(#in~55.base : int, #in~55.offset : int, #in~56 : int, #in~57 : int, #in~58 : int, #in~59 : int) returns ();
modifies ;

procedure __netif_schedule(#in~202.base : int, #in~202.offset : int) returns ();
modifies ;

procedure debug_dma_alloc_coherent(#in~60.base : int, #in~60.offset : int, #in~61 : int, #in~62 : int, #in~63.base : int, #in~63.offset : int) returns ();
modifies ;

procedure round_jiffies(#in~32 : int) returns (#res : int);
modifies ;

procedure register_netdev(#in~226.base : int, #in~226.offset : int) returns (#res : int);
modifies ;

procedure _raw_spin_unlock_irq(#in~21.base : int, #in~21.offset : int) returns ();
modifies ;

procedure ssb_dma_translation(#in~309.base : int, #in~309.offset : int) returns (#res : ~u32);
modifies ;

procedure read~$Pointer$(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value.base : int, #value.offset : int);
ensures #value.base == #memory_$Pointer$.base[#ptr.base,#ptr.offset] && #value.offset == #memory_$Pointer$.offset[#ptr.base,#ptr.offset];

procedure ldv_check_return_value_probe(#in~1265 : int) returns ();
modifies ;

procedure add_timer(#in~30.base : int, #in~30.offset : int) returns ();
modifies ;

procedure strlcpy(#in~11.base : int, #in~11.offset : int, #in~12.base : int, #in~12.offset : int, #in~13 : int) returns (#res : int);
modifies ;

procedure dma_supported(#in~128.base : int, #in~128.offset : int, #in~129 : int) returns (#res : int);
modifies ;

procedure eth_validate_addr(#in~240.base : int, #in~240.offset : int) returns (#res : int);
modifies ;

procedure _raw_spin_unlock(#in~20.base : int, #in~20.offset : int) returns ();
modifies ;

procedure debug_dma_mapping_error(#in~53.base : int, #in~53.offset : int, #in~54 : int) returns ();
modifies ;

procedure ULTIMATE.dealloc(~addr.base : int, ~addr.offset : int) returns ();
free ensures #valid == old(#valid)[~addr.base := 0];
modifies #valid;

procedure netif_device_attach(#in~225.base : int, #in~225.offset : int) returns ();
modifies ;

procedure generic_mii_ioctl(#in~234.base : int, #in~234.offset : int, #in~235.base : int, #in~235.offset : int, #in~236 : int, #in~237.base : int, #in~237.offset : int) returns (#res : int);
modifies ;

procedure printk(#in~1.base : int, #in~1.offset : int) returns (#res : int);
modifies ;

procedure dev_err(#in~38.base : int, #in~38.offset : int, #in~39.base : int, #in~39.offset : int) returns (#res : int);
modifies ;

procedure netdev_warn(#in~230.base : int, #in~230.offset : int, #in~231.base : int, #in~231.offset : int) returns (#res : int);
modifies ;

procedure netif_device_detach(#in~224.base : int, #in~224.offset : int) returns ();
modifies ;

procedure netif_receive_skb(#in~220.base : int, #in~220.offset : int) returns (#res : int);
modifies ;

procedure alloc_etherdev_mqs(#in~241 : int, #in~242 : int, #in~243 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure netdev_info(#in~232.base : int, #in~232.offset : int, #in~233.base : int, #in~233.offset : int) returns (#res : int);
modifies ;

procedure __ssb_driver_register(#in~284.base : int, #in~284.offset : int, #in~285.base : int, #in~285.offset : int) returns (#res : int);
modifies ;

procedure ldv_handler_precall() returns ();
modifies ;

procedure debug_dma_free_coherent(#in~64.base : int, #in~64.offset : int, #in~65 : int, #in~66.base : int, #in~66.offset : int, #in~67 : int) returns ();
modifies ;

procedure netif_napi_add(#in~197.base : int, #in~197.offset : int, #in~198.base : int, #in~198.offset : int, #in~199.base : int, #in~199.offset : int, #in~200 : int) returns ();
modifies ;

procedure __VERIFIER_nondet_int() returns (#res : int);
modifies ;

procedure dev_kfree_skb_irq(#in~218.base : int, #in~218.offset : int) returns ();
modifies ;

procedure __napi_schedule(#in~188.base : int, #in~188.offset : int) returns ();
modifies ;

procedure __raw_spin_lock_init(#in~15.base : int, #in~15.offset : int, #in~16.base : int, #in~16.offset : int, #in~17.base : int, #in~17.offset : int) returns ();
modifies ;

procedure #Ultimate.alloc(~size : int) returns (#res.base : int, #res.offset : int);
ensures old(#valid)[#res.base] == 0;
ensures #valid == old(#valid)[#res.base := 1];
ensures #res.offset == 0;
ensures #res.base != 0;
ensures #length == old(#length)[#res.base := ~size];
modifies #valid, #length;

procedure ULTIMATE.free(~addr.base : int, ~addr.offset : int) returns ();
free requires ~addr.offset == 0;
free requires ~addr.base == 0 || #valid[~addr.base] == 1;
free ensures (if ~addr.base == 0 then #valid == old(#valid) else #valid == old(#valid)[~addr.base := 0]);
modifies #valid;

procedure read~int(#ptr.base : int, #ptr.offset : int, #sizeOfReadType : int) returns (#value : int);
ensures #value == #memory_int[#ptr.base,#ptr.offset];

procedure ldv_initialize() returns ();
modifies ;

procedure __phys_addr(#in~4 : int) returns (#res : int);
modifies ;

procedure free_netdev(#in~201.base : int, #in~201.offset : int) returns ();
modifies ;

procedure del_timer_sync(#in~31.base : int, #in~31.offset : int) returns (#res : int);
modifies ;

procedure pci_bus_write_config_word(#in~257.base : int, #in~257.offset : int, #in~258 : int, #in~259 : int, #in~260 : int) returns (#res : int);
modifies ;

procedure ssb_clockspeed(#in~289.base : int, #in~289.offset : int) returns (#res : ~u32);
modifies ;

procedure kfree(#in~34.base : int, #in~34.offset : int) returns ();
modifies ;

procedure __netdev_alloc_skb(#in~173.base : int, #in~173.offset : int, #in~174 : int, #in~175 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure write~int(#value : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #value];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #memory_$Pointer$.base[#ptr.base,#ptr.offset]] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #memory_$Pointer$.offset[#ptr.base,#ptr.offset]];

procedure skb_pull(#in~171.base : int, #in~171.offset : int, #in~172 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure __VERIFIER_error() returns ();
modifies ;

procedure napi_complete(#in~192.base : int, #in~192.offset : int) returns ();
modifies ;

procedure net_ratelimit() returns (#res : int);
modifies ;

procedure eth_type_trans(#in~238.base : int, #in~238.offset : int, #in~239.base : int, #in~239.offset : int) returns (#res : ~__be16);
modifies ;

procedure ssb_bus_may_powerdown(#in~316.base : int, #in~316.offset : int) returns (#res : int);
modifies ;

procedure enable_irq(#in~281 : int) returns ();
modifies ;

procedure ssb_pcicore_dev_irqvecs_enable(#in~287.base : int, #in~287.offset : int, #in~288.base : int, #in~288.offset : int) returns (#res : int);
modifies ;

procedure dev_kfree_skb_any(#in~219.base : int, #in~219.offset : int) returns ();
modifies ;

procedure __const_udelay(#in~40 : int) returns ();
modifies ;

procedure write~$Pointer$(#value.base : int, #value.offset : int, #ptr.base : int, #ptr.offset : int, #sizeOfWrittenType : int) returns ();
modifies #memory_int, #memory_$Pointer$.base, #memory_$Pointer$.offset;
ensures #memory_int == old(#memory_int)[#ptr.base,#ptr.offset := #memory_int[#ptr.base,#ptr.offset]];
ensures #memory_$Pointer$.base == old(#memory_$Pointer$.base)[#ptr.base,#ptr.offset := #value.base] && #memory_$Pointer$.offset == old(#memory_$Pointer$.offset)[#ptr.base,#ptr.offset := #value.offset];

procedure _raw_spin_unlock_irqrestore(#in~22.base : int, #in~22.offset : int, #in~23 : int) returns ();
modifies ;

procedure ssb_pcihost_register(#in~310.base : int, #in~310.offset : int) returns (#res : int);
modifies ;

procedure mod_timer(#in~28.base : int, #in~28.offset : int, #in~29 : int) returns (#res : int);
modifies ;

procedure memset(#in~8.base : int, #in~8.offset : int, #in~9 : int, #in~10 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure init_timer_key(#in~24.base : int, #in~24.offset : int, #in~25 : int, #in~26.base : int, #in~26.offset : int, #in~27.base : int, #in~27.offset : int) returns ();
modifies ;

procedure debug_dma_map_page(#in~46.base : int, #in~46.offset : int, #in~47.base : int, #in~47.offset : int, #in~48 : int, #in~49 : int, #in~50 : int, #in~51 : int, #in~52 : int) returns ();
modifies ;

procedure pci_set_power_state(#in~267.base : int, #in~267.offset : int, #in~268 : int) returns (#res : int);
modifies ;

procedure warn_slowpath_null(#in~2.base : int, #in~2.offset : int, #in~3 : int) returns ();
modifies ;

procedure skb_put(#in~169.base : int, #in~169.offset : int, #in~170 : int) returns (#res.base : int, #res.offset : int);
modifies ;

procedure _raw_spin_lock_irq(#in~19.base : int, #in~19.offset : int) returns ();
modifies ;

procedure _raw_spin_lock(#in~18.base : int, #in~18.offset : int) returns ();
modifies ;

procedure pci_bus_read_config_word(#in~253.base : int, #in~253.offset : int, #in~254 : int, #in~255 : int, #in~256.base : int, #in~256.offset : int) returns (#res : int);
modifies ;

procedure request_threaded_irq(#in~271 : int, #in~272.base : int, #in~272.offset : int, #in~273.base : int, #in~273.offset : int, #in~274 : int, #in~275.base : int, #in~275.offset : int, #in~276.base : int, #in~276.offset : int) returns (#res : int);
modifies ;

procedure ldv_check_final_state() returns ();
modifies ;

procedure unregister_netdev(#in~227.base : int, #in~227.offset : int) returns ();
modifies ;

procedure netpoll_trap() returns (#res : int);
modifies ;

