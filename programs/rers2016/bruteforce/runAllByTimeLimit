#! /bin/bash

# Numbers of the problems to be executed
# All numbers are passes as one argument. Example: thisScript "10 11 12"
numseq="$([ -z "$1" ] && seq -s' ' 10 18 || echo "$1")"
# Maximal benchmark time (in seconds) per run (actual benchmark takes longer)
maxbenchmarktime="$(( 2 ))"
# Desired runtime (in seconds) per problem
targettime="$(( 5 ))"

function logdate {
	printf "%s    " "$(date +'%Y-%m-%d %H:%M:%S')"
}

function timeseconds {
	date +'%s'
}

# Converts seconds to HH:MM:SS
function s2hms {
	t="$1"
	printf "%dd" "$(( t / (3600 * 24) ))"
	date -d@"$t" -u +'%H:%M:%S'
}

# Select median of a list of values
# All values are passed as one argument. Example: median "5 2.1 -7"
# Median for an even number of values is the larger value
# Median of an empty list is empty
function median {
	values="$(grep -Po '\S*' <<< "$1")"
	n="$(wc -l <<< "$values")"
	sort -n <<< "$values" | sed "$(( n / 2 + 1 ))q;d"
}

function color1 { printf "\n\033[44m----- %s -----\033[m\n" "$1"; }
function color2 { printf "\n\033[42m----- %s\033[m\n" "$1"; }
function color3 { printf "\033[93m%s\033[m\n" "$1"; }

color1 "Parameter overview"
echo "problems            = $numseq"
echo "max. benchmark time = $(s2hms $maxbenchmarktime)"
echo "target runtime      = $(s2hms $targettime)"

color1 "Compiling problems"
for i in $numseq;  do
	if [ -x "Problem$i" ] && [ "Problem$i" -nt "Problem$i.c" ]; then
		logdate; echo "Problem$i already compiled"
	else
		logdate; echo "Compiling Problem$i.c ..."
		clang -O3 -o "Problem$i" "Problem$i.c"
		logdate; echo "... done"
	fi
done

color1 "Running problems"
for i in $numseq;  do
	color2 "Problem$i"
	color3 "Running benchmarks"

	inputlength=0
	t=0
	growthlist=""
	while (( t < maxbenchmarktime )); do
		(( inputlength++ ))
		logdate; echo "Benchmark with input length $inputlength"
		tstart="$(timeseconds)"
		./Problem"$i" "$inputlength" > /dev/null
		tend="$(timeseconds)"
		tprev="$t"
		t="$(( tend - tstart ))"
		if (( tprev > 0 )) && (( t > 0 )); then
			growth=$(perl -e "print $t / $tprev")
			growthlist="$growthlist $growth"
			logdate; printf "runtime growth = %.3f\n" "$growth"
		fi
	done
	logdate; echo "Last benchmark took $(s2hms $t)"

	color3 "Running actual bruteforce"

	# growthbounds=(0 0 0 0 0 0 0 0 0 0 5 5 10 10 10 20 20 20 20)
	# growth="${growthbounds[$i]}"
	mediangrowth="$(median "$growthlist")"
	logdate; echo "Estimate input length based on median growth $mediangrowth"
	if [ -z "$mediangrowth" ]; then
		logdate; echo "Cannot estimate runtime. Please increase max. benchmark time."
	else
		inputlength=$(perl -e "print $inputlength + int(0.5 + log($targettime / $t) / log($mediangrowth))")
	fi

	logdate; echo "Running with input length $inputlength ..."
	tstart="$(timeseconds)"
	./Problem"$i" "$inputlength" > output"$i".txt
	tend="$(timeseconds)"
	t="$(( tend - tstart ))"
	logdate; echo "... done (took $(s2hms $t))"

	outputsize="$(du -sh output"$i".txt | cut -f1)"
	logdate; echo "Extracting results from output$i.txt ($outputsize) ..."
	tstart="$(timeseconds)"
	# List all reachable errors and the shortest trace per error
	LC_ALL=C grep -F 'error_' output"$i".txt |
		LC_ALL=C sort -t' ' -k 1,1V -k 3,3n | # sort by error number, trace length
		LC_ALL=C sort -u -t' ' -k 1,1V |
		cat <(echo "# input length = $inputlength, runtime = $(s2hms $t)") - > result"$i".txt
	tend="$(timeseconds)"
	t="$(( tend - tstart ))"
	logdate; echo "... done (took $(s2hms $t))"
done
